
Qr-Control-Rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800bc48  0800bc48  0001bc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a0  0800c0a0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a0  0800c0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0a8  0800c0a8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c0b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000004b4  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006a4  200006a4  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001383c  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e82  00000000  00000000  00033a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001158  00000000  00000000  00036928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d92  00000000  00000000  00037a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a35  00000000  00000000  00038812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000175dc  00000000  00000000  0005c247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d018f  00000000  00000000  00073823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e3c  00000000  00000000  001439b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001497f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc2c 	.word	0x0800bc2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800bc2c 	.word	0x0800bc2c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MPU6050_Init>:
};

KalmanSingle_t K;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2275      	movs	r2, #117	; 0x75
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f002 fca7 	bl	8003980 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b68      	cmp	r3, #104	; 0x68
 8001036:	d13d      	bne.n	80010b4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030e 	add.w	r3, r7, #14
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	226b      	movs	r2, #107	; 0x6b
 800104e:	21d0      	movs	r1, #208	; 0xd0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fb9b 	bl	800378c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001056:	2307      	movs	r3, #7
 8001058:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030e 	add.w	r3, r7, #14
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2219      	movs	r2, #25
 800106c:	21d0      	movs	r1, #208	; 0xd0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fb8c 	bl	800378c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 030e 	add.w	r3, r7, #14
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	221c      	movs	r2, #28
 800108a:	21d0      	movs	r1, #208	; 0xd0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f002 fb7d 	bl	800378c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 030e 	add.w	r3, r7, #14
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	221b      	movs	r2, #27
 80010a8:	21d0      	movs	r1, #208	; 0xd0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 fb6e 	bl	800378c <HAL_I2C_Mem_Write>
        return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <MPU6050_Init+0xa6>
    }
    return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
   // int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	230e      	movs	r3, #14
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	223b      	movs	r2, #59	; 0x3b
 80010dc:	21d0      	movs	r1, #208	; 0xd0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fc4e 	bl	8003980 <HAL_I2C_Mem_Read>
//    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
//    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
//    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
//    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
//    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80010e4:	7d3b      	ldrb	r3, [r7, #20]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	849a      	strh	r2, [r3, #36]	; 0x24
//    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
//    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
//    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
//    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
//    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 - 0.7;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa21 	bl	8000544 <__aeabi_i2d>
 8001102:	a323      	add	r3, pc, #140	; (adr r3, 8001190 <MPU6050_Read_All+0xd0>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fbb0 	bl	800086c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	a320      	add	r3, pc, #128	; (adr r3, 8001198 <MPU6050_Read_All+0xd8>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff f8c5 	bl	80002a8 <__aeabi_dsub>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001128:	f001 fe86 	bl	8002e38 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MPU6050_Read_All+0xc8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f9f5 	bl	8000524 <__aeabi_ui2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MPU6050_Read_All+0xcc>)
 8001140:	f7ff fb94 	bl	800086c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 800114c:	f001 fe74 	bl	8002e38 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <MPU6050_Read_All+0xc8>)
 8001154:	6013      	str	r3, [r2, #0]
//    	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
//    	DataStruct->CFAngleX = 0.98 * ( DataStruct->CFAngleX + DataStruct->Gx * dt ) +0.02 * roll;
//    K.x =  DataStruct->Gz;
//    kalman_single(&K, 0.0127, 0.001);
//    DataStruct->Gz = K.x_hat;
    DataStruct->yaw +=  DataStruct->Gz * dt;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001166:	f7ff fa57 	bl	8000618 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f89b 	bl	80002ac <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	2000020c 	.word	0x2000020c
 800118c:	408f4000 	.word	0x408f4000
 8001190:	00000000 	.word	0x00000000
 8001194:	40606000 	.word	0x40606000
 8001198:	66666666 	.word	0x66666666
 800119c:	3fe66666 	.word	0x3fe66666

080011a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3e      	ldr	r2, [pc, #248]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a37      	ldr	r2, [pc, #220]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <MX_GPIO_Init+0x118>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_GPIO_Init+0x118>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_GPIO_Init+0x118>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_GPIO_Init+0x118>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_GPIO_Init+0x118>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_2_Pin|EN_2C3_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	210a      	movs	r1, #10
 8001262:	4816      	ldr	r0, [pc, #88]	; (80012bc <MX_GPIO_Init+0x11c>)
 8001264:	f002 f934 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_1_Pin|EN_1E10_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_GPIO_Init+0x120>)
 8001270:	f002 f92e 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_2_Pin|EN_2C3_Pin;
 8001274:	230a      	movs	r3, #10
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_GPIO_Init+0x11c>)
 800128c:	f001 ff84 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_1_Pin|EN_1E10_Pin;
 8001290:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_GPIO_Init+0x120>)
 80012aa:	f001 ff75 	bl	8003198 <HAL_GPIO_Init>

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40021000 	.word	0x40021000

080012c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	; (8001318 <MX_I2C1_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_I2C1_Init+0x58>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_I2C1_Init+0x50>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_I2C1_Init+0x50>)
 8001302:	f002 f8ff 	bl	8003504 <HAL_I2C_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800130c:	f000 fc06 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000210 	.word	0x20000210
 8001318:	40005400 	.word	0x40005400
 800131c:	00061a80 	.word	0x00061a80

08001320 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_I2C_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136e:	2304      	movs	r3, #4
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <HAL_I2C_MspInit+0x8c>)
 800137a:	f001 ff0d 	bl	8003198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_I2C_MspInit+0x88>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020400 	.word	0x40020400

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f001 fcda 	bl	8002d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f834 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f7ff fef0 	bl	80011a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013c0:	f001 f8c2 	bl	8002548 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013c4:	f001 f90e 	bl	80025e4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80013c8:	f001 f9b4 	bl	8002734 <MX_TIM5_Init>
  MX_TIM1_Init();
 80013cc:	f001 f82e 	bl	800242c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80013d0:	f001 fb6e 	bl	8002ab0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80013d4:	f001 f95a 	bl	800268c <MX_TIM4_Init>
  MX_I2C1_Init();
 80013d8:	f7ff ff74 	bl	80012c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 80013dc:	bf00      	nop
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <main+0x5c>)
 80013e0:	f7ff fe16 	bl	8001010 <MPU6050_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d0f9      	beq.n	80013de <main+0x2e>
  SerialInit();
 80013ea:	f000 f883 	bl	80014f4 <SerialInit>
  MotorInit();
 80013ee:	f000 fca5 	bl	8001d3c <MotorInit>
  MotorSetRun();
 80013f2:	f000 fb99 	bl	8001b28 <MotorSetRun>

  tProcess = NONE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <main+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]


  tMotor1.ptd = 0.091; //2700
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <main+0x64>)
 80013fe:	4a06      	ldr	r2, [pc, #24]	; (8001418 <main+0x68>)
 8001400:	61da      	str	r2, [r3, #28]
  tMotor2.ptd = 0.096; //2580
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <main+0x6c>)
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <main+0x70>)
 8001406:	61da      	str	r2, [r3, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001408:	e7fe      	b.n	8001408 <main+0x58>
 800140a:	bf00      	nop
 800140c:	20000210 	.word	0x20000210
 8001410:	200002ec 	.word	0x200002ec
 8001414:	20000330 	.word	0x20000330
 8001418:	3dba5e35 	.word	0x3dba5e35
 800141c:	20000350 	.word	0x20000350
 8001420:	3dc49ba6 	.word	0x3dc49ba6

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	; 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f006 ffd7 	bl	80083e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SystemClock_Config+0xc8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <SystemClock_Config+0xc8>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <SystemClock_Config+0xc8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <SystemClock_Config+0xcc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <SystemClock_Config+0xcc>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <SystemClock_Config+0xcc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001498:	234b      	movs	r3, #75	; 0x4b
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 ffeb 	bl	8004484 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b4:	f000 fb32 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2302      	movs	r3, #2
 80014be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa4d 	bl	8004974 <HAL_RCC_ClockConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e0:	f000 fb1c 	bl	8001b1c <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3750      	adds	r7, #80	; 0x50
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40007000 	.word	0x40007000

080014f4 <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 80014f8:	2212      	movs	r2, #18
 80014fa:	4903      	ldr	r1, [pc, #12]	; (8001508 <SerialInit+0x14>)
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <SerialInit+0x18>)
 80014fe:	f004 fef0 	bl	80062e2 <HAL_UART_Receive_IT>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000264 	.word	0x20000264
 800150c:	20000510 	.word	0x20000510

08001510 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8001514:	2212      	movs	r2, #18
 8001516:	4903      	ldr	r1, [pc, #12]	; (8001524 <SerialAcceptReceive+0x14>)
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <SerialAcceptReceive+0x18>)
 800151a:	f004 fee2 	bl	80062e2 <HAL_UART_Receive_IT>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000264 	.word	0x20000264
 8001528:	20000510 	.word	0x20000510

0800152c <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart2.Instance)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_UART_RxCpltCallback+0x104>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d173      	bne.n	8001628 <HAL_UART_RxCpltCallback+0xfc>
  {

    	__HAL_TIM_SetCounter(&htim3, 0);
 8001540:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_UART_RxCpltCallback+0x108>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim4, 0);
 8001548:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_UART_RxCpltCallback+0x10c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_UART_RxCpltCallback+0x110>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_1);
 8001556:	483a      	ldr	r0, [pc, #232]	; (8001640 <HAL_UART_RxCpltCallback+0x114>)
 8001558:	f000 fd60 	bl	800201c <PIDReset>
	    PIDReset(&tPID_2);
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <HAL_UART_RxCpltCallback+0x118>)
 800155e:	f000 fd5d 	bl	800201c <PIDReset>


	    if(!strcmp(dataBuffer, ARRAY_CHECKER)){
 8001562:	4939      	ldr	r1, [pc, #228]	; (8001648 <HAL_UART_RxCpltCallback+0x11c>)
 8001564:	4839      	ldr	r0, [pc, #228]	; (800164c <HAL_UART_RxCpltCallback+0x120>)
 8001566:	f7fe fe33 	bl	80001d0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <HAL_UART_RxCpltCallback+0x54>
	    	HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	2205      	movs	r2, #5
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_UART_RxCpltCallback+0x124>)
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <HAL_UART_RxCpltCallback+0x104>)
 800157a:	f004 fe20 	bl	80061be <HAL_UART_Transmit>
 800157e:	e051      	b.n	8001624 <HAL_UART_RxCpltCallback+0xf8>
	    }
	    else {
	        HAL_UART_Transmit(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	2212      	movs	r2, #18
 8001586:	4931      	ldr	r1, [pc, #196]	; (800164c <HAL_UART_RxCpltCallback+0x120>)
 8001588:	4829      	ldr	r0, [pc, #164]	; (8001630 <HAL_UART_RxCpltCallback+0x104>)
 800158a:	f004 fe18 	bl	80061be <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 800158e:	4c31      	ldr	r4, [pc, #196]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 8001590:	463b      	mov	r3, r7
 8001592:	492e      	ldr	r1, [pc, #184]	; (800164c <HAL_UART_RxCpltCallback+0x120>)
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fb25 	bl	8002be4 <ArrProcess>
 800159a:	4623      	mov	r3, r4
 800159c:	463a      	mov	r2, r7
 800159e:	6810      	ldr	r0, [r2, #0]
 80015a0:	6851      	ldr	r1, [r2, #4]
 80015a2:	c303      	stmia	r3!, {r0, r1}
 80015a4:	8912      	ldrh	r2, [r2, #8]
 80015a6:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	ee07 3a10 	vmov	s14, r3
 80015bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 80015c2:	889b      	ldrh	r3, [r3, #4]
 80015c4:	ee06 3a90 	vmov	s13, r3
 80015c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80015cc:	eeb0 1a66 	vmov.f32	s2, s13
 80015d0:	eef0 0a47 	vmov.f32	s1, s14
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <HAL_UART_RxCpltCallback+0x12c>)
 80015da:	f000 fc05 	bl	8001de8 <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 80015e0:	88db      	ldrh	r3, [r3, #6]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_UART_RxCpltCallback+0x130>)
 80015e6:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_UART_RxCpltCallback+0x128>)
 80015ea:	891b      	ldrh	r3, [r3, #8]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_UART_RxCpltCallback+0x134>)
 80015f0:	701a      	strb	r2, [r3, #0]

	    	    tProcess = RUN_TEST;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_UART_RxCpltCallback+0x110>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]

	    	        if (dir1 == HEAD)
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_RxCpltCallback+0x130>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d103      	bne.n	8001608 <HAL_UART_RxCpltCallback+0xdc>
	    	        {
	    	        	//Motor1Forward();
	    	        	tMotor1.dir = HEAD;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_UART_RxCpltCallback+0x138>)
 8001602:	2201      	movs	r2, #1
 8001604:	761a      	strb	r2, [r3, #24]
 8001606:	e002      	b.n	800160e <HAL_UART_RxCpltCallback+0xe2>
	    	        }
	    	        else
	    	        {
	    	        	//Motor1Backward();
	    	        	tMotor1.dir = BACK;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_UART_RxCpltCallback+0x138>)
 800160a:	2200      	movs	r2, #0
 800160c:	761a      	strb	r2, [r3, #24]
	    	        }
	    	        if (dir2 == HEAD)
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_UART_RxCpltCallback+0x134>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d103      	bne.n	800161e <HAL_UART_RxCpltCallback+0xf2>
	    	        {
	    	        	//Motor2Forward();
	    	        	tMotor2.dir = HEAD;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_UART_RxCpltCallback+0x13c>)
 8001618:	2201      	movs	r2, #1
 800161a:	761a      	strb	r2, [r3, #24]
 800161c:	e002      	b.n	8001624 <HAL_UART_RxCpltCallback+0xf8>
	    	        }
	    	        else
	    	        {
	    	        	//Motor2Backward();
	    	        	tMotor2.dir = BACK;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_UART_RxCpltCallback+0x13c>)
 8001620:	2200      	movs	r2, #0
 8001622:	761a      	strb	r2, [r3, #24]
	    	        }
	    }
	    SerialAcceptReceive();
 8001624:	f7ff ff74 	bl	8001510 <SerialAcceptReceive>
  }
}
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	20000510 	.word	0x20000510
 8001634:	20000438 	.word	0x20000438
 8001638:	20000480 	.word	0x20000480
 800163c:	200002ec 	.word	0x200002ec
 8001640:	20000370 	.word	0x20000370
 8001644:	20000388 	.word	0x20000388
 8001648:	0800bc48 	.word	0x0800bc48
 800164c:	20000264 	.word	0x20000264
 8001650:	20000000 	.word	0x20000000
 8001654:	200002f0 	.word	0x200002f0
 8001658:	200002fc 	.word	0x200002fc
 800165c:	200002fa 	.word	0x200002fa
 8001660:	200002fb 	.word	0x200002fb
 8001664:	20000330 	.word	0x20000330
 8001668:	20000350 	.word	0x20000350

0800166c <HAL_TIM_PeriodElapsedCallback>:


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af04      	add	r7, sp, #16
 8001672:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d128      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch (tProcess)
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <HAL_TIM_PeriodElapsedCallback+0x22>
 8001688:	2b01      	cmp	r3, #1
 800168a:	d006      	beq.n	800169a <HAL_TIM_PeriodElapsedCallback+0x2e>
    	ReadEncoder(&tMotor2, &htim3);
    	MPU6050_Read_All(&hi2c1, &MPU6050);
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
    }
  }
}
 800168c:	e021      	b.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x66>
    	MPU6050_Read_All(&hi2c1, &MPU6050);
 800168e:	4915      	ldr	r1, [pc, #84]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001690:	4815      	ldr	r0, [pc, #84]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001692:	f7ff fd15 	bl	80010c0 <MPU6050_Read_All>
    	break;
 8001696:	bf00      	nop
}
 8001698:	e01b      	b.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x66>
    	MotorSetRun();
 800169a:	f000 fa45 	bl	8001b28 <MotorSetRun>
    	ReadEncoder(&tMotor1, &htim4);
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016a2:	f000 fa91 	bl	8001bc8 <ReadEncoder>
    	ReadEncoder(&tMotor2, &htim3);
 80016a6:	4913      	ldr	r1, [pc, #76]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016aa:	f000 fa8d 	bl	8001bc8 <ReadEncoder>
    	MPU6050_Read_All(&hi2c1, &MPU6050);
 80016ae:	490d      	ldr	r1, [pc, #52]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016b2:	f7ff fd05 	bl	80010c0 <MPU6050_Read_All>
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	9202      	str	r2, [sp, #8]
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80016ca:	490f      	ldr	r1, [pc, #60]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80016ce:	f000 f81f 	bl	8001710 <MotorMovePos>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003f0 	.word	0x200003f0
 80016e0:	200002ec 	.word	0x200002ec
 80016e4:	20000278 	.word	0x20000278
 80016e8:	20000210 	.word	0x20000210
 80016ec:	20000480 	.word	0x20000480
 80016f0:	20000330 	.word	0x20000330
 80016f4:	20000438 	.word	0x20000438
 80016f8:	20000350 	.word	0x20000350
 80016fc:	200002fa 	.word	0x200002fa
 8001700:	200002fb 	.word	0x200002fb
 8001704:	20000388 	.word	0x20000388
 8001708:	20000370 	.word	0x20000370
 800170c:	200002fc 	.word	0x200002fc

08001710 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2,Motor_t *tmotor1, Motor_t *tmotor2, uint8_t dir1, uint8_t dir2)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2;


  float dPosTemp = 0;
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d820      	bhi.n	800177c <MotorMovePos+0x6c>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175c:	edc7 7a05 	vstr	s15, [r7, #20]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a03 	vldr	s15, [r3, #12]
 8001766:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001774:	4bbc      	ldr	r3, [pc, #752]	; (8001a68 <MotorMovePos+0x358>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
 800177a:	e065      	b.n	8001848 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	d817      	bhi.n	80017c2 <MotorMovePos+0xb2>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	ed93 7a04 	vldr	s14, [r3, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800179e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80017a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b4:	edc7 7a05 	vstr	s15, [r7, #20]
    g_dCmdVel = tProfile->dA2;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	4aaa      	ldr	r2, [pc, #680]	; (8001a68 <MotorMovePos+0x358>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e042      	b.n	8001848 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d834      	bhi.n	8001842 <MotorMovePos+0x132>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	ed93 7a06 	vldr	s14, [r3, #24]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	edd3 6a07 	vldr	s13, [r3, #28]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	edd3 7a08 	vldr	s15, [r3, #32]
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	edc7 7a05 	vstr	s15, [r7, #20]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001822:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800182c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	edd3 7a07 	vldr	s15, [r3, #28]
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <MotorMovePos+0x358>)
 800183c:	edc3 7a00 	vstr	s15, [r3]
 8001840:	e002      	b.n	8001848 <MotorMovePos+0x138>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	617b      	str	r3, [r7, #20]
  }

  // Control PID
  if(tMotor1.dir == tMotor2.dir)
 8001848:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <MotorMovePos+0x35c>)
 800184a:	f993 2018 	ldrsb.w	r2, [r3, #24]
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <MotorMovePos+0x360>)
 8001850:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001854:	429a      	cmp	r2, r3
 8001856:	d14a      	bne.n	80018ee <MotorMovePos+0x1de>
  	{
	 g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel + MPU6050.Gz, tMotor1.velocity, SAMPLING_TIME);
 8001858:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <MotorMovePos+0x358>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe83 	bl	8000568 <__aeabi_f2d>
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <MotorMovePos+0x364>)
 8001864:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001868:	f7fe fd20 	bl	80002ac <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f9c8 	bl	8000c08 <__aeabi_d2f>
 8001878:	4602      	mov	r2, r0
 800187a:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <MotorMovePos+0x35c>)
 800187c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001880:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8001a78 <MotorMovePos+0x368>
 8001884:	eef0 0a67 	vmov.f32	s1, s15
 8001888:	ee00 2a10 	vmov	s0, r2
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f000 fbfb 	bl	8002088 <PIDCompute>
 8001892:	eef0 7a40 	vmov.f32	s15, s0
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 3a90 	vmov	r3, s15
 800189e:	b21b      	sxth	r3, r3
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
	  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel - MPU6050.Gz, tMotor2.velocity, SAMPLING_TIME));
 80018a2:	4b71      	ldr	r3, [pc, #452]	; (8001a68 <MotorMovePos+0x358>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe5e 	bl	8000568 <__aeabi_f2d>
 80018ac:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <MotorMovePos+0x364>)
 80018ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018b2:	f7fe fcf9 	bl	80002a8 <__aeabi_dsub>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f9a3 	bl	8000c08 <__aeabi_d2f>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <MotorMovePos+0x360>)
 80018c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ca:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001a78 <MotorMovePos+0x368>
 80018ce:	eef0 0a67 	vmov.f32	s1, s15
 80018d2:	ee00 2a10 	vmov	s0, r2
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fbd6 	bl	8002088 <PIDCompute>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	e02d      	b.n	800194a <MotorMovePos+0x23a>
	}
  else
  {
  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel, tMotor1.velocity, SAMPLING_TIME);
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <MotorMovePos+0x358>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <MotorMovePos+0x35c>)
 80018f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fa:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001a78 <MotorMovePos+0x368>
 80018fe:	eef0 0a47 	vmov.f32	s1, s14
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 fbbe 	bl	8002088 <PIDCompute>
 800190c:	eef0 7a40 	vmov.f32	s15, s0
 8001910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001914:	ee17 3a90 	vmov	r3, s15
 8001918:	b21b      	sxth	r3, r3
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel, tMotor2.velocity, SAMPLING_TIME));
 800191c:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <MotorMovePos+0x358>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <MotorMovePos+0x360>)
 8001924:	ed93 7a01 	vldr	s14, [r3, #4]
 8001928:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001a78 <MotorMovePos+0x368>
 800192c:	eef0 0a47 	vmov.f32	s1, s14
 8001930:	eeb0 0a67 	vmov.f32	s0, s15
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fba7 	bl	8002088 <PIDCompute>
 800193a:	eef0 7a40 	vmov.f32	s15, s0
 800193e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	b21b      	sxth	r3, r3
 8001948:	623b      	str	r3, [r7, #32]
  }

  if (g_nDutyCycle_1 > 0)
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd0b      	ble.n	8001968 <MotorMovePos+0x258>
  {
  	Motor1Forward();
 8001950:	f000 f90a 	bl	8001b68 <Motor1Forward>
  	MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f000 f9c9 	bl	8001cf8 <MotorSetDuty>
 8001966:	e00a      	b.n	800197e <MotorMovePos+0x26e>
  }
  else
  {
  	Motor1Backward();
 8001968:	f000 f90a 	bl	8001b80 <Motor1Backward>
  	MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	bfb8      	it	lt
 8001972:	425b      	neglt	r3, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	2101      	movs	r1, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f9bd 	bl	8001cf8 <MotorSetDuty>
  }
  if (g_nDutyCycle_2 > 0)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd0b      	ble.n	800199c <MotorMovePos+0x28c>
  {
  	Motor2Forward();
 8001984:	f000 f908 	bl	8001b98 <Motor2Forward>
  	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bfb8      	it	lt
 800198e:	425b      	neglt	r3, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	2102      	movs	r1, #2
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f9af 	bl	8001cf8 <MotorSetDuty>
 800199a:	e00a      	b.n	80019b2 <MotorMovePos+0x2a2>
  }
  else
  {
  	Motor2Backward();
 800199c:	f000 f908 	bl	8001bb0 <Motor2Backward>
  	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfb8      	it	lt
 80019a6:	425b      	neglt	r3, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2102      	movs	r1, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f9a3 	bl	8001cf8 <MotorSetDuty>
//        }
//    }
//  strcat(result, "!");
//  HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 100);

  if (tProfile->nTime > tProfile->dMidStep3)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	f340 8082 	ble.w	8001ace <MotorMovePos+0x3be>
  {
    __HAL_TIM_SetCounter(&htim4, 0);
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <MotorMovePos+0x36c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim3, 0);
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <MotorMovePos+0x370>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
    g_nDutyCycle_1 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    g_nDutyCycle_2 = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
    g_dCmdVel = 0;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MotorMovePos+0x358>)
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MotorMovePos+0x374>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1);
 80019fe:	2101      	movs	r1, #1
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f979 	bl	8001cf8 <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2);
 8001a06:	2102      	movs	r1, #2
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f975 	bl	8001cf8 <MotorSetDuty>
    tmotor1->velocity = 0;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	605a      	str	r2, [r3, #4]
    tmotor2->velocity = 0;
 8001a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
    tmotor1->position = 0;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    tmotor2->position = 0;
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    tmotor1->counter = 0;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
    tmotor2->counter = 0;
 8001a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
    PIDReset(&tPID_2);
 8001a3a:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MotorMovePos+0x378>)
 8001a3c:	f000 faee 	bl	800201c <PIDReset>
    PIDReset(&tPID_1);
 8001a40:	4812      	ldr	r0, [pc, #72]	; (8001a8c <MotorMovePos+0x37c>)
 8001a42:	f000 faeb 	bl	800201c <PIDReset>
    if(tProfile->dMidStep3 < 2.0f)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	d528      	bpl.n	8001aac <MotorMovePos+0x39c>
    {
    for(uint64_t i = 0; i < 5000000; i++){};
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a66:	e01a      	b.n	8001a9e <MotorMovePos+0x38e>
 8001a68:	200002e8 	.word	0x200002e8
 8001a6c:	20000330 	.word	0x20000330
 8001a70:	20000350 	.word	0x20000350
 8001a74:	20000278 	.word	0x20000278
 8001a78:	3ba3d70a 	.word	0x3ba3d70a
 8001a7c:	20000480 	.word	0x20000480
 8001a80:	20000438 	.word	0x20000438
 8001a84:	200002ec 	.word	0x200002ec
 8001a88:	20000388 	.word	0x20000388
 8001a8c:	20000370 	.word	0x20000370
 8001a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a94:	1c54      	adds	r4, r2, #1
 8001a96:	f143 0500 	adc.w	r5, r3, #0
 8001a9a:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8001a9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa2:	4919      	ldr	r1, [pc, #100]	; (8001b08 <MotorMovePos+0x3f8>)
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	f173 0300 	sbcs.w	r3, r3, #0
 8001aaa:	d3f1      	bcc.n	8001a90 <MotorMovePos+0x380>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	4916      	ldr	r1, [pc, #88]	; (8001b0c <MotorMovePos+0x3fc>)
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <MotorMovePos+0x400>)
 8001ab6:	f004 fb82 	bl	80061be <HAL_UART_Transmit>
    MPU6050.yaw = 0.0f;
 8001aba:	4916      	ldr	r1, [pc, #88]	; (8001b14 <MotorMovePos+0x404>)
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    tProcess = NONE;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MotorMovePos+0x408>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  }
  tProfile->nTime += SAMPLING_TIME;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd48 	bl	8000568 <__aeabi_f2d>
 8001ad8:	a309      	add	r3, pc, #36	; (adr r3, 8001b00 <MotorMovePos+0x3f0>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fbe5 	bl	80002ac <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f88d 	bl	8000c08 <__aeabi_d2f>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	f3af 8000 	nop.w
 8001b00:	47ae147b 	.word	0x47ae147b
 8001b04:	3f747ae1 	.word	0x3f747ae1
 8001b08:	004c4b40 	.word	0x004c4b40
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000510 	.word	0x20000510
 8001b14:	20000278 	.word	0x20000278
 8001b18:	200002ec 	.word	0x200002ec

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <MotorSetRun>:

PROFILE_t tProfile;
Motor_t tMotor1, tMotor2;

void MotorSetRun()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2102      	movs	r1, #2
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <MotorSetRun+0x34>)
 8001b32:	f001 fccd 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <MotorSetRun+0x38>)
 8001b3c:	f001 fcc8 	bl	80034d0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MotorSetRun+0x3c>)
 8001b48:	f001 fcc2 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MotorSetRun+0x3c>)
 8001b54:	f001 fcbc 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40021000 	.word	0x40021000

08001b68 <Motor1Forward>:

void Motor1Forward()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b72:	4802      	ldr	r0, [pc, #8]	; (8001b7c <Motor1Forward+0x14>)
 8001b74:	f001 fcac 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000

08001b80 <Motor1Backward>:

void Motor1Backward()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <Motor1Backward+0x14>)
 8001b8c:	f001 fca0 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000

08001b98 <Motor2Forward>:

void Motor2Forward()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <Motor2Forward+0x14>)
 8001ba2:	f001 fc95 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020800 	.word	0x40020800

08001bb0 <Motor2Backward>:

void Motor2Backward()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <Motor2Backward+0x14>)
 8001bba:	f001 fc89 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020800 	.word	0x40020800

08001bc8 <ReadEncoder>:

void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]

  tmotor->counter = htim->Instance->CNT;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	601a      	str	r2, [r3, #0]
  htim->Instance->CNT = 0;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
  if(tmotor->dir == 1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d141      	bne.n	8001c72 <ReadEncoder+0xaa>
  {
	    int16_t temp_data = tmotor->counter;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	81bb      	strh	r3, [r7, #12]
	    temp_data = - temp_data;
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	81bb      	strh	r3, [r7, #12]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001bfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	ee17 0a90 	vmov	r0, s15
 8001c0c:	f7fe fcac 	bl	8000568 <__aeabi_f2d>
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <ReadEncoder+0x12c>)
 8001c16:	f7fe fcff 	bl	8000618 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4614      	mov	r4, r2
 8001c20:	461d      	mov	r5, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc9e 	bl	8000568 <__aeabi_f2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fcf0 	bl	8000618 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffe2 	bl	8000c08 <__aeabi_d2f>
 8001c44:	4602      	mov	r2, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edc3 7a02 	vstr	s15, [r3, #8]
  else{
	    int16_t temp_data =  tmotor->counter;
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
  }
}
 8001c70:	e03c      	b.n	8001cec <ReadEncoder+0x124>
	    int16_t temp_data =  tmotor->counter;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	81fb      	strh	r3, [r7, #14]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	ee17 0a90 	vmov	r0, s15
 8001c88:	f7fe fc6e 	bl	8000568 <__aeabi_f2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <ReadEncoder+0x12c>)
 8001c92:	f7fe fcc1 	bl	8000618 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc60 	bl	8000568 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fcb2 	bl	8000618 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ffa4 	bl	8000c08 <__aeabi_d2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ccc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	40690000 	.word	0x40690000

08001cf8 <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460a      	mov	r2, r1
 8001d02:	80fb      	strh	r3, [r7, #6]
 8001d04:	4613      	mov	r3, r2
 8001d06:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d104      	bne.n	8001d18 <MotorSetDuty+0x20>
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,nDuty);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MotorSetDuty+0x3c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else if (channel == MOTOR_2)
  {
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
  }
}
 8001d16:	e006      	b.n	8001d26 <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8001d18:	797b      	ldrb	r3, [r7, #5]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d103      	bne.n	8001d26 <MotorSetDuty+0x2e>
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MotorSetDuty+0x40>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200003a8 	.word	0x200003a8
 8001d38:	200004c8 	.word	0x200004c8

08001d3c <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8001d40:	481f      	ldr	r0, [pc, #124]	; (8001dc0 <MotorInit+0x84>)
 8001d42:	f003 f887 	bl	8004e54 <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001d46:	2104      	movs	r1, #4
 8001d48:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <MotorInit+0x88>)
 8001d4a:	f003 f943 	bl	8004fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <MotorInit+0x88>)
 8001d52:	f003 f93f 	bl	8004fd4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d56:	2108      	movs	r1, #8
 8001d58:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <MotorInit+0x8c>)
 8001d5a:	f003 f93b 	bl	8004fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d5e:	210c      	movs	r1, #12
 8001d60:	4819      	ldr	r0, [pc, #100]	; (8001dc8 <MotorInit+0x8c>)
 8001d62:	f003 f937 	bl	8004fd4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001d66:	2100      	movs	r1, #0
 8001d68:	4818      	ldr	r0, [pc, #96]	; (8001dcc <MotorInit+0x90>)
 8001d6a:	f003 faa1 	bl	80052b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <MotorInit+0x90>)
 8001d72:	f003 fa9d 	bl	80052b0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001d76:	2100      	movs	r1, #0
 8001d78:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <MotorInit+0x94>)
 8001d7a:	f003 fa99 	bl	80052b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001d7e:	2104      	movs	r1, #4
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MotorInit+0x94>)
 8001d82:	f003 fa95 	bl	80052b0 <HAL_TIM_Encoder_Start>

  PIDInit(&tPID_1, 0.15, 5, 0.001);
 8001d86:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001dd4 <MotorInit+0x98>
 8001d8a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001d8e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001dd8 <MotorInit+0x9c>
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <MotorInit+0xa0>)
 8001d94:	f000 f95e 	bl	8002054 <PIDInit>
  PIDInit(&tPID_2, 0.15, 5, 0.001);
 8001d98:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001dd4 <MotorInit+0x98>
 8001d9c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001da0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001dd8 <MotorInit+0x9c>
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <MotorInit+0xa4>)
 8001da6:	f000 f955 	bl	8002054 <PIDInit>
  MotorSetDuty(0, MOTOR_1);
 8001daa:	2101      	movs	r1, #1
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff ffa3 	bl	8001cf8 <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8001db2:	2102      	movs	r1, #2
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ff9f 	bl	8001cf8 <MotorSetDuty>

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200003f0 	.word	0x200003f0
 8001dc4:	200004c8 	.word	0x200004c8
 8001dc8:	200003a8 	.word	0x200003a8
 8001dcc:	20000438 	.word	0x20000438
 8001dd0:	20000480 	.word	0x20000480
 8001dd4:	3a83126f 	.word	0x3a83126f
 8001dd8:	3e19999a 	.word	0x3e19999a
 8001ddc:	20000370 	.word	0x20000370
 8001de0:	20000388 	.word	0x20000388
 8001de4:	00000000 	.word	0x00000000

08001de8 <MotorTrapzoidalInit>:
    *nPulse = __HAL_TIM_GetCounter(&htim3);
  }
}

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001df4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001df8:	ed87 1a00 	vstr	s2, [r7]
	if (maxPos <= 0 || maxVel <= 0 || maxAcc <= 0) {
 8001dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	f240 80fc 	bls.w	8002004 <MotorTrapzoidalInit+0x21c>
 8001e0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	f240 80f4 	bls.w	8002004 <MotorTrapzoidalInit+0x21c>
 8001e1c:	edd7 7a00 	vldr	s15, [r7]
 8001e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	f240 80ec 	bls.w	8002004 <MotorTrapzoidalInit+0x21c>

	        return;
	    }
	if (maxVel > sqrt(maxAcc * maxPos)) maxVel = sqrt(maxAcc * maxPos) - 1.0f;
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fb9b 	bl	8000568 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
 8001e36:	ed97 7a00 	vldr	s14, [r7]
 8001e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	ee17 0a90 	vmov	r0, s15
 8001e46:	f7fe fb8f 	bl	8000568 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	ec43 2b10 	vmov	d0, r2, r3
 8001e52:	f009 fde5 	bl	800ba20 <sqrt>
 8001e56:	ec53 2b10 	vmov	r2, r3, d0
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe fe6b 	bl	8000b38 <__aeabi_dcmpgt>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01e      	beq.n	8001ea6 <MotorTrapzoidalInit+0xbe>
 8001e68:	ed97 7a00 	vldr	s14, [r7]
 8001e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	ee17 0a90 	vmov	r0, s15
 8001e78:	f7fe fb76 	bl	8000568 <__aeabi_f2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	ec43 2b10 	vmov	d0, r2, r3
 8001e84:	f009 fdcc 	bl	800ba20 <sqrt>
 8001e88:	ec51 0b10 	vmov	r0, r1, d0
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <MotorTrapzoidalInit+0x230>)
 8001e92:	f7fe fa09 	bl	80002a8 <__aeabi_dsub>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe feb3 	bl	8000c08 <__aeabi_d2f>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	607b      	str	r3, [r7, #4]
	tProfile->dAccelMax = maxAcc;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos * 0.88083; //Must Increase
 8001eb2:	68b8      	ldr	r0, [r7, #8]
 8001eb4:	f7fe fb58 	bl	8000568 <__aeabi_f2d>
 8001eb8:	a355      	add	r3, pc, #340	; (adr r3, 8002010 <MotorTrapzoidalInit+0x228>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fbab 	bl	8000618 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe9d 	bl	8000c08 <__aeabi_d2f>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001efa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f5c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001f96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	ed93 7a00 	vldr	s14, [r3]
 8001fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tProfile->nTime = 0;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
 8002002:	e000      	b.n	8002006 <MotorTrapzoidalInit+0x21e>
	        return;
 8002004:	bf00      	nop
}
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bdb0      	pop	{r4, r5, r7, pc}
 800200c:	f3af 8000 	nop.w
 8002010:	656abde4 	.word	0x656abde4
 8002014:	3fec2fc2 	.word	0x3fec2fc2
 8002018:	3ff00000 	.word	0x3ff00000

0800201c <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result = 0.0f;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    g_dPIDError = 0;
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <PIDReset+0x34>)
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	200003a0 	.word	0x200003a0

08002054 <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002060:	edc7 0a01 	vstr	s1, [r7, #4]
 8002064:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff ffd7 	bl	800201c <PIDReset>
    PID_Ctrl->dKp = dKp;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	609a      	str	r2, [r3, #8]

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	ed87 0a02 	vstr	s0, [r7, #8]
 8002094:	edc7 0a01 	vstr	s1, [r7, #4]
 8002098:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 800209c:	ed97 7a02 	vldr	s14, [r7, #8]
 80020a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <PIDCompute+0x114>)
 80020aa:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	613b      	str	r3, [r7, #16]

    dP = PID_Ctrl->dKp * g_dPIDError;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	ed93 7a00 	vldr	s14, [r3]
 80020c6:	4b35      	ldr	r3, [pc, #212]	; (800219c <PIDCompute+0x114>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	edc7 7a06 	vstr	s15, [r7, #24]
    PID_Ctrl->dIntergral += g_dPIDError;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <PIDCompute+0x114>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80020f0:	edd7 7a00 	vldr	s15, [r7]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edd3 7a04 	vldr	s15, [r3, #16]
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a05 	vstr	s15, [r7, #20]

    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	ed93 7a02 	vldr	s14, [r3, #8]
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <PIDCompute+0x114>)
 8002116:	edd3 6a00 	vldr	s13, [r3]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002120:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002124:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002128:	ed97 7a00 	vldr	s14, [r7]
 800212c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002130:	edc7 7a04 	vstr	s15, [r7, #16]

    dPIDResult = dP + dI + dD;
 8002134:	ed97 7a06 	vldr	s14, [r7, #24]
 8002138:	edd7 7a05 	vldr	s15, [r7, #20]
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	ed97 7a04 	vldr	s14, [r7, #16]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	edc7 7a07 	vstr	s15, [r7, #28]
    if(dPIDResult > 99) dPIDResult = 99;
 800214c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002150:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80021a0 <PIDCompute+0x118>
 8002154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	dd01      	ble.n	8002162 <PIDCompute+0xda>
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <PIDCompute+0x11c>)
 8002160:	61fb      	str	r3, [r7, #28]
    if(dPIDResult < -99) dPIDResult = - 99;
 8002162:	edd7 7a07 	vldr	s15, [r7, #28]
 8002166:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021a8 <PIDCompute+0x120>
 800216a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d501      	bpl.n	8002178 <PIDCompute+0xf0>
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <PIDCompute+0x124>)
 8002176:	61fb      	str	r3, [r7, #28]
    PID_Ctrl->result = dPIDResult;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <PIDCompute+0x114>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	ee07 3a90 	vmov	s15, r3
}
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	200003a0 	.word	0x200003a0
 80021a0:	42c60000 	.word	0x42c60000
 80021a4:	42c60000 	.word	0x42c60000
 80021a8:	c2c60000 	.word	0xc2c60000
 80021ac:	c2c60000 	.word	0xc2c60000

080021b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_MspInit+0x4c>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <HAL_MspInit+0x4c>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_MspInit+0x4c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_MspInit+0x4c>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 fde0 	bl	8002e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM2_IRQHandler+0x10>)
 800225a:	f003 f8b7 	bl	80053cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200003f0 	.word	0x200003f0

08002268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART2_IRQHandler+0x10>)
 800226e:	f004 f869 	bl	8006344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000510 	.word	0x20000510

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002296:	f006 f91b 	bl	80084d0 <__errno>
 800229a:	4603      	mov	r3, r0
 800229c:	2216      	movs	r2, #22
 800229e:	601a      	str	r2, [r3, #0]
  return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022be:	e7fe      	b.n	80022be <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
  }

  return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
  }
  return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
  return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f006 f880 	bl	80084d0 <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20020000 	.word	0x20020000
 80023fc:	00000400 	.word	0x00000400
 8002400:	200003a4 	.word	0x200003a4
 8002404:	200006a8 	.word	0x200006a8

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
 800244c:	615a      	str	r2, [r3, #20]
 800244e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	2220      	movs	r2, #32
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f005 ffc5 	bl	80083e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800245c:	4b38      	ldr	r3, [pc, #224]	; (8002540 <MX_TIM1_Init+0x114>)
 800245e:	4a39      	ldr	r2, [pc, #228]	; (8002544 <MX_TIM1_Init+0x118>)
 8002460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <MX_TIM1_Init+0x114>)
 8002464:	221d      	movs	r2, #29
 8002466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002468:	4b35      	ldr	r3, [pc, #212]	; (8002540 <MX_TIM1_Init+0x114>)
 800246a:	2260      	movs	r2, #96	; 0x60
 800246c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800246e:	4b34      	ldr	r3, [pc, #208]	; (8002540 <MX_TIM1_Init+0x114>)
 8002470:	2263      	movs	r2, #99	; 0x63
 8002472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <MX_TIM1_Init+0x114>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <MX_TIM1_Init+0x114>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <MX_TIM1_Init+0x114>)
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002486:	482e      	ldr	r0, [pc, #184]	; (8002540 <MX_TIM1_Init+0x114>)
 8002488:	f002 fd54 	bl	8004f34 <HAL_TIM_PWM_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002492:	f7ff fb43 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800249e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024a2:	4619      	mov	r1, r3
 80024a4:	4826      	ldr	r0, [pc, #152]	; (8002540 <MX_TIM1_Init+0x114>)
 80024a6:	f003 fd5b 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80024b0:	f7ff fb34 	bl	8001b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b4:	2360      	movs	r3, #96	; 0x60
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	2208      	movs	r2, #8
 80024d6:	4619      	mov	r1, r3
 80024d8:	4819      	ldr	r0, [pc, #100]	; (8002540 <MX_TIM1_Init+0x114>)
 80024da:	f003 f87f 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80024e4:	f7ff fb1a 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	220c      	movs	r2, #12
 80024ee:	4619      	mov	r1, r3
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <MX_TIM1_Init+0x114>)
 80024f2:	f003 f873 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80024fc:	f7ff fb0e 	bl	8001b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002518:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <MX_TIM1_Init+0x114>)
 8002524:	f003 fd98 	bl	8006058 <HAL_TIMEx_ConfigBreakDeadTime>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800252e:	f7ff faf5 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002532:	4803      	ldr	r0, [pc, #12]	; (8002540 <MX_TIM1_Init+0x114>)
 8002534:	f000 fa5a 	bl	80029ec <HAL_TIM_MspPostInit>

}
 8002538:	bf00      	nop
 800253a:	3748      	adds	r7, #72	; 0x48
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200003a8 	.word	0x200003a8
 8002544:	40010000 	.word	0x40010000

08002548 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 749;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM2_Init+0x98>)
 800256e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8002572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <MX_TIM2_Init+0x98>)
 800257c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_TIM2_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258e:	4814      	ldr	r0, [pc, #80]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002590:	f002 fc10 	bl	8004db4 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800259a:	f7ff fabf 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	4619      	mov	r1, r3
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <MX_TIM2_Init+0x98>)
 80025ac:	f003 f8d8 	bl	8005760 <HAL_TIM_ConfigClockSource>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025b6:	f7ff fab1 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	4619      	mov	r1, r3
 80025c6:	4806      	ldr	r0, [pc, #24]	; (80025e0 <MX_TIM2_Init+0x98>)
 80025c8:	f003 fcca 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025d2:	f7ff faa3 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200003f0 	.word	0x200003f0

080025e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fef7 	bl	80083e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <MX_TIM3_Init+0xa0>)
 8002602:	4a21      	ldr	r2, [pc, #132]	; (8002688 <MX_TIM3_Init+0xa4>)
 8002604:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <MX_TIM3_Init+0xa0>)
 8002608:	2200      	movs	r2, #0
 800260a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <MX_TIM3_Init+0xa0>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <MX_TIM3_Init+0xa0>)
 8002614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_TIM3_Init+0xa0>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_TIM3_Init+0xa0>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002626:	2303      	movs	r3, #3
 8002628:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800262e:	2301      	movs	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002636:	230a      	movs	r3, #10
 8002638:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800263e:	2301      	movs	r3, #1
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002646:	230a      	movs	r3, #10
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800264a:	f107 030c 	add.w	r3, r7, #12
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <MX_TIM3_Init+0xa0>)
 8002652:	f002 fd87 	bl	8005164 <HAL_TIM_Encoder_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800265c:	f7ff fa5e 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_TIM3_Init+0xa0>)
 800266e:	f003 fc77 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002678:	f7ff fa50 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	3730      	adds	r7, #48	; 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000438 	.word	0x20000438
 8002688:	40000400 	.word	0x40000400

0800268c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f005 fea3 	bl	80083e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <MX_TIM4_Init+0xa0>)
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <MX_TIM4_Init+0xa4>)
 80026ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_TIM4_Init+0xa0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_TIM4_Init+0xa0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_TIM4_Init+0xa0>)
 80026bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_TIM4_Init+0xa0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_TIM4_Init+0xa0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026ce:	2303      	movs	r3, #3
 80026d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026d6:	2301      	movs	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80026de:	230a      	movs	r3, #10
 80026e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026e6:	2301      	movs	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80026ee:	230a      	movs	r3, #10
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026f2:	f107 030c 	add.w	r3, r7, #12
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_TIM4_Init+0xa0>)
 80026fa:	f002 fd33 	bl	8005164 <HAL_TIM_Encoder_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002704:	f7ff fa0a 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_TIM4_Init+0xa0>)
 8002716:	f003 fc23 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002720:	f7ff f9fc 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000480 	.word	0x20000480
 8002730:	40000800 	.word	0x40000800

08002734 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	615a      	str	r2, [r3, #20]
 8002762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <MX_TIM5_Init+0xf8>)
 8002766:	4a32      	ldr	r2, [pc, #200]	; (8002830 <MX_TIM5_Init+0xfc>)
 8002768:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 29;
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <MX_TIM5_Init+0xf8>)
 800276c:	221d      	movs	r2, #29
 800276e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <MX_TIM5_Init+0xf8>)
 8002772:	2260      	movs	r2, #96	; 0x60
 8002774:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8002776:	4b2d      	ldr	r3, [pc, #180]	; (800282c <MX_TIM5_Init+0xf8>)
 8002778:	2263      	movs	r2, #99	; 0x63
 800277a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <MX_TIM5_Init+0xf8>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <MX_TIM5_Init+0xf8>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002788:	4828      	ldr	r0, [pc, #160]	; (800282c <MX_TIM5_Init+0xf8>)
 800278a:	f002 fb13 	bl	8004db4 <HAL_TIM_Base_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8002794:	f7ff f9c2 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800279e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4821      	ldr	r0, [pc, #132]	; (800282c <MX_TIM5_Init+0xf8>)
 80027a6:	f002 ffdb 	bl	8005760 <HAL_TIM_ConfigClockSource>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80027b0:	f7ff f9b4 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80027b4:	481d      	ldr	r0, [pc, #116]	; (800282c <MX_TIM5_Init+0xf8>)
 80027b6:	f002 fbbd 	bl	8004f34 <HAL_TIM_PWM_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80027c0:	f7ff f9ac 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027cc:	f107 0320 	add.w	r3, r7, #32
 80027d0:	4619      	mov	r1, r3
 80027d2:	4816      	ldr	r0, [pc, #88]	; (800282c <MX_TIM5_Init+0xf8>)
 80027d4:	f003 fbc4 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80027de:	f7ff f99d 	bl	8001b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	; 0x60
 80027e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <MX_TIM5_Init+0xf8>)
 80027fa:	f002 feef 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002804:	f7ff f98a 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2204      	movs	r2, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <MX_TIM5_Init+0xf8>)
 8002810:	f002 fee4 	bl	80055dc <HAL_TIM_PWM_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800281a:	f7ff f97f 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <MX_TIM5_Init+0xf8>)
 8002820:	f000 f8e4 	bl	80029ec <HAL_TIM_MspPostInit>

}
 8002824:	bf00      	nop
 8002826:	3738      	adds	r7, #56	; 0x38
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200004c8 	.word	0x200004c8
 8002830:	40000c00 	.word	0x40000c00

08002834 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_TIM_PWM_MspInit+0x3c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_TIM_PWM_MspInit+0x40>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_TIM_PWM_MspInit+0x40>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_TIM_PWM_MspInit+0x40>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40010000 	.word	0x40010000
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002888:	d116      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2101      	movs	r1, #1
 80028aa:	201c      	movs	r0, #28
 80028ac:	f000 fbab 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028b0:	201c      	movs	r0, #28
 80028b2:	f000 fbc4 	bl	800303e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80028b6:	e012      	b.n	80028de <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_TIM_Base_MspInit+0x74>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10d      	bne.n	80028de <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_TIM_Base_MspInit+0x70>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40000c00 	.word	0x40000c00

080028f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12c      	bne.n	800296c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a29      	ldr	r2, [pc, #164]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_CH_1_Pin|ENCODER_2_CH_2_Pin;
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800295a:	2302      	movs	r3, #2
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	481e      	ldr	r0, [pc, #120]	; (80029e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002966:	f000 fc17 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800296a:	e031      	b.n	80029d0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_TIM_Encoder_MspInit+0xec>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_CH_1_Pin|ENCODER_1_CH_2_Pin;
 80029ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80029cc:	f000 fbe4 	bl	8003198 <HAL_GPIO_Init>
}
 80029d0:	bf00      	nop
 80029d2:	3730      	adds	r7, #48	; 0x30
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40020c00 	.word	0x40020c00

080029ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <HAL_TIM_MspPostInit+0xb0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d11f      	bne.n	8002a4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a18:	f043 0310 	orr.w	r3, r3, #16
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_CH_3_Pin|PWM_MOTOR_1_CH_4_Pin;
 8002a2a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	4817      	ldr	r0, [pc, #92]	; (8002aa4 <HAL_TIM_MspPostInit+0xb8>)
 8002a48:	f000 fba6 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002a4c:	e022      	b.n	8002a94 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d11d      	bne.n	8002a94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_TIM_MspPostInit+0xb4>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTOR_2_CH1_Pin|PWM_MOTOR_2_CH_2_Pin;
 8002a74:	2303      	movs	r3, #3
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a84:	2302      	movs	r3, #2
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <HAL_TIM_MspPostInit+0xc0>)
 8002a90:	f000 fb82 	bl	8003198 <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40020000 	.word	0x40020000

08002ab0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <MX_USART2_UART_Init+0x50>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002abc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_USART2_UART_Init+0x4c>)
 8002ae8:	f003 fb1c 	bl	8006124 <HAL_UART_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002af2:	f7ff f813 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000510 	.word	0x20000510
 8002b00:	40004400 	.word	0x40004400

08002b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <HAL_UART_MspInit+0xd0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d151      	bne.n	8002bca <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_UART_MspInit+0xd4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4619      	mov	r1, r3
 8002b94:	4811      	ldr	r0, [pc, #68]	; (8002bdc <HAL_UART_MspInit+0xd8>)
 8002b96:	f000 faff 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002baa:	2307      	movs	r3, #7
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480a      	ldr	r0, [pc, #40]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002bb6:	f000 faef 	bl	8003198 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2026      	movs	r0, #38	; 0x26
 8002bc0:	f000 fa21 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bc4:	2026      	movs	r0, #38	; 0x26
 8002bc6:	f000 fa3a 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40004400 	.word	0x40004400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020c00 	.word	0x40020c00

08002be4 <ArrProcess>:
#include <stdint.h>



ArrData_t ArrProcess(char *arr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b090      	sub	sp, #64	; 0x40
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 fc98 	bl	800852a <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f004 fb0e 	bl	800721c <malloc>
 8002c00:	4603      	mov	r3, r0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 8002c04:	2005      	movs	r0, #5
 8002c06:	f004 fb09 	bl	800721c <malloc>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 8002c0e:	2005      	movs	r0, #5
 8002c10:	f004 fb04 	bl	800721c <malloc>
 8002c14:	4603      	mov	r3, r0
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f004 faff 	bl	800721c <malloc>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 8002c22:	2002      	movs	r0, #2
 8002c24:	f004 fafa 	bl	800721c <malloc>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	2204      	movs	r2, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c36:	f005 fbde 	bl	80083f6 <strncpy>
    pos1[4] = '\0';
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	3305      	adds	r3, #5
 8002c48:	2204      	movs	r2, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c4e:	f005 fbd2 	bl	80083f6 <strncpy>
    vel1[4] = '\0';
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	3304      	adds	r3, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	330a      	adds	r3, #10
 8002c60:	2204      	movs	r2, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c66:	f005 fbc6 	bl	80083f6 <strncpy>
    acc1[4] = '\0';
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 8002c72:	f107 030c 	add.w	r3, r7, #12
 8002c76:	330f      	adds	r3, #15
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7e:	f005 fbba 	bl	80083f6 <strncpy>
    dir1[1] = '\0';
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	3301      	adds	r3, #1
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	3311      	adds	r3, #17
 8002c90:	2201      	movs	r2, #1
 8002c92:	4619      	mov	r1, r3
 8002c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c96:	f005 fbae 	bl	80083f6 <strncpy>
    dir2[1] = '\0';
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 8002ca2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ca4:	f004 fab6 	bl	8007214 <atoi>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 8002cae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cb0:	f004 fab0 	bl	8007214 <atoi>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 8002cba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cbc:	f004 faaa 	bl	8007214 <atoi>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 8002cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc8:	f004 faa4 	bl	8007214 <atoi>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 8002cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cd4:	f004 fa9e 	bl	8007214 <atoi>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 8002cde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ce0:	f004 faa4 	bl	800722c <free>
    free(vel1);
 8002ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ce6:	f004 faa1 	bl	800722c <free>
    free(acc1);
 8002cea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cec:	f004 fa9e 	bl	800722c <free>
    free(dir1);
 8002cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf2:	f004 fa9b 	bl	800722c <free>
    free(dir2);
 8002cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf8:	f004 fa98 	bl	800722c <free>

    return data;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f107 0320 	add.w	r3, r7, #32
 8002d04:	cb03      	ldmia	r3!, {r0, r1}
 8002d06:	6010      	str	r0, [r2, #0]
 8002d08:	6051      	str	r1, [r2, #4]
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	8113      	strh	r3, [r2, #8]
}
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	3740      	adds	r7, #64	; 0x40
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d1c:	480d      	ldr	r0, [pc, #52]	; (8002d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d1e:	490e      	ldr	r1, [pc, #56]	; (8002d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d20:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d34:	4c0b      	ldr	r4, [pc, #44]	; (8002d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d42:	f7ff fb61 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d46:	f005 fbc9 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d4a:	f7fe fb31 	bl	80013b0 <main>
  bx  lr    
 8002d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d58:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002d5c:	0800c0b0 	.word	0x0800c0b0
  ldr r2, =_sbss
 8002d60:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002d64:	200006a4 	.word	0x200006a4

08002d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_Init+0x40>)
 8002d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <HAL_Init+0x40>)
 8002d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_Init+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_Init+0x40>)
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d94:	2003      	movs	r0, #3
 8002d96:	f000 f92b 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9a:	200f      	movs	r0, #15
 8002d9c:	f000 f808 	bl	8002db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fa06 	bl	80021b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00

08002db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x54>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x58>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f943 	bl	800305a <HAL_SYSTICK_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00e      	b.n	8002dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d80a      	bhi.n	8002dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f000 f90b 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df0:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <HAL_InitTick+0x5c>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000008 	.word	0x20000008
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x24>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_IncTick+0x24>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000010 	.word	0x20000010
 8002e34:	20000554 	.word	0x20000554

08002e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_GetTick+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000554 	.word	0x20000554

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff29 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff3e 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff31 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff feda 	bl	8002e38 <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d008      	beq.n	80030a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e052      	b.n	800314a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0216 	bic.w	r2, r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <HAL_DMA_Abort+0x62>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0208 	bic.w	r2, r2, #8
 80030e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	e013      	b.n	800311e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f6:	f7ff fe9f 	bl	8002e38 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b05      	cmp	r3, #5
 8003102:	d90c      	bls.n	800311e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e015      	b.n	800314a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e4      	bne.n	80030f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	223f      	movs	r2, #63	; 0x3f
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d004      	beq.n	8003170 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e00c      	b.n	800318a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2205      	movs	r2, #5
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e16b      	b.n	800348c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 815a 	bne.w	8003486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d005      	beq.n	80031ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d130      	bne.n	800324c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003220:	2201      	movs	r2, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 0201 	and.w	r2, r3, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d017      	beq.n	8003288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80b4 	beq.w	8003486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b60      	ldr	r3, [pc, #384]	; (80034a4 <HAL_GPIO_Init+0x30c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a5f      	ldr	r2, [pc, #380]	; (80034a4 <HAL_GPIO_Init+0x30c>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_GPIO_Init+0x30c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333a:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <HAL_GPIO_Init+0x310>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	; (80034ac <HAL_GPIO_Init+0x314>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a51      	ldr	r2, [pc, #324]	; (80034b0 <HAL_GPIO_Init+0x318>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a50      	ldr	r2, [pc, #320]	; (80034b4 <HAL_GPIO_Init+0x31c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_GPIO_Init+0x320>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x21a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_GPIO_Init+0x324>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x216>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4d      	ldr	r2, [pc, #308]	; (80034c0 <HAL_GPIO_Init+0x328>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_GPIO_Init+0x32c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x20e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4b      	ldr	r2, [pc, #300]	; (80034c8 <HAL_GPIO_Init+0x330>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x20a>
 800339e:	2307      	movs	r3, #7
 80033a0:	e00e      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033a2:	2308      	movs	r3, #8
 80033a4:	e00c      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033a6:	2306      	movs	r3, #6
 80033a8:	e00a      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033aa:	2305      	movs	r3, #5
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033be:	2300      	movs	r3, #0
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_GPIO_Init+0x310>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_GPIO_Init+0x334>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003402:	4a32      	ldr	r2, [pc, #200]	; (80034cc <HAL_GPIO_Init+0x334>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003408:	4b30      	ldr	r3, [pc, #192]	; (80034cc <HAL_GPIO_Init+0x334>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <HAL_GPIO_Init+0x334>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_GPIO_Init+0x334>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_GPIO_Init+0x334>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_GPIO_Init+0x334>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_GPIO_Init+0x334>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f ae90 	bls.w	80031b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40021400 	.word	0x40021400
 80034c4:	40021800 	.word	0x40021800
 80034c8:	40021c00 	.word	0x40021c00
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034ec:	e003      	b.n	80034f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	041a      	lsls	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e12b      	b.n	800376e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fef8 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003568:	f001 fbfc 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 800356c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4a81      	ldr	r2, [pc, #516]	; (8003778 <HAL_I2C_Init+0x274>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d807      	bhi.n	8003588 <HAL_I2C_Init+0x84>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_I2C_Init+0x278>)
 800357c:	4293      	cmp	r3, r2
 800357e:	bf94      	ite	ls
 8003580:	2301      	movls	r3, #1
 8003582:	2300      	movhi	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e006      	b.n	8003596 <HAL_I2C_Init+0x92>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a7d      	ldr	r2, [pc, #500]	; (8003780 <HAL_I2C_Init+0x27c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0e7      	b.n	800376e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a78      	ldr	r2, [pc, #480]	; (8003784 <HAL_I2C_Init+0x280>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9b      	lsrs	r3, r3, #18
 80035a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a6a      	ldr	r2, [pc, #424]	; (8003778 <HAL_I2C_Init+0x274>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d802      	bhi.n	80035d8 <HAL_I2C_Init+0xd4>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3301      	adds	r3, #1
 80035d6:	e009      	b.n	80035ec <HAL_I2C_Init+0xe8>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	4a69      	ldr	r2, [pc, #420]	; (8003788 <HAL_I2C_Init+0x284>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	3301      	adds	r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	495c      	ldr	r1, [pc, #368]	; (8003778 <HAL_I2C_Init+0x274>)
 8003608:	428b      	cmp	r3, r1
 800360a:	d819      	bhi.n	8003640 <HAL_I2C_Init+0x13c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e59      	subs	r1, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fbb1 f3f3 	udiv	r3, r1, r3
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003620:	400b      	ands	r3, r1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_I2C_Init+0x138>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e59      	subs	r1, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fbb1 f3f3 	udiv	r3, r1, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	e051      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 800363c:	2304      	movs	r3, #4
 800363e:	e04f      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <HAL_I2C_Init+0x168>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e012      	b.n	8003692 <HAL_I2C_Init+0x18e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x196>
 8003696:	2301      	movs	r3, #1
 8003698:	e022      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_I2C_Init+0x1bc>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e58      	subs	r0, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	440b      	add	r3, r1
 80036b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	6809      	ldr	r1, [r1, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800370e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6911      	ldr	r1, [r2, #16]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	000186a0 	.word	0x000186a0
 800377c:	001e847f 	.word	0x001e847f
 8003780:	003d08ff 	.word	0x003d08ff
 8003784:	431bde83 	.word	0x431bde83
 8003788:	10624dd3 	.word	0x10624dd3

0800378c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a6:	f7ff fb47 	bl	8002e38 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	f040 80d9 	bne.w	800396c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2319      	movs	r3, #25
 80037c0:	2201      	movs	r2, #1
 80037c2:	496d      	ldr	r1, [pc, #436]	; (8003978 <HAL_I2C_Mem_Write+0x1ec>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc7f 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0cc      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Mem_Write+0x56>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0c5      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d007      	beq.n	8003808 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2221      	movs	r2, #33	; 0x21
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a4d      	ldr	r2, [pc, #308]	; (800397c <HAL_I2C_Mem_Write+0x1f0>)
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384a:	88f8      	ldrh	r0, [r7, #6]
 800384c:	893a      	ldrh	r2, [r7, #8]
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4603      	mov	r3, r0
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fab6 	bl	8003dcc <I2C_RequestMemoryWrite>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d052      	beq.n	800390c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e081      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fd00 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b04      	cmp	r3, #4
 8003880:	d107      	bne.n	8003892 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003890:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06b      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d11b      	bne.n	800390c <HAL_I2C_Mem_Write+0x180>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1aa      	bne.n	800386a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fcec 	bl	80042f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b04      	cmp	r3, #4
 800392a:	d107      	bne.n	800393c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e016      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	00100002 	.word	0x00100002
 800397c:	ffff0000 	.word	0xffff0000

08003980 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399a:	f7ff fa4d 	bl	8002e38 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	f040 8208 	bne.w	8003dbe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2319      	movs	r3, #25
 80039b4:	2201      	movs	r2, #1
 80039b6:	497b      	ldr	r1, [pc, #492]	; (8003ba4 <HAL_I2C_Mem_Read+0x224>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fb85 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	e1fb      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_I2C_Mem_Read+0x56>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e1f4      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d007      	beq.n	80039fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2222      	movs	r2, #34	; 0x22
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_I2C_Mem_Read+0x228>)
 8003a3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3e:	88f8      	ldrh	r0, [r7, #6]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	8979      	ldrh	r1, [r7, #10]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa52 	bl	8003ef8 <I2C_RequestMemoryRead>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1b0      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e184      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d11b      	bne.n	8003ace <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e164      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	e144      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b24:	e138      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	f200 80f1 	bhi.w	8003d12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d123      	bne.n	8003b80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fc1b 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e139      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b7e:	e10b      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d14e      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4906      	ldr	r1, [pc, #24]	; (8003bac <HAL_I2C_Mem_Read+0x22c>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fa98 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e10e      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
 8003ba2:	bf00      	nop
 8003ba4:	00100002 	.word	0x00100002
 8003ba8:	ffff0000 	.word	0xffff0000
 8003bac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c24:	e0b8      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4966      	ldr	r1, [pc, #408]	; (8003dc8 <HAL_I2C_Mem_Read+0x448>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fa49 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0bf      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	494f      	ldr	r1, [pc, #316]	; (8003dc8 <HAL_I2C_Mem_Read+0x448>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa1b 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e091      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d10:	e042      	b.n	8003d98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fb2e 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e04c      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d118      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f aec2 	bne.w	8003b26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3728      	adds	r7, #40	; 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	00010004 	.word	0x00010004

08003dcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f960 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00d      	beq.n	8003e2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d103      	bne.n	8003e26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e05f      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <I2C_RequestMemoryWrite+0x128>)
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f998 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04c      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa02 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e02b      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
 8003ea2:	e021      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9dc 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e005      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f8c2 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d103      	bne.n	8003f62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0aa      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	4952      	ldr	r1, [pc, #328]	; (80040c4 <I2C_RequestMemoryRead+0x1cc>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f8fa 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e097      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f964 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e076      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	e021      	b.n	8004024 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f93e 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e050      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	6a39      	ldr	r1, [r7, #32]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f923 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e035      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2200      	movs	r2, #0
 8004068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f82b 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d103      	bne.n	8004090 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e013      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	4906      	ldr	r1, [pc, #24]	; (80040c4 <I2C_RequestMemoryRead+0x1cc>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f863 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d8:	e025      	b.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d021      	beq.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fe fea9 	bl	8002e38 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e023      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10d      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	e00c      	b.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d0b6      	beq.n	80040da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004184:	e051      	b.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d123      	bne.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0204 	orr.w	r2, r3, #4
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e046      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d021      	beq.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fe fe27 	bl	8002e38 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e020      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e00b      	b.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	43da      	mvns	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d18d      	bne.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004280:	e02d      	b.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8ce 	bl	8004424 <I2C_IsAcknowledgeFailed>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e02d      	b.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d021      	beq.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fdcd 	bl	8002e38 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e007      	b.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d1ca      	bne.n	8004282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004302:	e02d      	b.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f88d 	bl	8004424 <I2C_IsAcknowledgeFailed>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e02d      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d021      	beq.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fe fd8c 	bl	8002e38 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d116      	bne.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e007      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d1ca      	bne.n	8004304 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004384:	e042      	b.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d119      	bne.n	80043c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e029      	b.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fe fd36 	bl	8002e38 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e007      	b.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d1b5      	bne.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d11b      	bne.n	8004474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e267      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d075      	beq.n	800458e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a2:	4b88      	ldr	r3, [pc, #544]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d00c      	beq.n	80044c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ae:	4b85      	ldr	r3, [pc, #532]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d112      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ba:	4b82      	ldr	r3, [pc, #520]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c8:	4b7e      	ldr	r3, [pc, #504]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d05b      	beq.n	800458c <HAL_RCC_OscConfig+0x108>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d157      	bne.n	800458c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e242      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x74>
 80044ea:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a75      	ldr	r2, [pc, #468]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x98>
 8004502:	4b70      	ldr	r3, [pc, #448]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6f      	ldr	r2, [pc, #444]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b6d      	ldr	r3, [pc, #436]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6c      	ldr	r2, [pc, #432]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0xb0>
 800451c:	4b69      	ldr	r3, [pc, #420]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a68      	ldr	r2, [pc, #416]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a65      	ldr	r2, [pc, #404]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe fc7c 	bl	8002e38 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004544:	f7fe fc78 	bl	8002e38 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e207      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xc0>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fe fc68 	bl	8002e38 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800456c:	f7fe fc64 	bl	8002e38 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e1f3      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0xe8>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d063      	beq.n	8004662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a6:	4b47      	ldr	r3, [pc, #284]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11c      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b2:	4b44      	ldr	r3, [pc, #272]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1c7      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4937      	ldr	r1, [pc, #220]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	e03a      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f4:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <HAL_RCC_OscConfig+0x244>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fe fc1d 	bl	8002e38 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004602:	f7fe fc19 	bl	8002e38 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1a8      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004620:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4925      	ldr	r1, [pc, #148]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]
 8004634:	e015      	b.n	8004662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCC_OscConfig+0x244>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe fbfc 	bl	8002e38 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004644:	f7fe fbf8 	bl	8002e38 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e187      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d036      	beq.n	80046dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d016      	beq.n	80046a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_RCC_OscConfig+0x248>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fe fbdc 	bl	8002e38 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004684:	f7fe fbd8 	bl	8002e38 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e167      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_OscConfig+0x240>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x200>
 80046a2:	e01b      	b.n	80046dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_OscConfig+0x248>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046aa:	f7fe fbc5 	bl	8002e38 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b0:	e00e      	b.n	80046d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b2:	f7fe fbc1 	bl	8002e38 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d907      	bls.n	80046d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e150      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	42470000 	.word	0x42470000
 80046cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	4b88      	ldr	r3, [pc, #544]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ea      	bne.n	80046b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8097 	beq.w	8004818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ee:	4b81      	ldr	r3, [pc, #516]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10f      	bne.n	800471a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a7c      	ldr	r2, [pc, #496]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
 800470a:	4b7a      	ldr	r3, [pc, #488]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	4b77      	ldr	r3, [pc, #476]	; (80048f8 <HAL_RCC_OscConfig+0x474>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d118      	bne.n	8004758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004726:	4b74      	ldr	r3, [pc, #464]	; (80048f8 <HAL_RCC_OscConfig+0x474>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a73      	ldr	r2, [pc, #460]	; (80048f8 <HAL_RCC_OscConfig+0x474>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004732:	f7fe fb81 	bl	8002e38 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fe fb7d 	bl	8002e38 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e10c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <HAL_RCC_OscConfig+0x474>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d106      	bne.n	800476e <HAL_RCC_OscConfig+0x2ea>
 8004760:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a63      	ldr	r2, [pc, #396]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	e01c      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x30c>
 8004776:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	4a5e      	ldr	r2, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 800477c:	f043 0304 	orr.w	r3, r3, #4
 8004780:	6713      	str	r3, [r2, #112]	; 0x70
 8004782:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a5b      	ldr	r2, [pc, #364]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0x324>
 8004790:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	4b55      	ldr	r3, [pc, #340]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a54      	ldr	r2, [pc, #336]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 0304 	bic.w	r3, r3, #4
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fe fb42 	bl	8002e38 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b8:	f7fe fb3e 	bl	8002e38 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0cb      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0ee      	beq.n	80047b8 <HAL_RCC_OscConfig+0x334>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047dc:	f7fe fb2c 	bl	8002e38 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fe fb28 	bl	8002e38 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e0b5      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fa:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1ee      	bne.n	80047e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480c:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	4a38      	ldr	r2, [pc, #224]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80a1 	beq.w	8004964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004822:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b08      	cmp	r3, #8
 800482c:	d05c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d141      	bne.n	80048ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_RCC_OscConfig+0x478>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fe fafc 	bl	8002e38 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004844:	f7fe faf8 	bl	8002e38 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e087      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	3b01      	subs	r3, #1
 800487c:	041b      	lsls	r3, r3, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	491b      	ldr	r1, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x478>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fe fad1 	bl	8002e38 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800489a:	f7fe facd 	bl	8002e38 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e05c      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x416>
 80048b8:	e054      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_OscConfig+0x478>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe faba 	bl	8002e38 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fe fab6 	bl	8002e38 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e045      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x444>
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e038      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004900:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x4ec>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d028      	beq.n	8004960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d121      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d11a      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800

08004974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0cc      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004988:	4b68      	ldr	r3, [pc, #416]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90c      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d044      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d119      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d003      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e067      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f023 0203 	bic.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4934      	ldr	r1, [pc, #208]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a64:	f7fe f9e8 	bl	8002e38 <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	e00a      	b.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6c:	f7fe f9e4 	bl	8002e38 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e04f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a82:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 020c 	and.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d1eb      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d20c      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f948 	bl	8002db0 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023c00 	.word	0x40023c00
 8004b30:	40023800 	.word	0x40023800
 8004b34:	0800bc5c 	.word	0x0800bc5c
 8004b38:	20000008 	.word	0x20000008
 8004b3c:	2000000c 	.word	0x2000000c

08004b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b094      	sub	sp, #80	; 0x50
 8004b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b50:	2300      	movs	r3, #0
 8004b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b58:	4b79      	ldr	r3, [pc, #484]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d00d      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	f200 80e1 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b72:	e0db      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b74:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b78:	e0db      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b7a:	4b73      	ldr	r3, [pc, #460]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b7e:	e0d8      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b80:	4b6f      	ldr	r3, [pc, #444]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b96:	4b6a      	ldr	r3, [pc, #424]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	099b      	lsrs	r3, r3, #6
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ba0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8004baa:	2300      	movs	r3, #0
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
 8004bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	0159      	lsls	r1, r3, #5
 8004bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc4:	0150      	lsls	r0, r2, #5
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4621      	mov	r1, r4
 8004bcc:	1a51      	subs	r1, r2, r1
 8004bce:	6139      	str	r1, [r7, #16]
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be4:	4659      	mov	r1, fp
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bee:	4651      	mov	r1, sl
 8004bf0:	018a      	lsls	r2, r1, #6
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c12:	4690      	mov	r8, r2
 8004c14:	4699      	mov	r9, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	eb18 0303 	adds.w	r3, r8, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	462b      	mov	r3, r5
 8004c20:	eb49 0303 	adc.w	r3, r9, r3
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c32:	4629      	mov	r1, r5
 8004c34:	024b      	lsls	r3, r1, #9
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	024a      	lsls	r2, r1, #9
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c50:	f7fc f82a 	bl	8000ca8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4613      	mov	r3, r2
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c5c:	e058      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5e:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	2200      	movs	r2, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	4611      	mov	r1, r2
 8004c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	f04f 0000 	mov.w	r0, #0
 8004c80:	f04f 0100 	mov.w	r1, #0
 8004c84:	0159      	lsls	r1, r3, #5
 8004c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8a:	0150      	lsls	r0, r2, #5
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4641      	mov	r1, r8
 8004c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c96:	4649      	mov	r1, r9
 8004c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	00eb      	lsls	r3, r5, #3
 8004cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc6:	00e2      	lsls	r2, r4, #3
 8004cc8:	4614      	mov	r4, r2
 8004cca:	461d      	mov	r5, r3
 8004ccc:	4643      	mov	r3, r8
 8004cce:	18e3      	adds	r3, r4, r3
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	eb45 0303 	adc.w	r3, r5, r3
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	028b      	lsls	r3, r1, #10
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	028a      	lsls	r2, r1, #10
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	61fa      	str	r2, [r7, #28]
 8004d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d04:	f7fb ffd0 	bl	8000ca8 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3750      	adds	r7, #80	; 0x50
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000008 	.word	0x20000008

08004d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	0800bc6c 	.word	0x0800bc6c

08004d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d90:	f7ff ffdc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0b5b      	lsrs	r3, r3, #13
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	0800bc6c 	.word	0x0800bc6c

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e041      	b.n	8004e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fd fd4c 	bl	8002878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fda4 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e04e      	b.n	8004f0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a23      	ldr	r2, [pc, #140]	; (8004f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d022      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d01d      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d018      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x80>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d111      	bne.n	8004ef8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d010      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef6:	e007      	b.n	8004f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40010400 	.word	0x40010400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40001800 	.word	0x40001800

08004f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e041      	b.n	8004fca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fd fc6a 	bl	8002834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 fce4 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x24>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e022      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d109      	bne.n	8005012 <HAL_TIM_PWM_Start+0x3e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e015      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start+0x58>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e008      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e07c      	b.n	8005140 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0x82>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	e013      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0x92>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005064:	e00b      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005074:	e003      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 ff44 	bl	8005f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <HAL_TIM_PWM_Start+0x174>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_PWM_Start+0xcc>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_TIM_PWM_Start+0x178>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_PWM_Start+0xd0>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_PWM_Start+0xd2>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a22      	ldr	r2, [pc, #136]	; (8005148 <HAL_TIM_PWM_Start+0x174>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d01d      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <HAL_TIM_PWM_Start+0x17c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <HAL_TIM_PWM_Start+0x180>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <HAL_TIM_PWM_Start+0x184>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <HAL_TIM_PWM_Start+0x178>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a18      	ldr	r2, [pc, #96]	; (800515c <HAL_TIM_PWM_Start+0x188>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Start+0x136>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a16      	ldr	r2, [pc, #88]	; (8005160 <HAL_TIM_PWM_Start+0x18c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d111      	bne.n	800512e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b06      	cmp	r3, #6
 800511a:	d010      	beq.n	800513e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512c:	e007      	b.n	800513e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40014000 	.word	0x40014000
 8005160:	40001800 	.word	0x40001800

08005164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e097      	b.n	80052a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7fd fbaf 	bl	80028f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a8:	f023 0307 	bic.w	r3, r3, #7
 80051ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f000 fbc1 	bl	8005940 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	4313      	orrs	r3, r2
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005204:	f023 030c 	bic.w	r3, r3, #12
 8005208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	4313      	orrs	r3, r2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	011a      	lsls	r2, r3, #4
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	031b      	lsls	r3, r3, #12
 8005234:	4313      	orrs	r3, r2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4313      	orrs	r3, r2
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d110      	bne.n	8005302 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d102      	bne.n	80052ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052e6:	7b7b      	ldrb	r3, [r7, #13]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d001      	beq.n	80052f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e069      	b.n	80053c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005300:	e031      	b.n	8005366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d110      	bne.n	800532a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800530e:	7b3b      	ldrb	r3, [r7, #12]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d001      	beq.n	8005318 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e055      	b.n	80053c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005328:	e01d      	b.n	8005366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d108      	bne.n	8005342 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	7b7b      	ldrb	r3, [r7, #13]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d102      	bne.n	8005342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800533c:	7b3b      	ldrb	r3, [r7, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d001      	beq.n	8005346 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e03e      	b.n	80053c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2202      	movs	r2, #2
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_TIM_Encoder_Start+0xc4>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d008      	beq.n	8005384 <HAL_TIM_Encoder_Start+0xd4>
 8005372:	e00f      	b.n	8005394 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2201      	movs	r2, #1
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fdc9 	bl	8005f14 <TIM_CCxChannelCmd>
      break;
 8005382:	e016      	b.n	80053b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2201      	movs	r2, #1
 800538a:	2104      	movs	r1, #4
 800538c:	4618      	mov	r0, r3
 800538e:	f000 fdc1 	bl	8005f14 <TIM_CCxChannelCmd>
      break;
 8005392:	e00e      	b.n	80053b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fdb9 	bl	8005f14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2201      	movs	r2, #1
 80053a8:	2104      	movs	r1, #4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fdb2 	bl	8005f14 <TIM_CCxChannelCmd>
      break;
 80053b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0202 	mvn.w	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa77 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa69 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa7a 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b04      	cmp	r3, #4
 8005434:	d122      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0204 	mvn.w	r2, #4
 800544c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa4d 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005468:	e005      	b.n	8005476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa3f 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa50 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b08      	cmp	r3, #8
 8005488:	d122      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d11b      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0208 	mvn.w	r2, #8
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa23 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa15 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa26 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0210 	mvn.w	r2, #16
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2208      	movs	r2, #8
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9f9 	bl	8005902 <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9eb 	bl	80058ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9fc 	bl	8005916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0201 	mvn.w	r2, #1
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f88e 	bl	800166c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b80      	cmp	r3, #128	; 0x80
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b80      	cmp	r3, #128	; 0x80
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fdca 	bl	8006110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9c1 	bl	800592a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d10e      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d107      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0220 	mvn.w	r2, #32
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fd94 	bl	80060fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0ae      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b0c      	cmp	r3, #12
 8005606:	f200 809f 	bhi.w	8005748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005645 	.word	0x08005645
 8005614:	08005749 	.word	0x08005749
 8005618:	08005749 	.word	0x08005749
 800561c:	08005749 	.word	0x08005749
 8005620:	08005685 	.word	0x08005685
 8005624:	08005749 	.word	0x08005749
 8005628:	08005749 	.word	0x08005749
 800562c:	08005749 	.word	0x08005749
 8005630:	080056c7 	.word	0x080056c7
 8005634:	08005749 	.word	0x08005749
 8005638:	08005749 	.word	0x08005749
 800563c:	08005749 	.word	0x08005749
 8005640:	08005707 	.word	0x08005707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa18 	bl	8005a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0204 	bic.w	r2, r2, #4
 800566e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
      break;
 8005682:	e064      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa68 	bl	8005b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	619a      	str	r2, [r3, #24]
      break;
 80056c4:	e043      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fabd 	bl	8005c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0208 	orr.w	r2, r2, #8
 80056e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0204 	bic.w	r2, r2, #4
 80056f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	61da      	str	r2, [r3, #28]
      break;
 8005704:	e023      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fb11 	bl	8005d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	021a      	lsls	r2, r3, #8
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	61da      	str	r2, [r3, #28]
      break;
 8005746:	e002      	b.n	800574e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIM_ConfigClockSource+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e0b4      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x186>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800579a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b4:	d03e      	beq.n	8005834 <HAL_TIM_ConfigClockSource+0xd4>
 80057b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ba:	f200 8087 	bhi.w	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	f000 8086 	beq.w	80058d2 <HAL_TIM_ConfigClockSource+0x172>
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ca:	d87f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057cc:	2b70      	cmp	r3, #112	; 0x70
 80057ce:	d01a      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xa6>
 80057d0:	2b70      	cmp	r3, #112	; 0x70
 80057d2:	d87b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057d4:	2b60      	cmp	r3, #96	; 0x60
 80057d6:	d050      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x11a>
 80057d8:	2b60      	cmp	r3, #96	; 0x60
 80057da:	d877      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057dc:	2b50      	cmp	r3, #80	; 0x50
 80057de:	d03c      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xfa>
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d873      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d058      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x13a>
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d86f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	d064      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 80057f0:	2b30      	cmp	r3, #48	; 0x30
 80057f2:	d86b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d060      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d867      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 8005800:	2b10      	cmp	r3, #16
 8005802:	d05a      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	e062      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6899      	ldr	r1, [r3, #8]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f000 fb5d 	bl	8005ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	609a      	str	r2, [r3, #8]
      break;
 8005832:	e04f      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6899      	ldr	r1, [r3, #8]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f000 fb46 	bl	8005ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005856:	609a      	str	r2, [r3, #8]
      break;
 8005858:	e03c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	461a      	mov	r2, r3
 8005868:	f000 faba 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2150      	movs	r1, #80	; 0x50
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fb13 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005878:	e02c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	461a      	mov	r2, r3
 8005888:	f000 fad9 	bl	8005e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2160      	movs	r1, #96	; 0x60
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb03 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005898:	e01c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 fa9a 	bl	8005de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 faf3 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 80058b8:	e00c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f000 faea 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 80058ca:	e003      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	e000      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a40      	ldr	r2, [pc, #256]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595e:	d00f      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3d      	ldr	r2, [pc, #244]	; (8005a58 <TIM_Base_SetConfig+0x118>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3c      	ldr	r2, [pc, #240]	; (8005a5c <TIM_Base_SetConfig+0x11c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <TIM_Base_SetConfig+0x120>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2f      	ldr	r2, [pc, #188]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a0:	d027      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <TIM_Base_SetConfig+0x118>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d023      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2b      	ldr	r2, [pc, #172]	; (8005a5c <TIM_Base_SetConfig+0x11c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <TIM_Base_SetConfig+0x120>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a29      	ldr	r2, [pc, #164]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d017      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a28      	ldr	r2, [pc, #160]	; (8005a68 <TIM_Base_SetConfig+0x128>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <TIM_Base_SetConfig+0x12c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <TIM_Base_SetConfig+0x130>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <TIM_Base_SetConfig+0x134>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a24      	ldr	r2, [pc, #144]	; (8005a78 <TIM_Base_SetConfig+0x138>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <TIM_Base_SetConfig+0x13c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d108      	bne.n	8005a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0xf8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	615a      	str	r2, [r3, #20]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40010400 	.word	0x40010400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800
 8005a74:	40001800 	.word	0x40001800
 8005a78:	40001c00 	.word	0x40001c00
 8005a7c:	40002000 	.word	0x40002000

08005a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 0302 	bic.w	r3, r3, #2
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <TIM_OC1_SetConfig+0xd8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC1_SetConfig+0x64>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1f      	ldr	r2, [pc, #124]	; (8005b5c <TIM_OC1_SetConfig+0xdc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10c      	bne.n	8005afe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0308 	bic.w	r3, r3, #8
 8005aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0304 	bic.w	r3, r3, #4
 8005afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <TIM_OC1_SetConfig+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d003      	beq.n	8005b0e <TIM_OC1_SetConfig+0x8e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <TIM_OC1_SetConfig+0xdc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d111      	bne.n	8005b32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	621a      	str	r2, [r3, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400

08005b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f023 0210 	bic.w	r2, r3, #16
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0320 	bic.w	r3, r3, #32
 8005baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <TIM_OC2_SetConfig+0xe4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC2_SetConfig+0x68>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <TIM_OC2_SetConfig+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10d      	bne.n	8005be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <TIM_OC2_SetConfig+0xe4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0x94>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <TIM_OC2_SetConfig+0xe8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40010400 	.word	0x40010400

08005c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <TIM_OC3_SetConfig+0xe0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0x66>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <TIM_OC3_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10d      	bne.n	8005cce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC3_SetConfig+0xe0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC3_SetConfig+0x92>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC3_SetConfig+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d113      	bne.n	8005d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400

08005d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	031b      	lsls	r3, r3, #12
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <TIM_OC4_SetConfig+0xa4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC4_SetConfig+0x68>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <TIM_OC4_SetConfig+0xa8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d109      	bne.n	8005db0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	019b      	lsls	r3, r3, #6
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40010000 	.word	0x40010000
 8005ddc:	40010400 	.word	0x40010400

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f023 0210 	bic.w	r2, r3, #16
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f043 0307 	orr.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2201      	movs	r2, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1a      	ldr	r2, [r3, #32]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	401a      	ands	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1a      	ldr	r2, [r3, #32]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e05a      	b.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc4:	d01d      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a15      	ldr	r2, [pc, #84]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10c      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4313      	orrs	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40001800 	.word	0x40001800

08006058 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006070:	2302      	movs	r3, #2
 8006072:	e03d      	b.n	80060f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e03f      	b.n	80061b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc fcda 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fddf 	bl	8006d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800617c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800618c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800619c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b08a      	sub	sp, #40	; 0x28
 80061c2:	af02      	add	r7, sp, #8
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	603b      	str	r3, [r7, #0]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d17c      	bne.n	80062d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_UART_Transmit+0x2c>
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e075      	b.n	80062da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_UART_Transmit+0x3e>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e06e      	b.n	80062da <HAL_UART_Transmit+0x11c>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2221      	movs	r2, #33	; 0x21
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006212:	f7fc fe11 	bl	8002e38 <HAL_GetTick>
 8006216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	88fa      	ldrh	r2, [r7, #6]
 8006222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622c:	d108      	bne.n	8006240 <HAL_UART_Transmit+0x82>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e003      	b.n	8006248 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006250:	e02a      	b.n	80062a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2200      	movs	r2, #0
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fb1f 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e036      	b.n	80062da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3302      	adds	r3, #2
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	e007      	b.n	800629a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1cf      	bne.n	8006252 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	2140      	movs	r1, #64	; 0x40
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 faef 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e006      	b.n	80062da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	4613      	mov	r3, r2
 80062ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d11d      	bne.n	8006338 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_UART_Receive_IT+0x26>
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e016      	b.n	800633a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_UART_Receive_IT+0x38>
 8006316:	2302      	movs	r3, #2
 8006318:	e00f      	b.n	800633a <HAL_UART_Receive_IT+0x58>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	461a      	mov	r2, r3
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fb24 	bl	800697c <UART_Start_Receive_IT>
 8006334:	4603      	mov	r3, r0
 8006336:	e000      	b.n	800633a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b0ba      	sub	sp, #232	; 0xe8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_UART_IRQHandler+0x66>
 8006396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc07 	bl	8006bb6 <UART_Receive_IT>
      return;
 80063a8:	e256      	b.n	8006858 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80de 	beq.w	8006570 <HAL_UART_IRQHandler+0x22c>
 80063b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80d1 	beq.w	8006570 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_UART_IRQHandler+0xae>
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0201 	orr.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0xd2>
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f043 0202 	orr.w	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <HAL_UART_IRQHandler+0xf6>
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d011      	beq.n	800646a <HAL_UART_IRQHandler+0x126>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0208 	orr.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 81ed 	beq.w	800684e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_UART_IRQHandler+0x14e>
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fb92 	bl	8006bb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_UART_IRQHandler+0x17a>
 80064b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04f      	beq.n	800655e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa9a 	bl	80069f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d141      	bne.n	8006556 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3314      	adds	r3, #20
 80064d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3314      	adds	r3, #20
 80064fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800650a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1d9      	bne.n	80064d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	4a7d      	ldr	r2, [pc, #500]	; (8006720 <HAL_UART_IRQHandler+0x3dc>)
 800652c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	4618      	mov	r0, r3
 8006534:	f7fc fe0d 	bl	8003152 <HAL_DMA_Abort_IT>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	e00e      	b.n	800656c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f990 	bl	8006874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	e00a      	b.n	800656c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f98c 	bl	8006874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	e006      	b.n	800656c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f988 	bl	8006874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800656a:	e170      	b.n	800684e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	bf00      	nop
    return;
 800656e:	e16e      	b.n	800684e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 814a 	bne.w	800680e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8143 	beq.w	800680e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 813c 	beq.w	800680e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	f040 80b4 	bne.w	8006724 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8140 	beq.w	8006852 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065da:	429a      	cmp	r2, r3
 80065dc:	f080 8139 	bcs.w	8006852 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f2:	f000 8088 	beq.w	8006706 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800660c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800662e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800663a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1d9      	bne.n	80065f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3314      	adds	r3, #20
 8006662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006666:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800666a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800666e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e1      	bne.n	8006642 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3314      	adds	r3, #20
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800668e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3314      	adds	r3, #20
 800669e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e3      	bne.n	800667e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e3      	bne.n	80066c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	4618      	mov	r0, r3
 8006702:	f7fc fcb6 	bl	8003072 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800670e:	b29b      	uxth	r3, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8b6 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800671c:	e099      	b.n	8006852 <HAL_UART_IRQHandler+0x50e>
 800671e:	bf00      	nop
 8006720:	08006abf 	.word	0x08006abf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800672c:	b29b      	uxth	r3, r3
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 808b 	beq.w	8006856 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8086 	beq.w	8006856 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800676e:	647a      	str	r2, [r7, #68]	; 0x44
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e3      	bne.n	800674a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067a6:	633a      	str	r2, [r7, #48]	; 0x30
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e3      	bne.n	8006782 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067ec:	61fa      	str	r2, [r7, #28]
 80067ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69b9      	ldr	r1, [r7, #24]
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	617b      	str	r3, [r7, #20]
   return(result);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e3      	bne.n	80067c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f83e 	bl	8006888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800680c:	e023      	b.n	8006856 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <HAL_UART_IRQHandler+0x4ea>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f95d 	bl	8006ae6 <UART_Transmit_IT>
    return;
 800682c:	e014      	b.n	8006858 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <HAL_UART_IRQHandler+0x514>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f99d 	bl	8006b86 <UART_EndTransmit_IT>
    return;
 800684c:	e004      	b.n	8006858 <HAL_UART_IRQHandler+0x514>
    return;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <HAL_UART_IRQHandler+0x514>
      return;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <HAL_UART_IRQHandler+0x514>
      return;
 8006856:	bf00      	nop
  }
}
 8006858:	37e8      	adds	r7, #232	; 0xe8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b090      	sub	sp, #64	; 0x40
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b0:	e050      	b.n	8006954 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d04c      	beq.n	8006954 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d007      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068c0:	f7fc faba 	bl	8002e38 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d241      	bcs.n	8006954 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068f0:	637a      	str	r2, [r7, #52]	; 0x34
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	613b      	str	r3, [r7, #16]
   return(result);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006924:	623a      	str	r2, [r7, #32]
 8006926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	61bb      	str	r3, [r7, #24]
   return(result);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e00f      	b.n	8006974 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	4013      	ands	r3, r2
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	429a      	cmp	r2, r3
 8006970:	d09f      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3740      	adds	r7, #64	; 0x40
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	88fa      	ldrh	r2, [r7, #6]
 800699a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2222      	movs	r2, #34	; 0x22
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0220 	orr.w	r2, r2, #32
 80069e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b095      	sub	sp, #84	; 0x54
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a20:	643a      	str	r2, [r7, #64]	; 0x40
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e5      	bne.n	8006a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e5      	bne.n	8006a34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d119      	bne.n	8006aa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0310 	bic.w	r3, r3, #16
 8006a86:	647b      	str	r3, [r7, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a90:	61ba      	str	r2, [r7, #24]
 8006a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6979      	ldr	r1, [r7, #20]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e5      	bne.n	8006a70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ab2:	bf00      	nop
 8006ab4:	3754      	adds	r7, #84	; 0x54
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fecb 	bl	8006874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b21      	cmp	r3, #33	; 0x21
 8006af8:	d13e      	bne.n	8006b78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d114      	bne.n	8006b2e <UART_Transmit_IT+0x48>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	621a      	str	r2, [r3, #32]
 8006b2c:	e008      	b.n	8006b40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6211      	str	r1, [r2, #32]
 8006b38:	781a      	ldrb	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fe5a 	bl	8006860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b08c      	sub	sp, #48	; 0x30
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b22      	cmp	r3, #34	; 0x22
 8006bc8:	f040 80ab 	bne.w	8006d22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd4:	d117      	bne.n	8006c06 <UART_Receive_IT+0x50>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d113      	bne.n	8006c06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfe:	1c9a      	adds	r2, r3, #2
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
 8006c04:	e026      	b.n	8006c54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c18:	d007      	beq.n	8006c2a <UART_Receive_IT+0x74>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <UART_Receive_IT+0x82>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e008      	b.n	8006c4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4619      	mov	r1, r3
 8006c62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d15a      	bne.n	8006d1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0220 	bic.w	r2, r2, #32
 8006c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d135      	bne.n	8006d14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f023 0310 	bic.w	r3, r3, #16
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cce:	623a      	str	r2, [r7, #32]
 8006cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	69f9      	ldr	r1, [r7, #28]
 8006cd4:	6a3a      	ldr	r2, [r7, #32]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e5      	bne.n	8006cae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d10a      	bne.n	8006d06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fdbb 	bl	8006888 <HAL_UARTEx_RxEventCallback>
 8006d12:	e002      	b.n	8006d1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fa fc09 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e002      	b.n	8006d24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d22:	2302      	movs	r3, #2
  }
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3730      	adds	r7, #48	; 0x30
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d30:	b0c0      	sub	sp, #256	; 0x100
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	68d9      	ldr	r1, [r3, #12]
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	ea40 0301 	orr.w	r3, r0, r1
 8006d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d84:	f021 010c 	bic.w	r1, r1, #12
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d92:	430b      	orrs	r3, r1
 8006d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	6999      	ldr	r1, [r3, #24]
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	ea40 0301 	orr.w	r3, r0, r1
 8006db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b8f      	ldr	r3, [pc, #572]	; (8006ff8 <UART_SetConfig+0x2cc>)
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d005      	beq.n	8006dcc <UART_SetConfig+0xa0>
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b8d      	ldr	r3, [pc, #564]	; (8006ffc <UART_SetConfig+0x2d0>)
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d104      	bne.n	8006dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fd ffde 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 8006dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dd4:	e003      	b.n	8006dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dd6:	f7fd ffc5 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8006dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de8:	f040 810c 	bne.w	8007004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e06:	415b      	adcs	r3, r3
 8006e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e0e:	4621      	mov	r1, r4
 8006e10:	eb12 0801 	adds.w	r8, r2, r1
 8006e14:	4629      	mov	r1, r5
 8006e16:	eb43 0901 	adc.w	r9, r3, r1
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e2e:	4690      	mov	r8, r2
 8006e30:	4699      	mov	r9, r3
 8006e32:	4623      	mov	r3, r4
 8006e34:	eb18 0303 	adds.w	r3, r8, r3
 8006e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	eb49 0303 	adc.w	r3, r9, r3
 8006e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	18db      	adds	r3, r3, r3
 8006e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e60:	4613      	mov	r3, r2
 8006e62:	eb42 0303 	adc.w	r3, r2, r3
 8006e66:	657b      	str	r3, [r7, #84]	; 0x54
 8006e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e70:	f7f9 ff1a 	bl	8000ca8 <__aeabi_uldivmod>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4b61      	ldr	r3, [pc, #388]	; (8007000 <UART_SetConfig+0x2d4>)
 8006e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	011c      	lsls	r4, r3, #4
 8006e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e94:	4642      	mov	r2, r8
 8006e96:	464b      	mov	r3, r9
 8006e98:	1891      	adds	r1, r2, r2
 8006e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e9c:	415b      	adcs	r3, r3
 8006e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8006eaa:	4649      	mov	r1, r9
 8006eac:	eb43 0b01 	adc.w	fp, r3, r1
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ec4:	4692      	mov	sl, r2
 8006ec6:	469b      	mov	fp, r3
 8006ec8:	4643      	mov	r3, r8
 8006eca:	eb1a 0303 	adds.w	r3, sl, r3
 8006ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	18db      	adds	r3, r3, r3
 8006ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	eb42 0303 	adc.w	r3, r2, r3
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
 8006efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f06:	f7f9 fecf 	bl	8000ca8 <__aeabi_uldivmod>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <UART_SetConfig+0x2d4>)
 8006f12:	fba3 2301 	umull	r2, r3, r3, r1
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	2264      	movs	r2, #100	; 0x64
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	1acb      	subs	r3, r1, r3
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f26:	4b36      	ldr	r3, [pc, #216]	; (8007000 <UART_SetConfig+0x2d4>)
 8006f28:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f34:	441c      	add	r4, r3
 8006f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	1891      	adds	r1, r2, r2
 8006f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f50:	415b      	adcs	r3, r3
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f58:	4641      	mov	r1, r8
 8006f5a:	1851      	adds	r1, r2, r1
 8006f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8006f5e:	4649      	mov	r1, r9
 8006f60:	414b      	adcs	r3, r1
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f70:	4659      	mov	r1, fp
 8006f72:	00cb      	lsls	r3, r1, #3
 8006f74:	4651      	mov	r1, sl
 8006f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	00ca      	lsls	r2, r1, #3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	4603      	mov	r3, r0
 8006f84:	4642      	mov	r2, r8
 8006f86:	189b      	adds	r3, r3, r2
 8006f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	460a      	mov	r2, r1
 8006f90:	eb42 0303 	adc.w	r3, r2, r3
 8006f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fac:	460b      	mov	r3, r1
 8006fae:	18db      	adds	r3, r3, r3
 8006fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fc2:	f7f9 fe71 	bl	8000ca8 <__aeabi_uldivmod>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <UART_SetConfig+0x2d4>)
 8006fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	2164      	movs	r1, #100	; 0x64
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	3332      	adds	r3, #50	; 0x32
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <UART_SetConfig+0x2d4>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	f003 0207 	and.w	r2, r3, #7
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4422      	add	r2, r4
 8006ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ff4:	e106      	b.n	8007204 <UART_SetConfig+0x4d8>
 8006ff6:	bf00      	nop
 8006ff8:	40011000 	.word	0x40011000
 8006ffc:	40011400 	.word	0x40011400
 8007000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007008:	2200      	movs	r2, #0
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800700e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007016:	4642      	mov	r2, r8
 8007018:	464b      	mov	r3, r9
 800701a:	1891      	adds	r1, r2, r2
 800701c:	6239      	str	r1, [r7, #32]
 800701e:	415b      	adcs	r3, r3
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007026:	4641      	mov	r1, r8
 8007028:	1854      	adds	r4, r2, r1
 800702a:	4649      	mov	r1, r9
 800702c:	eb43 0501 	adc.w	r5, r3, r1
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	00eb      	lsls	r3, r5, #3
 800703a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800703e:	00e2      	lsls	r2, r4, #3
 8007040:	4614      	mov	r4, r2
 8007042:	461d      	mov	r5, r3
 8007044:	4643      	mov	r3, r8
 8007046:	18e3      	adds	r3, r4, r3
 8007048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800704c:	464b      	mov	r3, r9
 800704e:	eb45 0303 	adc.w	r3, r5, r3
 8007052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007072:	4629      	mov	r1, r5
 8007074:	008b      	lsls	r3, r1, #2
 8007076:	4621      	mov	r1, r4
 8007078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707c:	4621      	mov	r1, r4
 800707e:	008a      	lsls	r2, r1, #2
 8007080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007084:	f7f9 fe10 	bl	8000ca8 <__aeabi_uldivmod>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4b60      	ldr	r3, [pc, #384]	; (8007210 <UART_SetConfig+0x4e4>)
 800708e:	fba3 2302 	umull	r2, r3, r3, r2
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	011c      	lsls	r4, r3, #4
 8007096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800709a:	2200      	movs	r2, #0
 800709c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	61b9      	str	r1, [r7, #24]
 80070b0:	415b      	adcs	r3, r3
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b8:	4641      	mov	r1, r8
 80070ba:	1851      	adds	r1, r2, r1
 80070bc:	6139      	str	r1, [r7, #16]
 80070be:	4649      	mov	r1, r9
 80070c0:	414b      	adcs	r3, r1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070d0:	4659      	mov	r1, fp
 80070d2:	00cb      	lsls	r3, r1, #3
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070da:	4651      	mov	r1, sl
 80070dc:	00ca      	lsls	r2, r1, #3
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	4642      	mov	r2, r8
 80070e6:	189b      	adds	r3, r3, r2
 80070e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ec:	464b      	mov	r3, r9
 80070ee:	460a      	mov	r2, r1
 80070f0:	eb42 0303 	adc.w	r3, r2, r3
 80070f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	67bb      	str	r3, [r7, #120]	; 0x78
 8007102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007110:	4649      	mov	r1, r9
 8007112:	008b      	lsls	r3, r1, #2
 8007114:	4641      	mov	r1, r8
 8007116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800711a:	4641      	mov	r1, r8
 800711c:	008a      	lsls	r2, r1, #2
 800711e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007122:	f7f9 fdc1 	bl	8000ca8 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4611      	mov	r1, r2
 800712c:	4b38      	ldr	r3, [pc, #224]	; (8007210 <UART_SetConfig+0x4e4>)
 800712e:	fba3 2301 	umull	r2, r3, r3, r1
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	2264      	movs	r2, #100	; 0x64
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	1acb      	subs	r3, r1, r3
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	3332      	adds	r3, #50	; 0x32
 8007140:	4a33      	ldr	r2, [pc, #204]	; (8007210 <UART_SetConfig+0x4e4>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800714c:	441c      	add	r4, r3
 800714e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007152:	2200      	movs	r2, #0
 8007154:	673b      	str	r3, [r7, #112]	; 0x70
 8007156:	677a      	str	r2, [r7, #116]	; 0x74
 8007158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800715c:	4642      	mov	r2, r8
 800715e:	464b      	mov	r3, r9
 8007160:	1891      	adds	r1, r2, r2
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	415b      	adcs	r3, r3
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800716c:	4641      	mov	r1, r8
 800716e:	1851      	adds	r1, r2, r1
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	4649      	mov	r1, r9
 8007174:	414b      	adcs	r3, r1
 8007176:	607b      	str	r3, [r7, #4]
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007184:	4659      	mov	r1, fp
 8007186:	00cb      	lsls	r3, r1, #3
 8007188:	4651      	mov	r1, sl
 800718a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800718e:	4651      	mov	r1, sl
 8007190:	00ca      	lsls	r2, r1, #3
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	4603      	mov	r3, r0
 8007198:	4642      	mov	r2, r8
 800719a:	189b      	adds	r3, r3, r2
 800719c:	66bb      	str	r3, [r7, #104]	; 0x68
 800719e:	464b      	mov	r3, r9
 80071a0:	460a      	mov	r2, r1
 80071a2:	eb42 0303 	adc.w	r3, r2, r3
 80071a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	663b      	str	r3, [r7, #96]	; 0x60
 80071b2:	667a      	str	r2, [r7, #100]	; 0x64
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071c0:	4649      	mov	r1, r9
 80071c2:	008b      	lsls	r3, r1, #2
 80071c4:	4641      	mov	r1, r8
 80071c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ca:	4641      	mov	r1, r8
 80071cc:	008a      	lsls	r2, r1, #2
 80071ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071d2:	f7f9 fd69 	bl	8000ca8 <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <UART_SetConfig+0x4e4>)
 80071dc:	fba3 1302 	umull	r1, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	2164      	movs	r1, #100	; 0x64
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	3332      	adds	r3, #50	; 0x32
 80071ee:	4a08      	ldr	r2, [pc, #32]	; (8007210 <UART_SetConfig+0x4e4>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4422      	add	r2, r4
 8007202:	609a      	str	r2, [r3, #8]
}
 8007204:	bf00      	nop
 8007206:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800720a:	46bd      	mov	sp, r7
 800720c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007210:	51eb851f 	.word	0x51eb851f

08007214 <atoi>:
 8007214:	220a      	movs	r2, #10
 8007216:	2100      	movs	r1, #0
 8007218:	f000 b940 	b.w	800749c <strtol>

0800721c <malloc>:
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <malloc+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f000 b82b 	b.w	800727c <_malloc_r>
 8007226:	bf00      	nop
 8007228:	2000006c 	.word	0x2000006c

0800722c <free>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <free+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f002 b803 	b.w	800923c <_free_r>
 8007236:	bf00      	nop
 8007238:	2000006c 	.word	0x2000006c

0800723c <sbrk_aligned>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4e0e      	ldr	r6, [pc, #56]	; (8007278 <sbrk_aligned+0x3c>)
 8007240:	460c      	mov	r4, r1
 8007242:	6831      	ldr	r1, [r6, #0]
 8007244:	4605      	mov	r5, r0
 8007246:	b911      	cbnz	r1, 800724e <sbrk_aligned+0x12>
 8007248:	f001 f920 	bl	800848c <_sbrk_r>
 800724c:	6030      	str	r0, [r6, #0]
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f001 f91b 	bl	800848c <_sbrk_r>
 8007256:	1c43      	adds	r3, r0, #1
 8007258:	d00a      	beq.n	8007270 <sbrk_aligned+0x34>
 800725a:	1cc4      	adds	r4, r0, #3
 800725c:	f024 0403 	bic.w	r4, r4, #3
 8007260:	42a0      	cmp	r0, r4
 8007262:	d007      	beq.n	8007274 <sbrk_aligned+0x38>
 8007264:	1a21      	subs	r1, r4, r0
 8007266:	4628      	mov	r0, r5
 8007268:	f001 f910 	bl	800848c <_sbrk_r>
 800726c:	3001      	adds	r0, #1
 800726e:	d101      	bne.n	8007274 <sbrk_aligned+0x38>
 8007270:	f04f 34ff 	mov.w	r4, #4294967295
 8007274:	4620      	mov	r0, r4
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	2000055c 	.word	0x2000055c

0800727c <_malloc_r>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	1ccd      	adds	r5, r1, #3
 8007282:	f025 0503 	bic.w	r5, r5, #3
 8007286:	3508      	adds	r5, #8
 8007288:	2d0c      	cmp	r5, #12
 800728a:	bf38      	it	cc
 800728c:	250c      	movcc	r5, #12
 800728e:	2d00      	cmp	r5, #0
 8007290:	4607      	mov	r7, r0
 8007292:	db01      	blt.n	8007298 <_malloc_r+0x1c>
 8007294:	42a9      	cmp	r1, r5
 8007296:	d905      	bls.n	80072a4 <_malloc_r+0x28>
 8007298:	230c      	movs	r3, #12
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	2600      	movs	r6, #0
 800729e:	4630      	mov	r0, r6
 80072a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007378 <_malloc_r+0xfc>
 80072a8:	f000 f868 	bl	800737c <__malloc_lock>
 80072ac:	f8d8 3000 	ldr.w	r3, [r8]
 80072b0:	461c      	mov	r4, r3
 80072b2:	bb5c      	cbnz	r4, 800730c <_malloc_r+0x90>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4638      	mov	r0, r7
 80072b8:	f7ff ffc0 	bl	800723c <sbrk_aligned>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	4604      	mov	r4, r0
 80072c0:	d155      	bne.n	800736e <_malloc_r+0xf2>
 80072c2:	f8d8 4000 	ldr.w	r4, [r8]
 80072c6:	4626      	mov	r6, r4
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	d145      	bne.n	8007358 <_malloc_r+0xdc>
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d048      	beq.n	8007362 <_malloc_r+0xe6>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	4631      	mov	r1, r6
 80072d4:	4638      	mov	r0, r7
 80072d6:	eb04 0903 	add.w	r9, r4, r3
 80072da:	f001 f8d7 	bl	800848c <_sbrk_r>
 80072de:	4581      	cmp	r9, r0
 80072e0:	d13f      	bne.n	8007362 <_malloc_r+0xe6>
 80072e2:	6821      	ldr	r1, [r4, #0]
 80072e4:	1a6d      	subs	r5, r5, r1
 80072e6:	4629      	mov	r1, r5
 80072e8:	4638      	mov	r0, r7
 80072ea:	f7ff ffa7 	bl	800723c <sbrk_aligned>
 80072ee:	3001      	adds	r0, #1
 80072f0:	d037      	beq.n	8007362 <_malloc_r+0xe6>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	442b      	add	r3, r5
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	f8d8 3000 	ldr.w	r3, [r8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d038      	beq.n	8007372 <_malloc_r+0xf6>
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	42a2      	cmp	r2, r4
 8007304:	d12b      	bne.n	800735e <_malloc_r+0xe2>
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	e00f      	b.n	800732c <_malloc_r+0xb0>
 800730c:	6822      	ldr	r2, [r4, #0]
 800730e:	1b52      	subs	r2, r2, r5
 8007310:	d41f      	bmi.n	8007352 <_malloc_r+0xd6>
 8007312:	2a0b      	cmp	r2, #11
 8007314:	d917      	bls.n	8007346 <_malloc_r+0xca>
 8007316:	1961      	adds	r1, r4, r5
 8007318:	42a3      	cmp	r3, r4
 800731a:	6025      	str	r5, [r4, #0]
 800731c:	bf18      	it	ne
 800731e:	6059      	strne	r1, [r3, #4]
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	bf08      	it	eq
 8007324:	f8c8 1000 	streq.w	r1, [r8]
 8007328:	5162      	str	r2, [r4, r5]
 800732a:	604b      	str	r3, [r1, #4]
 800732c:	4638      	mov	r0, r7
 800732e:	f104 060b 	add.w	r6, r4, #11
 8007332:	f000 f829 	bl	8007388 <__malloc_unlock>
 8007336:	f026 0607 	bic.w	r6, r6, #7
 800733a:	1d23      	adds	r3, r4, #4
 800733c:	1af2      	subs	r2, r6, r3
 800733e:	d0ae      	beq.n	800729e <_malloc_r+0x22>
 8007340:	1b9b      	subs	r3, r3, r6
 8007342:	50a3      	str	r3, [r4, r2]
 8007344:	e7ab      	b.n	800729e <_malloc_r+0x22>
 8007346:	42a3      	cmp	r3, r4
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	d1dd      	bne.n	8007308 <_malloc_r+0x8c>
 800734c:	f8c8 2000 	str.w	r2, [r8]
 8007350:	e7ec      	b.n	800732c <_malloc_r+0xb0>
 8007352:	4623      	mov	r3, r4
 8007354:	6864      	ldr	r4, [r4, #4]
 8007356:	e7ac      	b.n	80072b2 <_malloc_r+0x36>
 8007358:	4634      	mov	r4, r6
 800735a:	6876      	ldr	r6, [r6, #4]
 800735c:	e7b4      	b.n	80072c8 <_malloc_r+0x4c>
 800735e:	4613      	mov	r3, r2
 8007360:	e7cc      	b.n	80072fc <_malloc_r+0x80>
 8007362:	230c      	movs	r3, #12
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4638      	mov	r0, r7
 8007368:	f000 f80e 	bl	8007388 <__malloc_unlock>
 800736c:	e797      	b.n	800729e <_malloc_r+0x22>
 800736e:	6025      	str	r5, [r4, #0]
 8007370:	e7dc      	b.n	800732c <_malloc_r+0xb0>
 8007372:	605b      	str	r3, [r3, #4]
 8007374:	deff      	udf	#255	; 0xff
 8007376:	bf00      	nop
 8007378:	20000558 	.word	0x20000558

0800737c <__malloc_lock>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__malloc_lock+0x8>)
 800737e:	f001 b8d2 	b.w	8008526 <__retarget_lock_acquire_recursive>
 8007382:	bf00      	nop
 8007384:	200006a0 	.word	0x200006a0

08007388 <__malloc_unlock>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__malloc_unlock+0x8>)
 800738a:	f001 b8cd 	b.w	8008528 <__retarget_lock_release_recursive>
 800738e:	bf00      	nop
 8007390:	200006a0 	.word	0x200006a0

08007394 <_strtol_l.constprop.0>:
 8007394:	2b01      	cmp	r3, #1
 8007396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739a:	d001      	beq.n	80073a0 <_strtol_l.constprop.0+0xc>
 800739c:	2b24      	cmp	r3, #36	; 0x24
 800739e:	d906      	bls.n	80073ae <_strtol_l.constprop.0+0x1a>
 80073a0:	f001 f896 	bl	80084d0 <__errno>
 80073a4:	2316      	movs	r3, #22
 80073a6:	6003      	str	r3, [r0, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007494 <_strtol_l.constprop.0+0x100>
 80073b2:	460d      	mov	r5, r1
 80073b4:	462e      	mov	r6, r5
 80073b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80073be:	f017 0708 	ands.w	r7, r7, #8
 80073c2:	d1f7      	bne.n	80073b4 <_strtol_l.constprop.0+0x20>
 80073c4:	2c2d      	cmp	r4, #45	; 0x2d
 80073c6:	d132      	bne.n	800742e <_strtol_l.constprop.0+0x9a>
 80073c8:	782c      	ldrb	r4, [r5, #0]
 80073ca:	2701      	movs	r7, #1
 80073cc:	1cb5      	adds	r5, r6, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d05b      	beq.n	800748a <_strtol_l.constprop.0+0xf6>
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d109      	bne.n	80073ea <_strtol_l.constprop.0+0x56>
 80073d6:	2c30      	cmp	r4, #48	; 0x30
 80073d8:	d107      	bne.n	80073ea <_strtol_l.constprop.0+0x56>
 80073da:	782c      	ldrb	r4, [r5, #0]
 80073dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80073e0:	2c58      	cmp	r4, #88	; 0x58
 80073e2:	d14d      	bne.n	8007480 <_strtol_l.constprop.0+0xec>
 80073e4:	786c      	ldrb	r4, [r5, #1]
 80073e6:	2310      	movs	r3, #16
 80073e8:	3502      	adds	r5, #2
 80073ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80073ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80073f2:	f04f 0e00 	mov.w	lr, #0
 80073f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80073fa:	4676      	mov	r6, lr
 80073fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007400:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007404:	f1bc 0f09 	cmp.w	ip, #9
 8007408:	d816      	bhi.n	8007438 <_strtol_l.constprop.0+0xa4>
 800740a:	4664      	mov	r4, ip
 800740c:	42a3      	cmp	r3, r4
 800740e:	dd24      	ble.n	800745a <_strtol_l.constprop.0+0xc6>
 8007410:	f1be 3fff 	cmp.w	lr, #4294967295
 8007414:	d008      	beq.n	8007428 <_strtol_l.constprop.0+0x94>
 8007416:	45b1      	cmp	r9, r6
 8007418:	d31c      	bcc.n	8007454 <_strtol_l.constprop.0+0xc0>
 800741a:	d101      	bne.n	8007420 <_strtol_l.constprop.0+0x8c>
 800741c:	45a2      	cmp	sl, r4
 800741e:	db19      	blt.n	8007454 <_strtol_l.constprop.0+0xc0>
 8007420:	fb06 4603 	mla	r6, r6, r3, r4
 8007424:	f04f 0e01 	mov.w	lr, #1
 8007428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800742c:	e7e8      	b.n	8007400 <_strtol_l.constprop.0+0x6c>
 800742e:	2c2b      	cmp	r4, #43	; 0x2b
 8007430:	bf04      	itt	eq
 8007432:	782c      	ldrbeq	r4, [r5, #0]
 8007434:	1cb5      	addeq	r5, r6, #2
 8007436:	e7ca      	b.n	80073ce <_strtol_l.constprop.0+0x3a>
 8007438:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800743c:	f1bc 0f19 	cmp.w	ip, #25
 8007440:	d801      	bhi.n	8007446 <_strtol_l.constprop.0+0xb2>
 8007442:	3c37      	subs	r4, #55	; 0x37
 8007444:	e7e2      	b.n	800740c <_strtol_l.constprop.0+0x78>
 8007446:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800744a:	f1bc 0f19 	cmp.w	ip, #25
 800744e:	d804      	bhi.n	800745a <_strtol_l.constprop.0+0xc6>
 8007450:	3c57      	subs	r4, #87	; 0x57
 8007452:	e7db      	b.n	800740c <_strtol_l.constprop.0+0x78>
 8007454:	f04f 3eff 	mov.w	lr, #4294967295
 8007458:	e7e6      	b.n	8007428 <_strtol_l.constprop.0+0x94>
 800745a:	f1be 3fff 	cmp.w	lr, #4294967295
 800745e:	d105      	bne.n	800746c <_strtol_l.constprop.0+0xd8>
 8007460:	2322      	movs	r3, #34	; 0x22
 8007462:	6003      	str	r3, [r0, #0]
 8007464:	4646      	mov	r6, r8
 8007466:	b942      	cbnz	r2, 800747a <_strtol_l.constprop.0+0xe6>
 8007468:	4630      	mov	r0, r6
 800746a:	e79e      	b.n	80073aa <_strtol_l.constprop.0+0x16>
 800746c:	b107      	cbz	r7, 8007470 <_strtol_l.constprop.0+0xdc>
 800746e:	4276      	negs	r6, r6
 8007470:	2a00      	cmp	r2, #0
 8007472:	d0f9      	beq.n	8007468 <_strtol_l.constprop.0+0xd4>
 8007474:	f1be 0f00 	cmp.w	lr, #0
 8007478:	d000      	beq.n	800747c <_strtol_l.constprop.0+0xe8>
 800747a:	1e69      	subs	r1, r5, #1
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	e7f3      	b.n	8007468 <_strtol_l.constprop.0+0xd4>
 8007480:	2430      	movs	r4, #48	; 0x30
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1b1      	bne.n	80073ea <_strtol_l.constprop.0+0x56>
 8007486:	2308      	movs	r3, #8
 8007488:	e7af      	b.n	80073ea <_strtol_l.constprop.0+0x56>
 800748a:	2c30      	cmp	r4, #48	; 0x30
 800748c:	d0a5      	beq.n	80073da <_strtol_l.constprop.0+0x46>
 800748e:	230a      	movs	r3, #10
 8007490:	e7ab      	b.n	80073ea <_strtol_l.constprop.0+0x56>
 8007492:	bf00      	nop
 8007494:	0800bc75 	.word	0x0800bc75

08007498 <_strtol_r>:
 8007498:	f7ff bf7c 	b.w	8007394 <_strtol_l.constprop.0>

0800749c <strtol>:
 800749c:	4613      	mov	r3, r2
 800749e:	460a      	mov	r2, r1
 80074a0:	4601      	mov	r1, r0
 80074a2:	4802      	ldr	r0, [pc, #8]	; (80074ac <strtol+0x10>)
 80074a4:	6800      	ldr	r0, [r0, #0]
 80074a6:	f7ff bf75 	b.w	8007394 <_strtol_l.constprop.0>
 80074aa:	bf00      	nop
 80074ac:	2000006c 	.word	0x2000006c

080074b0 <__cvt>:
 80074b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	ec55 4b10 	vmov	r4, r5, d0
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	460e      	mov	r6, r1
 80074bc:	4619      	mov	r1, r3
 80074be:	462b      	mov	r3, r5
 80074c0:	bfbb      	ittet	lt
 80074c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074c6:	461d      	movlt	r5, r3
 80074c8:	2300      	movge	r3, #0
 80074ca:	232d      	movlt	r3, #45	; 0x2d
 80074cc:	700b      	strb	r3, [r1, #0]
 80074ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074d4:	4691      	mov	r9, r2
 80074d6:	f023 0820 	bic.w	r8, r3, #32
 80074da:	bfbc      	itt	lt
 80074dc:	4622      	movlt	r2, r4
 80074de:	4614      	movlt	r4, r2
 80074e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074e4:	d005      	beq.n	80074f2 <__cvt+0x42>
 80074e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074ea:	d100      	bne.n	80074ee <__cvt+0x3e>
 80074ec:	3601      	adds	r6, #1
 80074ee:	2102      	movs	r1, #2
 80074f0:	e000      	b.n	80074f4 <__cvt+0x44>
 80074f2:	2103      	movs	r1, #3
 80074f4:	ab03      	add	r3, sp, #12
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	ab02      	add	r3, sp, #8
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	ec45 4b10 	vmov	d0, r4, r5
 8007500:	4653      	mov	r3, sl
 8007502:	4632      	mov	r2, r6
 8007504:	f001 f8a8 	bl	8008658 <_dtoa_r>
 8007508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800750c:	4607      	mov	r7, r0
 800750e:	d102      	bne.n	8007516 <__cvt+0x66>
 8007510:	f019 0f01 	tst.w	r9, #1
 8007514:	d022      	beq.n	800755c <__cvt+0xac>
 8007516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800751a:	eb07 0906 	add.w	r9, r7, r6
 800751e:	d110      	bne.n	8007542 <__cvt+0x92>
 8007520:	783b      	ldrb	r3, [r7, #0]
 8007522:	2b30      	cmp	r3, #48	; 0x30
 8007524:	d10a      	bne.n	800753c <__cvt+0x8c>
 8007526:	2200      	movs	r2, #0
 8007528:	2300      	movs	r3, #0
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	f7f9 fadb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007532:	b918      	cbnz	r0, 800753c <__cvt+0x8c>
 8007534:	f1c6 0601 	rsb	r6, r6, #1
 8007538:	f8ca 6000 	str.w	r6, [sl]
 800753c:	f8da 3000 	ldr.w	r3, [sl]
 8007540:	4499      	add	r9, r3
 8007542:	2200      	movs	r2, #0
 8007544:	2300      	movs	r3, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 facd 	bl	8000ae8 <__aeabi_dcmpeq>
 800754e:	b108      	cbz	r0, 8007554 <__cvt+0xa4>
 8007550:	f8cd 900c 	str.w	r9, [sp, #12]
 8007554:	2230      	movs	r2, #48	; 0x30
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	454b      	cmp	r3, r9
 800755a:	d307      	bcc.n	800756c <__cvt+0xbc>
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007560:	1bdb      	subs	r3, r3, r7
 8007562:	4638      	mov	r0, r7
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	b004      	add	sp, #16
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	9103      	str	r1, [sp, #12]
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	e7f0      	b.n	8007556 <__cvt+0xa6>

08007574 <__exponent>:
 8007574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007576:	4603      	mov	r3, r0
 8007578:	2900      	cmp	r1, #0
 800757a:	bfb8      	it	lt
 800757c:	4249      	neglt	r1, r1
 800757e:	f803 2b02 	strb.w	r2, [r3], #2
 8007582:	bfb4      	ite	lt
 8007584:	222d      	movlt	r2, #45	; 0x2d
 8007586:	222b      	movge	r2, #43	; 0x2b
 8007588:	2909      	cmp	r1, #9
 800758a:	7042      	strb	r2, [r0, #1]
 800758c:	dd2a      	ble.n	80075e4 <__exponent+0x70>
 800758e:	f10d 0207 	add.w	r2, sp, #7
 8007592:	4617      	mov	r7, r2
 8007594:	260a      	movs	r6, #10
 8007596:	4694      	mov	ip, r2
 8007598:	fb91 f5f6 	sdiv	r5, r1, r6
 800759c:	fb06 1415 	mls	r4, r6, r5, r1
 80075a0:	3430      	adds	r4, #48	; 0x30
 80075a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075a6:	460c      	mov	r4, r1
 80075a8:	2c63      	cmp	r4, #99	; 0x63
 80075aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80075ae:	4629      	mov	r1, r5
 80075b0:	dcf1      	bgt.n	8007596 <__exponent+0x22>
 80075b2:	3130      	adds	r1, #48	; 0x30
 80075b4:	f1ac 0402 	sub.w	r4, ip, #2
 80075b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075bc:	1c41      	adds	r1, r0, #1
 80075be:	4622      	mov	r2, r4
 80075c0:	42ba      	cmp	r2, r7
 80075c2:	d30a      	bcc.n	80075da <__exponent+0x66>
 80075c4:	f10d 0209 	add.w	r2, sp, #9
 80075c8:	eba2 020c 	sub.w	r2, r2, ip
 80075cc:	42bc      	cmp	r4, r7
 80075ce:	bf88      	it	hi
 80075d0:	2200      	movhi	r2, #0
 80075d2:	4413      	add	r3, r2
 80075d4:	1a18      	subs	r0, r3, r0
 80075d6:	b003      	add	sp, #12
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075e2:	e7ed      	b.n	80075c0 <__exponent+0x4c>
 80075e4:	2330      	movs	r3, #48	; 0x30
 80075e6:	3130      	adds	r1, #48	; 0x30
 80075e8:	7083      	strb	r3, [r0, #2]
 80075ea:	70c1      	strb	r1, [r0, #3]
 80075ec:	1d03      	adds	r3, r0, #4
 80075ee:	e7f1      	b.n	80075d4 <__exponent+0x60>

080075f0 <_printf_float>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	ed2d 8b02 	vpush	{d8}
 80075f8:	b08d      	sub	sp, #52	; 0x34
 80075fa:	460c      	mov	r4, r1
 80075fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007600:	4616      	mov	r6, r2
 8007602:	461f      	mov	r7, r3
 8007604:	4605      	mov	r5, r0
 8007606:	f000 ff09 	bl	800841c <_localeconv_r>
 800760a:	f8d0 a000 	ldr.w	sl, [r0]
 800760e:	4650      	mov	r0, sl
 8007610:	f7f8 fe3e 	bl	8000290 <strlen>
 8007614:	2300      	movs	r3, #0
 8007616:	930a      	str	r3, [sp, #40]	; 0x28
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	f8d8 3000 	ldr.w	r3, [r8]
 8007620:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007624:	3307      	adds	r3, #7
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	f103 0208 	add.w	r2, r3, #8
 800762e:	f8c8 2000 	str.w	r2, [r8]
 8007632:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007640:	ee08 0a10 	vmov	s16, r0
 8007644:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764c:	4b9e      	ldr	r3, [pc, #632]	; (80078c8 <_printf_float+0x2d8>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	f7f9 fa7b 	bl	8000b4c <__aeabi_dcmpun>
 8007656:	bb88      	cbnz	r0, 80076bc <_printf_float+0xcc>
 8007658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765c:	4b9a      	ldr	r3, [pc, #616]	; (80078c8 <_printf_float+0x2d8>)
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	f7f9 fa55 	bl	8000b10 <__aeabi_dcmple>
 8007666:	bb48      	cbnz	r0, 80076bc <_printf_float+0xcc>
 8007668:	2200      	movs	r2, #0
 800766a:	2300      	movs	r3, #0
 800766c:	4640      	mov	r0, r8
 800766e:	4649      	mov	r1, r9
 8007670:	f7f9 fa44 	bl	8000afc <__aeabi_dcmplt>
 8007674:	b110      	cbz	r0, 800767c <_printf_float+0x8c>
 8007676:	232d      	movs	r3, #45	; 0x2d
 8007678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800767c:	4a93      	ldr	r2, [pc, #588]	; (80078cc <_printf_float+0x2dc>)
 800767e:	4b94      	ldr	r3, [pc, #592]	; (80078d0 <_printf_float+0x2e0>)
 8007680:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007684:	bf94      	ite	ls
 8007686:	4690      	movls	r8, r2
 8007688:	4698      	movhi	r8, r3
 800768a:	2303      	movs	r3, #3
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	9b05      	ldr	r3, [sp, #20]
 8007690:	f023 0304 	bic.w	r3, r3, #4
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	9700      	str	r7, [sp, #0]
 800769c:	4633      	mov	r3, r6
 800769e:	aa0b      	add	r2, sp, #44	; 0x2c
 80076a0:	4621      	mov	r1, r4
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 f9da 	bl	8007a5c <_printf_common>
 80076a8:	3001      	adds	r0, #1
 80076aa:	f040 8090 	bne.w	80077ce <_printf_float+0x1de>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	b00d      	add	sp, #52	; 0x34
 80076b4:	ecbd 8b02 	vpop	{d8}
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa42 	bl	8000b4c <__aeabi_dcmpun>
 80076c8:	b140      	cbz	r0, 80076dc <_printf_float+0xec>
 80076ca:	464b      	mov	r3, r9
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bfbc      	itt	lt
 80076d0:	232d      	movlt	r3, #45	; 0x2d
 80076d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076d6:	4a7f      	ldr	r2, [pc, #508]	; (80078d4 <_printf_float+0x2e4>)
 80076d8:	4b7f      	ldr	r3, [pc, #508]	; (80078d8 <_printf_float+0x2e8>)
 80076da:	e7d1      	b.n	8007680 <_printf_float+0x90>
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076e2:	9206      	str	r2, [sp, #24]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	d13f      	bne.n	8007768 <_printf_float+0x178>
 80076e8:	2306      	movs	r3, #6
 80076ea:	6063      	str	r3, [r4, #4]
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	6861      	ldr	r1, [r4, #4]
 80076f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076f4:	2300      	movs	r3, #0
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	ab0a      	add	r3, sp, #40	; 0x28
 80076fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076fe:	ab09      	add	r3, sp, #36	; 0x24
 8007700:	ec49 8b10 	vmov	d0, r8, r9
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800770c:	4628      	mov	r0, r5
 800770e:	f7ff fecf 	bl	80074b0 <__cvt>
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007716:	2b47      	cmp	r3, #71	; 0x47
 8007718:	4680      	mov	r8, r0
 800771a:	d108      	bne.n	800772e <_printf_float+0x13e>
 800771c:	1cc8      	adds	r0, r1, #3
 800771e:	db02      	blt.n	8007726 <_printf_float+0x136>
 8007720:	6863      	ldr	r3, [r4, #4]
 8007722:	4299      	cmp	r1, r3
 8007724:	dd41      	ble.n	80077aa <_printf_float+0x1ba>
 8007726:	f1ab 0302 	sub.w	r3, fp, #2
 800772a:	fa5f fb83 	uxtb.w	fp, r3
 800772e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007732:	d820      	bhi.n	8007776 <_printf_float+0x186>
 8007734:	3901      	subs	r1, #1
 8007736:	465a      	mov	r2, fp
 8007738:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800773c:	9109      	str	r1, [sp, #36]	; 0x24
 800773e:	f7ff ff19 	bl	8007574 <__exponent>
 8007742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007744:	1813      	adds	r3, r2, r0
 8007746:	2a01      	cmp	r2, #1
 8007748:	4681      	mov	r9, r0
 800774a:	6123      	str	r3, [r4, #16]
 800774c:	dc02      	bgt.n	8007754 <_printf_float+0x164>
 800774e:	6822      	ldr	r2, [r4, #0]
 8007750:	07d2      	lsls	r2, r2, #31
 8007752:	d501      	bpl.n	8007758 <_printf_float+0x168>
 8007754:	3301      	adds	r3, #1
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800775c:	2b00      	cmp	r3, #0
 800775e:	d09c      	beq.n	800769a <_printf_float+0xaa>
 8007760:	232d      	movs	r3, #45	; 0x2d
 8007762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007766:	e798      	b.n	800769a <_printf_float+0xaa>
 8007768:	9a06      	ldr	r2, [sp, #24]
 800776a:	2a47      	cmp	r2, #71	; 0x47
 800776c:	d1be      	bne.n	80076ec <_printf_float+0xfc>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1bc      	bne.n	80076ec <_printf_float+0xfc>
 8007772:	2301      	movs	r3, #1
 8007774:	e7b9      	b.n	80076ea <_printf_float+0xfa>
 8007776:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800777a:	d118      	bne.n	80077ae <_printf_float+0x1be>
 800777c:	2900      	cmp	r1, #0
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	dd0b      	ble.n	800779a <_printf_float+0x1aa>
 8007782:	6121      	str	r1, [r4, #16]
 8007784:	b913      	cbnz	r3, 800778c <_printf_float+0x19c>
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	07d0      	lsls	r0, r2, #31
 800778a:	d502      	bpl.n	8007792 <_printf_float+0x1a2>
 800778c:	3301      	adds	r3, #1
 800778e:	440b      	add	r3, r1
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	65a1      	str	r1, [r4, #88]	; 0x58
 8007794:	f04f 0900 	mov.w	r9, #0
 8007798:	e7de      	b.n	8007758 <_printf_float+0x168>
 800779a:	b913      	cbnz	r3, 80077a2 <_printf_float+0x1b2>
 800779c:	6822      	ldr	r2, [r4, #0]
 800779e:	07d2      	lsls	r2, r2, #31
 80077a0:	d501      	bpl.n	80077a6 <_printf_float+0x1b6>
 80077a2:	3302      	adds	r3, #2
 80077a4:	e7f4      	b.n	8007790 <_printf_float+0x1a0>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7f2      	b.n	8007790 <_printf_float+0x1a0>
 80077aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b0:	4299      	cmp	r1, r3
 80077b2:	db05      	blt.n	80077c0 <_printf_float+0x1d0>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	6121      	str	r1, [r4, #16]
 80077b8:	07d8      	lsls	r0, r3, #31
 80077ba:	d5ea      	bpl.n	8007792 <_printf_float+0x1a2>
 80077bc:	1c4b      	adds	r3, r1, #1
 80077be:	e7e7      	b.n	8007790 <_printf_float+0x1a0>
 80077c0:	2900      	cmp	r1, #0
 80077c2:	bfd4      	ite	le
 80077c4:	f1c1 0202 	rsble	r2, r1, #2
 80077c8:	2201      	movgt	r2, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	e7e0      	b.n	8007790 <_printf_float+0x1a0>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	055a      	lsls	r2, r3, #21
 80077d2:	d407      	bmi.n	80077e4 <_printf_float+0x1f4>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	4642      	mov	r2, r8
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	d12c      	bne.n	800783c <_printf_float+0x24c>
 80077e2:	e764      	b.n	80076ae <_printf_float+0xbe>
 80077e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077e8:	f240 80e0 	bls.w	80079ac <_printf_float+0x3bc>
 80077ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077f0:	2200      	movs	r2, #0
 80077f2:	2300      	movs	r3, #0
 80077f4:	f7f9 f978 	bl	8000ae8 <__aeabi_dcmpeq>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d034      	beq.n	8007866 <_printf_float+0x276>
 80077fc:	4a37      	ldr	r2, [pc, #220]	; (80078dc <_printf_float+0x2ec>)
 80077fe:	2301      	movs	r3, #1
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f af51 	beq.w	80076ae <_printf_float+0xbe>
 800780c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007810:	429a      	cmp	r2, r3
 8007812:	db02      	blt.n	800781a <_printf_float+0x22a>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	07d8      	lsls	r0, r3, #31
 8007818:	d510      	bpl.n	800783c <_printf_float+0x24c>
 800781a:	ee18 3a10 	vmov	r3, s16
 800781e:	4652      	mov	r2, sl
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af41 	beq.w	80076ae <_printf_float+0xbe>
 800782c:	f04f 0800 	mov.w	r8, #0
 8007830:	f104 091a 	add.w	r9, r4, #26
 8007834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007836:	3b01      	subs	r3, #1
 8007838:	4543      	cmp	r3, r8
 800783a:	dc09      	bgt.n	8007850 <_printf_float+0x260>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	079b      	lsls	r3, r3, #30
 8007840:	f100 8107 	bmi.w	8007a52 <_printf_float+0x462>
 8007844:	68e0      	ldr	r0, [r4, #12]
 8007846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007848:	4298      	cmp	r0, r3
 800784a:	bfb8      	it	lt
 800784c:	4618      	movlt	r0, r3
 800784e:	e730      	b.n	80076b2 <_printf_float+0xc2>
 8007850:	2301      	movs	r3, #1
 8007852:	464a      	mov	r2, r9
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	f43f af27 	beq.w	80076ae <_printf_float+0xbe>
 8007860:	f108 0801 	add.w	r8, r8, #1
 8007864:	e7e6      	b.n	8007834 <_printf_float+0x244>
 8007866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc39      	bgt.n	80078e0 <_printf_float+0x2f0>
 800786c:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <_printf_float+0x2ec>)
 800786e:	2301      	movs	r3, #1
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f af19 	beq.w	80076ae <_printf_float+0xbe>
 800787c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007880:	4313      	orrs	r3, r2
 8007882:	d102      	bne.n	800788a <_printf_float+0x29a>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07d9      	lsls	r1, r3, #31
 8007888:	d5d8      	bpl.n	800783c <_printf_float+0x24c>
 800788a:	ee18 3a10 	vmov	r3, s16
 800788e:	4652      	mov	r2, sl
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af09 	beq.w	80076ae <_printf_float+0xbe>
 800789c:	f04f 0900 	mov.w	r9, #0
 80078a0:	f104 0a1a 	add.w	sl, r4, #26
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	425b      	negs	r3, r3
 80078a8:	454b      	cmp	r3, r9
 80078aa:	dc01      	bgt.n	80078b0 <_printf_float+0x2c0>
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	e792      	b.n	80077d6 <_printf_float+0x1e6>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4652      	mov	r2, sl
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f aef7 	beq.w	80076ae <_printf_float+0xbe>
 80078c0:	f109 0901 	add.w	r9, r9, #1
 80078c4:	e7ee      	b.n	80078a4 <_printf_float+0x2b4>
 80078c6:	bf00      	nop
 80078c8:	7fefffff 	.word	0x7fefffff
 80078cc:	0800bd75 	.word	0x0800bd75
 80078d0:	0800bd79 	.word	0x0800bd79
 80078d4:	0800bd7d 	.word	0x0800bd7d
 80078d8:	0800bd81 	.word	0x0800bd81
 80078dc:	0800bd85 	.word	0x0800bd85
 80078e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e4:	429a      	cmp	r2, r3
 80078e6:	bfa8      	it	ge
 80078e8:	461a      	movge	r2, r3
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	4691      	mov	r9, r2
 80078ee:	dc37      	bgt.n	8007960 <_printf_float+0x370>
 80078f0:	f04f 0b00 	mov.w	fp, #0
 80078f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f8:	f104 021a 	add.w	r2, r4, #26
 80078fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	eba3 0309 	sub.w	r3, r3, r9
 8007904:	455b      	cmp	r3, fp
 8007906:	dc33      	bgt.n	8007970 <_printf_float+0x380>
 8007908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800790c:	429a      	cmp	r2, r3
 800790e:	db3b      	blt.n	8007988 <_printf_float+0x398>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d438      	bmi.n	8007988 <_printf_float+0x398>
 8007916:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800791a:	eba2 0903 	sub.w	r9, r2, r3
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	4591      	cmp	r9, r2
 8007924:	bfa8      	it	ge
 8007926:	4691      	movge	r9, r2
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	dc35      	bgt.n	800799a <_printf_float+0x3aa>
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007936:	f104 0a1a 	add.w	sl, r4, #26
 800793a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	eba3 0309 	sub.w	r3, r3, r9
 8007944:	4543      	cmp	r3, r8
 8007946:	f77f af79 	ble.w	800783c <_printf_float+0x24c>
 800794a:	2301      	movs	r3, #1
 800794c:	4652      	mov	r2, sl
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	f43f aeaa 	beq.w	80076ae <_printf_float+0xbe>
 800795a:	f108 0801 	add.w	r8, r8, #1
 800795e:	e7ec      	b.n	800793a <_printf_float+0x34a>
 8007960:	4613      	mov	r3, r2
 8007962:	4631      	mov	r1, r6
 8007964:	4642      	mov	r2, r8
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	d1c0      	bne.n	80078f0 <_printf_float+0x300>
 800796e:	e69e      	b.n	80076ae <_printf_float+0xbe>
 8007970:	2301      	movs	r3, #1
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	9205      	str	r2, [sp, #20]
 8007978:	47b8      	blx	r7
 800797a:	3001      	adds	r0, #1
 800797c:	f43f ae97 	beq.w	80076ae <_printf_float+0xbe>
 8007980:	9a05      	ldr	r2, [sp, #20]
 8007982:	f10b 0b01 	add.w	fp, fp, #1
 8007986:	e7b9      	b.n	80078fc <_printf_float+0x30c>
 8007988:	ee18 3a10 	vmov	r3, s16
 800798c:	4652      	mov	r2, sl
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	d1be      	bne.n	8007916 <_printf_float+0x326>
 8007998:	e689      	b.n	80076ae <_printf_float+0xbe>
 800799a:	9a05      	ldr	r2, [sp, #20]
 800799c:	464b      	mov	r3, r9
 800799e:	4442      	add	r2, r8
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	d1c1      	bne.n	800792e <_printf_float+0x33e>
 80079aa:	e680      	b.n	80076ae <_printf_float+0xbe>
 80079ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ae:	2a01      	cmp	r2, #1
 80079b0:	dc01      	bgt.n	80079b6 <_printf_float+0x3c6>
 80079b2:	07db      	lsls	r3, r3, #31
 80079b4:	d53a      	bpl.n	8007a2c <_printf_float+0x43c>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4642      	mov	r2, r8
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f ae74 	beq.w	80076ae <_printf_float+0xbe>
 80079c6:	ee18 3a10 	vmov	r3, s16
 80079ca:	4652      	mov	r2, sl
 80079cc:	4631      	mov	r1, r6
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f ae6b 	beq.w	80076ae <_printf_float+0xbe>
 80079d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079dc:	2200      	movs	r2, #0
 80079de:	2300      	movs	r3, #0
 80079e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079e4:	f7f9 f880 	bl	8000ae8 <__aeabi_dcmpeq>
 80079e8:	b9d8      	cbnz	r0, 8007a22 <_printf_float+0x432>
 80079ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079ee:	f108 0201 	add.w	r2, r8, #1
 80079f2:	4631      	mov	r1, r6
 80079f4:	4628      	mov	r0, r5
 80079f6:	47b8      	blx	r7
 80079f8:	3001      	adds	r0, #1
 80079fa:	d10e      	bne.n	8007a1a <_printf_float+0x42a>
 80079fc:	e657      	b.n	80076ae <_printf_float+0xbe>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f43f ae50 	beq.w	80076ae <_printf_float+0xbe>
 8007a0e:	f108 0801 	add.w	r8, r8, #1
 8007a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a14:	3b01      	subs	r3, #1
 8007a16:	4543      	cmp	r3, r8
 8007a18:	dcf1      	bgt.n	80079fe <_printf_float+0x40e>
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a20:	e6da      	b.n	80077d8 <_printf_float+0x1e8>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	f104 0a1a 	add.w	sl, r4, #26
 8007a2a:	e7f2      	b.n	8007a12 <_printf_float+0x422>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4642      	mov	r2, r8
 8007a30:	e7df      	b.n	80079f2 <_printf_float+0x402>
 8007a32:	2301      	movs	r3, #1
 8007a34:	464a      	mov	r2, r9
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f ae36 	beq.w	80076ae <_printf_float+0xbe>
 8007a42:	f108 0801 	add.w	r8, r8, #1
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a4a:	1a5b      	subs	r3, r3, r1
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	dcf0      	bgt.n	8007a32 <_printf_float+0x442>
 8007a50:	e6f8      	b.n	8007844 <_printf_float+0x254>
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	f104 0919 	add.w	r9, r4, #25
 8007a5a:	e7f4      	b.n	8007a46 <_printf_float+0x456>

08007a5c <_printf_common>:
 8007a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	4616      	mov	r6, r2
 8007a62:	4699      	mov	r9, r3
 8007a64:	688a      	ldr	r2, [r1, #8]
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bfb8      	it	lt
 8007a70:	4613      	movlt	r3, r2
 8007a72:	6033      	str	r3, [r6, #0]
 8007a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a78:	4607      	mov	r7, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	b10a      	cbz	r2, 8007a82 <_printf_common+0x26>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	6033      	str	r3, [r6, #0]
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	0699      	lsls	r1, r3, #26
 8007a86:	bf42      	ittt	mi
 8007a88:	6833      	ldrmi	r3, [r6, #0]
 8007a8a:	3302      	addmi	r3, #2
 8007a8c:	6033      	strmi	r3, [r6, #0]
 8007a8e:	6825      	ldr	r5, [r4, #0]
 8007a90:	f015 0506 	ands.w	r5, r5, #6
 8007a94:	d106      	bne.n	8007aa4 <_printf_common+0x48>
 8007a96:	f104 0a19 	add.w	sl, r4, #25
 8007a9a:	68e3      	ldr	r3, [r4, #12]
 8007a9c:	6832      	ldr	r2, [r6, #0]
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	42ab      	cmp	r3, r5
 8007aa2:	dc26      	bgt.n	8007af2 <_printf_common+0x96>
 8007aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa8:	1e13      	subs	r3, r2, #0
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	bf18      	it	ne
 8007aae:	2301      	movne	r3, #1
 8007ab0:	0692      	lsls	r2, r2, #26
 8007ab2:	d42b      	bmi.n	8007b0c <_printf_common+0xb0>
 8007ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c0      	blx	r8
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d01e      	beq.n	8007b00 <_printf_common+0xa4>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	f003 0306 	and.w	r3, r3, #6
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	bf02      	ittt	eq
 8007ace:	68e5      	ldreq	r5, [r4, #12]
 8007ad0:	6833      	ldreq	r3, [r6, #0]
 8007ad2:	1aed      	subeq	r5, r5, r3
 8007ad4:	68a3      	ldr	r3, [r4, #8]
 8007ad6:	bf0c      	ite	eq
 8007ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007adc:	2500      	movne	r5, #0
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	bfc4      	itt	gt
 8007ae2:	1a9b      	subgt	r3, r3, r2
 8007ae4:	18ed      	addgt	r5, r5, r3
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	341a      	adds	r4, #26
 8007aea:	42b5      	cmp	r5, r6
 8007aec:	d11a      	bne.n	8007b24 <_printf_common+0xc8>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e008      	b.n	8007b04 <_printf_common+0xa8>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4649      	mov	r1, r9
 8007af8:	4638      	mov	r0, r7
 8007afa:	47c0      	blx	r8
 8007afc:	3001      	adds	r0, #1
 8007afe:	d103      	bne.n	8007b08 <_printf_common+0xac>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	3501      	adds	r5, #1
 8007b0a:	e7c6      	b.n	8007a9a <_printf_common+0x3e>
 8007b0c:	18e1      	adds	r1, r4, r3
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	2030      	movs	r0, #48	; 0x30
 8007b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b16:	4422      	add	r2, r4
 8007b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b20:	3302      	adds	r3, #2
 8007b22:	e7c7      	b.n	8007ab4 <_printf_common+0x58>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4622      	mov	r2, r4
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	47c0      	blx	r8
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0e6      	beq.n	8007b00 <_printf_common+0xa4>
 8007b32:	3601      	adds	r6, #1
 8007b34:	e7d9      	b.n	8007aea <_printf_common+0x8e>
	...

08007b38 <_printf_i>:
 8007b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	7e0f      	ldrb	r7, [r1, #24]
 8007b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b40:	2f78      	cmp	r7, #120	; 0x78
 8007b42:	4691      	mov	r9, r2
 8007b44:	4680      	mov	r8, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	469a      	mov	sl, r3
 8007b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b4e:	d807      	bhi.n	8007b60 <_printf_i+0x28>
 8007b50:	2f62      	cmp	r7, #98	; 0x62
 8007b52:	d80a      	bhi.n	8007b6a <_printf_i+0x32>
 8007b54:	2f00      	cmp	r7, #0
 8007b56:	f000 80d4 	beq.w	8007d02 <_printf_i+0x1ca>
 8007b5a:	2f58      	cmp	r7, #88	; 0x58
 8007b5c:	f000 80c0 	beq.w	8007ce0 <_printf_i+0x1a8>
 8007b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b68:	e03a      	b.n	8007be0 <_printf_i+0xa8>
 8007b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b6e:	2b15      	cmp	r3, #21
 8007b70:	d8f6      	bhi.n	8007b60 <_printf_i+0x28>
 8007b72:	a101      	add	r1, pc, #4	; (adr r1, 8007b78 <_printf_i+0x40>)
 8007b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b78:	08007bd1 	.word	0x08007bd1
 8007b7c:	08007be5 	.word	0x08007be5
 8007b80:	08007b61 	.word	0x08007b61
 8007b84:	08007b61 	.word	0x08007b61
 8007b88:	08007b61 	.word	0x08007b61
 8007b8c:	08007b61 	.word	0x08007b61
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007b61 	.word	0x08007b61
 8007b98:	08007b61 	.word	0x08007b61
 8007b9c:	08007b61 	.word	0x08007b61
 8007ba0:	08007b61 	.word	0x08007b61
 8007ba4:	08007ce9 	.word	0x08007ce9
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007ca3 	.word	0x08007ca3
 8007bb0:	08007b61 	.word	0x08007b61
 8007bb4:	08007b61 	.word	0x08007b61
 8007bb8:	08007d0b 	.word	0x08007d0b
 8007bbc:	08007b61 	.word	0x08007b61
 8007bc0:	08007c11 	.word	0x08007c11
 8007bc4:	08007b61 	.word	0x08007b61
 8007bc8:	08007b61 	.word	0x08007b61
 8007bcc:	08007cab 	.word	0x08007cab
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09f      	b.n	8007d24 <_printf_i+0x1ec>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	0607      	lsls	r7, r0, #24
 8007bea:	f103 0104 	add.w	r1, r3, #4
 8007bee:	6029      	str	r1, [r5, #0]
 8007bf0:	d501      	bpl.n	8007bf6 <_printf_i+0xbe>
 8007bf2:	681e      	ldr	r6, [r3, #0]
 8007bf4:	e003      	b.n	8007bfe <_printf_i+0xc6>
 8007bf6:	0646      	lsls	r6, r0, #25
 8007bf8:	d5fb      	bpl.n	8007bf2 <_printf_i+0xba>
 8007bfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	da03      	bge.n	8007c0a <_printf_i+0xd2>
 8007c02:	232d      	movs	r3, #45	; 0x2d
 8007c04:	4276      	negs	r6, r6
 8007c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c0a:	485a      	ldr	r0, [pc, #360]	; (8007d74 <_printf_i+0x23c>)
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	e012      	b.n	8007c36 <_printf_i+0xfe>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	1d19      	adds	r1, r3, #4
 8007c16:	6029      	str	r1, [r5, #0]
 8007c18:	0605      	lsls	r5, r0, #24
 8007c1a:	d501      	bpl.n	8007c20 <_printf_i+0xe8>
 8007c1c:	681e      	ldr	r6, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <_printf_i+0xee>
 8007c20:	0641      	lsls	r1, r0, #25
 8007c22:	d5fb      	bpl.n	8007c1c <_printf_i+0xe4>
 8007c24:	881e      	ldrh	r6, [r3, #0]
 8007c26:	4853      	ldr	r0, [pc, #332]	; (8007d74 <_printf_i+0x23c>)
 8007c28:	2f6f      	cmp	r7, #111	; 0x6f
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2308      	moveq	r3, #8
 8007c2e:	230a      	movne	r3, #10
 8007c30:	2100      	movs	r1, #0
 8007c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c36:	6865      	ldr	r5, [r4, #4]
 8007c38:	60a5      	str	r5, [r4, #8]
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	bfa2      	ittt	ge
 8007c3e:	6821      	ldrge	r1, [r4, #0]
 8007c40:	f021 0104 	bicge.w	r1, r1, #4
 8007c44:	6021      	strge	r1, [r4, #0]
 8007c46:	b90e      	cbnz	r6, 8007c4c <_printf_i+0x114>
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	d04b      	beq.n	8007ce4 <_printf_i+0x1ac>
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c52:	fb03 6711 	mls	r7, r3, r1, r6
 8007c56:	5dc7      	ldrb	r7, [r0, r7]
 8007c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c5c:	4637      	mov	r7, r6
 8007c5e:	42bb      	cmp	r3, r7
 8007c60:	460e      	mov	r6, r1
 8007c62:	d9f4      	bls.n	8007c4e <_printf_i+0x116>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d10b      	bne.n	8007c80 <_printf_i+0x148>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	07de      	lsls	r6, r3, #31
 8007c6c:	d508      	bpl.n	8007c80 <_printf_i+0x148>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	4299      	cmp	r1, r3
 8007c74:	bfde      	ittt	le
 8007c76:	2330      	movle	r3, #48	; 0x30
 8007c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c80:	1b52      	subs	r2, r2, r5
 8007c82:	6122      	str	r2, [r4, #16]
 8007c84:	f8cd a000 	str.w	sl, [sp]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	aa03      	add	r2, sp, #12
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7ff fee4 	bl	8007a5c <_printf_common>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d14a      	bne.n	8007d2e <_printf_i+0x1f6>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	b004      	add	sp, #16
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	f043 0320 	orr.w	r3, r3, #32
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	4833      	ldr	r0, [pc, #204]	; (8007d78 <_printf_i+0x240>)
 8007cac:	2778      	movs	r7, #120	; 0x78
 8007cae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	6829      	ldr	r1, [r5, #0]
 8007cb6:	061f      	lsls	r7, r3, #24
 8007cb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cbc:	d402      	bmi.n	8007cc4 <_printf_i+0x18c>
 8007cbe:	065f      	lsls	r7, r3, #25
 8007cc0:	bf48      	it	mi
 8007cc2:	b2b6      	uxthmi	r6, r6
 8007cc4:	07df      	lsls	r7, r3, #31
 8007cc6:	bf48      	it	mi
 8007cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ccc:	6029      	str	r1, [r5, #0]
 8007cce:	bf48      	it	mi
 8007cd0:	6023      	strmi	r3, [r4, #0]
 8007cd2:	b91e      	cbnz	r6, 8007cdc <_printf_i+0x1a4>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	f023 0320 	bic.w	r3, r3, #32
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	2310      	movs	r3, #16
 8007cde:	e7a7      	b.n	8007c30 <_printf_i+0xf8>
 8007ce0:	4824      	ldr	r0, [pc, #144]	; (8007d74 <_printf_i+0x23c>)
 8007ce2:	e7e4      	b.n	8007cae <_printf_i+0x176>
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	e7bd      	b.n	8007c64 <_printf_i+0x12c>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	6826      	ldr	r6, [r4, #0]
 8007cec:	6961      	ldr	r1, [r4, #20]
 8007cee:	1d18      	adds	r0, r3, #4
 8007cf0:	6028      	str	r0, [r5, #0]
 8007cf2:	0635      	lsls	r5, r6, #24
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	d501      	bpl.n	8007cfc <_printf_i+0x1c4>
 8007cf8:	6019      	str	r1, [r3, #0]
 8007cfa:	e002      	b.n	8007d02 <_printf_i+0x1ca>
 8007cfc:	0670      	lsls	r0, r6, #25
 8007cfe:	d5fb      	bpl.n	8007cf8 <_printf_i+0x1c0>
 8007d00:	8019      	strh	r1, [r3, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	4615      	mov	r5, r2
 8007d08:	e7bc      	b.n	8007c84 <_printf_i+0x14c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	602a      	str	r2, [r5, #0]
 8007d10:	681d      	ldr	r5, [r3, #0]
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	2100      	movs	r1, #0
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7f8 fa6a 	bl	80001f0 <memchr>
 8007d1c:	b108      	cbz	r0, 8007d22 <_printf_i+0x1ea>
 8007d1e:	1b40      	subs	r0, r0, r5
 8007d20:	6060      	str	r0, [r4, #4]
 8007d22:	6863      	ldr	r3, [r4, #4]
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	2300      	movs	r3, #0
 8007d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d2c:	e7aa      	b.n	8007c84 <_printf_i+0x14c>
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4649      	mov	r1, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	47d0      	blx	sl
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0ad      	beq.n	8007c98 <_printf_i+0x160>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	d413      	bmi.n	8007d6a <_printf_i+0x232>
 8007d42:	68e0      	ldr	r0, [r4, #12]
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	4298      	cmp	r0, r3
 8007d48:	bfb8      	it	lt
 8007d4a:	4618      	movlt	r0, r3
 8007d4c:	e7a6      	b.n	8007c9c <_printf_i+0x164>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	4632      	mov	r2, r6
 8007d52:	4649      	mov	r1, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	47d0      	blx	sl
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d09d      	beq.n	8007c98 <_printf_i+0x160>
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	9903      	ldr	r1, [sp, #12]
 8007d62:	1a5b      	subs	r3, r3, r1
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dcf2      	bgt.n	8007d4e <_printf_i+0x216>
 8007d68:	e7eb      	b.n	8007d42 <_printf_i+0x20a>
 8007d6a:	2500      	movs	r5, #0
 8007d6c:	f104 0619 	add.w	r6, r4, #25
 8007d70:	e7f5      	b.n	8007d5e <_printf_i+0x226>
 8007d72:	bf00      	nop
 8007d74:	0800bd87 	.word	0x0800bd87
 8007d78:	0800bd98 	.word	0x0800bd98

08007d7c <_scanf_float>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	b087      	sub	sp, #28
 8007d82:	4617      	mov	r7, r2
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	688b      	ldr	r3, [r1, #8]
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007d8e:	bf83      	ittte	hi
 8007d90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007d94:	195b      	addhi	r3, r3, r5
 8007d96:	9302      	strhi	r3, [sp, #8]
 8007d98:	2300      	movls	r3, #0
 8007d9a:	bf86      	itte	hi
 8007d9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007da0:	608b      	strhi	r3, [r1, #8]
 8007da2:	9302      	strls	r3, [sp, #8]
 8007da4:	680b      	ldr	r3, [r1, #0]
 8007da6:	468b      	mov	fp, r1
 8007da8:	2500      	movs	r5, #0
 8007daa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007dae:	f84b 3b1c 	str.w	r3, [fp], #28
 8007db2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007db6:	4680      	mov	r8, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	465e      	mov	r6, fp
 8007dbc:	46aa      	mov	sl, r5
 8007dbe:	46a9      	mov	r9, r5
 8007dc0:	9501      	str	r5, [sp, #4]
 8007dc2:	68a2      	ldr	r2, [r4, #8]
 8007dc4:	b152      	cbz	r2, 8007ddc <_scanf_float+0x60>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b4e      	cmp	r3, #78	; 0x4e
 8007dcc:	d864      	bhi.n	8007e98 <_scanf_float+0x11c>
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d83c      	bhi.n	8007e4c <_scanf_float+0xd0>
 8007dd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007dd6:	b2c8      	uxtb	r0, r1
 8007dd8:	280e      	cmp	r0, #14
 8007dda:	d93a      	bls.n	8007e52 <_scanf_float+0xd6>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d003      	beq.n	8007dea <_scanf_float+0x6e>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dee:	f1ba 0f01 	cmp.w	sl, #1
 8007df2:	f200 8113 	bhi.w	800801c <_scanf_float+0x2a0>
 8007df6:	455e      	cmp	r6, fp
 8007df8:	f200 8105 	bhi.w	8008006 <_scanf_float+0x28a>
 8007dfc:	2501      	movs	r5, #1
 8007dfe:	4628      	mov	r0, r5
 8007e00:	b007      	add	sp, #28
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e0a:	2a0d      	cmp	r2, #13
 8007e0c:	d8e6      	bhi.n	8007ddc <_scanf_float+0x60>
 8007e0e:	a101      	add	r1, pc, #4	; (adr r1, 8007e14 <_scanf_float+0x98>)
 8007e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e14:	08007f53 	.word	0x08007f53
 8007e18:	08007ddd 	.word	0x08007ddd
 8007e1c:	08007ddd 	.word	0x08007ddd
 8007e20:	08007ddd 	.word	0x08007ddd
 8007e24:	08007fb3 	.word	0x08007fb3
 8007e28:	08007f8b 	.word	0x08007f8b
 8007e2c:	08007ddd 	.word	0x08007ddd
 8007e30:	08007ddd 	.word	0x08007ddd
 8007e34:	08007f61 	.word	0x08007f61
 8007e38:	08007ddd 	.word	0x08007ddd
 8007e3c:	08007ddd 	.word	0x08007ddd
 8007e40:	08007ddd 	.word	0x08007ddd
 8007e44:	08007ddd 	.word	0x08007ddd
 8007e48:	08007f19 	.word	0x08007f19
 8007e4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e50:	e7db      	b.n	8007e0a <_scanf_float+0x8e>
 8007e52:	290e      	cmp	r1, #14
 8007e54:	d8c2      	bhi.n	8007ddc <_scanf_float+0x60>
 8007e56:	a001      	add	r0, pc, #4	; (adr r0, 8007e5c <_scanf_float+0xe0>)
 8007e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007e5c:	08007f0b 	.word	0x08007f0b
 8007e60:	08007ddd 	.word	0x08007ddd
 8007e64:	08007f0b 	.word	0x08007f0b
 8007e68:	08007f9f 	.word	0x08007f9f
 8007e6c:	08007ddd 	.word	0x08007ddd
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007ef5 	.word	0x08007ef5
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007ef5 	.word	0x08007ef5
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	2b6e      	cmp	r3, #110	; 0x6e
 8007e9a:	d809      	bhi.n	8007eb0 <_scanf_float+0x134>
 8007e9c:	2b60      	cmp	r3, #96	; 0x60
 8007e9e:	d8b2      	bhi.n	8007e06 <_scanf_float+0x8a>
 8007ea0:	2b54      	cmp	r3, #84	; 0x54
 8007ea2:	d077      	beq.n	8007f94 <_scanf_float+0x218>
 8007ea4:	2b59      	cmp	r3, #89	; 0x59
 8007ea6:	d199      	bne.n	8007ddc <_scanf_float+0x60>
 8007ea8:	2d07      	cmp	r5, #7
 8007eaa:	d197      	bne.n	8007ddc <_scanf_float+0x60>
 8007eac:	2508      	movs	r5, #8
 8007eae:	e029      	b.n	8007f04 <_scanf_float+0x188>
 8007eb0:	2b74      	cmp	r3, #116	; 0x74
 8007eb2:	d06f      	beq.n	8007f94 <_scanf_float+0x218>
 8007eb4:	2b79      	cmp	r3, #121	; 0x79
 8007eb6:	e7f6      	b.n	8007ea6 <_scanf_float+0x12a>
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	05c8      	lsls	r0, r1, #23
 8007ebc:	d51a      	bpl.n	8007ef4 <_scanf_float+0x178>
 8007ebe:	9b02      	ldr	r3, [sp, #8]
 8007ec0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ec4:	6021      	str	r1, [r4, #0]
 8007ec6:	f109 0901 	add.w	r9, r9, #1
 8007eca:	b11b      	cbz	r3, 8007ed4 <_scanf_float+0x158>
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	3201      	adds	r2, #1
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	60a2      	str	r2, [r4, #8]
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	60a3      	str	r3, [r4, #8]
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	3301      	adds	r3, #1
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	607b      	str	r3, [r7, #4]
 8007ee8:	f340 8084 	ble.w	8007ff4 <_scanf_float+0x278>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	e766      	b.n	8007dc2 <_scanf_float+0x46>
 8007ef4:	eb1a 0f05 	cmn.w	sl, r5
 8007ef8:	f47f af70 	bne.w	8007ddc <_scanf_float+0x60>
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f02:	6022      	str	r2, [r4, #0]
 8007f04:	f806 3b01 	strb.w	r3, [r6], #1
 8007f08:	e7e4      	b.n	8007ed4 <_scanf_float+0x158>
 8007f0a:	6822      	ldr	r2, [r4, #0]
 8007f0c:	0610      	lsls	r0, r2, #24
 8007f0e:	f57f af65 	bpl.w	8007ddc <_scanf_float+0x60>
 8007f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f16:	e7f4      	b.n	8007f02 <_scanf_float+0x186>
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	d10e      	bne.n	8007f3c <_scanf_float+0x1c0>
 8007f1e:	f1b9 0f00 	cmp.w	r9, #0
 8007f22:	d10e      	bne.n	8007f42 <_scanf_float+0x1c6>
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f2e:	d108      	bne.n	8007f42 <_scanf_float+0x1c6>
 8007f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f34:	6022      	str	r2, [r4, #0]
 8007f36:	f04f 0a01 	mov.w	sl, #1
 8007f3a:	e7e3      	b.n	8007f04 <_scanf_float+0x188>
 8007f3c:	f1ba 0f02 	cmp.w	sl, #2
 8007f40:	d055      	beq.n	8007fee <_scanf_float+0x272>
 8007f42:	2d01      	cmp	r5, #1
 8007f44:	d002      	beq.n	8007f4c <_scanf_float+0x1d0>
 8007f46:	2d04      	cmp	r5, #4
 8007f48:	f47f af48 	bne.w	8007ddc <_scanf_float+0x60>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	b2ed      	uxtb	r5, r5
 8007f50:	e7d8      	b.n	8007f04 <_scanf_float+0x188>
 8007f52:	f1ba 0f01 	cmp.w	sl, #1
 8007f56:	f47f af41 	bne.w	8007ddc <_scanf_float+0x60>
 8007f5a:	f04f 0a02 	mov.w	sl, #2
 8007f5e:	e7d1      	b.n	8007f04 <_scanf_float+0x188>
 8007f60:	b97d      	cbnz	r5, 8007f82 <_scanf_float+0x206>
 8007f62:	f1b9 0f00 	cmp.w	r9, #0
 8007f66:	f47f af3c 	bne.w	8007de2 <_scanf_float+0x66>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f74:	f47f af39 	bne.w	8007dea <_scanf_float+0x6e>
 8007f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f7c:	6022      	str	r2, [r4, #0]
 8007f7e:	2501      	movs	r5, #1
 8007f80:	e7c0      	b.n	8007f04 <_scanf_float+0x188>
 8007f82:	2d03      	cmp	r5, #3
 8007f84:	d0e2      	beq.n	8007f4c <_scanf_float+0x1d0>
 8007f86:	2d05      	cmp	r5, #5
 8007f88:	e7de      	b.n	8007f48 <_scanf_float+0x1cc>
 8007f8a:	2d02      	cmp	r5, #2
 8007f8c:	f47f af26 	bne.w	8007ddc <_scanf_float+0x60>
 8007f90:	2503      	movs	r5, #3
 8007f92:	e7b7      	b.n	8007f04 <_scanf_float+0x188>
 8007f94:	2d06      	cmp	r5, #6
 8007f96:	f47f af21 	bne.w	8007ddc <_scanf_float+0x60>
 8007f9a:	2507      	movs	r5, #7
 8007f9c:	e7b2      	b.n	8007f04 <_scanf_float+0x188>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	0591      	lsls	r1, r2, #22
 8007fa2:	f57f af1b 	bpl.w	8007ddc <_scanf_float+0x60>
 8007fa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fb0:	e7a8      	b.n	8007f04 <_scanf_float+0x188>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007fb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007fbc:	d006      	beq.n	8007fcc <_scanf_float+0x250>
 8007fbe:	0550      	lsls	r0, r2, #21
 8007fc0:	f57f af0c 	bpl.w	8007ddc <_scanf_float+0x60>
 8007fc4:	f1b9 0f00 	cmp.w	r9, #0
 8007fc8:	f43f af0f 	beq.w	8007dea <_scanf_float+0x6e>
 8007fcc:	0591      	lsls	r1, r2, #22
 8007fce:	bf58      	it	pl
 8007fd0:	9901      	ldrpl	r1, [sp, #4]
 8007fd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fd6:	bf58      	it	pl
 8007fd8:	eba9 0101 	subpl.w	r1, r9, r1
 8007fdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007fe0:	bf58      	it	pl
 8007fe2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	f04f 0900 	mov.w	r9, #0
 8007fec:	e78a      	b.n	8007f04 <_scanf_float+0x188>
 8007fee:	f04f 0a03 	mov.w	sl, #3
 8007ff2:	e787      	b.n	8007f04 <_scanf_float+0x188>
 8007ff4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ff8:	4639      	mov	r1, r7
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4798      	blx	r3
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f aedf 	beq.w	8007dc2 <_scanf_float+0x46>
 8008004:	e6ea      	b.n	8007ddc <_scanf_float+0x60>
 8008006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800800a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800800e:	463a      	mov	r2, r7
 8008010:	4640      	mov	r0, r8
 8008012:	4798      	blx	r3
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	3b01      	subs	r3, #1
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	e6ec      	b.n	8007df6 <_scanf_float+0x7a>
 800801c:	1e6b      	subs	r3, r5, #1
 800801e:	2b06      	cmp	r3, #6
 8008020:	d825      	bhi.n	800806e <_scanf_float+0x2f2>
 8008022:	2d02      	cmp	r5, #2
 8008024:	d836      	bhi.n	8008094 <_scanf_float+0x318>
 8008026:	455e      	cmp	r6, fp
 8008028:	f67f aee8 	bls.w	8007dfc <_scanf_float+0x80>
 800802c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008030:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008034:	463a      	mov	r2, r7
 8008036:	4640      	mov	r0, r8
 8008038:	4798      	blx	r3
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	3b01      	subs	r3, #1
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	e7f1      	b.n	8008026 <_scanf_float+0x2aa>
 8008042:	9802      	ldr	r0, [sp, #8]
 8008044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008048:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800804c:	9002      	str	r0, [sp, #8]
 800804e:	463a      	mov	r2, r7
 8008050:	4640      	mov	r0, r8
 8008052:	4798      	blx	r3
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	3b01      	subs	r3, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800805e:	fa5f fa8a 	uxtb.w	sl, sl
 8008062:	f1ba 0f02 	cmp.w	sl, #2
 8008066:	d1ec      	bne.n	8008042 <_scanf_float+0x2c6>
 8008068:	3d03      	subs	r5, #3
 800806a:	b2ed      	uxtb	r5, r5
 800806c:	1b76      	subs	r6, r6, r5
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	05da      	lsls	r2, r3, #23
 8008072:	d52f      	bpl.n	80080d4 <_scanf_float+0x358>
 8008074:	055b      	lsls	r3, r3, #21
 8008076:	d510      	bpl.n	800809a <_scanf_float+0x31e>
 8008078:	455e      	cmp	r6, fp
 800807a:	f67f aebf 	bls.w	8007dfc <_scanf_float+0x80>
 800807e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008086:	463a      	mov	r2, r7
 8008088:	4640      	mov	r0, r8
 800808a:	4798      	blx	r3
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	6123      	str	r3, [r4, #16]
 8008092:	e7f1      	b.n	8008078 <_scanf_float+0x2fc>
 8008094:	46aa      	mov	sl, r5
 8008096:	9602      	str	r6, [sp, #8]
 8008098:	e7df      	b.n	800805a <_scanf_float+0x2de>
 800809a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	2965      	cmp	r1, #101	; 0x65
 80080a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80080a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	d00c      	beq.n	80080c8 <_scanf_float+0x34c>
 80080ae:	2945      	cmp	r1, #69	; 0x45
 80080b0:	d00a      	beq.n	80080c8 <_scanf_float+0x34c>
 80080b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080b6:	463a      	mov	r2, r7
 80080b8:	4640      	mov	r0, r8
 80080ba:	4798      	blx	r3
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	1eb5      	subs	r5, r6, #2
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080cc:	463a      	mov	r2, r7
 80080ce:	4640      	mov	r0, r8
 80080d0:	4798      	blx	r3
 80080d2:	462e      	mov	r6, r5
 80080d4:	6825      	ldr	r5, [r4, #0]
 80080d6:	f015 0510 	ands.w	r5, r5, #16
 80080da:	d158      	bne.n	800818e <_scanf_float+0x412>
 80080dc:	7035      	strb	r5, [r6, #0]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e8:	d11c      	bne.n	8008124 <_scanf_float+0x3a8>
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	454b      	cmp	r3, r9
 80080ee:	eba3 0209 	sub.w	r2, r3, r9
 80080f2:	d124      	bne.n	800813e <_scanf_float+0x3c2>
 80080f4:	2200      	movs	r2, #0
 80080f6:	4659      	mov	r1, fp
 80080f8:	4640      	mov	r0, r8
 80080fa:	f002 fba5 	bl	800a848 <_strtod_r>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	6821      	ldr	r1, [r4, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f011 0f02 	tst.w	r1, #2
 8008108:	ec57 6b10 	vmov	r6, r7, d0
 800810c:	f103 0204 	add.w	r2, r3, #4
 8008110:	d020      	beq.n	8008154 <_scanf_float+0x3d8>
 8008112:	9903      	ldr	r1, [sp, #12]
 8008114:	600a      	str	r2, [r1, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	e9c3 6700 	strd	r6, r7, [r3]
 800811c:	68e3      	ldr	r3, [r4, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60e3      	str	r3, [r4, #12]
 8008122:	e66c      	b.n	8007dfe <_scanf_float+0x82>
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0e4      	beq.n	80080f4 <_scanf_float+0x378>
 800812a:	9905      	ldr	r1, [sp, #20]
 800812c:	230a      	movs	r3, #10
 800812e:	462a      	mov	r2, r5
 8008130:	3101      	adds	r1, #1
 8008132:	4640      	mov	r0, r8
 8008134:	f7ff f9b0 	bl	8007498 <_strtol_r>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	9e05      	ldr	r6, [sp, #20]
 800813c:	1ac2      	subs	r2, r0, r3
 800813e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008142:	429e      	cmp	r6, r3
 8008144:	bf28      	it	cs
 8008146:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800814a:	4912      	ldr	r1, [pc, #72]	; (8008194 <_scanf_float+0x418>)
 800814c:	4630      	mov	r0, r6
 800814e:	f000 f8e7 	bl	8008320 <siprintf>
 8008152:	e7cf      	b.n	80080f4 <_scanf_float+0x378>
 8008154:	f011 0f04 	tst.w	r1, #4
 8008158:	9903      	ldr	r1, [sp, #12]
 800815a:	600a      	str	r2, [r1, #0]
 800815c:	d1db      	bne.n	8008116 <_scanf_float+0x39a>
 800815e:	f8d3 8000 	ldr.w	r8, [r3]
 8008162:	ee10 2a10 	vmov	r2, s0
 8008166:	ee10 0a10 	vmov	r0, s0
 800816a:	463b      	mov	r3, r7
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 fced 	bl	8000b4c <__aeabi_dcmpun>
 8008172:	b128      	cbz	r0, 8008180 <_scanf_float+0x404>
 8008174:	4808      	ldr	r0, [pc, #32]	; (8008198 <_scanf_float+0x41c>)
 8008176:	f000 f9e1 	bl	800853c <nanf>
 800817a:	ed88 0a00 	vstr	s0, [r8]
 800817e:	e7cd      	b.n	800811c <_scanf_float+0x3a0>
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 fd40 	bl	8000c08 <__aeabi_d2f>
 8008188:	f8c8 0000 	str.w	r0, [r8]
 800818c:	e7c6      	b.n	800811c <_scanf_float+0x3a0>
 800818e:	2500      	movs	r5, #0
 8008190:	e635      	b.n	8007dfe <_scanf_float+0x82>
 8008192:	bf00      	nop
 8008194:	0800bda9 	.word	0x0800bda9
 8008198:	0800c03c 	.word	0x0800c03c

0800819c <std>:
 800819c:	2300      	movs	r3, #0
 800819e:	b510      	push	{r4, lr}
 80081a0:	4604      	mov	r4, r0
 80081a2:	e9c0 3300 	strd	r3, r3, [r0]
 80081a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081aa:	6083      	str	r3, [r0, #8]
 80081ac:	8181      	strh	r1, [r0, #12]
 80081ae:	6643      	str	r3, [r0, #100]	; 0x64
 80081b0:	81c2      	strh	r2, [r0, #14]
 80081b2:	6183      	str	r3, [r0, #24]
 80081b4:	4619      	mov	r1, r3
 80081b6:	2208      	movs	r2, #8
 80081b8:	305c      	adds	r0, #92	; 0x5c
 80081ba:	f000 f914 	bl	80083e6 <memset>
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <std+0x58>)
 80081c0:	6263      	str	r3, [r4, #36]	; 0x24
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <std+0x5c>)
 80081c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081c6:	4b0d      	ldr	r3, [pc, #52]	; (80081fc <std+0x60>)
 80081c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <std+0x64>)
 80081cc:	6323      	str	r3, [r4, #48]	; 0x30
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <std+0x68>)
 80081d0:	6224      	str	r4, [r4, #32]
 80081d2:	429c      	cmp	r4, r3
 80081d4:	d006      	beq.n	80081e4 <std+0x48>
 80081d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081da:	4294      	cmp	r4, r2
 80081dc:	d002      	beq.n	80081e4 <std+0x48>
 80081de:	33d0      	adds	r3, #208	; 0xd0
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d105      	bne.n	80081f0 <std+0x54>
 80081e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f000 b99a 	b.w	8008524 <__retarget_lock_init_recursive>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	bf00      	nop
 80081f4:	08008361 	.word	0x08008361
 80081f8:	08008383 	.word	0x08008383
 80081fc:	080083bb 	.word	0x080083bb
 8008200:	080083df 	.word	0x080083df
 8008204:	20000560 	.word	0x20000560

08008208 <stdio_exit_handler>:
 8008208:	4a02      	ldr	r2, [pc, #8]	; (8008214 <stdio_exit_handler+0xc>)
 800820a:	4903      	ldr	r1, [pc, #12]	; (8008218 <stdio_exit_handler+0x10>)
 800820c:	4803      	ldr	r0, [pc, #12]	; (800821c <stdio_exit_handler+0x14>)
 800820e:	f000 b869 	b.w	80082e4 <_fwalk_sglue>
 8008212:	bf00      	nop
 8008214:	20000014 	.word	0x20000014
 8008218:	0800ac11 	.word	0x0800ac11
 800821c:	20000020 	.word	0x20000020

08008220 <cleanup_stdio>:
 8008220:	6841      	ldr	r1, [r0, #4]
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <cleanup_stdio+0x34>)
 8008224:	4299      	cmp	r1, r3
 8008226:	b510      	push	{r4, lr}
 8008228:	4604      	mov	r4, r0
 800822a:	d001      	beq.n	8008230 <cleanup_stdio+0x10>
 800822c:	f002 fcf0 	bl	800ac10 <_fflush_r>
 8008230:	68a1      	ldr	r1, [r4, #8]
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <cleanup_stdio+0x38>)
 8008234:	4299      	cmp	r1, r3
 8008236:	d002      	beq.n	800823e <cleanup_stdio+0x1e>
 8008238:	4620      	mov	r0, r4
 800823a:	f002 fce9 	bl	800ac10 <_fflush_r>
 800823e:	68e1      	ldr	r1, [r4, #12]
 8008240:	4b06      	ldr	r3, [pc, #24]	; (800825c <cleanup_stdio+0x3c>)
 8008242:	4299      	cmp	r1, r3
 8008244:	d004      	beq.n	8008250 <cleanup_stdio+0x30>
 8008246:	4620      	mov	r0, r4
 8008248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824c:	f002 bce0 	b.w	800ac10 <_fflush_r>
 8008250:	bd10      	pop	{r4, pc}
 8008252:	bf00      	nop
 8008254:	20000560 	.word	0x20000560
 8008258:	200005c8 	.word	0x200005c8
 800825c:	20000630 	.word	0x20000630

08008260 <global_stdio_init.part.0>:
 8008260:	b510      	push	{r4, lr}
 8008262:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <global_stdio_init.part.0+0x30>)
 8008264:	4c0b      	ldr	r4, [pc, #44]	; (8008294 <global_stdio_init.part.0+0x34>)
 8008266:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <global_stdio_init.part.0+0x38>)
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	4620      	mov	r0, r4
 800826c:	2200      	movs	r2, #0
 800826e:	2104      	movs	r1, #4
 8008270:	f7ff ff94 	bl	800819c <std>
 8008274:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008278:	2201      	movs	r2, #1
 800827a:	2109      	movs	r1, #9
 800827c:	f7ff ff8e 	bl	800819c <std>
 8008280:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008284:	2202      	movs	r2, #2
 8008286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800828a:	2112      	movs	r1, #18
 800828c:	f7ff bf86 	b.w	800819c <std>
 8008290:	20000698 	.word	0x20000698
 8008294:	20000560 	.word	0x20000560
 8008298:	08008209 	.word	0x08008209

0800829c <__sfp_lock_acquire>:
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <__sfp_lock_acquire+0x8>)
 800829e:	f000 b942 	b.w	8008526 <__retarget_lock_acquire_recursive>
 80082a2:	bf00      	nop
 80082a4:	200006a1 	.word	0x200006a1

080082a8 <__sfp_lock_release>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__sfp_lock_release+0x8>)
 80082aa:	f000 b93d 	b.w	8008528 <__retarget_lock_release_recursive>
 80082ae:	bf00      	nop
 80082b0:	200006a1 	.word	0x200006a1

080082b4 <__sinit>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4604      	mov	r4, r0
 80082b8:	f7ff fff0 	bl	800829c <__sfp_lock_acquire>
 80082bc:	6a23      	ldr	r3, [r4, #32]
 80082be:	b11b      	cbz	r3, 80082c8 <__sinit+0x14>
 80082c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082c4:	f7ff bff0 	b.w	80082a8 <__sfp_lock_release>
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <__sinit+0x28>)
 80082ca:	6223      	str	r3, [r4, #32]
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <__sinit+0x2c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f5      	bne.n	80082c0 <__sinit+0xc>
 80082d4:	f7ff ffc4 	bl	8008260 <global_stdio_init.part.0>
 80082d8:	e7f2      	b.n	80082c0 <__sinit+0xc>
 80082da:	bf00      	nop
 80082dc:	08008221 	.word	0x08008221
 80082e0:	20000698 	.word	0x20000698

080082e4 <_fwalk_sglue>:
 80082e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e8:	4607      	mov	r7, r0
 80082ea:	4688      	mov	r8, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	2600      	movs	r6, #0
 80082f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082f4:	f1b9 0901 	subs.w	r9, r9, #1
 80082f8:	d505      	bpl.n	8008306 <_fwalk_sglue+0x22>
 80082fa:	6824      	ldr	r4, [r4, #0]
 80082fc:	2c00      	cmp	r4, #0
 80082fe:	d1f7      	bne.n	80082f0 <_fwalk_sglue+0xc>
 8008300:	4630      	mov	r0, r6
 8008302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d907      	bls.n	800831c <_fwalk_sglue+0x38>
 800830c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008310:	3301      	adds	r3, #1
 8008312:	d003      	beq.n	800831c <_fwalk_sglue+0x38>
 8008314:	4629      	mov	r1, r5
 8008316:	4638      	mov	r0, r7
 8008318:	47c0      	blx	r8
 800831a:	4306      	orrs	r6, r0
 800831c:	3568      	adds	r5, #104	; 0x68
 800831e:	e7e9      	b.n	80082f4 <_fwalk_sglue+0x10>

08008320 <siprintf>:
 8008320:	b40e      	push	{r1, r2, r3}
 8008322:	b500      	push	{lr}
 8008324:	b09c      	sub	sp, #112	; 0x70
 8008326:	ab1d      	add	r3, sp, #116	; 0x74
 8008328:	9002      	str	r0, [sp, #8]
 800832a:	9006      	str	r0, [sp, #24]
 800832c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008330:	4809      	ldr	r0, [pc, #36]	; (8008358 <siprintf+0x38>)
 8008332:	9107      	str	r1, [sp, #28]
 8008334:	9104      	str	r1, [sp, #16]
 8008336:	4909      	ldr	r1, [pc, #36]	; (800835c <siprintf+0x3c>)
 8008338:	f853 2b04 	ldr.w	r2, [r3], #4
 800833c:	9105      	str	r1, [sp, #20]
 800833e:	6800      	ldr	r0, [r0, #0]
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	a902      	add	r1, sp, #8
 8008344:	f002 fae0 	bl	800a908 <_svfiprintf_r>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	b01c      	add	sp, #112	; 0x70
 8008350:	f85d eb04 	ldr.w	lr, [sp], #4
 8008354:	b003      	add	sp, #12
 8008356:	4770      	bx	lr
 8008358:	2000006c 	.word	0x2000006c
 800835c:	ffff0208 	.word	0xffff0208

08008360 <__sread>:
 8008360:	b510      	push	{r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008368:	f000 f87e 	bl	8008468 <_read_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	bfab      	itete	ge
 8008370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008372:	89a3      	ldrhlt	r3, [r4, #12]
 8008374:	181b      	addge	r3, r3, r0
 8008376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837a:	bfac      	ite	ge
 800837c:	6563      	strge	r3, [r4, #84]	; 0x54
 800837e:	81a3      	strhlt	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__swrite>:
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	461f      	mov	r7, r3
 8008388:	898b      	ldrh	r3, [r1, #12]
 800838a:	05db      	lsls	r3, r3, #23
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4616      	mov	r6, r2
 8008392:	d505      	bpl.n	80083a0 <__swrite+0x1e>
 8008394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008398:	2302      	movs	r3, #2
 800839a:	2200      	movs	r2, #0
 800839c:	f000 f852 	bl	8008444 <_lseek_r>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	4632      	mov	r2, r6
 80083ae:	463b      	mov	r3, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	f000 b879 	b.w	80084ac <_write_r>

080083ba <__sseek>:
 80083ba:	b510      	push	{r4, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 f83f 	bl	8008444 <_lseek_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	bf15      	itete	ne
 80083cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d6:	81a3      	strheq	r3, [r4, #12]
 80083d8:	bf18      	it	ne
 80083da:	81a3      	strhne	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__sclose>:
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 b81f 	b.w	8008424 <_close_r>

080083e6 <memset>:
 80083e6:	4402      	add	r2, r0
 80083e8:	4603      	mov	r3, r0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d100      	bne.n	80083f0 <memset+0xa>
 80083ee:	4770      	bx	lr
 80083f0:	f803 1b01 	strb.w	r1, [r3], #1
 80083f4:	e7f9      	b.n	80083ea <memset+0x4>

080083f6 <strncpy>:
 80083f6:	b510      	push	{r4, lr}
 80083f8:	3901      	subs	r1, #1
 80083fa:	4603      	mov	r3, r0
 80083fc:	b132      	cbz	r2, 800840c <strncpy+0x16>
 80083fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008402:	f803 4b01 	strb.w	r4, [r3], #1
 8008406:	3a01      	subs	r2, #1
 8008408:	2c00      	cmp	r4, #0
 800840a:	d1f7      	bne.n	80083fc <strncpy+0x6>
 800840c:	441a      	add	r2, r3
 800840e:	2100      	movs	r1, #0
 8008410:	4293      	cmp	r3, r2
 8008412:	d100      	bne.n	8008416 <strncpy+0x20>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	f803 1b01 	strb.w	r1, [r3], #1
 800841a:	e7f9      	b.n	8008410 <strncpy+0x1a>

0800841c <_localeconv_r>:
 800841c:	4800      	ldr	r0, [pc, #0]	; (8008420 <_localeconv_r+0x4>)
 800841e:	4770      	bx	lr
 8008420:	20000160 	.word	0x20000160

08008424 <_close_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d06      	ldr	r5, [pc, #24]	; (8008440 <_close_r+0x1c>)
 8008428:	2300      	movs	r3, #0
 800842a:	4604      	mov	r4, r0
 800842c:	4608      	mov	r0, r1
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	f7f9 ff7f 	bl	8002332 <_close>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_close_r+0x1a>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_close_r+0x1a>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	2000069c 	.word	0x2000069c

08008444 <_lseek_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_lseek_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 ff94 	bl	8002380 <_lseek>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_lseek_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_lseek_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	2000069c 	.word	0x2000069c

08008468 <_read_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	; (8008488 <_read_r+0x20>)
 800846c:	4604      	mov	r4, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	602a      	str	r2, [r5, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f9 ff22 	bl	80022c0 <_read>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_read_r+0x1e>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_read_r+0x1e>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	2000069c 	.word	0x2000069c

0800848c <_sbrk_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d06      	ldr	r5, [pc, #24]	; (80084a8 <_sbrk_r+0x1c>)
 8008490:	2300      	movs	r3, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f9 ff80 	bl	800239c <_sbrk>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_sbrk_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_sbrk_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2000069c 	.word	0x2000069c

080084ac <_write_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d07      	ldr	r5, [pc, #28]	; (80084cc <_write_r+0x20>)
 80084b0:	4604      	mov	r4, r0
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	2200      	movs	r2, #0
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7f9 ff1d 	bl	80022fa <_write>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_write_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_write_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	2000069c 	.word	0x2000069c

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	2000006c 	.word	0x2000006c

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	4d0d      	ldr	r5, [pc, #52]	; (8008514 <__libc_init_array+0x38>)
 80084e0:	4c0d      	ldr	r4, [pc, #52]	; (8008518 <__libc_init_array+0x3c>)
 80084e2:	1b64      	subs	r4, r4, r5
 80084e4:	10a4      	asrs	r4, r4, #2
 80084e6:	2600      	movs	r6, #0
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	4d0b      	ldr	r5, [pc, #44]	; (800851c <__libc_init_array+0x40>)
 80084ee:	4c0c      	ldr	r4, [pc, #48]	; (8008520 <__libc_init_array+0x44>)
 80084f0:	f003 fb9c 	bl	800bc2c <_init>
 80084f4:	1b64      	subs	r4, r4, r5
 80084f6:	10a4      	asrs	r4, r4, #2
 80084f8:	2600      	movs	r6, #0
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	0800c0a8 	.word	0x0800c0a8
 8008518:	0800c0a8 	.word	0x0800c0a8
 800851c:	0800c0a8 	.word	0x0800c0a8
 8008520:	0800c0ac 	.word	0x0800c0ac

08008524 <__retarget_lock_init_recursive>:
 8008524:	4770      	bx	lr

08008526 <__retarget_lock_acquire_recursive>:
 8008526:	4770      	bx	lr

08008528 <__retarget_lock_release_recursive>:
 8008528:	4770      	bx	lr

0800852a <strcpy>:
 800852a:	4603      	mov	r3, r0
 800852c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008530:	f803 2b01 	strb.w	r2, [r3], #1
 8008534:	2a00      	cmp	r2, #0
 8008536:	d1f9      	bne.n	800852c <strcpy+0x2>
 8008538:	4770      	bx	lr
	...

0800853c <nanf>:
 800853c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008544 <nanf+0x8>
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	7fc00000 	.word	0x7fc00000

08008548 <quorem>:
 8008548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	6903      	ldr	r3, [r0, #16]
 800854e:	690c      	ldr	r4, [r1, #16]
 8008550:	42a3      	cmp	r3, r4
 8008552:	4607      	mov	r7, r0
 8008554:	db7e      	blt.n	8008654 <quorem+0x10c>
 8008556:	3c01      	subs	r4, #1
 8008558:	f101 0814 	add.w	r8, r1, #20
 800855c:	f100 0514 	add.w	r5, r0, #20
 8008560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800856a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800856e:	3301      	adds	r3, #1
 8008570:	429a      	cmp	r2, r3
 8008572:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008576:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800857a:	fbb2 f6f3 	udiv	r6, r2, r3
 800857e:	d331      	bcc.n	80085e4 <quorem+0x9c>
 8008580:	f04f 0e00 	mov.w	lr, #0
 8008584:	4640      	mov	r0, r8
 8008586:	46ac      	mov	ip, r5
 8008588:	46f2      	mov	sl, lr
 800858a:	f850 2b04 	ldr.w	r2, [r0], #4
 800858e:	b293      	uxth	r3, r2
 8008590:	fb06 e303 	mla	r3, r6, r3, lr
 8008594:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008598:	0c1a      	lsrs	r2, r3, #16
 800859a:	b29b      	uxth	r3, r3
 800859c:	ebaa 0303 	sub.w	r3, sl, r3
 80085a0:	f8dc a000 	ldr.w	sl, [ip]
 80085a4:	fa13 f38a 	uxtah	r3, r3, sl
 80085a8:	fb06 220e 	mla	r2, r6, lr, r2
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	9b00      	ldr	r3, [sp, #0]
 80085b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085b4:	b292      	uxth	r2, r2
 80085b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085be:	f8bd 3000 	ldrh.w	r3, [sp]
 80085c2:	4581      	cmp	r9, r0
 80085c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c8:	f84c 3b04 	str.w	r3, [ip], #4
 80085cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085d0:	d2db      	bcs.n	800858a <quorem+0x42>
 80085d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80085d6:	b92b      	cbnz	r3, 80085e4 <quorem+0x9c>
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	3b04      	subs	r3, #4
 80085dc:	429d      	cmp	r5, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	d32c      	bcc.n	800863c <quorem+0xf4>
 80085e2:	613c      	str	r4, [r7, #16]
 80085e4:	4638      	mov	r0, r7
 80085e6:	f001 f93b 	bl	8009860 <__mcmp>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	db22      	blt.n	8008634 <quorem+0xec>
 80085ee:	3601      	adds	r6, #1
 80085f0:	4629      	mov	r1, r5
 80085f2:	2000      	movs	r0, #0
 80085f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80085f8:	f8d1 c000 	ldr.w	ip, [r1]
 80085fc:	b293      	uxth	r3, r2
 80085fe:	1ac3      	subs	r3, r0, r3
 8008600:	0c12      	lsrs	r2, r2, #16
 8008602:	fa13 f38c 	uxtah	r3, r3, ip
 8008606:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800860a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800860e:	b29b      	uxth	r3, r3
 8008610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008614:	45c1      	cmp	r9, r8
 8008616:	f841 3b04 	str.w	r3, [r1], #4
 800861a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800861e:	d2e9      	bcs.n	80085f4 <quorem+0xac>
 8008620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008624:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008628:	b922      	cbnz	r2, 8008634 <quorem+0xec>
 800862a:	3b04      	subs	r3, #4
 800862c:	429d      	cmp	r5, r3
 800862e:	461a      	mov	r2, r3
 8008630:	d30a      	bcc.n	8008648 <quorem+0x100>
 8008632:	613c      	str	r4, [r7, #16]
 8008634:	4630      	mov	r0, r6
 8008636:	b003      	add	sp, #12
 8008638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	3b04      	subs	r3, #4
 8008640:	2a00      	cmp	r2, #0
 8008642:	d1ce      	bne.n	80085e2 <quorem+0x9a>
 8008644:	3c01      	subs	r4, #1
 8008646:	e7c9      	b.n	80085dc <quorem+0x94>
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	3b04      	subs	r3, #4
 800864c:	2a00      	cmp	r2, #0
 800864e:	d1f0      	bne.n	8008632 <quorem+0xea>
 8008650:	3c01      	subs	r4, #1
 8008652:	e7eb      	b.n	800862c <quorem+0xe4>
 8008654:	2000      	movs	r0, #0
 8008656:	e7ee      	b.n	8008636 <quorem+0xee>

08008658 <_dtoa_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	ed2d 8b04 	vpush	{d8-d9}
 8008660:	69c5      	ldr	r5, [r0, #28]
 8008662:	b093      	sub	sp, #76	; 0x4c
 8008664:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008668:	ec57 6b10 	vmov	r6, r7, d0
 800866c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008670:	9107      	str	r1, [sp, #28]
 8008672:	4604      	mov	r4, r0
 8008674:	920a      	str	r2, [sp, #40]	; 0x28
 8008676:	930d      	str	r3, [sp, #52]	; 0x34
 8008678:	b975      	cbnz	r5, 8008698 <_dtoa_r+0x40>
 800867a:	2010      	movs	r0, #16
 800867c:	f7fe fdce 	bl	800721c <malloc>
 8008680:	4602      	mov	r2, r0
 8008682:	61e0      	str	r0, [r4, #28]
 8008684:	b920      	cbnz	r0, 8008690 <_dtoa_r+0x38>
 8008686:	4bae      	ldr	r3, [pc, #696]	; (8008940 <_dtoa_r+0x2e8>)
 8008688:	21ef      	movs	r1, #239	; 0xef
 800868a:	48ae      	ldr	r0, [pc, #696]	; (8008944 <_dtoa_r+0x2ec>)
 800868c:	f002 fb2c 	bl	800ace8 <__assert_func>
 8008690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008694:	6005      	str	r5, [r0, #0]
 8008696:	60c5      	str	r5, [r0, #12]
 8008698:	69e3      	ldr	r3, [r4, #28]
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	b151      	cbz	r1, 80086b4 <_dtoa_r+0x5c>
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	604a      	str	r2, [r1, #4]
 80086a2:	2301      	movs	r3, #1
 80086a4:	4093      	lsls	r3, r2
 80086a6:	608b      	str	r3, [r1, #8]
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fe53 	bl	8009354 <_Bfree>
 80086ae:	69e3      	ldr	r3, [r4, #28]
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	1e3b      	subs	r3, r7, #0
 80086b6:	bfbb      	ittet	lt
 80086b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086bc:	9303      	strlt	r3, [sp, #12]
 80086be:	2300      	movge	r3, #0
 80086c0:	2201      	movlt	r2, #1
 80086c2:	bfac      	ite	ge
 80086c4:	f8c8 3000 	strge.w	r3, [r8]
 80086c8:	f8c8 2000 	strlt.w	r2, [r8]
 80086cc:	4b9e      	ldr	r3, [pc, #632]	; (8008948 <_dtoa_r+0x2f0>)
 80086ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086d2:	ea33 0308 	bics.w	r3, r3, r8
 80086d6:	d11b      	bne.n	8008710 <_dtoa_r+0xb8>
 80086d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086da:	f242 730f 	movw	r3, #9999	; 0x270f
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80086e4:	4333      	orrs	r3, r6
 80086e6:	f000 8593 	beq.w	8009210 <_dtoa_r+0xbb8>
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	b963      	cbnz	r3, 8008708 <_dtoa_r+0xb0>
 80086ee:	4b97      	ldr	r3, [pc, #604]	; (800894c <_dtoa_r+0x2f4>)
 80086f0:	e027      	b.n	8008742 <_dtoa_r+0xea>
 80086f2:	4b97      	ldr	r3, [pc, #604]	; (8008950 <_dtoa_r+0x2f8>)
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	9800      	ldr	r0, [sp, #0]
 80086fe:	b013      	add	sp, #76	; 0x4c
 8008700:	ecbd 8b04 	vpop	{d8-d9}
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	4b90      	ldr	r3, [pc, #576]	; (800894c <_dtoa_r+0x2f4>)
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	3303      	adds	r3, #3
 800870e:	e7f3      	b.n	80086f8 <_dtoa_r+0xa0>
 8008710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008714:	2200      	movs	r2, #0
 8008716:	ec51 0b17 	vmov	r0, r1, d7
 800871a:	eeb0 8a47 	vmov.f32	s16, s14
 800871e:	eef0 8a67 	vmov.f32	s17, s15
 8008722:	2300      	movs	r3, #0
 8008724:	f7f8 f9e0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008728:	4681      	mov	r9, r0
 800872a:	b160      	cbz	r0, 8008746 <_dtoa_r+0xee>
 800872c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800872e:	2301      	movs	r3, #1
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8568 	beq.w	800920a <_dtoa_r+0xbb2>
 800873a:	4b86      	ldr	r3, [pc, #536]	; (8008954 <_dtoa_r+0x2fc>)
 800873c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	e7da      	b.n	80086fc <_dtoa_r+0xa4>
 8008746:	aa10      	add	r2, sp, #64	; 0x40
 8008748:	a911      	add	r1, sp, #68	; 0x44
 800874a:	4620      	mov	r0, r4
 800874c:	eeb0 0a48 	vmov.f32	s0, s16
 8008750:	eef0 0a68 	vmov.f32	s1, s17
 8008754:	f001 f99a 	bl	8009a8c <__d2b>
 8008758:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800875c:	4682      	mov	sl, r0
 800875e:	2d00      	cmp	r5, #0
 8008760:	d07f      	beq.n	8008862 <_dtoa_r+0x20a>
 8008762:	ee18 3a90 	vmov	r3, s17
 8008766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800876a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800876e:	ec51 0b18 	vmov	r0, r1, d8
 8008772:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800877a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800877e:	4619      	mov	r1, r3
 8008780:	2200      	movs	r2, #0
 8008782:	4b75      	ldr	r3, [pc, #468]	; (8008958 <_dtoa_r+0x300>)
 8008784:	f7f7 fd90 	bl	80002a8 <__aeabi_dsub>
 8008788:	a367      	add	r3, pc, #412	; (adr r3, 8008928 <_dtoa_r+0x2d0>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 ff43 	bl	8000618 <__aeabi_dmul>
 8008792:	a367      	add	r3, pc, #412	; (adr r3, 8008930 <_dtoa_r+0x2d8>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 fd88 	bl	80002ac <__adddf3>
 800879c:	4606      	mov	r6, r0
 800879e:	4628      	mov	r0, r5
 80087a0:	460f      	mov	r7, r1
 80087a2:	f7f7 fecf 	bl	8000544 <__aeabi_i2d>
 80087a6:	a364      	add	r3, pc, #400	; (adr r3, 8008938 <_dtoa_r+0x2e0>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 ff34 	bl	8000618 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd78 	bl	80002ac <__adddf3>
 80087bc:	4606      	mov	r6, r0
 80087be:	460f      	mov	r7, r1
 80087c0:	f7f8 f9da 	bl	8000b78 <__aeabi_d2iz>
 80087c4:	2200      	movs	r2, #0
 80087c6:	4683      	mov	fp, r0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f8 f995 	bl	8000afc <__aeabi_dcmplt>
 80087d2:	b148      	cbz	r0, 80087e8 <_dtoa_r+0x190>
 80087d4:	4658      	mov	r0, fp
 80087d6:	f7f7 feb5 	bl	8000544 <__aeabi_i2d>
 80087da:	4632      	mov	r2, r6
 80087dc:	463b      	mov	r3, r7
 80087de:	f7f8 f983 	bl	8000ae8 <__aeabi_dcmpeq>
 80087e2:	b908      	cbnz	r0, 80087e8 <_dtoa_r+0x190>
 80087e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087e8:	f1bb 0f16 	cmp.w	fp, #22
 80087ec:	d857      	bhi.n	800889e <_dtoa_r+0x246>
 80087ee:	4b5b      	ldr	r3, [pc, #364]	; (800895c <_dtoa_r+0x304>)
 80087f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	ec51 0b18 	vmov	r0, r1, d8
 80087fc:	f7f8 f97e 	bl	8000afc <__aeabi_dcmplt>
 8008800:	2800      	cmp	r0, #0
 8008802:	d04e      	beq.n	80088a2 <_dtoa_r+0x24a>
 8008804:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008808:	2300      	movs	r3, #0
 800880a:	930c      	str	r3, [sp, #48]	; 0x30
 800880c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800880e:	1b5b      	subs	r3, r3, r5
 8008810:	1e5a      	subs	r2, r3, #1
 8008812:	bf45      	ittet	mi
 8008814:	f1c3 0301 	rsbmi	r3, r3, #1
 8008818:	9305      	strmi	r3, [sp, #20]
 800881a:	2300      	movpl	r3, #0
 800881c:	2300      	movmi	r3, #0
 800881e:	9206      	str	r2, [sp, #24]
 8008820:	bf54      	ite	pl
 8008822:	9305      	strpl	r3, [sp, #20]
 8008824:	9306      	strmi	r3, [sp, #24]
 8008826:	f1bb 0f00 	cmp.w	fp, #0
 800882a:	db3c      	blt.n	80088a6 <_dtoa_r+0x24e>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008832:	445b      	add	r3, fp
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	2300      	movs	r3, #0
 8008838:	9308      	str	r3, [sp, #32]
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	2b09      	cmp	r3, #9
 800883e:	d868      	bhi.n	8008912 <_dtoa_r+0x2ba>
 8008840:	2b05      	cmp	r3, #5
 8008842:	bfc4      	itt	gt
 8008844:	3b04      	subgt	r3, #4
 8008846:	9307      	strgt	r3, [sp, #28]
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	f1a3 0302 	sub.w	r3, r3, #2
 800884e:	bfcc      	ite	gt
 8008850:	2500      	movgt	r5, #0
 8008852:	2501      	movle	r5, #1
 8008854:	2b03      	cmp	r3, #3
 8008856:	f200 8085 	bhi.w	8008964 <_dtoa_r+0x30c>
 800885a:	e8df f003 	tbb	[pc, r3]
 800885e:	3b2e      	.short	0x3b2e
 8008860:	5839      	.short	0x5839
 8008862:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008866:	441d      	add	r5, r3
 8008868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800886c:	2b20      	cmp	r3, #32
 800886e:	bfc1      	itttt	gt
 8008870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008874:	fa08 f803 	lslgt.w	r8, r8, r3
 8008878:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800887c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008880:	bfd6      	itet	le
 8008882:	f1c3 0320 	rsble	r3, r3, #32
 8008886:	ea48 0003 	orrgt.w	r0, r8, r3
 800888a:	fa06 f003 	lslle.w	r0, r6, r3
 800888e:	f7f7 fe49 	bl	8000524 <__aeabi_ui2d>
 8008892:	2201      	movs	r2, #1
 8008894:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008898:	3d01      	subs	r5, #1
 800889a:	920e      	str	r2, [sp, #56]	; 0x38
 800889c:	e76f      	b.n	800877e <_dtoa_r+0x126>
 800889e:	2301      	movs	r3, #1
 80088a0:	e7b3      	b.n	800880a <_dtoa_r+0x1b2>
 80088a2:	900c      	str	r0, [sp, #48]	; 0x30
 80088a4:	e7b2      	b.n	800880c <_dtoa_r+0x1b4>
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	eba3 030b 	sub.w	r3, r3, fp
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	f1cb 0300 	rsb	r3, fp, #0
 80088b2:	9308      	str	r3, [sp, #32]
 80088b4:	2300      	movs	r3, #0
 80088b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80088b8:	e7bf      	b.n	800883a <_dtoa_r+0x1e2>
 80088ba:	2300      	movs	r3, #0
 80088bc:	9309      	str	r3, [sp, #36]	; 0x24
 80088be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dc52      	bgt.n	800896a <_dtoa_r+0x312>
 80088c4:	2301      	movs	r3, #1
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	9304      	str	r3, [sp, #16]
 80088ca:	461a      	mov	r2, r3
 80088cc:	920a      	str	r2, [sp, #40]	; 0x28
 80088ce:	e00b      	b.n	80088e8 <_dtoa_r+0x290>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7f3      	b.n	80088bc <_dtoa_r+0x264>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	445b      	add	r3, fp
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	3301      	adds	r3, #1
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	bfb8      	it	lt
 80088e6:	2301      	movlt	r3, #1
 80088e8:	69e0      	ldr	r0, [r4, #28]
 80088ea:	2100      	movs	r1, #0
 80088ec:	2204      	movs	r2, #4
 80088ee:	f102 0614 	add.w	r6, r2, #20
 80088f2:	429e      	cmp	r6, r3
 80088f4:	d93d      	bls.n	8008972 <_dtoa_r+0x31a>
 80088f6:	6041      	str	r1, [r0, #4]
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fceb 	bl	80092d4 <_Balloc>
 80088fe:	9000      	str	r0, [sp, #0]
 8008900:	2800      	cmp	r0, #0
 8008902:	d139      	bne.n	8008978 <_dtoa_r+0x320>
 8008904:	4b16      	ldr	r3, [pc, #88]	; (8008960 <_dtoa_r+0x308>)
 8008906:	4602      	mov	r2, r0
 8008908:	f240 11af 	movw	r1, #431	; 0x1af
 800890c:	e6bd      	b.n	800868a <_dtoa_r+0x32>
 800890e:	2301      	movs	r3, #1
 8008910:	e7e1      	b.n	80088d6 <_dtoa_r+0x27e>
 8008912:	2501      	movs	r5, #1
 8008914:	2300      	movs	r3, #0
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	9509      	str	r5, [sp, #36]	; 0x24
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	2200      	movs	r2, #0
 8008924:	2312      	movs	r3, #18
 8008926:	e7d1      	b.n	80088cc <_dtoa_r+0x274>
 8008928:	636f4361 	.word	0x636f4361
 800892c:	3fd287a7 	.word	0x3fd287a7
 8008930:	8b60c8b3 	.word	0x8b60c8b3
 8008934:	3fc68a28 	.word	0x3fc68a28
 8008938:	509f79fb 	.word	0x509f79fb
 800893c:	3fd34413 	.word	0x3fd34413
 8008940:	0800bdbb 	.word	0x0800bdbb
 8008944:	0800bdd2 	.word	0x0800bdd2
 8008948:	7ff00000 	.word	0x7ff00000
 800894c:	0800bdb7 	.word	0x0800bdb7
 8008950:	0800bdae 	.word	0x0800bdae
 8008954:	0800bd86 	.word	0x0800bd86
 8008958:	3ff80000 	.word	0x3ff80000
 800895c:	0800bec0 	.word	0x0800bec0
 8008960:	0800be2a 	.word	0x0800be2a
 8008964:	2301      	movs	r3, #1
 8008966:	9309      	str	r3, [sp, #36]	; 0x24
 8008968:	e7d7      	b.n	800891a <_dtoa_r+0x2c2>
 800896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	9304      	str	r3, [sp, #16]
 8008970:	e7ba      	b.n	80088e8 <_dtoa_r+0x290>
 8008972:	3101      	adds	r1, #1
 8008974:	0052      	lsls	r2, r2, #1
 8008976:	e7ba      	b.n	80088ee <_dtoa_r+0x296>
 8008978:	69e3      	ldr	r3, [r4, #28]
 800897a:	9a00      	ldr	r2, [sp, #0]
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	2b0e      	cmp	r3, #14
 8008982:	f200 80a8 	bhi.w	8008ad6 <_dtoa_r+0x47e>
 8008986:	2d00      	cmp	r5, #0
 8008988:	f000 80a5 	beq.w	8008ad6 <_dtoa_r+0x47e>
 800898c:	f1bb 0f00 	cmp.w	fp, #0
 8008990:	dd38      	ble.n	8008a04 <_dtoa_r+0x3ac>
 8008992:	4bc0      	ldr	r3, [pc, #768]	; (8008c94 <_dtoa_r+0x63c>)
 8008994:	f00b 020f 	and.w	r2, fp, #15
 8008998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80089a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80089a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80089a8:	d019      	beq.n	80089de <_dtoa_r+0x386>
 80089aa:	4bbb      	ldr	r3, [pc, #748]	; (8008c98 <_dtoa_r+0x640>)
 80089ac:	ec51 0b18 	vmov	r0, r1, d8
 80089b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b4:	f7f7 ff5a 	bl	800086c <__aeabi_ddiv>
 80089b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089bc:	f008 080f 	and.w	r8, r8, #15
 80089c0:	2503      	movs	r5, #3
 80089c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c98 <_dtoa_r+0x640>
 80089c6:	f1b8 0f00 	cmp.w	r8, #0
 80089ca:	d10a      	bne.n	80089e2 <_dtoa_r+0x38a>
 80089cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	f7f7 ff4a 	bl	800086c <__aeabi_ddiv>
 80089d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089dc:	e02b      	b.n	8008a36 <_dtoa_r+0x3de>
 80089de:	2502      	movs	r5, #2
 80089e0:	e7ef      	b.n	80089c2 <_dtoa_r+0x36a>
 80089e2:	f018 0f01 	tst.w	r8, #1
 80089e6:	d008      	beq.n	80089fa <_dtoa_r+0x3a2>
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089f0:	f7f7 fe12 	bl	8000618 <__aeabi_dmul>
 80089f4:	3501      	adds	r5, #1
 80089f6:	4606      	mov	r6, r0
 80089f8:	460f      	mov	r7, r1
 80089fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089fe:	f109 0908 	add.w	r9, r9, #8
 8008a02:	e7e0      	b.n	80089c6 <_dtoa_r+0x36e>
 8008a04:	f000 809f 	beq.w	8008b46 <_dtoa_r+0x4ee>
 8008a08:	f1cb 0600 	rsb	r6, fp, #0
 8008a0c:	4ba1      	ldr	r3, [pc, #644]	; (8008c94 <_dtoa_r+0x63c>)
 8008a0e:	4fa2      	ldr	r7, [pc, #648]	; (8008c98 <_dtoa_r+0x640>)
 8008a10:	f006 020f 	and.w	r2, r6, #15
 8008a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	ec51 0b18 	vmov	r0, r1, d8
 8008a20:	f7f7 fdfa 	bl	8000618 <__aeabi_dmul>
 8008a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a28:	1136      	asrs	r6, r6, #4
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2502      	movs	r5, #2
 8008a2e:	2e00      	cmp	r6, #0
 8008a30:	d17e      	bne.n	8008b30 <_dtoa_r+0x4d8>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1d0      	bne.n	80089d8 <_dtoa_r+0x380>
 8008a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8084 	beq.w	8008b4a <_dtoa_r+0x4f2>
 8008a42:	4b96      	ldr	r3, [pc, #600]	; (8008c9c <_dtoa_r+0x644>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	f7f8 f857 	bl	8000afc <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d07b      	beq.n	8008b4a <_dtoa_r+0x4f2>
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d078      	beq.n	8008b4a <_dtoa_r+0x4f2>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd39      	ble.n	8008ad2 <_dtoa_r+0x47a>
 8008a5e:	4b90      	ldr	r3, [pc, #576]	; (8008ca0 <_dtoa_r+0x648>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	4640      	mov	r0, r8
 8008a64:	4649      	mov	r1, r9
 8008a66:	f7f7 fdd7 	bl	8000618 <__aeabi_dmul>
 8008a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a6e:	9e01      	ldr	r6, [sp, #4]
 8008a70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008a74:	3501      	adds	r5, #1
 8008a76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7f7 fd62 	bl	8000544 <__aeabi_i2d>
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	f7f7 fdc8 	bl	8000618 <__aeabi_dmul>
 8008a88:	4b86      	ldr	r3, [pc, #536]	; (8008ca4 <_dtoa_r+0x64c>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fc0e 	bl	80002ac <__adddf3>
 8008a90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a98:	9303      	str	r3, [sp, #12]
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	d158      	bne.n	8008b50 <_dtoa_r+0x4f8>
 8008a9e:	4b82      	ldr	r3, [pc, #520]	; (8008ca8 <_dtoa_r+0x650>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4640      	mov	r0, r8
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	f7f7 fbff 	bl	80002a8 <__aeabi_dsub>
 8008aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	f7f8 f841 	bl	8000b38 <__aeabi_dcmpgt>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f040 8296 	bne.w	8008fe8 <_dtoa_r+0x990>
 8008abc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	f7f8 f818 	bl	8000afc <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f040 8289 	bne.w	8008fe4 <_dtoa_r+0x98c>
 8008ad2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f2c0 814e 	blt.w	8008d7a <_dtoa_r+0x722>
 8008ade:	f1bb 0f0e 	cmp.w	fp, #14
 8008ae2:	f300 814a 	bgt.w	8008d7a <_dtoa_r+0x722>
 8008ae6:	4b6b      	ldr	r3, [pc, #428]	; (8008c94 <_dtoa_r+0x63c>)
 8008ae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f280 80dc 	bge.w	8008cb0 <_dtoa_r+0x658>
 8008af8:	9b04      	ldr	r3, [sp, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f300 80d8 	bgt.w	8008cb0 <_dtoa_r+0x658>
 8008b00:	f040 826f 	bne.w	8008fe2 <_dtoa_r+0x98a>
 8008b04:	4b68      	ldr	r3, [pc, #416]	; (8008ca8 <_dtoa_r+0x650>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f7 fd84 	bl	8000618 <__aeabi_dmul>
 8008b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b14:	f7f8 f806 	bl	8000b24 <__aeabi_dcmpge>
 8008b18:	9e04      	ldr	r6, [sp, #16]
 8008b1a:	4637      	mov	r7, r6
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f040 8245 	bne.w	8008fac <_dtoa_r+0x954>
 8008b22:	9d00      	ldr	r5, [sp, #0]
 8008b24:	2331      	movs	r3, #49	; 0x31
 8008b26:	f805 3b01 	strb.w	r3, [r5], #1
 8008b2a:	f10b 0b01 	add.w	fp, fp, #1
 8008b2e:	e241      	b.n	8008fb4 <_dtoa_r+0x95c>
 8008b30:	07f2      	lsls	r2, r6, #31
 8008b32:	d505      	bpl.n	8008b40 <_dtoa_r+0x4e8>
 8008b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b38:	f7f7 fd6e 	bl	8000618 <__aeabi_dmul>
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	2301      	movs	r3, #1
 8008b40:	1076      	asrs	r6, r6, #1
 8008b42:	3708      	adds	r7, #8
 8008b44:	e773      	b.n	8008a2e <_dtoa_r+0x3d6>
 8008b46:	2502      	movs	r5, #2
 8008b48:	e775      	b.n	8008a36 <_dtoa_r+0x3de>
 8008b4a:	9e04      	ldr	r6, [sp, #16]
 8008b4c:	465f      	mov	r7, fp
 8008b4e:	e792      	b.n	8008a76 <_dtoa_r+0x41e>
 8008b50:	9900      	ldr	r1, [sp, #0]
 8008b52:	4b50      	ldr	r3, [pc, #320]	; (8008c94 <_dtoa_r+0x63c>)
 8008b54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b58:	4431      	add	r1, r6
 8008b5a:	9102      	str	r1, [sp, #8]
 8008b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b5e:	eeb0 9a47 	vmov.f32	s18, s14
 8008b62:	eef0 9a67 	vmov.f32	s19, s15
 8008b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	d044      	beq.n	8008bfc <_dtoa_r+0x5a4>
 8008b72:	494e      	ldr	r1, [pc, #312]	; (8008cac <_dtoa_r+0x654>)
 8008b74:	2000      	movs	r0, #0
 8008b76:	f7f7 fe79 	bl	800086c <__aeabi_ddiv>
 8008b7a:	ec53 2b19 	vmov	r2, r3, d9
 8008b7e:	f7f7 fb93 	bl	80002a8 <__aeabi_dsub>
 8008b82:	9d00      	ldr	r5, [sp, #0]
 8008b84:	ec41 0b19 	vmov	d9, r0, r1
 8008b88:	4649      	mov	r1, r9
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7f7 fff4 	bl	8000b78 <__aeabi_d2iz>
 8008b90:	4606      	mov	r6, r0
 8008b92:	f7f7 fcd7 	bl	8000544 <__aeabi_i2d>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	f7f7 fb83 	bl	80002a8 <__aeabi_dsub>
 8008ba2:	3630      	adds	r6, #48	; 0x30
 8008ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ba8:	ec53 2b19 	vmov	r2, r3, d9
 8008bac:	4680      	mov	r8, r0
 8008bae:	4689      	mov	r9, r1
 8008bb0:	f7f7 ffa4 	bl	8000afc <__aeabi_dcmplt>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d164      	bne.n	8008c82 <_dtoa_r+0x62a>
 8008bb8:	4642      	mov	r2, r8
 8008bba:	464b      	mov	r3, r9
 8008bbc:	4937      	ldr	r1, [pc, #220]	; (8008c9c <_dtoa_r+0x644>)
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	f7f7 fb72 	bl	80002a8 <__aeabi_dsub>
 8008bc4:	ec53 2b19 	vmov	r2, r3, d9
 8008bc8:	f7f7 ff98 	bl	8000afc <__aeabi_dcmplt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f040 80b6 	bne.w	8008d3e <_dtoa_r+0x6e6>
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	429d      	cmp	r5, r3
 8008bd6:	f43f af7c 	beq.w	8008ad2 <_dtoa_r+0x47a>
 8008bda:	4b31      	ldr	r3, [pc, #196]	; (8008ca0 <_dtoa_r+0x648>)
 8008bdc:	ec51 0b19 	vmov	r0, r1, d9
 8008be0:	2200      	movs	r2, #0
 8008be2:	f7f7 fd19 	bl	8000618 <__aeabi_dmul>
 8008be6:	4b2e      	ldr	r3, [pc, #184]	; (8008ca0 <_dtoa_r+0x648>)
 8008be8:	ec41 0b19 	vmov	d9, r0, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 fd11 	bl	8000618 <__aeabi_dmul>
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4689      	mov	r9, r1
 8008bfa:	e7c5      	b.n	8008b88 <_dtoa_r+0x530>
 8008bfc:	ec51 0b17 	vmov	r0, r1, d7
 8008c00:	f7f7 fd0a 	bl	8000618 <__aeabi_dmul>
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	9d00      	ldr	r5, [sp, #0]
 8008c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c0a:	ec41 0b19 	vmov	d9, r0, r1
 8008c0e:	4649      	mov	r1, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	f7f7 ffb1 	bl	8000b78 <__aeabi_d2iz>
 8008c16:	4606      	mov	r6, r0
 8008c18:	f7f7 fc94 	bl	8000544 <__aeabi_i2d>
 8008c1c:	3630      	adds	r6, #48	; 0x30
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fb3f 	bl	80002a8 <__aeabi_dsub>
 8008c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	429d      	cmp	r5, r3
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	d124      	bne.n	8008c86 <_dtoa_r+0x62e>
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <_dtoa_r+0x654>)
 8008c3e:	ec51 0b19 	vmov	r0, r1, d9
 8008c42:	f7f7 fb33 	bl	80002ac <__adddf3>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	f7f7 ff73 	bl	8000b38 <__aeabi_dcmpgt>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d173      	bne.n	8008d3e <_dtoa_r+0x6e6>
 8008c56:	ec53 2b19 	vmov	r2, r3, d9
 8008c5a:	4914      	ldr	r1, [pc, #80]	; (8008cac <_dtoa_r+0x654>)
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	f7f7 fb23 	bl	80002a8 <__aeabi_dsub>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 ff47 	bl	8000afc <__aeabi_dcmplt>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f43f af2f 	beq.w	8008ad2 <_dtoa_r+0x47a>
 8008c74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c76:	1e6b      	subs	r3, r5, #1
 8008c78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c7e:	2b30      	cmp	r3, #48	; 0x30
 8008c80:	d0f8      	beq.n	8008c74 <_dtoa_r+0x61c>
 8008c82:	46bb      	mov	fp, r7
 8008c84:	e04a      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <_dtoa_r+0x648>)
 8008c88:	f7f7 fcc6 	bl	8000618 <__aeabi_dmul>
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	e7bd      	b.n	8008c0e <_dtoa_r+0x5b6>
 8008c92:	bf00      	nop
 8008c94:	0800bec0 	.word	0x0800bec0
 8008c98:	0800be98 	.word	0x0800be98
 8008c9c:	3ff00000 	.word	0x3ff00000
 8008ca0:	40240000 	.word	0x40240000
 8008ca4:	401c0000 	.word	0x401c0000
 8008ca8:	40140000 	.word	0x40140000
 8008cac:	3fe00000 	.word	0x3fe00000
 8008cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cb4:	9d00      	ldr	r5, [sp, #0]
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	464b      	mov	r3, r9
 8008cba:	4630      	mov	r0, r6
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	f7f7 fdd5 	bl	800086c <__aeabi_ddiv>
 8008cc2:	f7f7 ff59 	bl	8000b78 <__aeabi_d2iz>
 8008cc6:	9001      	str	r0, [sp, #4]
 8008cc8:	f7f7 fc3c 	bl	8000544 <__aeabi_i2d>
 8008ccc:	4642      	mov	r2, r8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	f7f7 fca2 	bl	8000618 <__aeabi_dmul>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4630      	mov	r0, r6
 8008cda:	4639      	mov	r1, r7
 8008cdc:	f7f7 fae4 	bl	80002a8 <__aeabi_dsub>
 8008ce0:	9e01      	ldr	r6, [sp, #4]
 8008ce2:	9f04      	ldr	r7, [sp, #16]
 8008ce4:	3630      	adds	r6, #48	; 0x30
 8008ce6:	f805 6b01 	strb.w	r6, [r5], #1
 8008cea:	9e00      	ldr	r6, [sp, #0]
 8008cec:	1bae      	subs	r6, r5, r6
 8008cee:	42b7      	cmp	r7, r6
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	d134      	bne.n	8008d60 <_dtoa_r+0x708>
 8008cf6:	f7f7 fad9 	bl	80002ac <__adddf3>
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	f7f7 ff19 	bl	8000b38 <__aeabi_dcmpgt>
 8008d06:	b9c8      	cbnz	r0, 8008d3c <_dtoa_r+0x6e4>
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 feea 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d14:	b110      	cbz	r0, 8008d1c <_dtoa_r+0x6c4>
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	07db      	lsls	r3, r3, #31
 8008d1a:	d40f      	bmi.n	8008d3c <_dtoa_r+0x6e4>
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fb18 	bl	8009354 <_Bfree>
 8008d24:	2300      	movs	r3, #0
 8008d26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d28:	702b      	strb	r3, [r5, #0]
 8008d2a:	f10b 0301 	add.w	r3, fp, #1
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f43f ace2 	beq.w	80086fc <_dtoa_r+0xa4>
 8008d38:	601d      	str	r5, [r3, #0]
 8008d3a:	e4df      	b.n	80086fc <_dtoa_r+0xa4>
 8008d3c:	465f      	mov	r7, fp
 8008d3e:	462b      	mov	r3, r5
 8008d40:	461d      	mov	r5, r3
 8008d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d46:	2a39      	cmp	r2, #57	; 0x39
 8008d48:	d106      	bne.n	8008d58 <_dtoa_r+0x700>
 8008d4a:	9a00      	ldr	r2, [sp, #0]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d1f7      	bne.n	8008d40 <_dtoa_r+0x6e8>
 8008d50:	9900      	ldr	r1, [sp, #0]
 8008d52:	2230      	movs	r2, #48	; 0x30
 8008d54:	3701      	adds	r7, #1
 8008d56:	700a      	strb	r2, [r1, #0]
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e790      	b.n	8008c82 <_dtoa_r+0x62a>
 8008d60:	4ba3      	ldr	r3, [pc, #652]	; (8008ff0 <_dtoa_r+0x998>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	f7f7 fc58 	bl	8000618 <__aeabi_dmul>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f7f7 feba 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d09e      	beq.n	8008cb6 <_dtoa_r+0x65e>
 8008d78:	e7d0      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	f000 80ca 	beq.w	8008f16 <_dtoa_r+0x8be>
 8008d82:	9a07      	ldr	r2, [sp, #28]
 8008d84:	2a01      	cmp	r2, #1
 8008d86:	f300 80ad 	bgt.w	8008ee4 <_dtoa_r+0x88c>
 8008d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	f000 80a5 	beq.w	8008edc <_dtoa_r+0x884>
 8008d92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d96:	9e08      	ldr	r6, [sp, #32]
 8008d98:	9d05      	ldr	r5, [sp, #20]
 8008d9a:	9a05      	ldr	r2, [sp, #20]
 8008d9c:	441a      	add	r2, r3
 8008d9e:	9205      	str	r2, [sp, #20]
 8008da0:	9a06      	ldr	r2, [sp, #24]
 8008da2:	2101      	movs	r1, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	4620      	mov	r0, r4
 8008da8:	9206      	str	r2, [sp, #24]
 8008daa:	f000 fbd3 	bl	8009554 <__i2b>
 8008dae:	4607      	mov	r7, r0
 8008db0:	b165      	cbz	r5, 8008dcc <_dtoa_r+0x774>
 8008db2:	9b06      	ldr	r3, [sp, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd09      	ble.n	8008dcc <_dtoa_r+0x774>
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	9a05      	ldr	r2, [sp, #20]
 8008dbc:	bfa8      	it	ge
 8008dbe:	462b      	movge	r3, r5
 8008dc0:	1ad2      	subs	r2, r2, r3
 8008dc2:	9205      	str	r2, [sp, #20]
 8008dc4:	9a06      	ldr	r2, [sp, #24]
 8008dc6:	1aed      	subs	r5, r5, r3
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	9b08      	ldr	r3, [sp, #32]
 8008dce:	b1f3      	cbz	r3, 8008e0e <_dtoa_r+0x7b6>
 8008dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 80a3 	beq.w	8008f1e <_dtoa_r+0x8c6>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	dd10      	ble.n	8008dfe <_dtoa_r+0x7a6>
 8008ddc:	4639      	mov	r1, r7
 8008dde:	4632      	mov	r2, r6
 8008de0:	4620      	mov	r0, r4
 8008de2:	f000 fc77 	bl	80096d4 <__pow5mult>
 8008de6:	4652      	mov	r2, sl
 8008de8:	4601      	mov	r1, r0
 8008dea:	4607      	mov	r7, r0
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 fbc7 	bl	8009580 <__multiply>
 8008df2:	4651      	mov	r1, sl
 8008df4:	4680      	mov	r8, r0
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 faac 	bl	8009354 <_Bfree>
 8008dfc:	46c2      	mov	sl, r8
 8008dfe:	9b08      	ldr	r3, [sp, #32]
 8008e00:	1b9a      	subs	r2, r3, r6
 8008e02:	d004      	beq.n	8008e0e <_dtoa_r+0x7b6>
 8008e04:	4651      	mov	r1, sl
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 fc64 	bl	80096d4 <__pow5mult>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	2101      	movs	r1, #1
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 fb9f 	bl	8009554 <__i2b>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	f340 8081 	ble.w	8008f22 <_dtoa_r+0x8ca>
 8008e20:	461a      	mov	r2, r3
 8008e22:	4601      	mov	r1, r0
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fc55 	bl	80096d4 <__pow5mult>
 8008e2a:	9b07      	ldr	r3, [sp, #28]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	4606      	mov	r6, r0
 8008e30:	dd7a      	ble.n	8008f28 <_dtoa_r+0x8d0>
 8008e32:	f04f 0800 	mov.w	r8, #0
 8008e36:	6933      	ldr	r3, [r6, #16]
 8008e38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e3c:	6918      	ldr	r0, [r3, #16]
 8008e3e:	f000 fb3b 	bl	80094b8 <__hi0bits>
 8008e42:	f1c0 0020 	rsb	r0, r0, #32
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	4418      	add	r0, r3
 8008e4a:	f010 001f 	ands.w	r0, r0, #31
 8008e4e:	f000 8094 	beq.w	8008f7a <_dtoa_r+0x922>
 8008e52:	f1c0 0320 	rsb	r3, r0, #32
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	f340 8085 	ble.w	8008f66 <_dtoa_r+0x90e>
 8008e5c:	9b05      	ldr	r3, [sp, #20]
 8008e5e:	f1c0 001c 	rsb	r0, r0, #28
 8008e62:	4403      	add	r3, r0
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	9b06      	ldr	r3, [sp, #24]
 8008e68:	4403      	add	r3, r0
 8008e6a:	4405      	add	r5, r0
 8008e6c:	9306      	str	r3, [sp, #24]
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dd05      	ble.n	8008e80 <_dtoa_r+0x828>
 8008e74:	4651      	mov	r1, sl
 8008e76:	461a      	mov	r2, r3
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f000 fc85 	bl	8009788 <__lshift>
 8008e7e:	4682      	mov	sl, r0
 8008e80:	9b06      	ldr	r3, [sp, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	dd05      	ble.n	8008e92 <_dtoa_r+0x83a>
 8008e86:	4631      	mov	r1, r6
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fc7c 	bl	8009788 <__lshift>
 8008e90:	4606      	mov	r6, r0
 8008e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d072      	beq.n	8008f7e <_dtoa_r+0x926>
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f000 fce0 	bl	8009860 <__mcmp>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	da6c      	bge.n	8008f7e <_dtoa_r+0x926>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4651      	mov	r1, sl
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 fa74 	bl	8009398 <__multadd>
 8008eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 81b0 	beq.w	800921e <_dtoa_r+0xbc6>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	220a      	movs	r2, #10
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 fa67 	bl	8009398 <__multadd>
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	4607      	mov	r7, r0
 8008ed0:	f300 8096 	bgt.w	8009000 <_dtoa_r+0x9a8>
 8008ed4:	9b07      	ldr	r3, [sp, #28]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	dc59      	bgt.n	8008f8e <_dtoa_r+0x936>
 8008eda:	e091      	b.n	8009000 <_dtoa_r+0x9a8>
 8008edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ee2:	e758      	b.n	8008d96 <_dtoa_r+0x73e>
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	1e5e      	subs	r6, r3, #1
 8008ee8:	9b08      	ldr	r3, [sp, #32]
 8008eea:	42b3      	cmp	r3, r6
 8008eec:	bfbf      	itttt	lt
 8008eee:	9b08      	ldrlt	r3, [sp, #32]
 8008ef0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ef2:	9608      	strlt	r6, [sp, #32]
 8008ef4:	1af3      	sublt	r3, r6, r3
 8008ef6:	bfb4      	ite	lt
 8008ef8:	18d2      	addlt	r2, r2, r3
 8008efa:	1b9e      	subge	r6, r3, r6
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	bfbc      	itt	lt
 8008f00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008f02:	2600      	movlt	r6, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfb7      	itett	lt
 8008f08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008f0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008f10:	1a9d      	sublt	r5, r3, r2
 8008f12:	2300      	movlt	r3, #0
 8008f14:	e741      	b.n	8008d9a <_dtoa_r+0x742>
 8008f16:	9e08      	ldr	r6, [sp, #32]
 8008f18:	9d05      	ldr	r5, [sp, #20]
 8008f1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f1c:	e748      	b.n	8008db0 <_dtoa_r+0x758>
 8008f1e:	9a08      	ldr	r2, [sp, #32]
 8008f20:	e770      	b.n	8008e04 <_dtoa_r+0x7ac>
 8008f22:	9b07      	ldr	r3, [sp, #28]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	dc19      	bgt.n	8008f5c <_dtoa_r+0x904>
 8008f28:	9b02      	ldr	r3, [sp, #8]
 8008f2a:	b9bb      	cbnz	r3, 8008f5c <_dtoa_r+0x904>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f32:	b99b      	cbnz	r3, 8008f5c <_dtoa_r+0x904>
 8008f34:	9b03      	ldr	r3, [sp, #12]
 8008f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f3a:	0d1b      	lsrs	r3, r3, #20
 8008f3c:	051b      	lsls	r3, r3, #20
 8008f3e:	b183      	cbz	r3, 8008f62 <_dtoa_r+0x90a>
 8008f40:	9b05      	ldr	r3, [sp, #20]
 8008f42:	3301      	adds	r3, #1
 8008f44:	9305      	str	r3, [sp, #20]
 8008f46:	9b06      	ldr	r3, [sp, #24]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9306      	str	r3, [sp, #24]
 8008f4c:	f04f 0801 	mov.w	r8, #1
 8008f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f47f af6f 	bne.w	8008e36 <_dtoa_r+0x7de>
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e774      	b.n	8008e46 <_dtoa_r+0x7ee>
 8008f5c:	f04f 0800 	mov.w	r8, #0
 8008f60:	e7f6      	b.n	8008f50 <_dtoa_r+0x8f8>
 8008f62:	4698      	mov	r8, r3
 8008f64:	e7f4      	b.n	8008f50 <_dtoa_r+0x8f8>
 8008f66:	d082      	beq.n	8008e6e <_dtoa_r+0x816>
 8008f68:	9a05      	ldr	r2, [sp, #20]
 8008f6a:	331c      	adds	r3, #28
 8008f6c:	441a      	add	r2, r3
 8008f6e:	9205      	str	r2, [sp, #20]
 8008f70:	9a06      	ldr	r2, [sp, #24]
 8008f72:	441a      	add	r2, r3
 8008f74:	441d      	add	r5, r3
 8008f76:	9206      	str	r2, [sp, #24]
 8008f78:	e779      	b.n	8008e6e <_dtoa_r+0x816>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	e7f4      	b.n	8008f68 <_dtoa_r+0x910>
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dc37      	bgt.n	8008ff4 <_dtoa_r+0x99c>
 8008f84:	9b07      	ldr	r3, [sp, #28]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	dd34      	ble.n	8008ff4 <_dtoa_r+0x99c>
 8008f8a:	9b04      	ldr	r3, [sp, #16]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	b963      	cbnz	r3, 8008fac <_dtoa_r+0x954>
 8008f92:	4631      	mov	r1, r6
 8008f94:	2205      	movs	r2, #5
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 f9fe 	bl	8009398 <__multadd>
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	f000 fc5d 	bl	8009860 <__mcmp>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f73f adbb 	bgt.w	8008b22 <_dtoa_r+0x4ca>
 8008fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fae:	9d00      	ldr	r5, [sp, #0]
 8008fb0:	ea6f 0b03 	mvn.w	fp, r3
 8008fb4:	f04f 0800 	mov.w	r8, #0
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 f9ca 	bl	8009354 <_Bfree>
 8008fc0:	2f00      	cmp	r7, #0
 8008fc2:	f43f aeab 	beq.w	8008d1c <_dtoa_r+0x6c4>
 8008fc6:	f1b8 0f00 	cmp.w	r8, #0
 8008fca:	d005      	beq.n	8008fd8 <_dtoa_r+0x980>
 8008fcc:	45b8      	cmp	r8, r7
 8008fce:	d003      	beq.n	8008fd8 <_dtoa_r+0x980>
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 f9be 	bl	8009354 <_Bfree>
 8008fd8:	4639      	mov	r1, r7
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 f9ba 	bl	8009354 <_Bfree>
 8008fe0:	e69c      	b.n	8008d1c <_dtoa_r+0x6c4>
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	4637      	mov	r7, r6
 8008fe6:	e7e1      	b.n	8008fac <_dtoa_r+0x954>
 8008fe8:	46bb      	mov	fp, r7
 8008fea:	4637      	mov	r7, r6
 8008fec:	e599      	b.n	8008b22 <_dtoa_r+0x4ca>
 8008fee:	bf00      	nop
 8008ff0:	40240000 	.word	0x40240000
 8008ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 80c8 	beq.w	800918c <_dtoa_r+0xb34>
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	2d00      	cmp	r5, #0
 8009002:	dd05      	ble.n	8009010 <_dtoa_r+0x9b8>
 8009004:	4639      	mov	r1, r7
 8009006:	462a      	mov	r2, r5
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fbbd 	bl	8009788 <__lshift>
 800900e:	4607      	mov	r7, r0
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	d05b      	beq.n	80090ce <_dtoa_r+0xa76>
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4620      	mov	r0, r4
 800901a:	f000 f95b 	bl	80092d4 <_Balloc>
 800901e:	4605      	mov	r5, r0
 8009020:	b928      	cbnz	r0, 800902e <_dtoa_r+0x9d6>
 8009022:	4b83      	ldr	r3, [pc, #524]	; (8009230 <_dtoa_r+0xbd8>)
 8009024:	4602      	mov	r2, r0
 8009026:	f240 21ef 	movw	r1, #751	; 0x2ef
 800902a:	f7ff bb2e 	b.w	800868a <_dtoa_r+0x32>
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	3202      	adds	r2, #2
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	f107 010c 	add.w	r1, r7, #12
 8009038:	300c      	adds	r0, #12
 800903a:	f001 fe3d 	bl	800acb8 <memcpy>
 800903e:	2201      	movs	r2, #1
 8009040:	4629      	mov	r1, r5
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fba0 	bl	8009788 <__lshift>
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009052:	4413      	add	r3, r2
 8009054:	9308      	str	r3, [sp, #32]
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	46b8      	mov	r8, r7
 800905e:	9306      	str	r3, [sp, #24]
 8009060:	4607      	mov	r7, r0
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	4631      	mov	r1, r6
 8009066:	3b01      	subs	r3, #1
 8009068:	4650      	mov	r0, sl
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	f7ff fa6c 	bl	8008548 <quorem>
 8009070:	4641      	mov	r1, r8
 8009072:	9002      	str	r0, [sp, #8]
 8009074:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009078:	4650      	mov	r0, sl
 800907a:	f000 fbf1 	bl	8009860 <__mcmp>
 800907e:	463a      	mov	r2, r7
 8009080:	9005      	str	r0, [sp, #20]
 8009082:	4631      	mov	r1, r6
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fc07 	bl	8009898 <__mdiff>
 800908a:	68c2      	ldr	r2, [r0, #12]
 800908c:	4605      	mov	r5, r0
 800908e:	bb02      	cbnz	r2, 80090d2 <_dtoa_r+0xa7a>
 8009090:	4601      	mov	r1, r0
 8009092:	4650      	mov	r0, sl
 8009094:	f000 fbe4 	bl	8009860 <__mcmp>
 8009098:	4602      	mov	r2, r0
 800909a:	4629      	mov	r1, r5
 800909c:	4620      	mov	r0, r4
 800909e:	9209      	str	r2, [sp, #36]	; 0x24
 80090a0:	f000 f958 	bl	8009354 <_Bfree>
 80090a4:	9b07      	ldr	r3, [sp, #28]
 80090a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a8:	9d04      	ldr	r5, [sp, #16]
 80090aa:	ea43 0102 	orr.w	r1, r3, r2
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	4319      	orrs	r1, r3
 80090b2:	d110      	bne.n	80090d6 <_dtoa_r+0xa7e>
 80090b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090b8:	d029      	beq.n	800910e <_dtoa_r+0xab6>
 80090ba:	9b05      	ldr	r3, [sp, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd02      	ble.n	80090c6 <_dtoa_r+0xa6e>
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	f883 9000 	strb.w	r9, [r3]
 80090cc:	e774      	b.n	8008fb8 <_dtoa_r+0x960>
 80090ce:	4638      	mov	r0, r7
 80090d0:	e7ba      	b.n	8009048 <_dtoa_r+0x9f0>
 80090d2:	2201      	movs	r2, #1
 80090d4:	e7e1      	b.n	800909a <_dtoa_r+0xa42>
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	db04      	blt.n	80090e6 <_dtoa_r+0xa8e>
 80090dc:	9907      	ldr	r1, [sp, #28]
 80090de:	430b      	orrs	r3, r1
 80090e0:	9906      	ldr	r1, [sp, #24]
 80090e2:	430b      	orrs	r3, r1
 80090e4:	d120      	bne.n	8009128 <_dtoa_r+0xad0>
 80090e6:	2a00      	cmp	r2, #0
 80090e8:	dded      	ble.n	80090c6 <_dtoa_r+0xa6e>
 80090ea:	4651      	mov	r1, sl
 80090ec:	2201      	movs	r2, #1
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fb4a 	bl	8009788 <__lshift>
 80090f4:	4631      	mov	r1, r6
 80090f6:	4682      	mov	sl, r0
 80090f8:	f000 fbb2 	bl	8009860 <__mcmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	dc03      	bgt.n	8009108 <_dtoa_r+0xab0>
 8009100:	d1e1      	bne.n	80090c6 <_dtoa_r+0xa6e>
 8009102:	f019 0f01 	tst.w	r9, #1
 8009106:	d0de      	beq.n	80090c6 <_dtoa_r+0xa6e>
 8009108:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800910c:	d1d8      	bne.n	80090c0 <_dtoa_r+0xa68>
 800910e:	9a01      	ldr	r2, [sp, #4]
 8009110:	2339      	movs	r3, #57	; 0x39
 8009112:	7013      	strb	r3, [r2, #0]
 8009114:	462b      	mov	r3, r5
 8009116:	461d      	mov	r5, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800911e:	2a39      	cmp	r2, #57	; 0x39
 8009120:	d06c      	beq.n	80091fc <_dtoa_r+0xba4>
 8009122:	3201      	adds	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	e747      	b.n	8008fb8 <_dtoa_r+0x960>
 8009128:	2a00      	cmp	r2, #0
 800912a:	dd07      	ble.n	800913c <_dtoa_r+0xae4>
 800912c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009130:	d0ed      	beq.n	800910e <_dtoa_r+0xab6>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	f109 0301 	add.w	r3, r9, #1
 8009138:	7013      	strb	r3, [r2, #0]
 800913a:	e73d      	b.n	8008fb8 <_dtoa_r+0x960>
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	9a08      	ldr	r2, [sp, #32]
 8009140:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009144:	4293      	cmp	r3, r2
 8009146:	d043      	beq.n	80091d0 <_dtoa_r+0xb78>
 8009148:	4651      	mov	r1, sl
 800914a:	2300      	movs	r3, #0
 800914c:	220a      	movs	r2, #10
 800914e:	4620      	mov	r0, r4
 8009150:	f000 f922 	bl	8009398 <__multadd>
 8009154:	45b8      	cmp	r8, r7
 8009156:	4682      	mov	sl, r0
 8009158:	f04f 0300 	mov.w	r3, #0
 800915c:	f04f 020a 	mov.w	r2, #10
 8009160:	4641      	mov	r1, r8
 8009162:	4620      	mov	r0, r4
 8009164:	d107      	bne.n	8009176 <_dtoa_r+0xb1e>
 8009166:	f000 f917 	bl	8009398 <__multadd>
 800916a:	4680      	mov	r8, r0
 800916c:	4607      	mov	r7, r0
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	3301      	adds	r3, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	e775      	b.n	8009062 <_dtoa_r+0xa0a>
 8009176:	f000 f90f 	bl	8009398 <__multadd>
 800917a:	4639      	mov	r1, r7
 800917c:	4680      	mov	r8, r0
 800917e:	2300      	movs	r3, #0
 8009180:	220a      	movs	r2, #10
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f908 	bl	8009398 <__multadd>
 8009188:	4607      	mov	r7, r0
 800918a:	e7f0      	b.n	800916e <_dtoa_r+0xb16>
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	9d00      	ldr	r5, [sp, #0]
 8009192:	4631      	mov	r1, r6
 8009194:	4650      	mov	r0, sl
 8009196:	f7ff f9d7 	bl	8008548 <quorem>
 800919a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	f805 9b01 	strb.w	r9, [r5], #1
 80091a4:	1aea      	subs	r2, r5, r3
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	4293      	cmp	r3, r2
 80091aa:	dd07      	ble.n	80091bc <_dtoa_r+0xb64>
 80091ac:	4651      	mov	r1, sl
 80091ae:	2300      	movs	r3, #0
 80091b0:	220a      	movs	r2, #10
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 f8f0 	bl	8009398 <__multadd>
 80091b8:	4682      	mov	sl, r0
 80091ba:	e7ea      	b.n	8009192 <_dtoa_r+0xb3a>
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfc8      	it	gt
 80091c2:	461d      	movgt	r5, r3
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	bfd8      	it	le
 80091c8:	2501      	movle	r5, #1
 80091ca:	441d      	add	r5, r3
 80091cc:	f04f 0800 	mov.w	r8, #0
 80091d0:	4651      	mov	r1, sl
 80091d2:	2201      	movs	r2, #1
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fad7 	bl	8009788 <__lshift>
 80091da:	4631      	mov	r1, r6
 80091dc:	4682      	mov	sl, r0
 80091de:	f000 fb3f 	bl	8009860 <__mcmp>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	dc96      	bgt.n	8009114 <_dtoa_r+0xabc>
 80091e6:	d102      	bne.n	80091ee <_dtoa_r+0xb96>
 80091e8:	f019 0f01 	tst.w	r9, #1
 80091ec:	d192      	bne.n	8009114 <_dtoa_r+0xabc>
 80091ee:	462b      	mov	r3, r5
 80091f0:	461d      	mov	r5, r3
 80091f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091f6:	2a30      	cmp	r2, #48	; 0x30
 80091f8:	d0fa      	beq.n	80091f0 <_dtoa_r+0xb98>
 80091fa:	e6dd      	b.n	8008fb8 <_dtoa_r+0x960>
 80091fc:	9a00      	ldr	r2, [sp, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d189      	bne.n	8009116 <_dtoa_r+0xabe>
 8009202:	f10b 0b01 	add.w	fp, fp, #1
 8009206:	2331      	movs	r3, #49	; 0x31
 8009208:	e796      	b.n	8009138 <_dtoa_r+0xae0>
 800920a:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <_dtoa_r+0xbdc>)
 800920c:	f7ff ba99 	b.w	8008742 <_dtoa_r+0xea>
 8009210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009212:	2b00      	cmp	r3, #0
 8009214:	f47f aa6d 	bne.w	80086f2 <_dtoa_r+0x9a>
 8009218:	4b07      	ldr	r3, [pc, #28]	; (8009238 <_dtoa_r+0xbe0>)
 800921a:	f7ff ba92 	b.w	8008742 <_dtoa_r+0xea>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	dcb5      	bgt.n	8009190 <_dtoa_r+0xb38>
 8009224:	9b07      	ldr	r3, [sp, #28]
 8009226:	2b02      	cmp	r3, #2
 8009228:	f73f aeb1 	bgt.w	8008f8e <_dtoa_r+0x936>
 800922c:	e7b0      	b.n	8009190 <_dtoa_r+0xb38>
 800922e:	bf00      	nop
 8009230:	0800be2a 	.word	0x0800be2a
 8009234:	0800bd85 	.word	0x0800bd85
 8009238:	0800bdae 	.word	0x0800bdae

0800923c <_free_r>:
 800923c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800923e:	2900      	cmp	r1, #0
 8009240:	d044      	beq.n	80092cc <_free_r+0x90>
 8009242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009246:	9001      	str	r0, [sp, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f1a1 0404 	sub.w	r4, r1, #4
 800924e:	bfb8      	it	lt
 8009250:	18e4      	addlt	r4, r4, r3
 8009252:	f7fe f893 	bl	800737c <__malloc_lock>
 8009256:	4a1e      	ldr	r2, [pc, #120]	; (80092d0 <_free_r+0x94>)
 8009258:	9801      	ldr	r0, [sp, #4]
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	b933      	cbnz	r3, 800926c <_free_r+0x30>
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	6014      	str	r4, [r2, #0]
 8009262:	b003      	add	sp, #12
 8009264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009268:	f7fe b88e 	b.w	8007388 <__malloc_unlock>
 800926c:	42a3      	cmp	r3, r4
 800926e:	d908      	bls.n	8009282 <_free_r+0x46>
 8009270:	6825      	ldr	r5, [r4, #0]
 8009272:	1961      	adds	r1, r4, r5
 8009274:	428b      	cmp	r3, r1
 8009276:	bf01      	itttt	eq
 8009278:	6819      	ldreq	r1, [r3, #0]
 800927a:	685b      	ldreq	r3, [r3, #4]
 800927c:	1949      	addeq	r1, r1, r5
 800927e:	6021      	streq	r1, [r4, #0]
 8009280:	e7ed      	b.n	800925e <_free_r+0x22>
 8009282:	461a      	mov	r2, r3
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	b10b      	cbz	r3, 800928c <_free_r+0x50>
 8009288:	42a3      	cmp	r3, r4
 800928a:	d9fa      	bls.n	8009282 <_free_r+0x46>
 800928c:	6811      	ldr	r1, [r2, #0]
 800928e:	1855      	adds	r5, r2, r1
 8009290:	42a5      	cmp	r5, r4
 8009292:	d10b      	bne.n	80092ac <_free_r+0x70>
 8009294:	6824      	ldr	r4, [r4, #0]
 8009296:	4421      	add	r1, r4
 8009298:	1854      	adds	r4, r2, r1
 800929a:	42a3      	cmp	r3, r4
 800929c:	6011      	str	r1, [r2, #0]
 800929e:	d1e0      	bne.n	8009262 <_free_r+0x26>
 80092a0:	681c      	ldr	r4, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	6053      	str	r3, [r2, #4]
 80092a6:	440c      	add	r4, r1
 80092a8:	6014      	str	r4, [r2, #0]
 80092aa:	e7da      	b.n	8009262 <_free_r+0x26>
 80092ac:	d902      	bls.n	80092b4 <_free_r+0x78>
 80092ae:	230c      	movs	r3, #12
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	e7d6      	b.n	8009262 <_free_r+0x26>
 80092b4:	6825      	ldr	r5, [r4, #0]
 80092b6:	1961      	adds	r1, r4, r5
 80092b8:	428b      	cmp	r3, r1
 80092ba:	bf04      	itt	eq
 80092bc:	6819      	ldreq	r1, [r3, #0]
 80092be:	685b      	ldreq	r3, [r3, #4]
 80092c0:	6063      	str	r3, [r4, #4]
 80092c2:	bf04      	itt	eq
 80092c4:	1949      	addeq	r1, r1, r5
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	6054      	str	r4, [r2, #4]
 80092ca:	e7ca      	b.n	8009262 <_free_r+0x26>
 80092cc:	b003      	add	sp, #12
 80092ce:	bd30      	pop	{r4, r5, pc}
 80092d0:	20000558 	.word	0x20000558

080092d4 <_Balloc>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	69c6      	ldr	r6, [r0, #28]
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	b976      	cbnz	r6, 80092fc <_Balloc+0x28>
 80092de:	2010      	movs	r0, #16
 80092e0:	f7fd ff9c 	bl	800721c <malloc>
 80092e4:	4602      	mov	r2, r0
 80092e6:	61e0      	str	r0, [r4, #28]
 80092e8:	b920      	cbnz	r0, 80092f4 <_Balloc+0x20>
 80092ea:	4b18      	ldr	r3, [pc, #96]	; (800934c <_Balloc+0x78>)
 80092ec:	4818      	ldr	r0, [pc, #96]	; (8009350 <_Balloc+0x7c>)
 80092ee:	216b      	movs	r1, #107	; 0x6b
 80092f0:	f001 fcfa 	bl	800ace8 <__assert_func>
 80092f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f8:	6006      	str	r6, [r0, #0]
 80092fa:	60c6      	str	r6, [r0, #12]
 80092fc:	69e6      	ldr	r6, [r4, #28]
 80092fe:	68f3      	ldr	r3, [r6, #12]
 8009300:	b183      	cbz	r3, 8009324 <_Balloc+0x50>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800930a:	b9b8      	cbnz	r0, 800933c <_Balloc+0x68>
 800930c:	2101      	movs	r1, #1
 800930e:	fa01 f605 	lsl.w	r6, r1, r5
 8009312:	1d72      	adds	r2, r6, #5
 8009314:	0092      	lsls	r2, r2, #2
 8009316:	4620      	mov	r0, r4
 8009318:	f001 fd04 	bl	800ad24 <_calloc_r>
 800931c:	b160      	cbz	r0, 8009338 <_Balloc+0x64>
 800931e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009322:	e00e      	b.n	8009342 <_Balloc+0x6e>
 8009324:	2221      	movs	r2, #33	; 0x21
 8009326:	2104      	movs	r1, #4
 8009328:	4620      	mov	r0, r4
 800932a:	f001 fcfb 	bl	800ad24 <_calloc_r>
 800932e:	69e3      	ldr	r3, [r4, #28]
 8009330:	60f0      	str	r0, [r6, #12]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e4      	bne.n	8009302 <_Balloc+0x2e>
 8009338:	2000      	movs	r0, #0
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	6802      	ldr	r2, [r0, #0]
 800933e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009342:	2300      	movs	r3, #0
 8009344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009348:	e7f7      	b.n	800933a <_Balloc+0x66>
 800934a:	bf00      	nop
 800934c:	0800bdbb 	.word	0x0800bdbb
 8009350:	0800be3b 	.word	0x0800be3b

08009354 <_Bfree>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	69c6      	ldr	r6, [r0, #28]
 8009358:	4605      	mov	r5, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b976      	cbnz	r6, 800937c <_Bfree+0x28>
 800935e:	2010      	movs	r0, #16
 8009360:	f7fd ff5c 	bl	800721c <malloc>
 8009364:	4602      	mov	r2, r0
 8009366:	61e8      	str	r0, [r5, #28]
 8009368:	b920      	cbnz	r0, 8009374 <_Bfree+0x20>
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <_Bfree+0x3c>)
 800936c:	4809      	ldr	r0, [pc, #36]	; (8009394 <_Bfree+0x40>)
 800936e:	218f      	movs	r1, #143	; 0x8f
 8009370:	f001 fcba 	bl	800ace8 <__assert_func>
 8009374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009378:	6006      	str	r6, [r0, #0]
 800937a:	60c6      	str	r6, [r0, #12]
 800937c:	b13c      	cbz	r4, 800938e <_Bfree+0x3a>
 800937e:	69eb      	ldr	r3, [r5, #28]
 8009380:	6862      	ldr	r2, [r4, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009388:	6021      	str	r1, [r4, #0]
 800938a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	0800bdbb 	.word	0x0800bdbb
 8009394:	0800be3b 	.word	0x0800be3b

08009398 <__multadd>:
 8009398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	690d      	ldr	r5, [r1, #16]
 800939e:	4607      	mov	r7, r0
 80093a0:	460c      	mov	r4, r1
 80093a2:	461e      	mov	r6, r3
 80093a4:	f101 0c14 	add.w	ip, r1, #20
 80093a8:	2000      	movs	r0, #0
 80093aa:	f8dc 3000 	ldr.w	r3, [ip]
 80093ae:	b299      	uxth	r1, r3
 80093b0:	fb02 6101 	mla	r1, r2, r1, r6
 80093b4:	0c1e      	lsrs	r6, r3, #16
 80093b6:	0c0b      	lsrs	r3, r1, #16
 80093b8:	fb02 3306 	mla	r3, r2, r6, r3
 80093bc:	b289      	uxth	r1, r1
 80093be:	3001      	adds	r0, #1
 80093c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093c4:	4285      	cmp	r5, r0
 80093c6:	f84c 1b04 	str.w	r1, [ip], #4
 80093ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093ce:	dcec      	bgt.n	80093aa <__multadd+0x12>
 80093d0:	b30e      	cbz	r6, 8009416 <__multadd+0x7e>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc19      	bgt.n	800940c <__multadd+0x74>
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	4638      	mov	r0, r7
 80093dc:	3101      	adds	r1, #1
 80093de:	f7ff ff79 	bl	80092d4 <_Balloc>
 80093e2:	4680      	mov	r8, r0
 80093e4:	b928      	cbnz	r0, 80093f2 <__multadd+0x5a>
 80093e6:	4602      	mov	r2, r0
 80093e8:	4b0c      	ldr	r3, [pc, #48]	; (800941c <__multadd+0x84>)
 80093ea:	480d      	ldr	r0, [pc, #52]	; (8009420 <__multadd+0x88>)
 80093ec:	21ba      	movs	r1, #186	; 0xba
 80093ee:	f001 fc7b 	bl	800ace8 <__assert_func>
 80093f2:	6922      	ldr	r2, [r4, #16]
 80093f4:	3202      	adds	r2, #2
 80093f6:	f104 010c 	add.w	r1, r4, #12
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	300c      	adds	r0, #12
 80093fe:	f001 fc5b 	bl	800acb8 <memcpy>
 8009402:	4621      	mov	r1, r4
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ffa5 	bl	8009354 <_Bfree>
 800940a:	4644      	mov	r4, r8
 800940c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009410:	3501      	adds	r5, #1
 8009412:	615e      	str	r6, [r3, #20]
 8009414:	6125      	str	r5, [r4, #16]
 8009416:	4620      	mov	r0, r4
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	0800be2a 	.word	0x0800be2a
 8009420:	0800be3b 	.word	0x0800be3b

08009424 <__s2b>:
 8009424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009428:	460c      	mov	r4, r1
 800942a:	4615      	mov	r5, r2
 800942c:	461f      	mov	r7, r3
 800942e:	2209      	movs	r2, #9
 8009430:	3308      	adds	r3, #8
 8009432:	4606      	mov	r6, r0
 8009434:	fb93 f3f2 	sdiv	r3, r3, r2
 8009438:	2100      	movs	r1, #0
 800943a:	2201      	movs	r2, #1
 800943c:	429a      	cmp	r2, r3
 800943e:	db09      	blt.n	8009454 <__s2b+0x30>
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff ff47 	bl	80092d4 <_Balloc>
 8009446:	b940      	cbnz	r0, 800945a <__s2b+0x36>
 8009448:	4602      	mov	r2, r0
 800944a:	4b19      	ldr	r3, [pc, #100]	; (80094b0 <__s2b+0x8c>)
 800944c:	4819      	ldr	r0, [pc, #100]	; (80094b4 <__s2b+0x90>)
 800944e:	21d3      	movs	r1, #211	; 0xd3
 8009450:	f001 fc4a 	bl	800ace8 <__assert_func>
 8009454:	0052      	lsls	r2, r2, #1
 8009456:	3101      	adds	r1, #1
 8009458:	e7f0      	b.n	800943c <__s2b+0x18>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	6143      	str	r3, [r0, #20]
 800945e:	2d09      	cmp	r5, #9
 8009460:	f04f 0301 	mov.w	r3, #1
 8009464:	6103      	str	r3, [r0, #16]
 8009466:	dd16      	ble.n	8009496 <__s2b+0x72>
 8009468:	f104 0909 	add.w	r9, r4, #9
 800946c:	46c8      	mov	r8, r9
 800946e:	442c      	add	r4, r5
 8009470:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009474:	4601      	mov	r1, r0
 8009476:	3b30      	subs	r3, #48	; 0x30
 8009478:	220a      	movs	r2, #10
 800947a:	4630      	mov	r0, r6
 800947c:	f7ff ff8c 	bl	8009398 <__multadd>
 8009480:	45a0      	cmp	r8, r4
 8009482:	d1f5      	bne.n	8009470 <__s2b+0x4c>
 8009484:	f1a5 0408 	sub.w	r4, r5, #8
 8009488:	444c      	add	r4, r9
 800948a:	1b2d      	subs	r5, r5, r4
 800948c:	1963      	adds	r3, r4, r5
 800948e:	42bb      	cmp	r3, r7
 8009490:	db04      	blt.n	800949c <__s2b+0x78>
 8009492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009496:	340a      	adds	r4, #10
 8009498:	2509      	movs	r5, #9
 800949a:	e7f6      	b.n	800948a <__s2b+0x66>
 800949c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094a0:	4601      	mov	r1, r0
 80094a2:	3b30      	subs	r3, #48	; 0x30
 80094a4:	220a      	movs	r2, #10
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff ff76 	bl	8009398 <__multadd>
 80094ac:	e7ee      	b.n	800948c <__s2b+0x68>
 80094ae:	bf00      	nop
 80094b0:	0800be2a 	.word	0x0800be2a
 80094b4:	0800be3b 	.word	0x0800be3b

080094b8 <__hi0bits>:
 80094b8:	0c03      	lsrs	r3, r0, #16
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	b9d3      	cbnz	r3, 80094f4 <__hi0bits+0x3c>
 80094be:	0400      	lsls	r0, r0, #16
 80094c0:	2310      	movs	r3, #16
 80094c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094c6:	bf04      	itt	eq
 80094c8:	0200      	lsleq	r0, r0, #8
 80094ca:	3308      	addeq	r3, #8
 80094cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094d0:	bf04      	itt	eq
 80094d2:	0100      	lsleq	r0, r0, #4
 80094d4:	3304      	addeq	r3, #4
 80094d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094da:	bf04      	itt	eq
 80094dc:	0080      	lsleq	r0, r0, #2
 80094de:	3302      	addeq	r3, #2
 80094e0:	2800      	cmp	r0, #0
 80094e2:	db05      	blt.n	80094f0 <__hi0bits+0x38>
 80094e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094e8:	f103 0301 	add.w	r3, r3, #1
 80094ec:	bf08      	it	eq
 80094ee:	2320      	moveq	r3, #32
 80094f0:	4618      	mov	r0, r3
 80094f2:	4770      	bx	lr
 80094f4:	2300      	movs	r3, #0
 80094f6:	e7e4      	b.n	80094c2 <__hi0bits+0xa>

080094f8 <__lo0bits>:
 80094f8:	6803      	ldr	r3, [r0, #0]
 80094fa:	f013 0207 	ands.w	r2, r3, #7
 80094fe:	d00c      	beq.n	800951a <__lo0bits+0x22>
 8009500:	07d9      	lsls	r1, r3, #31
 8009502:	d422      	bmi.n	800954a <__lo0bits+0x52>
 8009504:	079a      	lsls	r2, r3, #30
 8009506:	bf49      	itett	mi
 8009508:	085b      	lsrmi	r3, r3, #1
 800950a:	089b      	lsrpl	r3, r3, #2
 800950c:	6003      	strmi	r3, [r0, #0]
 800950e:	2201      	movmi	r2, #1
 8009510:	bf5c      	itt	pl
 8009512:	6003      	strpl	r3, [r0, #0]
 8009514:	2202      	movpl	r2, #2
 8009516:	4610      	mov	r0, r2
 8009518:	4770      	bx	lr
 800951a:	b299      	uxth	r1, r3
 800951c:	b909      	cbnz	r1, 8009522 <__lo0bits+0x2a>
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	2210      	movs	r2, #16
 8009522:	b2d9      	uxtb	r1, r3
 8009524:	b909      	cbnz	r1, 800952a <__lo0bits+0x32>
 8009526:	3208      	adds	r2, #8
 8009528:	0a1b      	lsrs	r3, r3, #8
 800952a:	0719      	lsls	r1, r3, #28
 800952c:	bf04      	itt	eq
 800952e:	091b      	lsreq	r3, r3, #4
 8009530:	3204      	addeq	r2, #4
 8009532:	0799      	lsls	r1, r3, #30
 8009534:	bf04      	itt	eq
 8009536:	089b      	lsreq	r3, r3, #2
 8009538:	3202      	addeq	r2, #2
 800953a:	07d9      	lsls	r1, r3, #31
 800953c:	d403      	bmi.n	8009546 <__lo0bits+0x4e>
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	f102 0201 	add.w	r2, r2, #1
 8009544:	d003      	beq.n	800954e <__lo0bits+0x56>
 8009546:	6003      	str	r3, [r0, #0]
 8009548:	e7e5      	b.n	8009516 <__lo0bits+0x1e>
 800954a:	2200      	movs	r2, #0
 800954c:	e7e3      	b.n	8009516 <__lo0bits+0x1e>
 800954e:	2220      	movs	r2, #32
 8009550:	e7e1      	b.n	8009516 <__lo0bits+0x1e>
	...

08009554 <__i2b>:
 8009554:	b510      	push	{r4, lr}
 8009556:	460c      	mov	r4, r1
 8009558:	2101      	movs	r1, #1
 800955a:	f7ff febb 	bl	80092d4 <_Balloc>
 800955e:	4602      	mov	r2, r0
 8009560:	b928      	cbnz	r0, 800956e <__i2b+0x1a>
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <__i2b+0x24>)
 8009564:	4805      	ldr	r0, [pc, #20]	; (800957c <__i2b+0x28>)
 8009566:	f240 1145 	movw	r1, #325	; 0x145
 800956a:	f001 fbbd 	bl	800ace8 <__assert_func>
 800956e:	2301      	movs	r3, #1
 8009570:	6144      	str	r4, [r0, #20]
 8009572:	6103      	str	r3, [r0, #16]
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	0800be2a 	.word	0x0800be2a
 800957c:	0800be3b 	.word	0x0800be3b

08009580 <__multiply>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4691      	mov	r9, r2
 8009586:	690a      	ldr	r2, [r1, #16]
 8009588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	bfb8      	it	lt
 8009590:	460b      	movlt	r3, r1
 8009592:	460c      	mov	r4, r1
 8009594:	bfbc      	itt	lt
 8009596:	464c      	movlt	r4, r9
 8009598:	4699      	movlt	r9, r3
 800959a:	6927      	ldr	r7, [r4, #16]
 800959c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095a0:	68a3      	ldr	r3, [r4, #8]
 80095a2:	6861      	ldr	r1, [r4, #4]
 80095a4:	eb07 060a 	add.w	r6, r7, sl
 80095a8:	42b3      	cmp	r3, r6
 80095aa:	b085      	sub	sp, #20
 80095ac:	bfb8      	it	lt
 80095ae:	3101      	addlt	r1, #1
 80095b0:	f7ff fe90 	bl	80092d4 <_Balloc>
 80095b4:	b930      	cbnz	r0, 80095c4 <__multiply+0x44>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b44      	ldr	r3, [pc, #272]	; (80096cc <__multiply+0x14c>)
 80095ba:	4845      	ldr	r0, [pc, #276]	; (80096d0 <__multiply+0x150>)
 80095bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80095c0:	f001 fb92 	bl	800ace8 <__assert_func>
 80095c4:	f100 0514 	add.w	r5, r0, #20
 80095c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095cc:	462b      	mov	r3, r5
 80095ce:	2200      	movs	r2, #0
 80095d0:	4543      	cmp	r3, r8
 80095d2:	d321      	bcc.n	8009618 <__multiply+0x98>
 80095d4:	f104 0314 	add.w	r3, r4, #20
 80095d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095dc:	f109 0314 	add.w	r3, r9, #20
 80095e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095e4:	9202      	str	r2, [sp, #8]
 80095e6:	1b3a      	subs	r2, r7, r4
 80095e8:	3a15      	subs	r2, #21
 80095ea:	f022 0203 	bic.w	r2, r2, #3
 80095ee:	3204      	adds	r2, #4
 80095f0:	f104 0115 	add.w	r1, r4, #21
 80095f4:	428f      	cmp	r7, r1
 80095f6:	bf38      	it	cc
 80095f8:	2204      	movcc	r2, #4
 80095fa:	9201      	str	r2, [sp, #4]
 80095fc:	9a02      	ldr	r2, [sp, #8]
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	429a      	cmp	r2, r3
 8009602:	d80c      	bhi.n	800961e <__multiply+0x9e>
 8009604:	2e00      	cmp	r6, #0
 8009606:	dd03      	ble.n	8009610 <__multiply+0x90>
 8009608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800960c:	2b00      	cmp	r3, #0
 800960e:	d05b      	beq.n	80096c8 <__multiply+0x148>
 8009610:	6106      	str	r6, [r0, #16]
 8009612:	b005      	add	sp, #20
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	f843 2b04 	str.w	r2, [r3], #4
 800961c:	e7d8      	b.n	80095d0 <__multiply+0x50>
 800961e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009622:	f1ba 0f00 	cmp.w	sl, #0
 8009626:	d024      	beq.n	8009672 <__multiply+0xf2>
 8009628:	f104 0e14 	add.w	lr, r4, #20
 800962c:	46a9      	mov	r9, r5
 800962e:	f04f 0c00 	mov.w	ip, #0
 8009632:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009636:	f8d9 1000 	ldr.w	r1, [r9]
 800963a:	fa1f fb82 	uxth.w	fp, r2
 800963e:	b289      	uxth	r1, r1
 8009640:	fb0a 110b 	mla	r1, sl, fp, r1
 8009644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009648:	f8d9 2000 	ldr.w	r2, [r9]
 800964c:	4461      	add	r1, ip
 800964e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009652:	fb0a c20b 	mla	r2, sl, fp, ip
 8009656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800965a:	b289      	uxth	r1, r1
 800965c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009660:	4577      	cmp	r7, lr
 8009662:	f849 1b04 	str.w	r1, [r9], #4
 8009666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800966a:	d8e2      	bhi.n	8009632 <__multiply+0xb2>
 800966c:	9a01      	ldr	r2, [sp, #4]
 800966e:	f845 c002 	str.w	ip, [r5, r2]
 8009672:	9a03      	ldr	r2, [sp, #12]
 8009674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009678:	3304      	adds	r3, #4
 800967a:	f1b9 0f00 	cmp.w	r9, #0
 800967e:	d021      	beq.n	80096c4 <__multiply+0x144>
 8009680:	6829      	ldr	r1, [r5, #0]
 8009682:	f104 0c14 	add.w	ip, r4, #20
 8009686:	46ae      	mov	lr, r5
 8009688:	f04f 0a00 	mov.w	sl, #0
 800968c:	f8bc b000 	ldrh.w	fp, [ip]
 8009690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009694:	fb09 220b 	mla	r2, r9, fp, r2
 8009698:	4452      	add	r2, sl
 800969a:	b289      	uxth	r1, r1
 800969c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096a0:	f84e 1b04 	str.w	r1, [lr], #4
 80096a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80096a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096ac:	f8be 1000 	ldrh.w	r1, [lr]
 80096b0:	fb09 110a 	mla	r1, r9, sl, r1
 80096b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80096b8:	4567      	cmp	r7, ip
 80096ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096be:	d8e5      	bhi.n	800968c <__multiply+0x10c>
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	50a9      	str	r1, [r5, r2]
 80096c4:	3504      	adds	r5, #4
 80096c6:	e799      	b.n	80095fc <__multiply+0x7c>
 80096c8:	3e01      	subs	r6, #1
 80096ca:	e79b      	b.n	8009604 <__multiply+0x84>
 80096cc:	0800be2a 	.word	0x0800be2a
 80096d0:	0800be3b 	.word	0x0800be3b

080096d4 <__pow5mult>:
 80096d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d8:	4615      	mov	r5, r2
 80096da:	f012 0203 	ands.w	r2, r2, #3
 80096de:	4606      	mov	r6, r0
 80096e0:	460f      	mov	r7, r1
 80096e2:	d007      	beq.n	80096f4 <__pow5mult+0x20>
 80096e4:	4c25      	ldr	r4, [pc, #148]	; (800977c <__pow5mult+0xa8>)
 80096e6:	3a01      	subs	r2, #1
 80096e8:	2300      	movs	r3, #0
 80096ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096ee:	f7ff fe53 	bl	8009398 <__multadd>
 80096f2:	4607      	mov	r7, r0
 80096f4:	10ad      	asrs	r5, r5, #2
 80096f6:	d03d      	beq.n	8009774 <__pow5mult+0xa0>
 80096f8:	69f4      	ldr	r4, [r6, #28]
 80096fa:	b97c      	cbnz	r4, 800971c <__pow5mult+0x48>
 80096fc:	2010      	movs	r0, #16
 80096fe:	f7fd fd8d 	bl	800721c <malloc>
 8009702:	4602      	mov	r2, r0
 8009704:	61f0      	str	r0, [r6, #28]
 8009706:	b928      	cbnz	r0, 8009714 <__pow5mult+0x40>
 8009708:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <__pow5mult+0xac>)
 800970a:	481e      	ldr	r0, [pc, #120]	; (8009784 <__pow5mult+0xb0>)
 800970c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009710:	f001 faea 	bl	800ace8 <__assert_func>
 8009714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009718:	6004      	str	r4, [r0, #0]
 800971a:	60c4      	str	r4, [r0, #12]
 800971c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009724:	b94c      	cbnz	r4, 800973a <__pow5mult+0x66>
 8009726:	f240 2171 	movw	r1, #625	; 0x271
 800972a:	4630      	mov	r0, r6
 800972c:	f7ff ff12 	bl	8009554 <__i2b>
 8009730:	2300      	movs	r3, #0
 8009732:	f8c8 0008 	str.w	r0, [r8, #8]
 8009736:	4604      	mov	r4, r0
 8009738:	6003      	str	r3, [r0, #0]
 800973a:	f04f 0900 	mov.w	r9, #0
 800973e:	07eb      	lsls	r3, r5, #31
 8009740:	d50a      	bpl.n	8009758 <__pow5mult+0x84>
 8009742:	4639      	mov	r1, r7
 8009744:	4622      	mov	r2, r4
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff ff1a 	bl	8009580 <__multiply>
 800974c:	4639      	mov	r1, r7
 800974e:	4680      	mov	r8, r0
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff fdff 	bl	8009354 <_Bfree>
 8009756:	4647      	mov	r7, r8
 8009758:	106d      	asrs	r5, r5, #1
 800975a:	d00b      	beq.n	8009774 <__pow5mult+0xa0>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	b938      	cbnz	r0, 8009770 <__pow5mult+0x9c>
 8009760:	4622      	mov	r2, r4
 8009762:	4621      	mov	r1, r4
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff ff0b 	bl	8009580 <__multiply>
 800976a:	6020      	str	r0, [r4, #0]
 800976c:	f8c0 9000 	str.w	r9, [r0]
 8009770:	4604      	mov	r4, r0
 8009772:	e7e4      	b.n	800973e <__pow5mult+0x6a>
 8009774:	4638      	mov	r0, r7
 8009776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977a:	bf00      	nop
 800977c:	0800bf88 	.word	0x0800bf88
 8009780:	0800bdbb 	.word	0x0800bdbb
 8009784:	0800be3b 	.word	0x0800be3b

08009788 <__lshift>:
 8009788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	6849      	ldr	r1, [r1, #4]
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	4607      	mov	r7, r0
 800979a:	4691      	mov	r9, r2
 800979c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a0:	f108 0601 	add.w	r6, r8, #1
 80097a4:	42b3      	cmp	r3, r6
 80097a6:	db0b      	blt.n	80097c0 <__lshift+0x38>
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff fd93 	bl	80092d4 <_Balloc>
 80097ae:	4605      	mov	r5, r0
 80097b0:	b948      	cbnz	r0, 80097c6 <__lshift+0x3e>
 80097b2:	4602      	mov	r2, r0
 80097b4:	4b28      	ldr	r3, [pc, #160]	; (8009858 <__lshift+0xd0>)
 80097b6:	4829      	ldr	r0, [pc, #164]	; (800985c <__lshift+0xd4>)
 80097b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80097bc:	f001 fa94 	bl	800ace8 <__assert_func>
 80097c0:	3101      	adds	r1, #1
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	e7ee      	b.n	80097a4 <__lshift+0x1c>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f100 0114 	add.w	r1, r0, #20
 80097cc:	f100 0210 	add.w	r2, r0, #16
 80097d0:	4618      	mov	r0, r3
 80097d2:	4553      	cmp	r3, sl
 80097d4:	db33      	blt.n	800983e <__lshift+0xb6>
 80097d6:	6920      	ldr	r0, [r4, #16]
 80097d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097dc:	f104 0314 	add.w	r3, r4, #20
 80097e0:	f019 091f 	ands.w	r9, r9, #31
 80097e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097ec:	d02b      	beq.n	8009846 <__lshift+0xbe>
 80097ee:	f1c9 0e20 	rsb	lr, r9, #32
 80097f2:	468a      	mov	sl, r1
 80097f4:	2200      	movs	r2, #0
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	fa00 f009 	lsl.w	r0, r0, r9
 80097fc:	4310      	orrs	r0, r2
 80097fe:	f84a 0b04 	str.w	r0, [sl], #4
 8009802:	f853 2b04 	ldr.w	r2, [r3], #4
 8009806:	459c      	cmp	ip, r3
 8009808:	fa22 f20e 	lsr.w	r2, r2, lr
 800980c:	d8f3      	bhi.n	80097f6 <__lshift+0x6e>
 800980e:	ebac 0304 	sub.w	r3, ip, r4
 8009812:	3b15      	subs	r3, #21
 8009814:	f023 0303 	bic.w	r3, r3, #3
 8009818:	3304      	adds	r3, #4
 800981a:	f104 0015 	add.w	r0, r4, #21
 800981e:	4584      	cmp	ip, r0
 8009820:	bf38      	it	cc
 8009822:	2304      	movcc	r3, #4
 8009824:	50ca      	str	r2, [r1, r3]
 8009826:	b10a      	cbz	r2, 800982c <__lshift+0xa4>
 8009828:	f108 0602 	add.w	r6, r8, #2
 800982c:	3e01      	subs	r6, #1
 800982e:	4638      	mov	r0, r7
 8009830:	612e      	str	r6, [r5, #16]
 8009832:	4621      	mov	r1, r4
 8009834:	f7ff fd8e 	bl	8009354 <_Bfree>
 8009838:	4628      	mov	r0, r5
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009842:	3301      	adds	r3, #1
 8009844:	e7c5      	b.n	80097d2 <__lshift+0x4a>
 8009846:	3904      	subs	r1, #4
 8009848:	f853 2b04 	ldr.w	r2, [r3], #4
 800984c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009850:	459c      	cmp	ip, r3
 8009852:	d8f9      	bhi.n	8009848 <__lshift+0xc0>
 8009854:	e7ea      	b.n	800982c <__lshift+0xa4>
 8009856:	bf00      	nop
 8009858:	0800be2a 	.word	0x0800be2a
 800985c:	0800be3b 	.word	0x0800be3b

08009860 <__mcmp>:
 8009860:	b530      	push	{r4, r5, lr}
 8009862:	6902      	ldr	r2, [r0, #16]
 8009864:	690c      	ldr	r4, [r1, #16]
 8009866:	1b12      	subs	r2, r2, r4
 8009868:	d10e      	bne.n	8009888 <__mcmp+0x28>
 800986a:	f100 0314 	add.w	r3, r0, #20
 800986e:	3114      	adds	r1, #20
 8009870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800987c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009880:	42a5      	cmp	r5, r4
 8009882:	d003      	beq.n	800988c <__mcmp+0x2c>
 8009884:	d305      	bcc.n	8009892 <__mcmp+0x32>
 8009886:	2201      	movs	r2, #1
 8009888:	4610      	mov	r0, r2
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	4283      	cmp	r3, r0
 800988e:	d3f3      	bcc.n	8009878 <__mcmp+0x18>
 8009890:	e7fa      	b.n	8009888 <__mcmp+0x28>
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	e7f7      	b.n	8009888 <__mcmp+0x28>

08009898 <__mdiff>:
 8009898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4606      	mov	r6, r0
 80098a0:	4611      	mov	r1, r2
 80098a2:	4620      	mov	r0, r4
 80098a4:	4690      	mov	r8, r2
 80098a6:	f7ff ffdb 	bl	8009860 <__mcmp>
 80098aa:	1e05      	subs	r5, r0, #0
 80098ac:	d110      	bne.n	80098d0 <__mdiff+0x38>
 80098ae:	4629      	mov	r1, r5
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff fd0f 	bl	80092d4 <_Balloc>
 80098b6:	b930      	cbnz	r0, 80098c6 <__mdiff+0x2e>
 80098b8:	4b3a      	ldr	r3, [pc, #232]	; (80099a4 <__mdiff+0x10c>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	f240 2137 	movw	r1, #567	; 0x237
 80098c0:	4839      	ldr	r0, [pc, #228]	; (80099a8 <__mdiff+0x110>)
 80098c2:	f001 fa11 	bl	800ace8 <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	bfa4      	itt	ge
 80098d2:	4643      	movge	r3, r8
 80098d4:	46a0      	movge	r8, r4
 80098d6:	4630      	mov	r0, r6
 80098d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098dc:	bfa6      	itte	ge
 80098de:	461c      	movge	r4, r3
 80098e0:	2500      	movge	r5, #0
 80098e2:	2501      	movlt	r5, #1
 80098e4:	f7ff fcf6 	bl	80092d4 <_Balloc>
 80098e8:	b920      	cbnz	r0, 80098f4 <__mdiff+0x5c>
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <__mdiff+0x10c>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	f240 2145 	movw	r1, #581	; 0x245
 80098f2:	e7e5      	b.n	80098c0 <__mdiff+0x28>
 80098f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098f8:	6926      	ldr	r6, [r4, #16]
 80098fa:	60c5      	str	r5, [r0, #12]
 80098fc:	f104 0914 	add.w	r9, r4, #20
 8009900:	f108 0514 	add.w	r5, r8, #20
 8009904:	f100 0e14 	add.w	lr, r0, #20
 8009908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800990c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009910:	f108 0210 	add.w	r2, r8, #16
 8009914:	46f2      	mov	sl, lr
 8009916:	2100      	movs	r1, #0
 8009918:	f859 3b04 	ldr.w	r3, [r9], #4
 800991c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009920:	fa11 f88b 	uxtah	r8, r1, fp
 8009924:	b299      	uxth	r1, r3
 8009926:	0c1b      	lsrs	r3, r3, #16
 8009928:	eba8 0801 	sub.w	r8, r8, r1
 800992c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009930:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009934:	fa1f f888 	uxth.w	r8, r8
 8009938:	1419      	asrs	r1, r3, #16
 800993a:	454e      	cmp	r6, r9
 800993c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009940:	f84a 3b04 	str.w	r3, [sl], #4
 8009944:	d8e8      	bhi.n	8009918 <__mdiff+0x80>
 8009946:	1b33      	subs	r3, r6, r4
 8009948:	3b15      	subs	r3, #21
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	3304      	adds	r3, #4
 8009950:	3415      	adds	r4, #21
 8009952:	42a6      	cmp	r6, r4
 8009954:	bf38      	it	cc
 8009956:	2304      	movcc	r3, #4
 8009958:	441d      	add	r5, r3
 800995a:	4473      	add	r3, lr
 800995c:	469e      	mov	lr, r3
 800995e:	462e      	mov	r6, r5
 8009960:	4566      	cmp	r6, ip
 8009962:	d30e      	bcc.n	8009982 <__mdiff+0xea>
 8009964:	f10c 0203 	add.w	r2, ip, #3
 8009968:	1b52      	subs	r2, r2, r5
 800996a:	f022 0203 	bic.w	r2, r2, #3
 800996e:	3d03      	subs	r5, #3
 8009970:	45ac      	cmp	ip, r5
 8009972:	bf38      	it	cc
 8009974:	2200      	movcc	r2, #0
 8009976:	4413      	add	r3, r2
 8009978:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800997c:	b17a      	cbz	r2, 800999e <__mdiff+0x106>
 800997e:	6107      	str	r7, [r0, #16]
 8009980:	e7a4      	b.n	80098cc <__mdiff+0x34>
 8009982:	f856 8b04 	ldr.w	r8, [r6], #4
 8009986:	fa11 f288 	uxtah	r2, r1, r8
 800998a:	1414      	asrs	r4, r2, #16
 800998c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009990:	b292      	uxth	r2, r2
 8009992:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009996:	f84e 2b04 	str.w	r2, [lr], #4
 800999a:	1421      	asrs	r1, r4, #16
 800999c:	e7e0      	b.n	8009960 <__mdiff+0xc8>
 800999e:	3f01      	subs	r7, #1
 80099a0:	e7ea      	b.n	8009978 <__mdiff+0xe0>
 80099a2:	bf00      	nop
 80099a4:	0800be2a 	.word	0x0800be2a
 80099a8:	0800be3b 	.word	0x0800be3b

080099ac <__ulp>:
 80099ac:	b082      	sub	sp, #8
 80099ae:	ed8d 0b00 	vstr	d0, [sp]
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <__ulp+0x48>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	dc08      	bgt.n	80099d2 <__ulp+0x26>
 80099c0:	425b      	negs	r3, r3
 80099c2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80099c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099ca:	da04      	bge.n	80099d6 <__ulp+0x2a>
 80099cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099d0:	4113      	asrs	r3, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	e008      	b.n	80099e8 <__ulp+0x3c>
 80099d6:	f1a2 0314 	sub.w	r3, r2, #20
 80099da:	2b1e      	cmp	r3, #30
 80099dc:	bfda      	itte	le
 80099de:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80099e2:	40da      	lsrle	r2, r3
 80099e4:	2201      	movgt	r2, #1
 80099e6:	2300      	movs	r3, #0
 80099e8:	4619      	mov	r1, r3
 80099ea:	4610      	mov	r0, r2
 80099ec:	ec41 0b10 	vmov	d0, r0, r1
 80099f0:	b002      	add	sp, #8
 80099f2:	4770      	bx	lr
 80099f4:	7ff00000 	.word	0x7ff00000

080099f8 <__b2d>:
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	6906      	ldr	r6, [r0, #16]
 80099fe:	f100 0814 	add.w	r8, r0, #20
 8009a02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a06:	1f37      	subs	r7, r6, #4
 8009a08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7ff fd53 	bl	80094b8 <__hi0bits>
 8009a12:	f1c0 0320 	rsb	r3, r0, #32
 8009a16:	280a      	cmp	r0, #10
 8009a18:	600b      	str	r3, [r1, #0]
 8009a1a:	491b      	ldr	r1, [pc, #108]	; (8009a88 <__b2d+0x90>)
 8009a1c:	dc15      	bgt.n	8009a4a <__b2d+0x52>
 8009a1e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a22:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a26:	45b8      	cmp	r8, r7
 8009a28:	ea43 0501 	orr.w	r5, r3, r1
 8009a2c:	bf34      	ite	cc
 8009a2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a32:	2300      	movcs	r3, #0
 8009a34:	3015      	adds	r0, #21
 8009a36:	fa02 f000 	lsl.w	r0, r2, r0
 8009a3a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009a3e:	4303      	orrs	r3, r0
 8009a40:	461c      	mov	r4, r3
 8009a42:	ec45 4b10 	vmov	d0, r4, r5
 8009a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4a:	45b8      	cmp	r8, r7
 8009a4c:	bf3a      	itte	cc
 8009a4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a52:	f1a6 0708 	subcc.w	r7, r6, #8
 8009a56:	2300      	movcs	r3, #0
 8009a58:	380b      	subs	r0, #11
 8009a5a:	d012      	beq.n	8009a82 <__b2d+0x8a>
 8009a5c:	f1c0 0120 	rsb	r1, r0, #32
 8009a60:	fa23 f401 	lsr.w	r4, r3, r1
 8009a64:	4082      	lsls	r2, r0
 8009a66:	4322      	orrs	r2, r4
 8009a68:	4547      	cmp	r7, r8
 8009a6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009a6e:	bf8c      	ite	hi
 8009a70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a74:	2200      	movls	r2, #0
 8009a76:	4083      	lsls	r3, r0
 8009a78:	40ca      	lsrs	r2, r1
 8009a7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	e7de      	b.n	8009a40 <__b2d+0x48>
 8009a82:	ea42 0501 	orr.w	r5, r2, r1
 8009a86:	e7db      	b.n	8009a40 <__b2d+0x48>
 8009a88:	3ff00000 	.word	0x3ff00000

08009a8c <__d2b>:
 8009a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a90:	460f      	mov	r7, r1
 8009a92:	2101      	movs	r1, #1
 8009a94:	ec59 8b10 	vmov	r8, r9, d0
 8009a98:	4616      	mov	r6, r2
 8009a9a:	f7ff fc1b 	bl	80092d4 <_Balloc>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	b930      	cbnz	r0, 8009ab0 <__d2b+0x24>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <__d2b+0xac>)
 8009aa6:	4825      	ldr	r0, [pc, #148]	; (8009b3c <__d2b+0xb0>)
 8009aa8:	f240 310f 	movw	r1, #783	; 0x30f
 8009aac:	f001 f91c 	bl	800ace8 <__assert_func>
 8009ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ab8:	bb2d      	cbnz	r5, 8009b06 <__d2b+0x7a>
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	f1b8 0300 	subs.w	r3, r8, #0
 8009ac0:	d026      	beq.n	8009b10 <__d2b+0x84>
 8009ac2:	4668      	mov	r0, sp
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	f7ff fd17 	bl	80094f8 <__lo0bits>
 8009aca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ace:	b1e8      	cbz	r0, 8009b0c <__d2b+0x80>
 8009ad0:	f1c0 0320 	rsb	r3, r0, #32
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	40c2      	lsrs	r2, r0
 8009adc:	6163      	str	r3, [r4, #20]
 8009ade:	9201      	str	r2, [sp, #4]
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	61a3      	str	r3, [r4, #24]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bf14      	ite	ne
 8009ae8:	2202      	movne	r2, #2
 8009aea:	2201      	moveq	r2, #1
 8009aec:	6122      	str	r2, [r4, #16]
 8009aee:	b1bd      	cbz	r5, 8009b20 <__d2b+0x94>
 8009af0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009af4:	4405      	add	r5, r0
 8009af6:	603d      	str	r5, [r7, #0]
 8009af8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4620      	mov	r0, r4
 8009b00:	b003      	add	sp, #12
 8009b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b0a:	e7d6      	b.n	8009aba <__d2b+0x2e>
 8009b0c:	6161      	str	r1, [r4, #20]
 8009b0e:	e7e7      	b.n	8009ae0 <__d2b+0x54>
 8009b10:	a801      	add	r0, sp, #4
 8009b12:	f7ff fcf1 	bl	80094f8 <__lo0bits>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	6163      	str	r3, [r4, #20]
 8009b1a:	3020      	adds	r0, #32
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	e7e5      	b.n	8009aec <__d2b+0x60>
 8009b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b28:	6038      	str	r0, [r7, #0]
 8009b2a:	6918      	ldr	r0, [r3, #16]
 8009b2c:	f7ff fcc4 	bl	80094b8 <__hi0bits>
 8009b30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b34:	e7e2      	b.n	8009afc <__d2b+0x70>
 8009b36:	bf00      	nop
 8009b38:	0800be2a 	.word	0x0800be2a
 8009b3c:	0800be3b 	.word	0x0800be3b

08009b40 <__ratio>:
 8009b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4688      	mov	r8, r1
 8009b46:	4669      	mov	r1, sp
 8009b48:	4681      	mov	r9, r0
 8009b4a:	f7ff ff55 	bl	80099f8 <__b2d>
 8009b4e:	a901      	add	r1, sp, #4
 8009b50:	4640      	mov	r0, r8
 8009b52:	ec55 4b10 	vmov	r4, r5, d0
 8009b56:	f7ff ff4f 	bl	80099f8 <__b2d>
 8009b5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b62:	eba3 0c02 	sub.w	ip, r3, r2
 8009b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b6a:	1a9b      	subs	r3, r3, r2
 8009b6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b70:	ec51 0b10 	vmov	r0, r1, d0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfd6      	itet	le
 8009b78:	460a      	movle	r2, r1
 8009b7a:	462a      	movgt	r2, r5
 8009b7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b80:	468b      	mov	fp, r1
 8009b82:	462f      	mov	r7, r5
 8009b84:	bfd4      	ite	le
 8009b86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b8e:	4620      	mov	r0, r4
 8009b90:	ee10 2a10 	vmov	r2, s0
 8009b94:	465b      	mov	r3, fp
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 fe68 	bl	800086c <__aeabi_ddiv>
 8009b9c:	ec41 0b10 	vmov	d0, r0, r1
 8009ba0:	b003      	add	sp, #12
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ba6 <__copybits>:
 8009ba6:	3901      	subs	r1, #1
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	1149      	asrs	r1, r1, #5
 8009bac:	6914      	ldr	r4, [r2, #16]
 8009bae:	3101      	adds	r1, #1
 8009bb0:	f102 0314 	add.w	r3, r2, #20
 8009bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bbc:	1f05      	subs	r5, r0, #4
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	d30c      	bcc.n	8009bdc <__copybits+0x36>
 8009bc2:	1aa3      	subs	r3, r4, r2
 8009bc4:	3b11      	subs	r3, #17
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	3211      	adds	r2, #17
 8009bcc:	42a2      	cmp	r2, r4
 8009bce:	bf88      	it	hi
 8009bd0:	2300      	movhi	r3, #0
 8009bd2:	4418      	add	r0, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4288      	cmp	r0, r1
 8009bd8:	d305      	bcc.n	8009be6 <__copybits+0x40>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009be0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009be4:	e7eb      	b.n	8009bbe <__copybits+0x18>
 8009be6:	f840 3b04 	str.w	r3, [r0], #4
 8009bea:	e7f4      	b.n	8009bd6 <__copybits+0x30>

08009bec <__any_on>:
 8009bec:	f100 0214 	add.w	r2, r0, #20
 8009bf0:	6900      	ldr	r0, [r0, #16]
 8009bf2:	114b      	asrs	r3, r1, #5
 8009bf4:	4298      	cmp	r0, r3
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	db11      	blt.n	8009c1e <__any_on+0x32>
 8009bfa:	dd0a      	ble.n	8009c12 <__any_on+0x26>
 8009bfc:	f011 011f 	ands.w	r1, r1, #31
 8009c00:	d007      	beq.n	8009c12 <__any_on+0x26>
 8009c02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c06:	fa24 f001 	lsr.w	r0, r4, r1
 8009c0a:	fa00 f101 	lsl.w	r1, r0, r1
 8009c0e:	428c      	cmp	r4, r1
 8009c10:	d10b      	bne.n	8009c2a <__any_on+0x3e>
 8009c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d803      	bhi.n	8009c22 <__any_on+0x36>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	4603      	mov	r3, r0
 8009c20:	e7f7      	b.n	8009c12 <__any_on+0x26>
 8009c22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d0f5      	beq.n	8009c16 <__any_on+0x2a>
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	e7f6      	b.n	8009c1c <__any_on+0x30>

08009c2e <sulp>:
 8009c2e:	b570      	push	{r4, r5, r6, lr}
 8009c30:	4604      	mov	r4, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	ec45 4b10 	vmov	d0, r4, r5
 8009c38:	4616      	mov	r6, r2
 8009c3a:	f7ff feb7 	bl	80099ac <__ulp>
 8009c3e:	ec51 0b10 	vmov	r0, r1, d0
 8009c42:	b17e      	cbz	r6, 8009c64 <sulp+0x36>
 8009c44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dd09      	ble.n	8009c64 <sulp+0x36>
 8009c50:	051b      	lsls	r3, r3, #20
 8009c52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c56:	2400      	movs	r4, #0
 8009c58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fcda 	bl	8000618 <__aeabi_dmul>
 8009c64:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c68 <_strtod_l>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	ed2d 8b02 	vpush	{d8}
 8009c70:	b09b      	sub	sp, #108	; 0x6c
 8009c72:	4604      	mov	r4, r0
 8009c74:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c76:	2200      	movs	r2, #0
 8009c78:	9216      	str	r2, [sp, #88]	; 0x58
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	f04f 0800 	mov.w	r8, #0
 8009c80:	f04f 0900 	mov.w	r9, #0
 8009c84:	460a      	mov	r2, r1
 8009c86:	9215      	str	r2, [sp, #84]	; 0x54
 8009c88:	7811      	ldrb	r1, [r2, #0]
 8009c8a:	292b      	cmp	r1, #43	; 0x2b
 8009c8c:	d04c      	beq.n	8009d28 <_strtod_l+0xc0>
 8009c8e:	d83a      	bhi.n	8009d06 <_strtod_l+0x9e>
 8009c90:	290d      	cmp	r1, #13
 8009c92:	d834      	bhi.n	8009cfe <_strtod_l+0x96>
 8009c94:	2908      	cmp	r1, #8
 8009c96:	d834      	bhi.n	8009d02 <_strtod_l+0x9a>
 8009c98:	2900      	cmp	r1, #0
 8009c9a:	d03d      	beq.n	8009d18 <_strtod_l+0xb0>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	920a      	str	r2, [sp, #40]	; 0x28
 8009ca0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009ca2:	7832      	ldrb	r2, [r6, #0]
 8009ca4:	2a30      	cmp	r2, #48	; 0x30
 8009ca6:	f040 80b4 	bne.w	8009e12 <_strtod_l+0x1aa>
 8009caa:	7872      	ldrb	r2, [r6, #1]
 8009cac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009cb0:	2a58      	cmp	r2, #88	; 0x58
 8009cb2:	d170      	bne.n	8009d96 <_strtod_l+0x12e>
 8009cb4:	9302      	str	r3, [sp, #8]
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	ab16      	add	r3, sp, #88	; 0x58
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	4a8e      	ldr	r2, [pc, #568]	; (8009ef8 <_strtod_l+0x290>)
 8009cc0:	ab17      	add	r3, sp, #92	; 0x5c
 8009cc2:	a915      	add	r1, sp, #84	; 0x54
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f001 f8ab 	bl	800ae20 <__gethex>
 8009cca:	f010 070f 	ands.w	r7, r0, #15
 8009cce:	4605      	mov	r5, r0
 8009cd0:	d005      	beq.n	8009cde <_strtod_l+0x76>
 8009cd2:	2f06      	cmp	r7, #6
 8009cd4:	d12a      	bne.n	8009d2c <_strtod_l+0xc4>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9615      	str	r6, [sp, #84]	; 0x54
 8009cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8009cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 857f 	bne.w	800a7e4 <_strtod_l+0xb7c>
 8009ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce8:	b1db      	cbz	r3, 8009d22 <_strtod_l+0xba>
 8009cea:	4642      	mov	r2, r8
 8009cec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cf0:	ec43 2b10 	vmov	d0, r2, r3
 8009cf4:	b01b      	add	sp, #108	; 0x6c
 8009cf6:	ecbd 8b02 	vpop	{d8}
 8009cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfe:	2920      	cmp	r1, #32
 8009d00:	d1cc      	bne.n	8009c9c <_strtod_l+0x34>
 8009d02:	3201      	adds	r2, #1
 8009d04:	e7bf      	b.n	8009c86 <_strtod_l+0x1e>
 8009d06:	292d      	cmp	r1, #45	; 0x2d
 8009d08:	d1c8      	bne.n	8009c9c <_strtod_l+0x34>
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	910a      	str	r1, [sp, #40]	; 0x28
 8009d0e:	1c51      	adds	r1, r2, #1
 8009d10:	9115      	str	r1, [sp, #84]	; 0x54
 8009d12:	7852      	ldrb	r2, [r2, #1]
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	d1c3      	bne.n	8009ca0 <_strtod_l+0x38>
 8009d18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d1a:	9515      	str	r5, [sp, #84]	; 0x54
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f040 855f 	bne.w	800a7e0 <_strtod_l+0xb78>
 8009d22:	4642      	mov	r2, r8
 8009d24:	464b      	mov	r3, r9
 8009d26:	e7e3      	b.n	8009cf0 <_strtod_l+0x88>
 8009d28:	2100      	movs	r1, #0
 8009d2a:	e7ef      	b.n	8009d0c <_strtod_l+0xa4>
 8009d2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d2e:	b13a      	cbz	r2, 8009d40 <_strtod_l+0xd8>
 8009d30:	2135      	movs	r1, #53	; 0x35
 8009d32:	a818      	add	r0, sp, #96	; 0x60
 8009d34:	f7ff ff37 	bl	8009ba6 <__copybits>
 8009d38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7ff fb0a 	bl	8009354 <_Bfree>
 8009d40:	3f01      	subs	r7, #1
 8009d42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d44:	2f04      	cmp	r7, #4
 8009d46:	d806      	bhi.n	8009d56 <_strtod_l+0xee>
 8009d48:	e8df f007 	tbb	[pc, r7]
 8009d4c:	201d0314 	.word	0x201d0314
 8009d50:	14          	.byte	0x14
 8009d51:	00          	.byte	0x00
 8009d52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009d56:	05e9      	lsls	r1, r5, #23
 8009d58:	bf48      	it	mi
 8009d5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009d5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d62:	0d1b      	lsrs	r3, r3, #20
 8009d64:	051b      	lsls	r3, r3, #20
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1b9      	bne.n	8009cde <_strtod_l+0x76>
 8009d6a:	f7fe fbb1 	bl	80084d0 <__errno>
 8009d6e:	2322      	movs	r3, #34	; 0x22
 8009d70:	6003      	str	r3, [r0, #0]
 8009d72:	e7b4      	b.n	8009cde <_strtod_l+0x76>
 8009d74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009d78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009d84:	e7e7      	b.n	8009d56 <_strtod_l+0xee>
 8009d86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f00 <_strtod_l+0x298>
 8009d8a:	e7e4      	b.n	8009d56 <_strtod_l+0xee>
 8009d8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d90:	f04f 38ff 	mov.w	r8, #4294967295
 8009d94:	e7df      	b.n	8009d56 <_strtod_l+0xee>
 8009d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	9215      	str	r2, [sp, #84]	; 0x54
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	2b30      	cmp	r3, #48	; 0x30
 8009da0:	d0f9      	beq.n	8009d96 <_strtod_l+0x12e>
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d09b      	beq.n	8009cde <_strtod_l+0x76>
 8009da6:	2301      	movs	r3, #1
 8009da8:	f04f 0a00 	mov.w	sl, #0
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009db2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009db6:	46d3      	mov	fp, sl
 8009db8:	220a      	movs	r2, #10
 8009dba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009dbc:	7806      	ldrb	r6, [r0, #0]
 8009dbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009dc2:	b2d9      	uxtb	r1, r3
 8009dc4:	2909      	cmp	r1, #9
 8009dc6:	d926      	bls.n	8009e16 <_strtod_l+0x1ae>
 8009dc8:	494c      	ldr	r1, [pc, #304]	; (8009efc <_strtod_l+0x294>)
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f000 ff62 	bl	800ac94 <strncmp>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d030      	beq.n	8009e36 <_strtod_l+0x1ce>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	9005      	str	r0, [sp, #20]
 8009dda:	465e      	mov	r6, fp
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2a65      	cmp	r2, #101	; 0x65
 8009de0:	d001      	beq.n	8009de6 <_strtod_l+0x17e>
 8009de2:	2a45      	cmp	r2, #69	; 0x45
 8009de4:	d113      	bne.n	8009e0e <_strtod_l+0x1a6>
 8009de6:	b91e      	cbnz	r6, 8009df0 <_strtod_l+0x188>
 8009de8:	9a04      	ldr	r2, [sp, #16]
 8009dea:	4302      	orrs	r2, r0
 8009dec:	d094      	beq.n	8009d18 <_strtod_l+0xb0>
 8009dee:	2600      	movs	r6, #0
 8009df0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009df2:	1c6a      	adds	r2, r5, #1
 8009df4:	9215      	str	r2, [sp, #84]	; 0x54
 8009df6:	786a      	ldrb	r2, [r5, #1]
 8009df8:	2a2b      	cmp	r2, #43	; 0x2b
 8009dfa:	d074      	beq.n	8009ee6 <_strtod_l+0x27e>
 8009dfc:	2a2d      	cmp	r2, #45	; 0x2d
 8009dfe:	d078      	beq.n	8009ef2 <_strtod_l+0x28a>
 8009e00:	f04f 0c00 	mov.w	ip, #0
 8009e04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e08:	2909      	cmp	r1, #9
 8009e0a:	d97f      	bls.n	8009f0c <_strtod_l+0x2a4>
 8009e0c:	9515      	str	r5, [sp, #84]	; 0x54
 8009e0e:	2700      	movs	r7, #0
 8009e10:	e09e      	b.n	8009f50 <_strtod_l+0x2e8>
 8009e12:	2300      	movs	r3, #0
 8009e14:	e7c8      	b.n	8009da8 <_strtod_l+0x140>
 8009e16:	f1bb 0f08 	cmp.w	fp, #8
 8009e1a:	bfd8      	it	le
 8009e1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009e1e:	f100 0001 	add.w	r0, r0, #1
 8009e22:	bfda      	itte	le
 8009e24:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e28:	9309      	strle	r3, [sp, #36]	; 0x24
 8009e2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009e2e:	f10b 0b01 	add.w	fp, fp, #1
 8009e32:	9015      	str	r0, [sp, #84]	; 0x54
 8009e34:	e7c1      	b.n	8009dba <_strtod_l+0x152>
 8009e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e38:	1c5a      	adds	r2, r3, #1
 8009e3a:	9215      	str	r2, [sp, #84]	; 0x54
 8009e3c:	785a      	ldrb	r2, [r3, #1]
 8009e3e:	f1bb 0f00 	cmp.w	fp, #0
 8009e42:	d037      	beq.n	8009eb4 <_strtod_l+0x24c>
 8009e44:	9005      	str	r0, [sp, #20]
 8009e46:	465e      	mov	r6, fp
 8009e48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e4c:	2b09      	cmp	r3, #9
 8009e4e:	d912      	bls.n	8009e76 <_strtod_l+0x20e>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7c4      	b.n	8009dde <_strtod_l+0x176>
 8009e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	9215      	str	r2, [sp, #84]	; 0x54
 8009e5a:	785a      	ldrb	r2, [r3, #1]
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	2a30      	cmp	r2, #48	; 0x30
 8009e60:	d0f8      	beq.n	8009e54 <_strtod_l+0x1ec>
 8009e62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	f200 84c1 	bhi.w	800a7ee <_strtod_l+0xb86>
 8009e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6e:	9005      	str	r0, [sp, #20]
 8009e70:	2000      	movs	r0, #0
 8009e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e74:	4606      	mov	r6, r0
 8009e76:	3a30      	subs	r2, #48	; 0x30
 8009e78:	f100 0301 	add.w	r3, r0, #1
 8009e7c:	d014      	beq.n	8009ea8 <_strtod_l+0x240>
 8009e7e:	9905      	ldr	r1, [sp, #20]
 8009e80:	4419      	add	r1, r3
 8009e82:	9105      	str	r1, [sp, #20]
 8009e84:	4633      	mov	r3, r6
 8009e86:	eb00 0c06 	add.w	ip, r0, r6
 8009e8a:	210a      	movs	r1, #10
 8009e8c:	4563      	cmp	r3, ip
 8009e8e:	d113      	bne.n	8009eb8 <_strtod_l+0x250>
 8009e90:	1833      	adds	r3, r6, r0
 8009e92:	2b08      	cmp	r3, #8
 8009e94:	f106 0601 	add.w	r6, r6, #1
 8009e98:	4406      	add	r6, r0
 8009e9a:	dc1a      	bgt.n	8009ed2 <_strtod_l+0x26a>
 8009e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e9e:	230a      	movs	r3, #10
 8009ea0:	fb03 2301 	mla	r3, r3, r1, r2
 8009ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009eaa:	1c51      	adds	r1, r2, #1
 8009eac:	9115      	str	r1, [sp, #84]	; 0x54
 8009eae:	7852      	ldrb	r2, [r2, #1]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	e7c9      	b.n	8009e48 <_strtod_l+0x1e0>
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	e7d2      	b.n	8009e5e <_strtod_l+0x1f6>
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	f103 0301 	add.w	r3, r3, #1
 8009ebe:	dc03      	bgt.n	8009ec8 <_strtod_l+0x260>
 8009ec0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ec2:	434f      	muls	r7, r1
 8009ec4:	9709      	str	r7, [sp, #36]	; 0x24
 8009ec6:	e7e1      	b.n	8009e8c <_strtod_l+0x224>
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	bfd8      	it	le
 8009ecc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009ed0:	e7dc      	b.n	8009e8c <_strtod_l+0x224>
 8009ed2:	2e10      	cmp	r6, #16
 8009ed4:	bfdc      	itt	le
 8009ed6:	230a      	movle	r3, #10
 8009ed8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009edc:	e7e3      	b.n	8009ea6 <_strtod_l+0x23e>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e780      	b.n	8009de8 <_strtod_l+0x180>
 8009ee6:	f04f 0c00 	mov.w	ip, #0
 8009eea:	1caa      	adds	r2, r5, #2
 8009eec:	9215      	str	r2, [sp, #84]	; 0x54
 8009eee:	78aa      	ldrb	r2, [r5, #2]
 8009ef0:	e788      	b.n	8009e04 <_strtod_l+0x19c>
 8009ef2:	f04f 0c01 	mov.w	ip, #1
 8009ef6:	e7f8      	b.n	8009eea <_strtod_l+0x282>
 8009ef8:	0800bf98 	.word	0x0800bf98
 8009efc:	0800bf94 	.word	0x0800bf94
 8009f00:	7ff00000 	.word	0x7ff00000
 8009f04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f06:	1c51      	adds	r1, r2, #1
 8009f08:	9115      	str	r1, [sp, #84]	; 0x54
 8009f0a:	7852      	ldrb	r2, [r2, #1]
 8009f0c:	2a30      	cmp	r2, #48	; 0x30
 8009f0e:	d0f9      	beq.n	8009f04 <_strtod_l+0x29c>
 8009f10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f14:	2908      	cmp	r1, #8
 8009f16:	f63f af7a 	bhi.w	8009e0e <_strtod_l+0x1a6>
 8009f1a:	3a30      	subs	r2, #48	; 0x30
 8009f1c:	9208      	str	r2, [sp, #32]
 8009f1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f20:	920c      	str	r2, [sp, #48]	; 0x30
 8009f22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f24:	1c57      	adds	r7, r2, #1
 8009f26:	9715      	str	r7, [sp, #84]	; 0x54
 8009f28:	7852      	ldrb	r2, [r2, #1]
 8009f2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009f2e:	f1be 0f09 	cmp.w	lr, #9
 8009f32:	d938      	bls.n	8009fa6 <_strtod_l+0x33e>
 8009f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f36:	1a7f      	subs	r7, r7, r1
 8009f38:	2f08      	cmp	r7, #8
 8009f3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009f3e:	dc03      	bgt.n	8009f48 <_strtod_l+0x2e0>
 8009f40:	9908      	ldr	r1, [sp, #32]
 8009f42:	428f      	cmp	r7, r1
 8009f44:	bfa8      	it	ge
 8009f46:	460f      	movge	r7, r1
 8009f48:	f1bc 0f00 	cmp.w	ip, #0
 8009f4c:	d000      	beq.n	8009f50 <_strtod_l+0x2e8>
 8009f4e:	427f      	negs	r7, r7
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	d14f      	bne.n	8009ff4 <_strtod_l+0x38c>
 8009f54:	9904      	ldr	r1, [sp, #16]
 8009f56:	4301      	orrs	r1, r0
 8009f58:	f47f aec1 	bne.w	8009cde <_strtod_l+0x76>
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f aedb 	bne.w	8009d18 <_strtod_l+0xb0>
 8009f62:	2a69      	cmp	r2, #105	; 0x69
 8009f64:	d029      	beq.n	8009fba <_strtod_l+0x352>
 8009f66:	dc26      	bgt.n	8009fb6 <_strtod_l+0x34e>
 8009f68:	2a49      	cmp	r2, #73	; 0x49
 8009f6a:	d026      	beq.n	8009fba <_strtod_l+0x352>
 8009f6c:	2a4e      	cmp	r2, #78	; 0x4e
 8009f6e:	f47f aed3 	bne.w	8009d18 <_strtod_l+0xb0>
 8009f72:	499b      	ldr	r1, [pc, #620]	; (800a1e0 <_strtod_l+0x578>)
 8009f74:	a815      	add	r0, sp, #84	; 0x54
 8009f76:	f001 f993 	bl	800b2a0 <__match>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f43f aecc 	beq.w	8009d18 <_strtod_l+0xb0>
 8009f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b28      	cmp	r3, #40	; 0x28
 8009f86:	d12f      	bne.n	8009fe8 <_strtod_l+0x380>
 8009f88:	4996      	ldr	r1, [pc, #600]	; (800a1e4 <_strtod_l+0x57c>)
 8009f8a:	aa18      	add	r2, sp, #96	; 0x60
 8009f8c:	a815      	add	r0, sp, #84	; 0x54
 8009f8e:	f001 f99b 	bl	800b2c8 <__hexnan>
 8009f92:	2805      	cmp	r0, #5
 8009f94:	d128      	bne.n	8009fe8 <_strtod_l+0x380>
 8009f96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009fa0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009fa4:	e69b      	b.n	8009cde <_strtod_l+0x76>
 8009fa6:	9f08      	ldr	r7, [sp, #32]
 8009fa8:	210a      	movs	r1, #10
 8009faa:	fb01 2107 	mla	r1, r1, r7, r2
 8009fae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009fb2:	9208      	str	r2, [sp, #32]
 8009fb4:	e7b5      	b.n	8009f22 <_strtod_l+0x2ba>
 8009fb6:	2a6e      	cmp	r2, #110	; 0x6e
 8009fb8:	e7d9      	b.n	8009f6e <_strtod_l+0x306>
 8009fba:	498b      	ldr	r1, [pc, #556]	; (800a1e8 <_strtod_l+0x580>)
 8009fbc:	a815      	add	r0, sp, #84	; 0x54
 8009fbe:	f001 f96f 	bl	800b2a0 <__match>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f43f aea8 	beq.w	8009d18 <_strtod_l+0xb0>
 8009fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fca:	4988      	ldr	r1, [pc, #544]	; (800a1ec <_strtod_l+0x584>)
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	a815      	add	r0, sp, #84	; 0x54
 8009fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8009fd2:	f001 f965 	bl	800b2a0 <__match>
 8009fd6:	b910      	cbnz	r0, 8009fde <_strtod_l+0x376>
 8009fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fda:	3301      	adds	r3, #1
 8009fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8009fde:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a1fc <_strtod_l+0x594>
 8009fe2:	f04f 0800 	mov.w	r8, #0
 8009fe6:	e67a      	b.n	8009cde <_strtod_l+0x76>
 8009fe8:	4881      	ldr	r0, [pc, #516]	; (800a1f0 <_strtod_l+0x588>)
 8009fea:	f000 fe75 	bl	800acd8 <nan>
 8009fee:	ec59 8b10 	vmov	r8, r9, d0
 8009ff2:	e674      	b.n	8009cde <_strtod_l+0x76>
 8009ff4:	9b05      	ldr	r3, [sp, #20]
 8009ff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ff8:	1afb      	subs	r3, r7, r3
 8009ffa:	f1bb 0f00 	cmp.w	fp, #0
 8009ffe:	bf08      	it	eq
 800a000:	46b3      	moveq	fp, r6
 800a002:	2e10      	cmp	r6, #16
 800a004:	9308      	str	r3, [sp, #32]
 800a006:	4635      	mov	r5, r6
 800a008:	bfa8      	it	ge
 800a00a:	2510      	movge	r5, #16
 800a00c:	f7f6 fa8a 	bl	8000524 <__aeabi_ui2d>
 800a010:	2e09      	cmp	r6, #9
 800a012:	4680      	mov	r8, r0
 800a014:	4689      	mov	r9, r1
 800a016:	dd13      	ble.n	800a040 <_strtod_l+0x3d8>
 800a018:	4b76      	ldr	r3, [pc, #472]	; (800a1f4 <_strtod_l+0x58c>)
 800a01a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a01e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a022:	f7f6 faf9 	bl	8000618 <__aeabi_dmul>
 800a026:	4680      	mov	r8, r0
 800a028:	4650      	mov	r0, sl
 800a02a:	4689      	mov	r9, r1
 800a02c:	f7f6 fa7a 	bl	8000524 <__aeabi_ui2d>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 f938 	bl	80002ac <__adddf3>
 800a03c:	4680      	mov	r8, r0
 800a03e:	4689      	mov	r9, r1
 800a040:	2e0f      	cmp	r6, #15
 800a042:	dc38      	bgt.n	800a0b6 <_strtod_l+0x44e>
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f ae49 	beq.w	8009cde <_strtod_l+0x76>
 800a04c:	dd24      	ble.n	800a098 <_strtod_l+0x430>
 800a04e:	2b16      	cmp	r3, #22
 800a050:	dc0b      	bgt.n	800a06a <_strtod_l+0x402>
 800a052:	4968      	ldr	r1, [pc, #416]	; (800a1f4 <_strtod_l+0x58c>)
 800a054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a05c:	4642      	mov	r2, r8
 800a05e:	464b      	mov	r3, r9
 800a060:	f7f6 fada 	bl	8000618 <__aeabi_dmul>
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	e639      	b.n	8009cde <_strtod_l+0x76>
 800a06a:	9a08      	ldr	r2, [sp, #32]
 800a06c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a070:	4293      	cmp	r3, r2
 800a072:	db20      	blt.n	800a0b6 <_strtod_l+0x44e>
 800a074:	4c5f      	ldr	r4, [pc, #380]	; (800a1f4 <_strtod_l+0x58c>)
 800a076:	f1c6 060f 	rsb	r6, r6, #15
 800a07a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a07e:	4642      	mov	r2, r8
 800a080:	464b      	mov	r3, r9
 800a082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a086:	f7f6 fac7 	bl	8000618 <__aeabi_dmul>
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	1b9e      	subs	r6, r3, r6
 800a08e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a092:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a096:	e7e3      	b.n	800a060 <_strtod_l+0x3f8>
 800a098:	9b08      	ldr	r3, [sp, #32]
 800a09a:	3316      	adds	r3, #22
 800a09c:	db0b      	blt.n	800a0b6 <_strtod_l+0x44e>
 800a09e:	9b05      	ldr	r3, [sp, #20]
 800a0a0:	1bdf      	subs	r7, r3, r7
 800a0a2:	4b54      	ldr	r3, [pc, #336]	; (800a1f4 <_strtod_l+0x58c>)
 800a0a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a0a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 fbdc 	bl	800086c <__aeabi_ddiv>
 800a0b4:	e7d6      	b.n	800a064 <_strtod_l+0x3fc>
 800a0b6:	9b08      	ldr	r3, [sp, #32]
 800a0b8:	1b75      	subs	r5, r6, r5
 800a0ba:	441d      	add	r5, r3
 800a0bc:	2d00      	cmp	r5, #0
 800a0be:	dd70      	ble.n	800a1a2 <_strtod_l+0x53a>
 800a0c0:	f015 030f 	ands.w	r3, r5, #15
 800a0c4:	d00a      	beq.n	800a0dc <_strtod_l+0x474>
 800a0c6:	494b      	ldr	r1, [pc, #300]	; (800a1f4 <_strtod_l+0x58c>)
 800a0c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0cc:	4642      	mov	r2, r8
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d4:	f7f6 faa0 	bl	8000618 <__aeabi_dmul>
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4689      	mov	r9, r1
 800a0dc:	f035 050f 	bics.w	r5, r5, #15
 800a0e0:	d04d      	beq.n	800a17e <_strtod_l+0x516>
 800a0e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a0e6:	dd22      	ble.n	800a12e <_strtod_l+0x4c6>
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	46ab      	mov	fp, r5
 800a0ec:	9509      	str	r5, [sp, #36]	; 0x24
 800a0ee:	9505      	str	r5, [sp, #20]
 800a0f0:	2322      	movs	r3, #34	; 0x22
 800a0f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a1fc <_strtod_l+0x594>
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	f04f 0800 	mov.w	r8, #0
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f43f aded 	beq.w	8009cde <_strtod_l+0x76>
 800a104:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff f924 	bl	8009354 <_Bfree>
 800a10c:	9905      	ldr	r1, [sp, #20]
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff f920 	bl	8009354 <_Bfree>
 800a114:	4659      	mov	r1, fp
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff f91c 	bl	8009354 <_Bfree>
 800a11c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff f918 	bl	8009354 <_Bfree>
 800a124:	4629      	mov	r1, r5
 800a126:	4620      	mov	r0, r4
 800a128:	f7ff f914 	bl	8009354 <_Bfree>
 800a12c:	e5d7      	b.n	8009cde <_strtod_l+0x76>
 800a12e:	4b32      	ldr	r3, [pc, #200]	; (800a1f8 <_strtod_l+0x590>)
 800a130:	9304      	str	r3, [sp, #16]
 800a132:	2300      	movs	r3, #0
 800a134:	112d      	asrs	r5, r5, #4
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	469a      	mov	sl, r3
 800a13c:	2d01      	cmp	r5, #1
 800a13e:	dc21      	bgt.n	800a184 <_strtod_l+0x51c>
 800a140:	b10b      	cbz	r3, 800a146 <_strtod_l+0x4de>
 800a142:	4680      	mov	r8, r0
 800a144:	4689      	mov	r9, r1
 800a146:	492c      	ldr	r1, [pc, #176]	; (800a1f8 <_strtod_l+0x590>)
 800a148:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a14c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a150:	4642      	mov	r2, r8
 800a152:	464b      	mov	r3, r9
 800a154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a158:	f7f6 fa5e 	bl	8000618 <__aeabi_dmul>
 800a15c:	4b27      	ldr	r3, [pc, #156]	; (800a1fc <_strtod_l+0x594>)
 800a15e:	460a      	mov	r2, r1
 800a160:	400b      	ands	r3, r1
 800a162:	4927      	ldr	r1, [pc, #156]	; (800a200 <_strtod_l+0x598>)
 800a164:	428b      	cmp	r3, r1
 800a166:	4680      	mov	r8, r0
 800a168:	d8be      	bhi.n	800a0e8 <_strtod_l+0x480>
 800a16a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a16e:	428b      	cmp	r3, r1
 800a170:	bf86      	itte	hi
 800a172:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a204 <_strtod_l+0x59c>
 800a176:	f04f 38ff 	movhi.w	r8, #4294967295
 800a17a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a17e:	2300      	movs	r3, #0
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	e07b      	b.n	800a27c <_strtod_l+0x614>
 800a184:	07ea      	lsls	r2, r5, #31
 800a186:	d505      	bpl.n	800a194 <_strtod_l+0x52c>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 fa43 	bl	8000618 <__aeabi_dmul>
 800a192:	2301      	movs	r3, #1
 800a194:	9a04      	ldr	r2, [sp, #16]
 800a196:	3208      	adds	r2, #8
 800a198:	f10a 0a01 	add.w	sl, sl, #1
 800a19c:	106d      	asrs	r5, r5, #1
 800a19e:	9204      	str	r2, [sp, #16]
 800a1a0:	e7cc      	b.n	800a13c <_strtod_l+0x4d4>
 800a1a2:	d0ec      	beq.n	800a17e <_strtod_l+0x516>
 800a1a4:	426d      	negs	r5, r5
 800a1a6:	f015 020f 	ands.w	r2, r5, #15
 800a1aa:	d00a      	beq.n	800a1c2 <_strtod_l+0x55a>
 800a1ac:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <_strtod_l+0x58c>)
 800a1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 fb57 	bl	800086c <__aeabi_ddiv>
 800a1be:	4680      	mov	r8, r0
 800a1c0:	4689      	mov	r9, r1
 800a1c2:	112d      	asrs	r5, r5, #4
 800a1c4:	d0db      	beq.n	800a17e <_strtod_l+0x516>
 800a1c6:	2d1f      	cmp	r5, #31
 800a1c8:	dd1e      	ble.n	800a208 <_strtod_l+0x5a0>
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	46ab      	mov	fp, r5
 800a1ce:	9509      	str	r5, [sp, #36]	; 0x24
 800a1d0:	9505      	str	r5, [sp, #20]
 800a1d2:	2322      	movs	r3, #34	; 0x22
 800a1d4:	f04f 0800 	mov.w	r8, #0
 800a1d8:	f04f 0900 	mov.w	r9, #0
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	e78d      	b.n	800a0fc <_strtod_l+0x494>
 800a1e0:	0800bd82 	.word	0x0800bd82
 800a1e4:	0800bfac 	.word	0x0800bfac
 800a1e8:	0800bd7a 	.word	0x0800bd7a
 800a1ec:	0800bdb1 	.word	0x0800bdb1
 800a1f0:	0800c03c 	.word	0x0800c03c
 800a1f4:	0800bec0 	.word	0x0800bec0
 800a1f8:	0800be98 	.word	0x0800be98
 800a1fc:	7ff00000 	.word	0x7ff00000
 800a200:	7ca00000 	.word	0x7ca00000
 800a204:	7fefffff 	.word	0x7fefffff
 800a208:	f015 0310 	ands.w	r3, r5, #16
 800a20c:	bf18      	it	ne
 800a20e:	236a      	movne	r3, #106	; 0x6a
 800a210:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a5b4 <_strtod_l+0x94c>
 800a214:	9304      	str	r3, [sp, #16]
 800a216:	4640      	mov	r0, r8
 800a218:	4649      	mov	r1, r9
 800a21a:	2300      	movs	r3, #0
 800a21c:	07ea      	lsls	r2, r5, #31
 800a21e:	d504      	bpl.n	800a22a <_strtod_l+0x5c2>
 800a220:	e9da 2300 	ldrd	r2, r3, [sl]
 800a224:	f7f6 f9f8 	bl	8000618 <__aeabi_dmul>
 800a228:	2301      	movs	r3, #1
 800a22a:	106d      	asrs	r5, r5, #1
 800a22c:	f10a 0a08 	add.w	sl, sl, #8
 800a230:	d1f4      	bne.n	800a21c <_strtod_l+0x5b4>
 800a232:	b10b      	cbz	r3, 800a238 <_strtod_l+0x5d0>
 800a234:	4680      	mov	r8, r0
 800a236:	4689      	mov	r9, r1
 800a238:	9b04      	ldr	r3, [sp, #16]
 800a23a:	b1bb      	cbz	r3, 800a26c <_strtod_l+0x604>
 800a23c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a240:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a244:	2b00      	cmp	r3, #0
 800a246:	4649      	mov	r1, r9
 800a248:	dd10      	ble.n	800a26c <_strtod_l+0x604>
 800a24a:	2b1f      	cmp	r3, #31
 800a24c:	f340 811e 	ble.w	800a48c <_strtod_l+0x824>
 800a250:	2b34      	cmp	r3, #52	; 0x34
 800a252:	bfde      	ittt	le
 800a254:	f04f 33ff 	movle.w	r3, #4294967295
 800a258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a25c:	4093      	lslle	r3, r2
 800a25e:	f04f 0800 	mov.w	r8, #0
 800a262:	bfcc      	ite	gt
 800a264:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a268:	ea03 0901 	andle.w	r9, r3, r1
 800a26c:	2200      	movs	r2, #0
 800a26e:	2300      	movs	r3, #0
 800a270:	4640      	mov	r0, r8
 800a272:	4649      	mov	r1, r9
 800a274:	f7f6 fc38 	bl	8000ae8 <__aeabi_dcmpeq>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d1a6      	bne.n	800a1ca <_strtod_l+0x562>
 800a27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a282:	4633      	mov	r3, r6
 800a284:	465a      	mov	r2, fp
 800a286:	4620      	mov	r0, r4
 800a288:	f7ff f8cc 	bl	8009424 <__s2b>
 800a28c:	9009      	str	r0, [sp, #36]	; 0x24
 800a28e:	2800      	cmp	r0, #0
 800a290:	f43f af2a 	beq.w	800a0e8 <_strtod_l+0x480>
 800a294:	9a08      	ldr	r2, [sp, #32]
 800a296:	9b05      	ldr	r3, [sp, #20]
 800a298:	2a00      	cmp	r2, #0
 800a29a:	eba3 0307 	sub.w	r3, r3, r7
 800a29e:	bfa8      	it	ge
 800a2a0:	2300      	movge	r3, #0
 800a2a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a2aa:	9312      	str	r3, [sp, #72]	; 0x48
 800a2ac:	46ab      	mov	fp, r5
 800a2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	6859      	ldr	r1, [r3, #4]
 800a2b4:	f7ff f80e 	bl	80092d4 <_Balloc>
 800a2b8:	9005      	str	r0, [sp, #20]
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f af18 	beq.w	800a0f0 <_strtod_l+0x488>
 800a2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c2:	691a      	ldr	r2, [r3, #16]
 800a2c4:	3202      	adds	r2, #2
 800a2c6:	f103 010c 	add.w	r1, r3, #12
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	300c      	adds	r0, #12
 800a2ce:	f000 fcf3 	bl	800acb8 <memcpy>
 800a2d2:	ec49 8b10 	vmov	d0, r8, r9
 800a2d6:	aa18      	add	r2, sp, #96	; 0x60
 800a2d8:	a917      	add	r1, sp, #92	; 0x5c
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7ff fbd6 	bl	8009a8c <__d2b>
 800a2e0:	ec49 8b18 	vmov	d8, r8, r9
 800a2e4:	9016      	str	r0, [sp, #88]	; 0x58
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f43f af02 	beq.w	800a0f0 <_strtod_l+0x488>
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f7ff f930 	bl	8009554 <__i2b>
 800a2f4:	4683      	mov	fp, r0
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f aefa 	beq.w	800a0f0 <_strtod_l+0x488>
 800a2fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a300:	2e00      	cmp	r6, #0
 800a302:	bfab      	itete	ge
 800a304:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a306:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a308:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a30a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a30e:	bfac      	ite	ge
 800a310:	eb06 0a03 	addge.w	sl, r6, r3
 800a314:	1b9f      	sublt	r7, r3, r6
 800a316:	9b04      	ldr	r3, [sp, #16]
 800a318:	1af6      	subs	r6, r6, r3
 800a31a:	4416      	add	r6, r2
 800a31c:	4ba0      	ldr	r3, [pc, #640]	; (800a5a0 <_strtod_l+0x938>)
 800a31e:	3e01      	subs	r6, #1
 800a320:	429e      	cmp	r6, r3
 800a322:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a326:	f280 80c4 	bge.w	800a4b2 <_strtod_l+0x84a>
 800a32a:	1b9b      	subs	r3, r3, r6
 800a32c:	2b1f      	cmp	r3, #31
 800a32e:	eba2 0203 	sub.w	r2, r2, r3
 800a332:	f04f 0101 	mov.w	r1, #1
 800a336:	f300 80b0 	bgt.w	800a49a <_strtod_l+0x832>
 800a33a:	fa01 f303 	lsl.w	r3, r1, r3
 800a33e:	930e      	str	r3, [sp, #56]	; 0x38
 800a340:	2300      	movs	r3, #0
 800a342:	930d      	str	r3, [sp, #52]	; 0x34
 800a344:	eb0a 0602 	add.w	r6, sl, r2
 800a348:	9b04      	ldr	r3, [sp, #16]
 800a34a:	45b2      	cmp	sl, r6
 800a34c:	4417      	add	r7, r2
 800a34e:	441f      	add	r7, r3
 800a350:	4653      	mov	r3, sl
 800a352:	bfa8      	it	ge
 800a354:	4633      	movge	r3, r6
 800a356:	42bb      	cmp	r3, r7
 800a358:	bfa8      	it	ge
 800a35a:	463b      	movge	r3, r7
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bfc2      	ittt	gt
 800a360:	1af6      	subgt	r6, r6, r3
 800a362:	1aff      	subgt	r7, r7, r3
 800a364:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	dd17      	ble.n	800a39e <_strtod_l+0x736>
 800a36e:	4659      	mov	r1, fp
 800a370:	461a      	mov	r2, r3
 800a372:	4620      	mov	r0, r4
 800a374:	f7ff f9ae 	bl	80096d4 <__pow5mult>
 800a378:	4683      	mov	fp, r0
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f43f aeb8 	beq.w	800a0f0 <_strtod_l+0x488>
 800a380:	4601      	mov	r1, r0
 800a382:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a384:	4620      	mov	r0, r4
 800a386:	f7ff f8fb 	bl	8009580 <__multiply>
 800a38a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f43f aeaf 	beq.w	800a0f0 <_strtod_l+0x488>
 800a392:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a394:	4620      	mov	r0, r4
 800a396:	f7fe ffdd 	bl	8009354 <_Bfree>
 800a39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a39c:	9316      	str	r3, [sp, #88]	; 0x58
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	f300 808c 	bgt.w	800a4bc <_strtod_l+0x854>
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd08      	ble.n	800a3bc <_strtod_l+0x754>
 800a3aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3ac:	9905      	ldr	r1, [sp, #20]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff f990 	bl	80096d4 <__pow5mult>
 800a3b4:	9005      	str	r0, [sp, #20]
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f43f ae9a 	beq.w	800a0f0 <_strtod_l+0x488>
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	dd08      	ble.n	800a3d2 <_strtod_l+0x76a>
 800a3c0:	9905      	ldr	r1, [sp, #20]
 800a3c2:	463a      	mov	r2, r7
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7ff f9df 	bl	8009788 <__lshift>
 800a3ca:	9005      	str	r0, [sp, #20]
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f43f ae8f 	beq.w	800a0f0 <_strtod_l+0x488>
 800a3d2:	f1ba 0f00 	cmp.w	sl, #0
 800a3d6:	dd08      	ble.n	800a3ea <_strtod_l+0x782>
 800a3d8:	4659      	mov	r1, fp
 800a3da:	4652      	mov	r2, sl
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f7ff f9d3 	bl	8009788 <__lshift>
 800a3e2:	4683      	mov	fp, r0
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f43f ae83 	beq.w	800a0f0 <_strtod_l+0x488>
 800a3ea:	9a05      	ldr	r2, [sp, #20]
 800a3ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff fa52 	bl	8009898 <__mdiff>
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f ae7a 	beq.w	800a0f0 <_strtod_l+0x488>
 800a3fc:	68c3      	ldr	r3, [r0, #12]
 800a3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a400:	2300      	movs	r3, #0
 800a402:	60c3      	str	r3, [r0, #12]
 800a404:	4659      	mov	r1, fp
 800a406:	f7ff fa2b 	bl	8009860 <__mcmp>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	da60      	bge.n	800a4d0 <_strtod_l+0x868>
 800a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a410:	ea53 0308 	orrs.w	r3, r3, r8
 800a414:	f040 8084 	bne.w	800a520 <_strtod_l+0x8b8>
 800a418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d17f      	bne.n	800a520 <_strtod_l+0x8b8>
 800a420:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a424:	0d1b      	lsrs	r3, r3, #20
 800a426:	051b      	lsls	r3, r3, #20
 800a428:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a42c:	d978      	bls.n	800a520 <_strtod_l+0x8b8>
 800a42e:	696b      	ldr	r3, [r5, #20]
 800a430:	b913      	cbnz	r3, 800a438 <_strtod_l+0x7d0>
 800a432:	692b      	ldr	r3, [r5, #16]
 800a434:	2b01      	cmp	r3, #1
 800a436:	dd73      	ble.n	800a520 <_strtod_l+0x8b8>
 800a438:	4629      	mov	r1, r5
 800a43a:	2201      	movs	r2, #1
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff f9a3 	bl	8009788 <__lshift>
 800a442:	4659      	mov	r1, fp
 800a444:	4605      	mov	r5, r0
 800a446:	f7ff fa0b 	bl	8009860 <__mcmp>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	dd68      	ble.n	800a520 <_strtod_l+0x8b8>
 800a44e:	9904      	ldr	r1, [sp, #16]
 800a450:	4a54      	ldr	r2, [pc, #336]	; (800a5a4 <_strtod_l+0x93c>)
 800a452:	464b      	mov	r3, r9
 800a454:	2900      	cmp	r1, #0
 800a456:	f000 8084 	beq.w	800a562 <_strtod_l+0x8fa>
 800a45a:	ea02 0109 	and.w	r1, r2, r9
 800a45e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a462:	dc7e      	bgt.n	800a562 <_strtod_l+0x8fa>
 800a464:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a468:	f77f aeb3 	ble.w	800a1d2 <_strtod_l+0x56a>
 800a46c:	4b4e      	ldr	r3, [pc, #312]	; (800a5a8 <_strtod_l+0x940>)
 800a46e:	4640      	mov	r0, r8
 800a470:	4649      	mov	r1, r9
 800a472:	2200      	movs	r2, #0
 800a474:	f7f6 f8d0 	bl	8000618 <__aeabi_dmul>
 800a478:	4b4a      	ldr	r3, [pc, #296]	; (800a5a4 <_strtod_l+0x93c>)
 800a47a:	400b      	ands	r3, r1
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	2b00      	cmp	r3, #0
 800a482:	f47f ae3f 	bne.w	800a104 <_strtod_l+0x49c>
 800a486:	2322      	movs	r3, #34	; 0x22
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	e63b      	b.n	800a104 <_strtod_l+0x49c>
 800a48c:	f04f 32ff 	mov.w	r2, #4294967295
 800a490:	fa02 f303 	lsl.w	r3, r2, r3
 800a494:	ea03 0808 	and.w	r8, r3, r8
 800a498:	e6e8      	b.n	800a26c <_strtod_l+0x604>
 800a49a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a49e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a4a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a4a6:	36e2      	adds	r6, #226	; 0xe2
 800a4a8:	fa01 f306 	lsl.w	r3, r1, r6
 800a4ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a4b0:	e748      	b.n	800a344 <_strtod_l+0x6dc>
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a4ba:	e743      	b.n	800a344 <_strtod_l+0x6dc>
 800a4bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7ff f961 	bl	8009788 <__lshift>
 800a4c6:	9016      	str	r0, [sp, #88]	; 0x58
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	f47f af6b 	bne.w	800a3a4 <_strtod_l+0x73c>
 800a4ce:	e60f      	b.n	800a0f0 <_strtod_l+0x488>
 800a4d0:	46ca      	mov	sl, r9
 800a4d2:	d171      	bne.n	800a5b8 <_strtod_l+0x950>
 800a4d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4da:	b352      	cbz	r2, 800a532 <_strtod_l+0x8ca>
 800a4dc:	4a33      	ldr	r2, [pc, #204]	; (800a5ac <_strtod_l+0x944>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d12a      	bne.n	800a538 <_strtod_l+0x8d0>
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	b1fb      	cbz	r3, 800a528 <_strtod_l+0x8c0>
 800a4e8:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <_strtod_l+0x93c>)
 800a4ea:	ea09 0303 	and.w	r3, r9, r3
 800a4ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	d81a      	bhi.n	800a52e <_strtod_l+0x8c6>
 800a4f8:	0d1b      	lsrs	r3, r3, #20
 800a4fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a502:	4299      	cmp	r1, r3
 800a504:	d118      	bne.n	800a538 <_strtod_l+0x8d0>
 800a506:	4b2a      	ldr	r3, [pc, #168]	; (800a5b0 <_strtod_l+0x948>)
 800a508:	459a      	cmp	sl, r3
 800a50a:	d102      	bne.n	800a512 <_strtod_l+0x8aa>
 800a50c:	3101      	adds	r1, #1
 800a50e:	f43f adef 	beq.w	800a0f0 <_strtod_l+0x488>
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <_strtod_l+0x93c>)
 800a514:	ea0a 0303 	and.w	r3, sl, r3
 800a518:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a51c:	f04f 0800 	mov.w	r8, #0
 800a520:	9b04      	ldr	r3, [sp, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1a2      	bne.n	800a46c <_strtod_l+0x804>
 800a526:	e5ed      	b.n	800a104 <_strtod_l+0x49c>
 800a528:	f04f 33ff 	mov.w	r3, #4294967295
 800a52c:	e7e9      	b.n	800a502 <_strtod_l+0x89a>
 800a52e:	4613      	mov	r3, r2
 800a530:	e7e7      	b.n	800a502 <_strtod_l+0x89a>
 800a532:	ea53 0308 	orrs.w	r3, r3, r8
 800a536:	d08a      	beq.n	800a44e <_strtod_l+0x7e6>
 800a538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a53a:	b1e3      	cbz	r3, 800a576 <_strtod_l+0x90e>
 800a53c:	ea13 0f0a 	tst.w	r3, sl
 800a540:	d0ee      	beq.n	800a520 <_strtod_l+0x8b8>
 800a542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a544:	9a04      	ldr	r2, [sp, #16]
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	b1c3      	cbz	r3, 800a57e <_strtod_l+0x916>
 800a54c:	f7ff fb6f 	bl	8009c2e <sulp>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	ec51 0b18 	vmov	r0, r1, d8
 800a558:	f7f5 fea8 	bl	80002ac <__adddf3>
 800a55c:	4680      	mov	r8, r0
 800a55e:	4689      	mov	r9, r1
 800a560:	e7de      	b.n	800a520 <_strtod_l+0x8b8>
 800a562:	4013      	ands	r3, r2
 800a564:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a568:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a56c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a570:	f04f 38ff 	mov.w	r8, #4294967295
 800a574:	e7d4      	b.n	800a520 <_strtod_l+0x8b8>
 800a576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a578:	ea13 0f08 	tst.w	r3, r8
 800a57c:	e7e0      	b.n	800a540 <_strtod_l+0x8d8>
 800a57e:	f7ff fb56 	bl	8009c2e <sulp>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	ec51 0b18 	vmov	r0, r1, d8
 800a58a:	f7f5 fe8d 	bl	80002a8 <__aeabi_dsub>
 800a58e:	2200      	movs	r2, #0
 800a590:	2300      	movs	r3, #0
 800a592:	4680      	mov	r8, r0
 800a594:	4689      	mov	r9, r1
 800a596:	f7f6 faa7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d0c0      	beq.n	800a520 <_strtod_l+0x8b8>
 800a59e:	e618      	b.n	800a1d2 <_strtod_l+0x56a>
 800a5a0:	fffffc02 	.word	0xfffffc02
 800a5a4:	7ff00000 	.word	0x7ff00000
 800a5a8:	39500000 	.word	0x39500000
 800a5ac:	000fffff 	.word	0x000fffff
 800a5b0:	7fefffff 	.word	0x7fefffff
 800a5b4:	0800bfc0 	.word	0x0800bfc0
 800a5b8:	4659      	mov	r1, fp
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f7ff fac0 	bl	8009b40 <__ratio>
 800a5c0:	ec57 6b10 	vmov	r6, r7, d0
 800a5c4:	ee10 0a10 	vmov	r0, s0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	f7f6 fa9e 	bl	8000b10 <__aeabi_dcmple>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d071      	beq.n	800a6bc <_strtod_l+0xa54>
 800a5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d17c      	bne.n	800a6d8 <_strtod_l+0xa70>
 800a5de:	f1b8 0f00 	cmp.w	r8, #0
 800a5e2:	d15a      	bne.n	800a69a <_strtod_l+0xa32>
 800a5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d15d      	bne.n	800a6a8 <_strtod_l+0xa40>
 800a5ec:	4b90      	ldr	r3, [pc, #576]	; (800a830 <_strtod_l+0xbc8>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f6 fa82 	bl	8000afc <__aeabi_dcmplt>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d15c      	bne.n	800a6b6 <_strtod_l+0xa4e>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	4b8c      	ldr	r3, [pc, #560]	; (800a834 <_strtod_l+0xbcc>)
 800a602:	2200      	movs	r2, #0
 800a604:	f7f6 f808 	bl	8000618 <__aeabi_dmul>
 800a608:	4606      	mov	r6, r0
 800a60a:	460f      	mov	r7, r1
 800a60c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a610:	9606      	str	r6, [sp, #24]
 800a612:	9307      	str	r3, [sp, #28]
 800a614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a618:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a61c:	4b86      	ldr	r3, [pc, #536]	; (800a838 <_strtod_l+0xbd0>)
 800a61e:	ea0a 0303 	and.w	r3, sl, r3
 800a622:	930d      	str	r3, [sp, #52]	; 0x34
 800a624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a626:	4b85      	ldr	r3, [pc, #532]	; (800a83c <_strtod_l+0xbd4>)
 800a628:	429a      	cmp	r2, r3
 800a62a:	f040 8090 	bne.w	800a74e <_strtod_l+0xae6>
 800a62e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a632:	ec49 8b10 	vmov	d0, r8, r9
 800a636:	f7ff f9b9 	bl	80099ac <__ulp>
 800a63a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a63e:	ec51 0b10 	vmov	r0, r1, d0
 800a642:	f7f5 ffe9 	bl	8000618 <__aeabi_dmul>
 800a646:	4642      	mov	r2, r8
 800a648:	464b      	mov	r3, r9
 800a64a:	f7f5 fe2f 	bl	80002ac <__adddf3>
 800a64e:	460b      	mov	r3, r1
 800a650:	4979      	ldr	r1, [pc, #484]	; (800a838 <_strtod_l+0xbd0>)
 800a652:	4a7b      	ldr	r2, [pc, #492]	; (800a840 <_strtod_l+0xbd8>)
 800a654:	4019      	ands	r1, r3
 800a656:	4291      	cmp	r1, r2
 800a658:	4680      	mov	r8, r0
 800a65a:	d944      	bls.n	800a6e6 <_strtod_l+0xa7e>
 800a65c:	ee18 2a90 	vmov	r2, s17
 800a660:	4b78      	ldr	r3, [pc, #480]	; (800a844 <_strtod_l+0xbdc>)
 800a662:	429a      	cmp	r2, r3
 800a664:	d104      	bne.n	800a670 <_strtod_l+0xa08>
 800a666:	ee18 3a10 	vmov	r3, s16
 800a66a:	3301      	adds	r3, #1
 800a66c:	f43f ad40 	beq.w	800a0f0 <_strtod_l+0x488>
 800a670:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a844 <_strtod_l+0xbdc>
 800a674:	f04f 38ff 	mov.w	r8, #4294967295
 800a678:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7fe fe6a 	bl	8009354 <_Bfree>
 800a680:	9905      	ldr	r1, [sp, #20]
 800a682:	4620      	mov	r0, r4
 800a684:	f7fe fe66 	bl	8009354 <_Bfree>
 800a688:	4659      	mov	r1, fp
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7fe fe62 	bl	8009354 <_Bfree>
 800a690:	4629      	mov	r1, r5
 800a692:	4620      	mov	r0, r4
 800a694:	f7fe fe5e 	bl	8009354 <_Bfree>
 800a698:	e609      	b.n	800a2ae <_strtod_l+0x646>
 800a69a:	f1b8 0f01 	cmp.w	r8, #1
 800a69e:	d103      	bne.n	800a6a8 <_strtod_l+0xa40>
 800a6a0:	f1b9 0f00 	cmp.w	r9, #0
 800a6a4:	f43f ad95 	beq.w	800a1d2 <_strtod_l+0x56a>
 800a6a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a800 <_strtod_l+0xb98>
 800a6ac:	4f60      	ldr	r7, [pc, #384]	; (800a830 <_strtod_l+0xbc8>)
 800a6ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	e7ae      	b.n	800a614 <_strtod_l+0x9ac>
 800a6b6:	4f5f      	ldr	r7, [pc, #380]	; (800a834 <_strtod_l+0xbcc>)
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	e7a7      	b.n	800a60c <_strtod_l+0x9a4>
 800a6bc:	4b5d      	ldr	r3, [pc, #372]	; (800a834 <_strtod_l+0xbcc>)
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f7f5 ffa8 	bl	8000618 <__aeabi_dmul>
 800a6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d09c      	beq.n	800a60c <_strtod_l+0x9a4>
 800a6d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6d6:	e79d      	b.n	800a614 <_strtod_l+0x9ac>
 800a6d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a808 <_strtod_l+0xba0>
 800a6dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6e0:	ec57 6b17 	vmov	r6, r7, d7
 800a6e4:	e796      	b.n	800a614 <_strtod_l+0x9ac>
 800a6e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	46ca      	mov	sl, r9
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1c2      	bne.n	800a678 <_strtod_l+0xa10>
 800a6f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6f8:	0d1b      	lsrs	r3, r3, #20
 800a6fa:	051b      	lsls	r3, r3, #20
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d1bb      	bne.n	800a678 <_strtod_l+0xa10>
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f6 fae8 	bl	8000cd8 <__aeabi_d2lz>
 800a708:	f7f5 ff58 	bl	80005bc <__aeabi_l2d>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f5 fdc8 	bl	80002a8 <__aeabi_dsub>
 800a718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a71e:	ea43 0308 	orr.w	r3, r3, r8
 800a722:	4313      	orrs	r3, r2
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	d054      	beq.n	800a7d4 <_strtod_l+0xb6c>
 800a72a:	a339      	add	r3, pc, #228	; (adr r3, 800a810 <_strtod_l+0xba8>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f6 f9e4 	bl	8000afc <__aeabi_dcmplt>
 800a734:	2800      	cmp	r0, #0
 800a736:	f47f ace5 	bne.w	800a104 <_strtod_l+0x49c>
 800a73a:	a337      	add	r3, pc, #220	; (adr r3, 800a818 <_strtod_l+0xbb0>)
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f6 f9f8 	bl	8000b38 <__aeabi_dcmpgt>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d095      	beq.n	800a678 <_strtod_l+0xa10>
 800a74c:	e4da      	b.n	800a104 <_strtod_l+0x49c>
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	b333      	cbz	r3, 800a7a0 <_strtod_l+0xb38>
 800a752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a754:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a758:	d822      	bhi.n	800a7a0 <_strtod_l+0xb38>
 800a75a:	a331      	add	r3, pc, #196	; (adr r3, 800a820 <_strtod_l+0xbb8>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	4630      	mov	r0, r6
 800a762:	4639      	mov	r1, r7
 800a764:	f7f6 f9d4 	bl	8000b10 <__aeabi_dcmple>
 800a768:	b1a0      	cbz	r0, 800a794 <_strtod_l+0xb2c>
 800a76a:	4639      	mov	r1, r7
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7f6 fa2b 	bl	8000bc8 <__aeabi_d2uiz>
 800a772:	2801      	cmp	r0, #1
 800a774:	bf38      	it	cc
 800a776:	2001      	movcc	r0, #1
 800a778:	f7f5 fed4 	bl	8000524 <__aeabi_ui2d>
 800a77c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	bb23      	cbnz	r3, 800a7ce <_strtod_l+0xb66>
 800a784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a788:	9010      	str	r0, [sp, #64]	; 0x40
 800a78a:	9311      	str	r3, [sp, #68]	; 0x44
 800a78c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a790:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a798:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a79c:	1a9b      	subs	r3, r3, r2
 800a79e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a7a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7a8:	eef0 0a68 	vmov.f32	s1, s17
 800a7ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a7b0:	f7ff f8fc 	bl	80099ac <__ulp>
 800a7b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a7b8:	ec53 2b10 	vmov	r2, r3, d0
 800a7bc:	f7f5 ff2c 	bl	8000618 <__aeabi_dmul>
 800a7c0:	ec53 2b18 	vmov	r2, r3, d8
 800a7c4:	f7f5 fd72 	bl	80002ac <__adddf3>
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	e78d      	b.n	800a6ea <_strtod_l+0xa82>
 800a7ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a7d2:	e7db      	b.n	800a78c <_strtod_l+0xb24>
 800a7d4:	a314      	add	r3, pc, #80	; (adr r3, 800a828 <_strtod_l+0xbc0>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f7f6 f98f 	bl	8000afc <__aeabi_dcmplt>
 800a7de:	e7b3      	b.n	800a748 <_strtod_l+0xae0>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	f7ff ba7c 	b.w	8009ce6 <_strtod_l+0x7e>
 800a7ee:	2a65      	cmp	r2, #101	; 0x65
 800a7f0:	f43f ab75 	beq.w	8009ede <_strtod_l+0x276>
 800a7f4:	2a45      	cmp	r2, #69	; 0x45
 800a7f6:	f43f ab72 	beq.w	8009ede <_strtod_l+0x276>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	f7ff bbaa 	b.w	8009f54 <_strtod_l+0x2ec>
 800a800:	00000000 	.word	0x00000000
 800a804:	bff00000 	.word	0xbff00000
 800a808:	00000000 	.word	0x00000000
 800a80c:	3ff00000 	.word	0x3ff00000
 800a810:	94a03595 	.word	0x94a03595
 800a814:	3fdfffff 	.word	0x3fdfffff
 800a818:	35afe535 	.word	0x35afe535
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	ffc00000 	.word	0xffc00000
 800a824:	41dfffff 	.word	0x41dfffff
 800a828:	94a03595 	.word	0x94a03595
 800a82c:	3fcfffff 	.word	0x3fcfffff
 800a830:	3ff00000 	.word	0x3ff00000
 800a834:	3fe00000 	.word	0x3fe00000
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	7fe00000 	.word	0x7fe00000
 800a840:	7c9fffff 	.word	0x7c9fffff
 800a844:	7fefffff 	.word	0x7fefffff

0800a848 <_strtod_r>:
 800a848:	4b01      	ldr	r3, [pc, #4]	; (800a850 <_strtod_r+0x8>)
 800a84a:	f7ff ba0d 	b.w	8009c68 <_strtod_l>
 800a84e:	bf00      	nop
 800a850:	20000070 	.word	0x20000070

0800a854 <__ssputs_r>:
 800a854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a858:	688e      	ldr	r6, [r1, #8]
 800a85a:	461f      	mov	r7, r3
 800a85c:	42be      	cmp	r6, r7
 800a85e:	680b      	ldr	r3, [r1, #0]
 800a860:	4682      	mov	sl, r0
 800a862:	460c      	mov	r4, r1
 800a864:	4690      	mov	r8, r2
 800a866:	d82c      	bhi.n	800a8c2 <__ssputs_r+0x6e>
 800a868:	898a      	ldrh	r2, [r1, #12]
 800a86a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a86e:	d026      	beq.n	800a8be <__ssputs_r+0x6a>
 800a870:	6965      	ldr	r5, [r4, #20]
 800a872:	6909      	ldr	r1, [r1, #16]
 800a874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a878:	eba3 0901 	sub.w	r9, r3, r1
 800a87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a880:	1c7b      	adds	r3, r7, #1
 800a882:	444b      	add	r3, r9
 800a884:	106d      	asrs	r5, r5, #1
 800a886:	429d      	cmp	r5, r3
 800a888:	bf38      	it	cc
 800a88a:	461d      	movcc	r5, r3
 800a88c:	0553      	lsls	r3, r2, #21
 800a88e:	d527      	bpl.n	800a8e0 <__ssputs_r+0x8c>
 800a890:	4629      	mov	r1, r5
 800a892:	f7fc fcf3 	bl	800727c <_malloc_r>
 800a896:	4606      	mov	r6, r0
 800a898:	b360      	cbz	r0, 800a8f4 <__ssputs_r+0xa0>
 800a89a:	6921      	ldr	r1, [r4, #16]
 800a89c:	464a      	mov	r2, r9
 800a89e:	f000 fa0b 	bl	800acb8 <memcpy>
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	6126      	str	r6, [r4, #16]
 800a8b0:	6165      	str	r5, [r4, #20]
 800a8b2:	444e      	add	r6, r9
 800a8b4:	eba5 0509 	sub.w	r5, r5, r9
 800a8b8:	6026      	str	r6, [r4, #0]
 800a8ba:	60a5      	str	r5, [r4, #8]
 800a8bc:	463e      	mov	r6, r7
 800a8be:	42be      	cmp	r6, r7
 800a8c0:	d900      	bls.n	800a8c4 <__ssputs_r+0x70>
 800a8c2:	463e      	mov	r6, r7
 800a8c4:	6820      	ldr	r0, [r4, #0]
 800a8c6:	4632      	mov	r2, r6
 800a8c8:	4641      	mov	r1, r8
 800a8ca:	f000 f9c9 	bl	800ac60 <memmove>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	1b9b      	subs	r3, r3, r6
 800a8d2:	60a3      	str	r3, [r4, #8]
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	4433      	add	r3, r6
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	f000 fd9e 	bl	800b422 <_realloc_r>
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d1e0      	bne.n	800a8ae <__ssputs_r+0x5a>
 800a8ec:	6921      	ldr	r1, [r4, #16]
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	f7fe fca4 	bl	800923c <_free_r>
 800a8f4:	230c      	movs	r3, #12
 800a8f6:	f8ca 3000 	str.w	r3, [sl]
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	e7e9      	b.n	800a8dc <__ssputs_r+0x88>

0800a908 <_svfiprintf_r>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	4698      	mov	r8, r3
 800a90e:	898b      	ldrh	r3, [r1, #12]
 800a910:	061b      	lsls	r3, r3, #24
 800a912:	b09d      	sub	sp, #116	; 0x74
 800a914:	4607      	mov	r7, r0
 800a916:	460d      	mov	r5, r1
 800a918:	4614      	mov	r4, r2
 800a91a:	d50e      	bpl.n	800a93a <_svfiprintf_r+0x32>
 800a91c:	690b      	ldr	r3, [r1, #16]
 800a91e:	b963      	cbnz	r3, 800a93a <_svfiprintf_r+0x32>
 800a920:	2140      	movs	r1, #64	; 0x40
 800a922:	f7fc fcab 	bl	800727c <_malloc_r>
 800a926:	6028      	str	r0, [r5, #0]
 800a928:	6128      	str	r0, [r5, #16]
 800a92a:	b920      	cbnz	r0, 800a936 <_svfiprintf_r+0x2e>
 800a92c:	230c      	movs	r3, #12
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	f04f 30ff 	mov.w	r0, #4294967295
 800a934:	e0d0      	b.n	800aad8 <_svfiprintf_r+0x1d0>
 800a936:	2340      	movs	r3, #64	; 0x40
 800a938:	616b      	str	r3, [r5, #20]
 800a93a:	2300      	movs	r3, #0
 800a93c:	9309      	str	r3, [sp, #36]	; 0x24
 800a93e:	2320      	movs	r3, #32
 800a940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a944:	f8cd 800c 	str.w	r8, [sp, #12]
 800a948:	2330      	movs	r3, #48	; 0x30
 800a94a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aaf0 <_svfiprintf_r+0x1e8>
 800a94e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a952:	f04f 0901 	mov.w	r9, #1
 800a956:	4623      	mov	r3, r4
 800a958:	469a      	mov	sl, r3
 800a95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95e:	b10a      	cbz	r2, 800a964 <_svfiprintf_r+0x5c>
 800a960:	2a25      	cmp	r2, #37	; 0x25
 800a962:	d1f9      	bne.n	800a958 <_svfiprintf_r+0x50>
 800a964:	ebba 0b04 	subs.w	fp, sl, r4
 800a968:	d00b      	beq.n	800a982 <_svfiprintf_r+0x7a>
 800a96a:	465b      	mov	r3, fp
 800a96c:	4622      	mov	r2, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	4638      	mov	r0, r7
 800a972:	f7ff ff6f 	bl	800a854 <__ssputs_r>
 800a976:	3001      	adds	r0, #1
 800a978:	f000 80a9 	beq.w	800aace <_svfiprintf_r+0x1c6>
 800a97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a97e:	445a      	add	r2, fp
 800a980:	9209      	str	r2, [sp, #36]	; 0x24
 800a982:	f89a 3000 	ldrb.w	r3, [sl]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 80a1 	beq.w	800aace <_svfiprintf_r+0x1c6>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f04f 32ff 	mov.w	r2, #4294967295
 800a992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a996:	f10a 0a01 	add.w	sl, sl, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	9307      	str	r3, [sp, #28]
 800a99e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9a4:	4654      	mov	r4, sl
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ac:	4850      	ldr	r0, [pc, #320]	; (800aaf0 <_svfiprintf_r+0x1e8>)
 800a9ae:	f7f5 fc1f 	bl	80001f0 <memchr>
 800a9b2:	9a04      	ldr	r2, [sp, #16]
 800a9b4:	b9d8      	cbnz	r0, 800a9ee <_svfiprintf_r+0xe6>
 800a9b6:	06d0      	lsls	r0, r2, #27
 800a9b8:	bf44      	itt	mi
 800a9ba:	2320      	movmi	r3, #32
 800a9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9c0:	0711      	lsls	r1, r2, #28
 800a9c2:	bf44      	itt	mi
 800a9c4:	232b      	movmi	r3, #43	; 0x2b
 800a9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a9d0:	d015      	beq.n	800a9fe <_svfiprintf_r+0xf6>
 800a9d2:	9a07      	ldr	r2, [sp, #28]
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	f04f 0c0a 	mov.w	ip, #10
 800a9dc:	4621      	mov	r1, r4
 800a9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e2:	3b30      	subs	r3, #48	; 0x30
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d94d      	bls.n	800aa84 <_svfiprintf_r+0x17c>
 800a9e8:	b1b0      	cbz	r0, 800aa18 <_svfiprintf_r+0x110>
 800a9ea:	9207      	str	r2, [sp, #28]
 800a9ec:	e014      	b.n	800aa18 <_svfiprintf_r+0x110>
 800a9ee:	eba0 0308 	sub.w	r3, r0, r8
 800a9f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	9304      	str	r3, [sp, #16]
 800a9fa:	46a2      	mov	sl, r4
 800a9fc:	e7d2      	b.n	800a9a4 <_svfiprintf_r+0x9c>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d19      	adds	r1, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9103      	str	r1, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfbb      	ittet	lt
 800aa0a:	425b      	neglt	r3, r3
 800aa0c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa10:	9307      	strge	r3, [sp, #28]
 800aa12:	9307      	strlt	r3, [sp, #28]
 800aa14:	bfb8      	it	lt
 800aa16:	9204      	strlt	r2, [sp, #16]
 800aa18:	7823      	ldrb	r3, [r4, #0]
 800aa1a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1c:	d10c      	bne.n	800aa38 <_svfiprintf_r+0x130>
 800aa1e:	7863      	ldrb	r3, [r4, #1]
 800aa20:	2b2a      	cmp	r3, #42	; 0x2a
 800aa22:	d134      	bne.n	800aa8e <_svfiprintf_r+0x186>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	9203      	str	r2, [sp, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfb8      	it	lt
 800aa30:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa34:	3402      	adds	r4, #2
 800aa36:	9305      	str	r3, [sp, #20]
 800aa38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ab00 <_svfiprintf_r+0x1f8>
 800aa3c:	7821      	ldrb	r1, [r4, #0]
 800aa3e:	2203      	movs	r2, #3
 800aa40:	4650      	mov	r0, sl
 800aa42:	f7f5 fbd5 	bl	80001f0 <memchr>
 800aa46:	b138      	cbz	r0, 800aa58 <_svfiprintf_r+0x150>
 800aa48:	9b04      	ldr	r3, [sp, #16]
 800aa4a:	eba0 000a 	sub.w	r0, r0, sl
 800aa4e:	2240      	movs	r2, #64	; 0x40
 800aa50:	4082      	lsls	r2, r0
 800aa52:	4313      	orrs	r3, r2
 800aa54:	3401      	adds	r4, #1
 800aa56:	9304      	str	r3, [sp, #16]
 800aa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5c:	4825      	ldr	r0, [pc, #148]	; (800aaf4 <_svfiprintf_r+0x1ec>)
 800aa5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa62:	2206      	movs	r2, #6
 800aa64:	f7f5 fbc4 	bl	80001f0 <memchr>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d038      	beq.n	800aade <_svfiprintf_r+0x1d6>
 800aa6c:	4b22      	ldr	r3, [pc, #136]	; (800aaf8 <_svfiprintf_r+0x1f0>)
 800aa6e:	bb1b      	cbnz	r3, 800aab8 <_svfiprintf_r+0x1b0>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	3307      	adds	r3, #7
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	3308      	adds	r3, #8
 800aa7a:	9303      	str	r3, [sp, #12]
 800aa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7e:	4433      	add	r3, r6
 800aa80:	9309      	str	r3, [sp, #36]	; 0x24
 800aa82:	e768      	b.n	800a956 <_svfiprintf_r+0x4e>
 800aa84:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa88:	460c      	mov	r4, r1
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7a6      	b.n	800a9dc <_svfiprintf_r+0xd4>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	3401      	adds	r4, #1
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	4619      	mov	r1, r3
 800aa96:	f04f 0c0a 	mov.w	ip, #10
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa0:	3a30      	subs	r2, #48	; 0x30
 800aaa2:	2a09      	cmp	r2, #9
 800aaa4:	d903      	bls.n	800aaae <_svfiprintf_r+0x1a6>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d0c6      	beq.n	800aa38 <_svfiprintf_r+0x130>
 800aaaa:	9105      	str	r1, [sp, #20]
 800aaac:	e7c4      	b.n	800aa38 <_svfiprintf_r+0x130>
 800aaae:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab2:	4604      	mov	r4, r0
 800aab4:	2301      	movs	r3, #1
 800aab6:	e7f0      	b.n	800aa9a <_svfiprintf_r+0x192>
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <_svfiprintf_r+0x1f4>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4638      	mov	r0, r7
 800aac4:	f7fc fd94 	bl	80075f0 <_printf_float>
 800aac8:	1c42      	adds	r2, r0, #1
 800aaca:	4606      	mov	r6, r0
 800aacc:	d1d6      	bne.n	800aa7c <_svfiprintf_r+0x174>
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	065b      	lsls	r3, r3, #25
 800aad2:	f53f af2d 	bmi.w	800a930 <_svfiprintf_r+0x28>
 800aad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aad8:	b01d      	add	sp, #116	; 0x74
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aade:	ab03      	add	r3, sp, #12
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	462a      	mov	r2, r5
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <_svfiprintf_r+0x1f4>)
 800aae6:	a904      	add	r1, sp, #16
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7fd f825 	bl	8007b38 <_printf_i>
 800aaee:	e7eb      	b.n	800aac8 <_svfiprintf_r+0x1c0>
 800aaf0:	0800bfe8 	.word	0x0800bfe8
 800aaf4:	0800bff2 	.word	0x0800bff2
 800aaf8:	080075f1 	.word	0x080075f1
 800aafc:	0800a855 	.word	0x0800a855
 800ab00:	0800bfee 	.word	0x0800bfee

0800ab04 <__sflush_r>:
 800ab04:	898a      	ldrh	r2, [r1, #12]
 800ab06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	0710      	lsls	r0, r2, #28
 800ab0e:	460c      	mov	r4, r1
 800ab10:	d458      	bmi.n	800abc4 <__sflush_r+0xc0>
 800ab12:	684b      	ldr	r3, [r1, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dc05      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dc02      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	d0f9      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab30:	682f      	ldr	r7, [r5, #0]
 800ab32:	6a21      	ldr	r1, [r4, #32]
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	d032      	beq.n	800ab9e <__sflush_r+0x9a>
 800ab38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	075a      	lsls	r2, r3, #29
 800ab3e:	d505      	bpl.n	800ab4c <__sflush_r+0x48>
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	1ac0      	subs	r0, r0, r3
 800ab44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab46:	b10b      	cbz	r3, 800ab4c <__sflush_r+0x48>
 800ab48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab4a:	1ac0      	subs	r0, r0, r3
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab52:	6a21      	ldr	r1, [r4, #32]
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b0      	blx	r6
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	d106      	bne.n	800ab6c <__sflush_r+0x68>
 800ab5e:	6829      	ldr	r1, [r5, #0]
 800ab60:	291d      	cmp	r1, #29
 800ab62:	d82b      	bhi.n	800abbc <__sflush_r+0xb8>
 800ab64:	4a29      	ldr	r2, [pc, #164]	; (800ac0c <__sflush_r+0x108>)
 800ab66:	410a      	asrs	r2, r1
 800ab68:	07d6      	lsls	r6, r2, #31
 800ab6a:	d427      	bmi.n	800abbc <__sflush_r+0xb8>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	6062      	str	r2, [r4, #4]
 800ab70:	04d9      	lsls	r1, r3, #19
 800ab72:	6922      	ldr	r2, [r4, #16]
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	d504      	bpl.n	800ab82 <__sflush_r+0x7e>
 800ab78:	1c42      	adds	r2, r0, #1
 800ab7a:	d101      	bne.n	800ab80 <__sflush_r+0x7c>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b903      	cbnz	r3, 800ab82 <__sflush_r+0x7e>
 800ab80:	6560      	str	r0, [r4, #84]	; 0x54
 800ab82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab84:	602f      	str	r7, [r5, #0]
 800ab86:	2900      	cmp	r1, #0
 800ab88:	d0c9      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d002      	beq.n	800ab98 <__sflush_r+0x94>
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7fe fb52 	bl	800923c <_free_r>
 800ab98:	2000      	movs	r0, #0
 800ab9a:	6360      	str	r0, [r4, #52]	; 0x34
 800ab9c:	e7c0      	b.n	800ab20 <__sflush_r+0x1c>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b0      	blx	r6
 800aba4:	1c41      	adds	r1, r0, #1
 800aba6:	d1c8      	bne.n	800ab3a <__sflush_r+0x36>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c5      	beq.n	800ab3a <__sflush_r+0x36>
 800abae:	2b1d      	cmp	r3, #29
 800abb0:	d001      	beq.n	800abb6 <__sflush_r+0xb2>
 800abb2:	2b16      	cmp	r3, #22
 800abb4:	d101      	bne.n	800abba <__sflush_r+0xb6>
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	e7b1      	b.n	800ab1e <__sflush_r+0x1a>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7ad      	b.n	800ab20 <__sflush_r+0x1c>
 800abc4:	690f      	ldr	r7, [r1, #16]
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	d0a9      	beq.n	800ab1e <__sflush_r+0x1a>
 800abca:	0793      	lsls	r3, r2, #30
 800abcc:	680e      	ldr	r6, [r1, #0]
 800abce:	bf08      	it	eq
 800abd0:	694b      	ldreq	r3, [r1, #20]
 800abd2:	600f      	str	r7, [r1, #0]
 800abd4:	bf18      	it	ne
 800abd6:	2300      	movne	r3, #0
 800abd8:	eba6 0807 	sub.w	r8, r6, r7
 800abdc:	608b      	str	r3, [r1, #8]
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	dd9c      	ble.n	800ab1e <__sflush_r+0x1a>
 800abe4:	6a21      	ldr	r1, [r4, #32]
 800abe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abe8:	4643      	mov	r3, r8
 800abea:	463a      	mov	r2, r7
 800abec:	4628      	mov	r0, r5
 800abee:	47b0      	blx	r6
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dc06      	bgt.n	800ac02 <__sflush_r+0xfe>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	e78e      	b.n	800ab20 <__sflush_r+0x1c>
 800ac02:	4407      	add	r7, r0
 800ac04:	eba8 0800 	sub.w	r8, r8, r0
 800ac08:	e7e9      	b.n	800abde <__sflush_r+0xda>
 800ac0a:	bf00      	nop
 800ac0c:	dfbffffe 	.word	0xdfbffffe

0800ac10 <_fflush_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	4605      	mov	r5, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b913      	cbnz	r3, 800ac20 <_fflush_r+0x10>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	b118      	cbz	r0, 800ac2a <_fflush_r+0x1a>
 800ac22:	6a03      	ldr	r3, [r0, #32]
 800ac24:	b90b      	cbnz	r3, 800ac2a <_fflush_r+0x1a>
 800ac26:	f7fd fb45 	bl	80082b4 <__sinit>
 800ac2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0f3      	beq.n	800ac1a <_fflush_r+0xa>
 800ac32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac34:	07d0      	lsls	r0, r2, #31
 800ac36:	d404      	bmi.n	800ac42 <_fflush_r+0x32>
 800ac38:	0599      	lsls	r1, r3, #22
 800ac3a:	d402      	bmi.n	800ac42 <_fflush_r+0x32>
 800ac3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac3e:	f7fd fc72 	bl	8008526 <__retarget_lock_acquire_recursive>
 800ac42:	4628      	mov	r0, r5
 800ac44:	4621      	mov	r1, r4
 800ac46:	f7ff ff5d 	bl	800ab04 <__sflush_r>
 800ac4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac4c:	07da      	lsls	r2, r3, #31
 800ac4e:	4605      	mov	r5, r0
 800ac50:	d4e4      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	059b      	lsls	r3, r3, #22
 800ac56:	d4e1      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac5a:	f7fd fc65 	bl	8008528 <__retarget_lock_release_recursive>
 800ac5e:	e7dd      	b.n	800ac1c <_fflush_r+0xc>

0800ac60 <memmove>:
 800ac60:	4288      	cmp	r0, r1
 800ac62:	b510      	push	{r4, lr}
 800ac64:	eb01 0402 	add.w	r4, r1, r2
 800ac68:	d902      	bls.n	800ac70 <memmove+0x10>
 800ac6a:	4284      	cmp	r4, r0
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	d807      	bhi.n	800ac80 <memmove+0x20>
 800ac70:	1e43      	subs	r3, r0, #1
 800ac72:	42a1      	cmp	r1, r4
 800ac74:	d008      	beq.n	800ac88 <memmove+0x28>
 800ac76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac7e:	e7f8      	b.n	800ac72 <memmove+0x12>
 800ac80:	4402      	add	r2, r0
 800ac82:	4601      	mov	r1, r0
 800ac84:	428a      	cmp	r2, r1
 800ac86:	d100      	bne.n	800ac8a <memmove+0x2a>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac92:	e7f7      	b.n	800ac84 <memmove+0x24>

0800ac94 <strncmp>:
 800ac94:	b510      	push	{r4, lr}
 800ac96:	b16a      	cbz	r2, 800acb4 <strncmp+0x20>
 800ac98:	3901      	subs	r1, #1
 800ac9a:	1884      	adds	r4, r0, r2
 800ac9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d103      	bne.n	800acb0 <strncmp+0x1c>
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d001      	beq.n	800acb0 <strncmp+0x1c>
 800acac:	2a00      	cmp	r2, #0
 800acae:	d1f5      	bne.n	800ac9c <strncmp+0x8>
 800acb0:	1ad0      	subs	r0, r2, r3
 800acb2:	bd10      	pop	{r4, pc}
 800acb4:	4610      	mov	r0, r2
 800acb6:	e7fc      	b.n	800acb2 <strncmp+0x1e>

0800acb8 <memcpy>:
 800acb8:	440a      	add	r2, r1
 800acba:	4291      	cmp	r1, r2
 800acbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800acc0:	d100      	bne.n	800acc4 <memcpy+0xc>
 800acc2:	4770      	bx	lr
 800acc4:	b510      	push	{r4, lr}
 800acc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acce:	4291      	cmp	r1, r2
 800acd0:	d1f9      	bne.n	800acc6 <memcpy+0xe>
 800acd2:	bd10      	pop	{r4, pc}
 800acd4:	0000      	movs	r0, r0
	...

0800acd8 <nan>:
 800acd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ace0 <nan+0x8>
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	00000000 	.word	0x00000000
 800ace4:	7ff80000 	.word	0x7ff80000

0800ace8 <__assert_func>:
 800ace8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acea:	4614      	mov	r4, r2
 800acec:	461a      	mov	r2, r3
 800acee:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <__assert_func+0x2c>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4605      	mov	r5, r0
 800acf4:	68d8      	ldr	r0, [r3, #12]
 800acf6:	b14c      	cbz	r4, 800ad0c <__assert_func+0x24>
 800acf8:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <__assert_func+0x30>)
 800acfa:	9100      	str	r1, [sp, #0]
 800acfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad00:	4906      	ldr	r1, [pc, #24]	; (800ad1c <__assert_func+0x34>)
 800ad02:	462b      	mov	r3, r5
 800ad04:	f000 fbca 	bl	800b49c <fiprintf>
 800ad08:	f000 fbda 	bl	800b4c0 <abort>
 800ad0c:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <__assert_func+0x38>)
 800ad0e:	461c      	mov	r4, r3
 800ad10:	e7f3      	b.n	800acfa <__assert_func+0x12>
 800ad12:	bf00      	nop
 800ad14:	2000006c 	.word	0x2000006c
 800ad18:	0800c001 	.word	0x0800c001
 800ad1c:	0800c00e 	.word	0x0800c00e
 800ad20:	0800c03c 	.word	0x0800c03c

0800ad24 <_calloc_r>:
 800ad24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad26:	fba1 2402 	umull	r2, r4, r1, r2
 800ad2a:	b94c      	cbnz	r4, 800ad40 <_calloc_r+0x1c>
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	9201      	str	r2, [sp, #4]
 800ad30:	f7fc faa4 	bl	800727c <_malloc_r>
 800ad34:	9a01      	ldr	r2, [sp, #4]
 800ad36:	4605      	mov	r5, r0
 800ad38:	b930      	cbnz	r0, 800ad48 <_calloc_r+0x24>
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	220c      	movs	r2, #12
 800ad42:	6002      	str	r2, [r0, #0]
 800ad44:	2500      	movs	r5, #0
 800ad46:	e7f8      	b.n	800ad3a <_calloc_r+0x16>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	f7fd fb4c 	bl	80083e6 <memset>
 800ad4e:	e7f4      	b.n	800ad3a <_calloc_r+0x16>

0800ad50 <rshift>:
 800ad50:	6903      	ldr	r3, [r0, #16]
 800ad52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad5e:	f100 0414 	add.w	r4, r0, #20
 800ad62:	dd45      	ble.n	800adf0 <rshift+0xa0>
 800ad64:	f011 011f 	ands.w	r1, r1, #31
 800ad68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad70:	d10c      	bne.n	800ad8c <rshift+0x3c>
 800ad72:	f100 0710 	add.w	r7, r0, #16
 800ad76:	4629      	mov	r1, r5
 800ad78:	42b1      	cmp	r1, r6
 800ad7a:	d334      	bcc.n	800ade6 <rshift+0x96>
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	1eea      	subs	r2, r5, #3
 800ad82:	4296      	cmp	r6, r2
 800ad84:	bf38      	it	cc
 800ad86:	2300      	movcc	r3, #0
 800ad88:	4423      	add	r3, r4
 800ad8a:	e015      	b.n	800adb8 <rshift+0x68>
 800ad8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad90:	f1c1 0820 	rsb	r8, r1, #32
 800ad94:	40cf      	lsrs	r7, r1
 800ad96:	f105 0e04 	add.w	lr, r5, #4
 800ad9a:	46a1      	mov	r9, r4
 800ad9c:	4576      	cmp	r6, lr
 800ad9e:	46f4      	mov	ip, lr
 800ada0:	d815      	bhi.n	800adce <rshift+0x7e>
 800ada2:	1a9a      	subs	r2, r3, r2
 800ada4:	0092      	lsls	r2, r2, #2
 800ada6:	3a04      	subs	r2, #4
 800ada8:	3501      	adds	r5, #1
 800adaa:	42ae      	cmp	r6, r5
 800adac:	bf38      	it	cc
 800adae:	2200      	movcc	r2, #0
 800adb0:	18a3      	adds	r3, r4, r2
 800adb2:	50a7      	str	r7, [r4, r2]
 800adb4:	b107      	cbz	r7, 800adb8 <rshift+0x68>
 800adb6:	3304      	adds	r3, #4
 800adb8:	1b1a      	subs	r2, r3, r4
 800adba:	42a3      	cmp	r3, r4
 800adbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800adc0:	bf08      	it	eq
 800adc2:	2300      	moveq	r3, #0
 800adc4:	6102      	str	r2, [r0, #16]
 800adc6:	bf08      	it	eq
 800adc8:	6143      	streq	r3, [r0, #20]
 800adca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adce:	f8dc c000 	ldr.w	ip, [ip]
 800add2:	fa0c fc08 	lsl.w	ip, ip, r8
 800add6:	ea4c 0707 	orr.w	r7, ip, r7
 800adda:	f849 7b04 	str.w	r7, [r9], #4
 800adde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ade2:	40cf      	lsrs	r7, r1
 800ade4:	e7da      	b.n	800ad9c <rshift+0x4c>
 800ade6:	f851 cb04 	ldr.w	ip, [r1], #4
 800adea:	f847 cf04 	str.w	ip, [r7, #4]!
 800adee:	e7c3      	b.n	800ad78 <rshift+0x28>
 800adf0:	4623      	mov	r3, r4
 800adf2:	e7e1      	b.n	800adb8 <rshift+0x68>

0800adf4 <__hexdig_fun>:
 800adf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800adf8:	2b09      	cmp	r3, #9
 800adfa:	d802      	bhi.n	800ae02 <__hexdig_fun+0xe>
 800adfc:	3820      	subs	r0, #32
 800adfe:	b2c0      	uxtb	r0, r0
 800ae00:	4770      	bx	lr
 800ae02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d801      	bhi.n	800ae0e <__hexdig_fun+0x1a>
 800ae0a:	3847      	subs	r0, #71	; 0x47
 800ae0c:	e7f7      	b.n	800adfe <__hexdig_fun+0xa>
 800ae0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d801      	bhi.n	800ae1a <__hexdig_fun+0x26>
 800ae16:	3827      	subs	r0, #39	; 0x27
 800ae18:	e7f1      	b.n	800adfe <__hexdig_fun+0xa>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	4770      	bx	lr
	...

0800ae20 <__gethex>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	4617      	mov	r7, r2
 800ae26:	680a      	ldr	r2, [r1, #0]
 800ae28:	b085      	sub	sp, #20
 800ae2a:	f102 0b02 	add.w	fp, r2, #2
 800ae2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ae32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ae36:	4681      	mov	r9, r0
 800ae38:	468a      	mov	sl, r1
 800ae3a:	9302      	str	r3, [sp, #8]
 800ae3c:	32fe      	adds	r2, #254	; 0xfe
 800ae3e:	eb02 030b 	add.w	r3, r2, fp
 800ae42:	46d8      	mov	r8, fp
 800ae44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	2830      	cmp	r0, #48	; 0x30
 800ae4c:	d0f7      	beq.n	800ae3e <__gethex+0x1e>
 800ae4e:	f7ff ffd1 	bl	800adf4 <__hexdig_fun>
 800ae52:	4604      	mov	r4, r0
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d138      	bne.n	800aeca <__gethex+0xaa>
 800ae58:	49a7      	ldr	r1, [pc, #668]	; (800b0f8 <__gethex+0x2d8>)
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	f7ff ff19 	bl	800ac94 <strncmp>
 800ae62:	4606      	mov	r6, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d169      	bne.n	800af3c <__gethex+0x11c>
 800ae68:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ae6c:	465d      	mov	r5, fp
 800ae6e:	f7ff ffc1 	bl	800adf4 <__hexdig_fun>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	d064      	beq.n	800af40 <__gethex+0x120>
 800ae76:	465a      	mov	r2, fp
 800ae78:	7810      	ldrb	r0, [r2, #0]
 800ae7a:	2830      	cmp	r0, #48	; 0x30
 800ae7c:	4690      	mov	r8, r2
 800ae7e:	f102 0201 	add.w	r2, r2, #1
 800ae82:	d0f9      	beq.n	800ae78 <__gethex+0x58>
 800ae84:	f7ff ffb6 	bl	800adf4 <__hexdig_fun>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	fab0 f480 	clz	r4, r0
 800ae8e:	0964      	lsrs	r4, r4, #5
 800ae90:	465e      	mov	r6, fp
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	4642      	mov	r2, r8
 800ae96:	4615      	mov	r5, r2
 800ae98:	3201      	adds	r2, #1
 800ae9a:	7828      	ldrb	r0, [r5, #0]
 800ae9c:	f7ff ffaa 	bl	800adf4 <__hexdig_fun>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d1f8      	bne.n	800ae96 <__gethex+0x76>
 800aea4:	4994      	ldr	r1, [pc, #592]	; (800b0f8 <__gethex+0x2d8>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f7ff fef3 	bl	800ac94 <strncmp>
 800aeae:	b978      	cbnz	r0, 800aed0 <__gethex+0xb0>
 800aeb0:	b946      	cbnz	r6, 800aec4 <__gethex+0xa4>
 800aeb2:	1c6e      	adds	r6, r5, #1
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	4615      	mov	r5, r2
 800aeb8:	3201      	adds	r2, #1
 800aeba:	7828      	ldrb	r0, [r5, #0]
 800aebc:	f7ff ff9a 	bl	800adf4 <__hexdig_fun>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1f8      	bne.n	800aeb6 <__gethex+0x96>
 800aec4:	1b73      	subs	r3, r6, r5
 800aec6:	009e      	lsls	r6, r3, #2
 800aec8:	e004      	b.n	800aed4 <__gethex+0xb4>
 800aeca:	2400      	movs	r4, #0
 800aecc:	4626      	mov	r6, r4
 800aece:	e7e1      	b.n	800ae94 <__gethex+0x74>
 800aed0:	2e00      	cmp	r6, #0
 800aed2:	d1f7      	bne.n	800aec4 <__gethex+0xa4>
 800aed4:	782b      	ldrb	r3, [r5, #0]
 800aed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aeda:	2b50      	cmp	r3, #80	; 0x50
 800aedc:	d13d      	bne.n	800af5a <__gethex+0x13a>
 800aede:	786b      	ldrb	r3, [r5, #1]
 800aee0:	2b2b      	cmp	r3, #43	; 0x2b
 800aee2:	d02f      	beq.n	800af44 <__gethex+0x124>
 800aee4:	2b2d      	cmp	r3, #45	; 0x2d
 800aee6:	d031      	beq.n	800af4c <__gethex+0x12c>
 800aee8:	1c69      	adds	r1, r5, #1
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	7808      	ldrb	r0, [r1, #0]
 800aef0:	f7ff ff80 	bl	800adf4 <__hexdig_fun>
 800aef4:	1e42      	subs	r2, r0, #1
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	2a18      	cmp	r2, #24
 800aefa:	d82e      	bhi.n	800af5a <__gethex+0x13a>
 800aefc:	f1a0 0210 	sub.w	r2, r0, #16
 800af00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af04:	f7ff ff76 	bl	800adf4 <__hexdig_fun>
 800af08:	f100 3cff 	add.w	ip, r0, #4294967295
 800af0c:	fa5f fc8c 	uxtb.w	ip, ip
 800af10:	f1bc 0f18 	cmp.w	ip, #24
 800af14:	d91d      	bls.n	800af52 <__gethex+0x132>
 800af16:	f1bb 0f00 	cmp.w	fp, #0
 800af1a:	d000      	beq.n	800af1e <__gethex+0xfe>
 800af1c:	4252      	negs	r2, r2
 800af1e:	4416      	add	r6, r2
 800af20:	f8ca 1000 	str.w	r1, [sl]
 800af24:	b1dc      	cbz	r4, 800af5e <__gethex+0x13e>
 800af26:	9b01      	ldr	r3, [sp, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf14      	ite	ne
 800af2c:	f04f 0800 	movne.w	r8, #0
 800af30:	f04f 0806 	moveq.w	r8, #6
 800af34:	4640      	mov	r0, r8
 800af36:	b005      	add	sp, #20
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3c:	4645      	mov	r5, r8
 800af3e:	4626      	mov	r6, r4
 800af40:	2401      	movs	r4, #1
 800af42:	e7c7      	b.n	800aed4 <__gethex+0xb4>
 800af44:	f04f 0b00 	mov.w	fp, #0
 800af48:	1ca9      	adds	r1, r5, #2
 800af4a:	e7d0      	b.n	800aeee <__gethex+0xce>
 800af4c:	f04f 0b01 	mov.w	fp, #1
 800af50:	e7fa      	b.n	800af48 <__gethex+0x128>
 800af52:	230a      	movs	r3, #10
 800af54:	fb03 0002 	mla	r0, r3, r2, r0
 800af58:	e7d0      	b.n	800aefc <__gethex+0xdc>
 800af5a:	4629      	mov	r1, r5
 800af5c:	e7e0      	b.n	800af20 <__gethex+0x100>
 800af5e:	eba5 0308 	sub.w	r3, r5, r8
 800af62:	3b01      	subs	r3, #1
 800af64:	4621      	mov	r1, r4
 800af66:	2b07      	cmp	r3, #7
 800af68:	dc0a      	bgt.n	800af80 <__gethex+0x160>
 800af6a:	4648      	mov	r0, r9
 800af6c:	f7fe f9b2 	bl	80092d4 <_Balloc>
 800af70:	4604      	mov	r4, r0
 800af72:	b940      	cbnz	r0, 800af86 <__gethex+0x166>
 800af74:	4b61      	ldr	r3, [pc, #388]	; (800b0fc <__gethex+0x2dc>)
 800af76:	4602      	mov	r2, r0
 800af78:	21e4      	movs	r1, #228	; 0xe4
 800af7a:	4861      	ldr	r0, [pc, #388]	; (800b100 <__gethex+0x2e0>)
 800af7c:	f7ff feb4 	bl	800ace8 <__assert_func>
 800af80:	3101      	adds	r1, #1
 800af82:	105b      	asrs	r3, r3, #1
 800af84:	e7ef      	b.n	800af66 <__gethex+0x146>
 800af86:	f100 0a14 	add.w	sl, r0, #20
 800af8a:	2300      	movs	r3, #0
 800af8c:	495a      	ldr	r1, [pc, #360]	; (800b0f8 <__gethex+0x2d8>)
 800af8e:	f8cd a004 	str.w	sl, [sp, #4]
 800af92:	469b      	mov	fp, r3
 800af94:	45a8      	cmp	r8, r5
 800af96:	d342      	bcc.n	800b01e <__gethex+0x1fe>
 800af98:	9801      	ldr	r0, [sp, #4]
 800af9a:	f840 bb04 	str.w	fp, [r0], #4
 800af9e:	eba0 000a 	sub.w	r0, r0, sl
 800afa2:	1080      	asrs	r0, r0, #2
 800afa4:	6120      	str	r0, [r4, #16]
 800afa6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800afaa:	4658      	mov	r0, fp
 800afac:	f7fe fa84 	bl	80094b8 <__hi0bits>
 800afb0:	683d      	ldr	r5, [r7, #0]
 800afb2:	eba8 0000 	sub.w	r0, r8, r0
 800afb6:	42a8      	cmp	r0, r5
 800afb8:	dd59      	ble.n	800b06e <__gethex+0x24e>
 800afba:	eba0 0805 	sub.w	r8, r0, r5
 800afbe:	4641      	mov	r1, r8
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7fe fe13 	bl	8009bec <__any_on>
 800afc6:	4683      	mov	fp, r0
 800afc8:	b1b8      	cbz	r0, 800affa <__gethex+0x1da>
 800afca:	f108 33ff 	add.w	r3, r8, #4294967295
 800afce:	1159      	asrs	r1, r3, #5
 800afd0:	f003 021f 	and.w	r2, r3, #31
 800afd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800afd8:	f04f 0b01 	mov.w	fp, #1
 800afdc:	fa0b f202 	lsl.w	r2, fp, r2
 800afe0:	420a      	tst	r2, r1
 800afe2:	d00a      	beq.n	800affa <__gethex+0x1da>
 800afe4:	455b      	cmp	r3, fp
 800afe6:	dd06      	ble.n	800aff6 <__gethex+0x1d6>
 800afe8:	f1a8 0102 	sub.w	r1, r8, #2
 800afec:	4620      	mov	r0, r4
 800afee:	f7fe fdfd 	bl	8009bec <__any_on>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d138      	bne.n	800b068 <__gethex+0x248>
 800aff6:	f04f 0b02 	mov.w	fp, #2
 800affa:	4641      	mov	r1, r8
 800affc:	4620      	mov	r0, r4
 800affe:	f7ff fea7 	bl	800ad50 <rshift>
 800b002:	4446      	add	r6, r8
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	42b3      	cmp	r3, r6
 800b008:	da41      	bge.n	800b08e <__gethex+0x26e>
 800b00a:	4621      	mov	r1, r4
 800b00c:	4648      	mov	r0, r9
 800b00e:	f7fe f9a1 	bl	8009354 <_Bfree>
 800b012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b014:	2300      	movs	r3, #0
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b01c:	e78a      	b.n	800af34 <__gethex+0x114>
 800b01e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b022:	2a2e      	cmp	r2, #46	; 0x2e
 800b024:	d014      	beq.n	800b050 <__gethex+0x230>
 800b026:	2b20      	cmp	r3, #32
 800b028:	d106      	bne.n	800b038 <__gethex+0x218>
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	f843 bb04 	str.w	fp, [r3], #4
 800b030:	f04f 0b00 	mov.w	fp, #0
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	465b      	mov	r3, fp
 800b038:	7828      	ldrb	r0, [r5, #0]
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	f7ff feda 	bl	800adf4 <__hexdig_fun>
 800b040:	9b03      	ldr	r3, [sp, #12]
 800b042:	f000 000f 	and.w	r0, r0, #15
 800b046:	4098      	lsls	r0, r3
 800b048:	ea4b 0b00 	orr.w	fp, fp, r0
 800b04c:	3304      	adds	r3, #4
 800b04e:	e7a1      	b.n	800af94 <__gethex+0x174>
 800b050:	45a8      	cmp	r8, r5
 800b052:	d8e8      	bhi.n	800b026 <__gethex+0x206>
 800b054:	2201      	movs	r2, #1
 800b056:	4628      	mov	r0, r5
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	f7ff fe1b 	bl	800ac94 <strncmp>
 800b05e:	4926      	ldr	r1, [pc, #152]	; (800b0f8 <__gethex+0x2d8>)
 800b060:	9b03      	ldr	r3, [sp, #12]
 800b062:	2800      	cmp	r0, #0
 800b064:	d1df      	bne.n	800b026 <__gethex+0x206>
 800b066:	e795      	b.n	800af94 <__gethex+0x174>
 800b068:	f04f 0b03 	mov.w	fp, #3
 800b06c:	e7c5      	b.n	800affa <__gethex+0x1da>
 800b06e:	da0b      	bge.n	800b088 <__gethex+0x268>
 800b070:	eba5 0800 	sub.w	r8, r5, r0
 800b074:	4621      	mov	r1, r4
 800b076:	4642      	mov	r2, r8
 800b078:	4648      	mov	r0, r9
 800b07a:	f7fe fb85 	bl	8009788 <__lshift>
 800b07e:	eba6 0608 	sub.w	r6, r6, r8
 800b082:	4604      	mov	r4, r0
 800b084:	f100 0a14 	add.w	sl, r0, #20
 800b088:	f04f 0b00 	mov.w	fp, #0
 800b08c:	e7ba      	b.n	800b004 <__gethex+0x1e4>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	42b3      	cmp	r3, r6
 800b092:	dd73      	ble.n	800b17c <__gethex+0x35c>
 800b094:	1b9e      	subs	r6, r3, r6
 800b096:	42b5      	cmp	r5, r6
 800b098:	dc34      	bgt.n	800b104 <__gethex+0x2e4>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d023      	beq.n	800b0e8 <__gethex+0x2c8>
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d025      	beq.n	800b0f0 <__gethex+0x2d0>
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d115      	bne.n	800b0d4 <__gethex+0x2b4>
 800b0a8:	42b5      	cmp	r5, r6
 800b0aa:	d113      	bne.n	800b0d4 <__gethex+0x2b4>
 800b0ac:	2d01      	cmp	r5, #1
 800b0ae:	d10b      	bne.n	800b0c8 <__gethex+0x2a8>
 800b0b0:	9a02      	ldr	r2, [sp, #8]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	f8ca 3000 	str.w	r3, [sl]
 800b0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b0c4:	601c      	str	r4, [r3, #0]
 800b0c6:	e735      	b.n	800af34 <__gethex+0x114>
 800b0c8:	1e69      	subs	r1, r5, #1
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fe fd8e 	bl	8009bec <__any_on>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d1ed      	bne.n	800b0b0 <__gethex+0x290>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4648      	mov	r0, r9
 800b0d8:	f7fe f93c 	bl	8009354 <_Bfree>
 800b0dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b0e6:	e725      	b.n	800af34 <__gethex+0x114>
 800b0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f2      	bne.n	800b0d4 <__gethex+0x2b4>
 800b0ee:	e7df      	b.n	800b0b0 <__gethex+0x290>
 800b0f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1dc      	bne.n	800b0b0 <__gethex+0x290>
 800b0f6:	e7ed      	b.n	800b0d4 <__gethex+0x2b4>
 800b0f8:	0800bf94 	.word	0x0800bf94
 800b0fc:	0800be2a 	.word	0x0800be2a
 800b100:	0800c03d 	.word	0x0800c03d
 800b104:	f106 38ff 	add.w	r8, r6, #4294967295
 800b108:	f1bb 0f00 	cmp.w	fp, #0
 800b10c:	d133      	bne.n	800b176 <__gethex+0x356>
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d004      	beq.n	800b11e <__gethex+0x2fe>
 800b114:	4641      	mov	r1, r8
 800b116:	4620      	mov	r0, r4
 800b118:	f7fe fd68 	bl	8009bec <__any_on>
 800b11c:	4683      	mov	fp, r0
 800b11e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b122:	2301      	movs	r3, #1
 800b124:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b128:	f008 081f 	and.w	r8, r8, #31
 800b12c:	fa03 f308 	lsl.w	r3, r3, r8
 800b130:	4213      	tst	r3, r2
 800b132:	4631      	mov	r1, r6
 800b134:	4620      	mov	r0, r4
 800b136:	bf18      	it	ne
 800b138:	f04b 0b02 	orrne.w	fp, fp, #2
 800b13c:	1bad      	subs	r5, r5, r6
 800b13e:	f7ff fe07 	bl	800ad50 <rshift>
 800b142:	687e      	ldr	r6, [r7, #4]
 800b144:	f04f 0802 	mov.w	r8, #2
 800b148:	f1bb 0f00 	cmp.w	fp, #0
 800b14c:	d04a      	beq.n	800b1e4 <__gethex+0x3c4>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b02      	cmp	r3, #2
 800b152:	d016      	beq.n	800b182 <__gethex+0x362>
 800b154:	2b03      	cmp	r3, #3
 800b156:	d018      	beq.n	800b18a <__gethex+0x36a>
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d109      	bne.n	800b170 <__gethex+0x350>
 800b15c:	f01b 0f02 	tst.w	fp, #2
 800b160:	d006      	beq.n	800b170 <__gethex+0x350>
 800b162:	f8da 3000 	ldr.w	r3, [sl]
 800b166:	ea4b 0b03 	orr.w	fp, fp, r3
 800b16a:	f01b 0f01 	tst.w	fp, #1
 800b16e:	d10f      	bne.n	800b190 <__gethex+0x370>
 800b170:	f048 0810 	orr.w	r8, r8, #16
 800b174:	e036      	b.n	800b1e4 <__gethex+0x3c4>
 800b176:	f04f 0b01 	mov.w	fp, #1
 800b17a:	e7d0      	b.n	800b11e <__gethex+0x2fe>
 800b17c:	f04f 0801 	mov.w	r8, #1
 800b180:	e7e2      	b.n	800b148 <__gethex+0x328>
 800b182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b184:	f1c3 0301 	rsb	r3, r3, #1
 800b188:	930f      	str	r3, [sp, #60]	; 0x3c
 800b18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0ef      	beq.n	800b170 <__gethex+0x350>
 800b190:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b194:	f104 0214 	add.w	r2, r4, #20
 800b198:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4694      	mov	ip, r2
 800b1a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b1aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b1ae:	d01e      	beq.n	800b1ee <__gethex+0x3ce>
 800b1b0:	3101      	adds	r1, #1
 800b1b2:	f8cc 1000 	str.w	r1, [ip]
 800b1b6:	f1b8 0f02 	cmp.w	r8, #2
 800b1ba:	f104 0214 	add.w	r2, r4, #20
 800b1be:	d13d      	bne.n	800b23c <__gethex+0x41c>
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	d10b      	bne.n	800b1e0 <__gethex+0x3c0>
 800b1c8:	1169      	asrs	r1, r5, #5
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f005 051f 	and.w	r5, r5, #31
 800b1d0:	fa03 f505 	lsl.w	r5, r3, r5
 800b1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1d8:	421d      	tst	r5, r3
 800b1da:	bf18      	it	ne
 800b1dc:	f04f 0801 	movne.w	r8, #1
 800b1e0:	f048 0820 	orr.w	r8, r8, #32
 800b1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e6:	601c      	str	r4, [r3, #0]
 800b1e8:	9b02      	ldr	r3, [sp, #8]
 800b1ea:	601e      	str	r6, [r3, #0]
 800b1ec:	e6a2      	b.n	800af34 <__gethex+0x114>
 800b1ee:	4290      	cmp	r0, r2
 800b1f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b1f4:	d8d6      	bhi.n	800b1a4 <__gethex+0x384>
 800b1f6:	68a2      	ldr	r2, [r4, #8]
 800b1f8:	4593      	cmp	fp, r2
 800b1fa:	db17      	blt.n	800b22c <__gethex+0x40c>
 800b1fc:	6861      	ldr	r1, [r4, #4]
 800b1fe:	4648      	mov	r0, r9
 800b200:	3101      	adds	r1, #1
 800b202:	f7fe f867 	bl	80092d4 <_Balloc>
 800b206:	4682      	mov	sl, r0
 800b208:	b918      	cbnz	r0, 800b212 <__gethex+0x3f2>
 800b20a:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <__gethex+0x458>)
 800b20c:	4602      	mov	r2, r0
 800b20e:	2184      	movs	r1, #132	; 0x84
 800b210:	e6b3      	b.n	800af7a <__gethex+0x15a>
 800b212:	6922      	ldr	r2, [r4, #16]
 800b214:	3202      	adds	r2, #2
 800b216:	f104 010c 	add.w	r1, r4, #12
 800b21a:	0092      	lsls	r2, r2, #2
 800b21c:	300c      	adds	r0, #12
 800b21e:	f7ff fd4b 	bl	800acb8 <memcpy>
 800b222:	4621      	mov	r1, r4
 800b224:	4648      	mov	r0, r9
 800b226:	f7fe f895 	bl	8009354 <_Bfree>
 800b22a:	4654      	mov	r4, sl
 800b22c:	6922      	ldr	r2, [r4, #16]
 800b22e:	1c51      	adds	r1, r2, #1
 800b230:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b234:	6121      	str	r1, [r4, #16]
 800b236:	2101      	movs	r1, #1
 800b238:	6151      	str	r1, [r2, #20]
 800b23a:	e7bc      	b.n	800b1b6 <__gethex+0x396>
 800b23c:	6921      	ldr	r1, [r4, #16]
 800b23e:	4559      	cmp	r1, fp
 800b240:	dd0b      	ble.n	800b25a <__gethex+0x43a>
 800b242:	2101      	movs	r1, #1
 800b244:	4620      	mov	r0, r4
 800b246:	f7ff fd83 	bl	800ad50 <rshift>
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3601      	adds	r6, #1
 800b24e:	42b3      	cmp	r3, r6
 800b250:	f6ff aedb 	blt.w	800b00a <__gethex+0x1ea>
 800b254:	f04f 0801 	mov.w	r8, #1
 800b258:	e7c2      	b.n	800b1e0 <__gethex+0x3c0>
 800b25a:	f015 051f 	ands.w	r5, r5, #31
 800b25e:	d0f9      	beq.n	800b254 <__gethex+0x434>
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	441a      	add	r2, r3
 800b264:	f1c5 0520 	rsb	r5, r5, #32
 800b268:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b26c:	f7fe f924 	bl	80094b8 <__hi0bits>
 800b270:	42a8      	cmp	r0, r5
 800b272:	dbe6      	blt.n	800b242 <__gethex+0x422>
 800b274:	e7ee      	b.n	800b254 <__gethex+0x434>
 800b276:	bf00      	nop
 800b278:	0800be2a 	.word	0x0800be2a

0800b27c <L_shift>:
 800b27c:	f1c2 0208 	rsb	r2, r2, #8
 800b280:	0092      	lsls	r2, r2, #2
 800b282:	b570      	push	{r4, r5, r6, lr}
 800b284:	f1c2 0620 	rsb	r6, r2, #32
 800b288:	6843      	ldr	r3, [r0, #4]
 800b28a:	6804      	ldr	r4, [r0, #0]
 800b28c:	fa03 f506 	lsl.w	r5, r3, r6
 800b290:	432c      	orrs	r4, r5
 800b292:	40d3      	lsrs	r3, r2
 800b294:	6004      	str	r4, [r0, #0]
 800b296:	f840 3f04 	str.w	r3, [r0, #4]!
 800b29a:	4288      	cmp	r0, r1
 800b29c:	d3f4      	bcc.n	800b288 <L_shift+0xc>
 800b29e:	bd70      	pop	{r4, r5, r6, pc}

0800b2a0 <__match>:
 800b2a0:	b530      	push	{r4, r5, lr}
 800b2a2:	6803      	ldr	r3, [r0, #0]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2aa:	b914      	cbnz	r4, 800b2b2 <__match+0x12>
 800b2ac:	6003      	str	r3, [r0, #0]
 800b2ae:	2001      	movs	r0, #1
 800b2b0:	bd30      	pop	{r4, r5, pc}
 800b2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2ba:	2d19      	cmp	r5, #25
 800b2bc:	bf98      	it	ls
 800b2be:	3220      	addls	r2, #32
 800b2c0:	42a2      	cmp	r2, r4
 800b2c2:	d0f0      	beq.n	800b2a6 <__match+0x6>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e7f3      	b.n	800b2b0 <__match+0x10>

0800b2c8 <__hexnan>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	680b      	ldr	r3, [r1, #0]
 800b2ce:	6801      	ldr	r1, [r0, #0]
 800b2d0:	115e      	asrs	r6, r3, #5
 800b2d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2d6:	f013 031f 	ands.w	r3, r3, #31
 800b2da:	b087      	sub	sp, #28
 800b2dc:	bf18      	it	ne
 800b2de:	3604      	addne	r6, #4
 800b2e0:	2500      	movs	r5, #0
 800b2e2:	1f37      	subs	r7, r6, #4
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	4690      	mov	r8, r2
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2ee:	46b9      	mov	r9, r7
 800b2f0:	463c      	mov	r4, r7
 800b2f2:	9502      	str	r5, [sp, #8]
 800b2f4:	46ab      	mov	fp, r5
 800b2f6:	784a      	ldrb	r2, [r1, #1]
 800b2f8:	1c4b      	adds	r3, r1, #1
 800b2fa:	9303      	str	r3, [sp, #12]
 800b2fc:	b342      	cbz	r2, 800b350 <__hexnan+0x88>
 800b2fe:	4610      	mov	r0, r2
 800b300:	9105      	str	r1, [sp, #20]
 800b302:	9204      	str	r2, [sp, #16]
 800b304:	f7ff fd76 	bl	800adf4 <__hexdig_fun>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d14f      	bne.n	800b3ac <__hexnan+0xe4>
 800b30c:	9a04      	ldr	r2, [sp, #16]
 800b30e:	9905      	ldr	r1, [sp, #20]
 800b310:	2a20      	cmp	r2, #32
 800b312:	d818      	bhi.n	800b346 <__hexnan+0x7e>
 800b314:	9b02      	ldr	r3, [sp, #8]
 800b316:	459b      	cmp	fp, r3
 800b318:	dd13      	ble.n	800b342 <__hexnan+0x7a>
 800b31a:	454c      	cmp	r4, r9
 800b31c:	d206      	bcs.n	800b32c <__hexnan+0x64>
 800b31e:	2d07      	cmp	r5, #7
 800b320:	dc04      	bgt.n	800b32c <__hexnan+0x64>
 800b322:	462a      	mov	r2, r5
 800b324:	4649      	mov	r1, r9
 800b326:	4620      	mov	r0, r4
 800b328:	f7ff ffa8 	bl	800b27c <L_shift>
 800b32c:	4544      	cmp	r4, r8
 800b32e:	d950      	bls.n	800b3d2 <__hexnan+0x10a>
 800b330:	2300      	movs	r3, #0
 800b332:	f1a4 0904 	sub.w	r9, r4, #4
 800b336:	f844 3c04 	str.w	r3, [r4, #-4]
 800b33a:	f8cd b008 	str.w	fp, [sp, #8]
 800b33e:	464c      	mov	r4, r9
 800b340:	461d      	mov	r5, r3
 800b342:	9903      	ldr	r1, [sp, #12]
 800b344:	e7d7      	b.n	800b2f6 <__hexnan+0x2e>
 800b346:	2a29      	cmp	r2, #41	; 0x29
 800b348:	d155      	bne.n	800b3f6 <__hexnan+0x12e>
 800b34a:	3102      	adds	r1, #2
 800b34c:	f8ca 1000 	str.w	r1, [sl]
 800b350:	f1bb 0f00 	cmp.w	fp, #0
 800b354:	d04f      	beq.n	800b3f6 <__hexnan+0x12e>
 800b356:	454c      	cmp	r4, r9
 800b358:	d206      	bcs.n	800b368 <__hexnan+0xa0>
 800b35a:	2d07      	cmp	r5, #7
 800b35c:	dc04      	bgt.n	800b368 <__hexnan+0xa0>
 800b35e:	462a      	mov	r2, r5
 800b360:	4649      	mov	r1, r9
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff ff8a 	bl	800b27c <L_shift>
 800b368:	4544      	cmp	r4, r8
 800b36a:	d934      	bls.n	800b3d6 <__hexnan+0x10e>
 800b36c:	f1a8 0204 	sub.w	r2, r8, #4
 800b370:	4623      	mov	r3, r4
 800b372:	f853 1b04 	ldr.w	r1, [r3], #4
 800b376:	f842 1f04 	str.w	r1, [r2, #4]!
 800b37a:	429f      	cmp	r7, r3
 800b37c:	d2f9      	bcs.n	800b372 <__hexnan+0xaa>
 800b37e:	1b3b      	subs	r3, r7, r4
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	3304      	adds	r3, #4
 800b386:	3e03      	subs	r6, #3
 800b388:	3401      	adds	r4, #1
 800b38a:	42a6      	cmp	r6, r4
 800b38c:	bf38      	it	cc
 800b38e:	2304      	movcc	r3, #4
 800b390:	4443      	add	r3, r8
 800b392:	2200      	movs	r2, #0
 800b394:	f843 2b04 	str.w	r2, [r3], #4
 800b398:	429f      	cmp	r7, r3
 800b39a:	d2fb      	bcs.n	800b394 <__hexnan+0xcc>
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	b91b      	cbnz	r3, 800b3a8 <__hexnan+0xe0>
 800b3a0:	4547      	cmp	r7, r8
 800b3a2:	d126      	bne.n	800b3f2 <__hexnan+0x12a>
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	603b      	str	r3, [r7, #0]
 800b3a8:	2005      	movs	r0, #5
 800b3aa:	e025      	b.n	800b3f8 <__hexnan+0x130>
 800b3ac:	3501      	adds	r5, #1
 800b3ae:	2d08      	cmp	r5, #8
 800b3b0:	f10b 0b01 	add.w	fp, fp, #1
 800b3b4:	dd06      	ble.n	800b3c4 <__hexnan+0xfc>
 800b3b6:	4544      	cmp	r4, r8
 800b3b8:	d9c3      	bls.n	800b342 <__hexnan+0x7a>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3c0:	2501      	movs	r5, #1
 800b3c2:	3c04      	subs	r4, #4
 800b3c4:	6822      	ldr	r2, [r4, #0]
 800b3c6:	f000 000f 	and.w	r0, r0, #15
 800b3ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3ce:	6020      	str	r0, [r4, #0]
 800b3d0:	e7b7      	b.n	800b342 <__hexnan+0x7a>
 800b3d2:	2508      	movs	r5, #8
 800b3d4:	e7b5      	b.n	800b342 <__hexnan+0x7a>
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0df      	beq.n	800b39c <__hexnan+0xd4>
 800b3dc:	f1c3 0320 	rsb	r3, r3, #32
 800b3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e4:	40da      	lsrs	r2, r3
 800b3e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b3f0:	e7d4      	b.n	800b39c <__hexnan+0xd4>
 800b3f2:	3f04      	subs	r7, #4
 800b3f4:	e7d2      	b.n	800b39c <__hexnan+0xd4>
 800b3f6:	2004      	movs	r0, #4
 800b3f8:	b007      	add	sp, #28
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3fe <__ascii_mbtowc>:
 800b3fe:	b082      	sub	sp, #8
 800b400:	b901      	cbnz	r1, 800b404 <__ascii_mbtowc+0x6>
 800b402:	a901      	add	r1, sp, #4
 800b404:	b142      	cbz	r2, 800b418 <__ascii_mbtowc+0x1a>
 800b406:	b14b      	cbz	r3, 800b41c <__ascii_mbtowc+0x1e>
 800b408:	7813      	ldrb	r3, [r2, #0]
 800b40a:	600b      	str	r3, [r1, #0]
 800b40c:	7812      	ldrb	r2, [r2, #0]
 800b40e:	1e10      	subs	r0, r2, #0
 800b410:	bf18      	it	ne
 800b412:	2001      	movne	r0, #1
 800b414:	b002      	add	sp, #8
 800b416:	4770      	bx	lr
 800b418:	4610      	mov	r0, r2
 800b41a:	e7fb      	b.n	800b414 <__ascii_mbtowc+0x16>
 800b41c:	f06f 0001 	mvn.w	r0, #1
 800b420:	e7f8      	b.n	800b414 <__ascii_mbtowc+0x16>

0800b422 <_realloc_r>:
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	4680      	mov	r8, r0
 800b428:	4614      	mov	r4, r2
 800b42a:	460e      	mov	r6, r1
 800b42c:	b921      	cbnz	r1, 800b438 <_realloc_r+0x16>
 800b42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	4611      	mov	r1, r2
 800b434:	f7fb bf22 	b.w	800727c <_malloc_r>
 800b438:	b92a      	cbnz	r2, 800b446 <_realloc_r+0x24>
 800b43a:	f7fd feff 	bl	800923c <_free_r>
 800b43e:	4625      	mov	r5, r4
 800b440:	4628      	mov	r0, r5
 800b442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b446:	f000 f842 	bl	800b4ce <_malloc_usable_size_r>
 800b44a:	4284      	cmp	r4, r0
 800b44c:	4607      	mov	r7, r0
 800b44e:	d802      	bhi.n	800b456 <_realloc_r+0x34>
 800b450:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b454:	d812      	bhi.n	800b47c <_realloc_r+0x5a>
 800b456:	4621      	mov	r1, r4
 800b458:	4640      	mov	r0, r8
 800b45a:	f7fb ff0f 	bl	800727c <_malloc_r>
 800b45e:	4605      	mov	r5, r0
 800b460:	2800      	cmp	r0, #0
 800b462:	d0ed      	beq.n	800b440 <_realloc_r+0x1e>
 800b464:	42bc      	cmp	r4, r7
 800b466:	4622      	mov	r2, r4
 800b468:	4631      	mov	r1, r6
 800b46a:	bf28      	it	cs
 800b46c:	463a      	movcs	r2, r7
 800b46e:	f7ff fc23 	bl	800acb8 <memcpy>
 800b472:	4631      	mov	r1, r6
 800b474:	4640      	mov	r0, r8
 800b476:	f7fd fee1 	bl	800923c <_free_r>
 800b47a:	e7e1      	b.n	800b440 <_realloc_r+0x1e>
 800b47c:	4635      	mov	r5, r6
 800b47e:	e7df      	b.n	800b440 <_realloc_r+0x1e>

0800b480 <__ascii_wctomb>:
 800b480:	b149      	cbz	r1, 800b496 <__ascii_wctomb+0x16>
 800b482:	2aff      	cmp	r2, #255	; 0xff
 800b484:	bf85      	ittet	hi
 800b486:	238a      	movhi	r3, #138	; 0x8a
 800b488:	6003      	strhi	r3, [r0, #0]
 800b48a:	700a      	strbls	r2, [r1, #0]
 800b48c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b490:	bf98      	it	ls
 800b492:	2001      	movls	r0, #1
 800b494:	4770      	bx	lr
 800b496:	4608      	mov	r0, r1
 800b498:	4770      	bx	lr
	...

0800b49c <fiprintf>:
 800b49c:	b40e      	push	{r1, r2, r3}
 800b49e:	b503      	push	{r0, r1, lr}
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	ab03      	add	r3, sp, #12
 800b4a4:	4805      	ldr	r0, [pc, #20]	; (800b4bc <fiprintf+0x20>)
 800b4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	f000 f83f 	bl	800b530 <_vfiprintf_r>
 800b4b2:	b002      	add	sp, #8
 800b4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b8:	b003      	add	sp, #12
 800b4ba:	4770      	bx	lr
 800b4bc:	2000006c 	.word	0x2000006c

0800b4c0 <abort>:
 800b4c0:	b508      	push	{r3, lr}
 800b4c2:	2006      	movs	r0, #6
 800b4c4:	f000 fa0c 	bl	800b8e0 <raise>
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	f7f6 feef 	bl	80022ac <_exit>

0800b4ce <_malloc_usable_size_r>:
 800b4ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d2:	1f18      	subs	r0, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfbc      	itt	lt
 800b4d8:	580b      	ldrlt	r3, [r1, r0]
 800b4da:	18c0      	addlt	r0, r0, r3
 800b4dc:	4770      	bx	lr

0800b4de <__sfputc_r>:
 800b4de:	6893      	ldr	r3, [r2, #8]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	b410      	push	{r4}
 800b4e6:	6093      	str	r3, [r2, #8]
 800b4e8:	da08      	bge.n	800b4fc <__sfputc_r+0x1e>
 800b4ea:	6994      	ldr	r4, [r2, #24]
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	db01      	blt.n	800b4f4 <__sfputc_r+0x16>
 800b4f0:	290a      	cmp	r1, #10
 800b4f2:	d103      	bne.n	800b4fc <__sfputc_r+0x1e>
 800b4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f8:	f000 b934 	b.w	800b764 <__swbuf_r>
 800b4fc:	6813      	ldr	r3, [r2, #0]
 800b4fe:	1c58      	adds	r0, r3, #1
 800b500:	6010      	str	r0, [r2, #0]
 800b502:	7019      	strb	r1, [r3, #0]
 800b504:	4608      	mov	r0, r1
 800b506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <__sfputs_r>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	4606      	mov	r6, r0
 800b510:	460f      	mov	r7, r1
 800b512:	4614      	mov	r4, r2
 800b514:	18d5      	adds	r5, r2, r3
 800b516:	42ac      	cmp	r4, r5
 800b518:	d101      	bne.n	800b51e <__sfputs_r+0x12>
 800b51a:	2000      	movs	r0, #0
 800b51c:	e007      	b.n	800b52e <__sfputs_r+0x22>
 800b51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b522:	463a      	mov	r2, r7
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff ffda 	bl	800b4de <__sfputc_r>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d1f3      	bne.n	800b516 <__sfputs_r+0xa>
 800b52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b530 <_vfiprintf_r>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	460d      	mov	r5, r1
 800b536:	b09d      	sub	sp, #116	; 0x74
 800b538:	4614      	mov	r4, r2
 800b53a:	4698      	mov	r8, r3
 800b53c:	4606      	mov	r6, r0
 800b53e:	b118      	cbz	r0, 800b548 <_vfiprintf_r+0x18>
 800b540:	6a03      	ldr	r3, [r0, #32]
 800b542:	b90b      	cbnz	r3, 800b548 <_vfiprintf_r+0x18>
 800b544:	f7fc feb6 	bl	80082b4 <__sinit>
 800b548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54a:	07d9      	lsls	r1, r3, #31
 800b54c:	d405      	bmi.n	800b55a <_vfiprintf_r+0x2a>
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	059a      	lsls	r2, r3, #22
 800b552:	d402      	bmi.n	800b55a <_vfiprintf_r+0x2a>
 800b554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b556:	f7fc ffe6 	bl	8008526 <__retarget_lock_acquire_recursive>
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	071b      	lsls	r3, r3, #28
 800b55e:	d501      	bpl.n	800b564 <_vfiprintf_r+0x34>
 800b560:	692b      	ldr	r3, [r5, #16]
 800b562:	b99b      	cbnz	r3, 800b58c <_vfiprintf_r+0x5c>
 800b564:	4629      	mov	r1, r5
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f93a 	bl	800b7e0 <__swsetup_r>
 800b56c:	b170      	cbz	r0, 800b58c <_vfiprintf_r+0x5c>
 800b56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b570:	07dc      	lsls	r4, r3, #31
 800b572:	d504      	bpl.n	800b57e <_vfiprintf_r+0x4e>
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	b01d      	add	sp, #116	; 0x74
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57e:	89ab      	ldrh	r3, [r5, #12]
 800b580:	0598      	lsls	r0, r3, #22
 800b582:	d4f7      	bmi.n	800b574 <_vfiprintf_r+0x44>
 800b584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b586:	f7fc ffcf 	bl	8008528 <__retarget_lock_release_recursive>
 800b58a:	e7f3      	b.n	800b574 <_vfiprintf_r+0x44>
 800b58c:	2300      	movs	r3, #0
 800b58e:	9309      	str	r3, [sp, #36]	; 0x24
 800b590:	2320      	movs	r3, #32
 800b592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b596:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59a:	2330      	movs	r3, #48	; 0x30
 800b59c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b750 <_vfiprintf_r+0x220>
 800b5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5a4:	f04f 0901 	mov.w	r9, #1
 800b5a8:	4623      	mov	r3, r4
 800b5aa:	469a      	mov	sl, r3
 800b5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b0:	b10a      	cbz	r2, 800b5b6 <_vfiprintf_r+0x86>
 800b5b2:	2a25      	cmp	r2, #37	; 0x25
 800b5b4:	d1f9      	bne.n	800b5aa <_vfiprintf_r+0x7a>
 800b5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ba:	d00b      	beq.n	800b5d4 <_vfiprintf_r+0xa4>
 800b5bc:	465b      	mov	r3, fp
 800b5be:	4622      	mov	r2, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7ff ffa2 	bl	800b50c <__sfputs_r>
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f000 80a9 	beq.w	800b720 <_vfiprintf_r+0x1f0>
 800b5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d0:	445a      	add	r2, fp
 800b5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 80a1 	beq.w	800b720 <_vfiprintf_r+0x1f0>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5e8:	f10a 0a01 	add.w	sl, sl, #1
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	9307      	str	r3, [sp, #28]
 800b5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5f6:	4654      	mov	r4, sl
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5fe:	4854      	ldr	r0, [pc, #336]	; (800b750 <_vfiprintf_r+0x220>)
 800b600:	f7f4 fdf6 	bl	80001f0 <memchr>
 800b604:	9a04      	ldr	r2, [sp, #16]
 800b606:	b9d8      	cbnz	r0, 800b640 <_vfiprintf_r+0x110>
 800b608:	06d1      	lsls	r1, r2, #27
 800b60a:	bf44      	itt	mi
 800b60c:	2320      	movmi	r3, #32
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b612:	0713      	lsls	r3, r2, #28
 800b614:	bf44      	itt	mi
 800b616:	232b      	movmi	r3, #43	; 0x2b
 800b618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b61c:	f89a 3000 	ldrb.w	r3, [sl]
 800b620:	2b2a      	cmp	r3, #42	; 0x2a
 800b622:	d015      	beq.n	800b650 <_vfiprintf_r+0x120>
 800b624:	9a07      	ldr	r2, [sp, #28]
 800b626:	4654      	mov	r4, sl
 800b628:	2000      	movs	r0, #0
 800b62a:	f04f 0c0a 	mov.w	ip, #10
 800b62e:	4621      	mov	r1, r4
 800b630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b634:	3b30      	subs	r3, #48	; 0x30
 800b636:	2b09      	cmp	r3, #9
 800b638:	d94d      	bls.n	800b6d6 <_vfiprintf_r+0x1a6>
 800b63a:	b1b0      	cbz	r0, 800b66a <_vfiprintf_r+0x13a>
 800b63c:	9207      	str	r2, [sp, #28]
 800b63e:	e014      	b.n	800b66a <_vfiprintf_r+0x13a>
 800b640:	eba0 0308 	sub.w	r3, r0, r8
 800b644:	fa09 f303 	lsl.w	r3, r9, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	46a2      	mov	sl, r4
 800b64e:	e7d2      	b.n	800b5f6 <_vfiprintf_r+0xc6>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	1d19      	adds	r1, r3, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	9103      	str	r1, [sp, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfbb      	ittet	lt
 800b65c:	425b      	neglt	r3, r3
 800b65e:	f042 0202 	orrlt.w	r2, r2, #2
 800b662:	9307      	strge	r3, [sp, #28]
 800b664:	9307      	strlt	r3, [sp, #28]
 800b666:	bfb8      	it	lt
 800b668:	9204      	strlt	r2, [sp, #16]
 800b66a:	7823      	ldrb	r3, [r4, #0]
 800b66c:	2b2e      	cmp	r3, #46	; 0x2e
 800b66e:	d10c      	bne.n	800b68a <_vfiprintf_r+0x15a>
 800b670:	7863      	ldrb	r3, [r4, #1]
 800b672:	2b2a      	cmp	r3, #42	; 0x2a
 800b674:	d134      	bne.n	800b6e0 <_vfiprintf_r+0x1b0>
 800b676:	9b03      	ldr	r3, [sp, #12]
 800b678:	1d1a      	adds	r2, r3, #4
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	9203      	str	r2, [sp, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	bfb8      	it	lt
 800b682:	f04f 33ff 	movlt.w	r3, #4294967295
 800b686:	3402      	adds	r4, #2
 800b688:	9305      	str	r3, [sp, #20]
 800b68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b760 <_vfiprintf_r+0x230>
 800b68e:	7821      	ldrb	r1, [r4, #0]
 800b690:	2203      	movs	r2, #3
 800b692:	4650      	mov	r0, sl
 800b694:	f7f4 fdac 	bl	80001f0 <memchr>
 800b698:	b138      	cbz	r0, 800b6aa <_vfiprintf_r+0x17a>
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	eba0 000a 	sub.w	r0, r0, sl
 800b6a0:	2240      	movs	r2, #64	; 0x40
 800b6a2:	4082      	lsls	r2, r0
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	3401      	adds	r4, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ae:	4829      	ldr	r0, [pc, #164]	; (800b754 <_vfiprintf_r+0x224>)
 800b6b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6b4:	2206      	movs	r2, #6
 800b6b6:	f7f4 fd9b 	bl	80001f0 <memchr>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d03f      	beq.n	800b73e <_vfiprintf_r+0x20e>
 800b6be:	4b26      	ldr	r3, [pc, #152]	; (800b758 <_vfiprintf_r+0x228>)
 800b6c0:	bb1b      	cbnz	r3, 800b70a <_vfiprintf_r+0x1da>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	3307      	adds	r3, #7
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	9303      	str	r3, [sp, #12]
 800b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d0:	443b      	add	r3, r7
 800b6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d4:	e768      	b.n	800b5a8 <_vfiprintf_r+0x78>
 800b6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6da:	460c      	mov	r4, r1
 800b6dc:	2001      	movs	r0, #1
 800b6de:	e7a6      	b.n	800b62e <_vfiprintf_r+0xfe>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	3401      	adds	r4, #1
 800b6e4:	9305      	str	r3, [sp, #20]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f04f 0c0a 	mov.w	ip, #10
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f2:	3a30      	subs	r2, #48	; 0x30
 800b6f4:	2a09      	cmp	r2, #9
 800b6f6:	d903      	bls.n	800b700 <_vfiprintf_r+0x1d0>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0c6      	beq.n	800b68a <_vfiprintf_r+0x15a>
 800b6fc:	9105      	str	r1, [sp, #20]
 800b6fe:	e7c4      	b.n	800b68a <_vfiprintf_r+0x15a>
 800b700:	fb0c 2101 	mla	r1, ip, r1, r2
 800b704:	4604      	mov	r4, r0
 800b706:	2301      	movs	r3, #1
 800b708:	e7f0      	b.n	800b6ec <_vfiprintf_r+0x1bc>
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462a      	mov	r2, r5
 800b710:	4b12      	ldr	r3, [pc, #72]	; (800b75c <_vfiprintf_r+0x22c>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	4630      	mov	r0, r6
 800b716:	f7fb ff6b 	bl	80075f0 <_printf_float>
 800b71a:	4607      	mov	r7, r0
 800b71c:	1c78      	adds	r0, r7, #1
 800b71e:	d1d6      	bne.n	800b6ce <_vfiprintf_r+0x19e>
 800b720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b722:	07d9      	lsls	r1, r3, #31
 800b724:	d405      	bmi.n	800b732 <_vfiprintf_r+0x202>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_vfiprintf_r+0x202>
 800b72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b72e:	f7fc fefb 	bl	8008528 <__retarget_lock_release_recursive>
 800b732:	89ab      	ldrh	r3, [r5, #12]
 800b734:	065b      	lsls	r3, r3, #25
 800b736:	f53f af1d 	bmi.w	800b574 <_vfiprintf_r+0x44>
 800b73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b73c:	e71c      	b.n	800b578 <_vfiprintf_r+0x48>
 800b73e:	ab03      	add	r3, sp, #12
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	462a      	mov	r2, r5
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <_vfiprintf_r+0x22c>)
 800b746:	a904      	add	r1, sp, #16
 800b748:	4630      	mov	r0, r6
 800b74a:	f7fc f9f5 	bl	8007b38 <_printf_i>
 800b74e:	e7e4      	b.n	800b71a <_vfiprintf_r+0x1ea>
 800b750:	0800bfe8 	.word	0x0800bfe8
 800b754:	0800bff2 	.word	0x0800bff2
 800b758:	080075f1 	.word	0x080075f1
 800b75c:	0800b50d 	.word	0x0800b50d
 800b760:	0800bfee 	.word	0x0800bfee

0800b764 <__swbuf_r>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	460e      	mov	r6, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	4605      	mov	r5, r0
 800b76c:	b118      	cbz	r0, 800b776 <__swbuf_r+0x12>
 800b76e:	6a03      	ldr	r3, [r0, #32]
 800b770:	b90b      	cbnz	r3, 800b776 <__swbuf_r+0x12>
 800b772:	f7fc fd9f 	bl	80082b4 <__sinit>
 800b776:	69a3      	ldr	r3, [r4, #24]
 800b778:	60a3      	str	r3, [r4, #8]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	071a      	lsls	r2, r3, #28
 800b77e:	d525      	bpl.n	800b7cc <__swbuf_r+0x68>
 800b780:	6923      	ldr	r3, [r4, #16]
 800b782:	b31b      	cbz	r3, 800b7cc <__swbuf_r+0x68>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	6922      	ldr	r2, [r4, #16]
 800b788:	1a98      	subs	r0, r3, r2
 800b78a:	6963      	ldr	r3, [r4, #20]
 800b78c:	b2f6      	uxtb	r6, r6
 800b78e:	4283      	cmp	r3, r0
 800b790:	4637      	mov	r7, r6
 800b792:	dc04      	bgt.n	800b79e <__swbuf_r+0x3a>
 800b794:	4621      	mov	r1, r4
 800b796:	4628      	mov	r0, r5
 800b798:	f7ff fa3a 	bl	800ac10 <_fflush_r>
 800b79c:	b9e0      	cbnz	r0, 800b7d8 <__swbuf_r+0x74>
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	60a3      	str	r3, [r4, #8]
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	6022      	str	r2, [r4, #0]
 800b7aa:	701e      	strb	r6, [r3, #0]
 800b7ac:	6962      	ldr	r2, [r4, #20]
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d004      	beq.n	800b7be <__swbuf_r+0x5a>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	07db      	lsls	r3, r3, #31
 800b7b8:	d506      	bpl.n	800b7c8 <__swbuf_r+0x64>
 800b7ba:	2e0a      	cmp	r6, #10
 800b7bc:	d104      	bne.n	800b7c8 <__swbuf_r+0x64>
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7ff fa25 	bl	800ac10 <_fflush_r>
 800b7c6:	b938      	cbnz	r0, 800b7d8 <__swbuf_r+0x74>
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f000 f806 	bl	800b7e0 <__swsetup_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d0d5      	beq.n	800b784 <__swbuf_r+0x20>
 800b7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800b7dc:	e7f4      	b.n	800b7c8 <__swbuf_r+0x64>
	...

0800b7e0 <__swsetup_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <__swsetup_r+0xac>)
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	b118      	cbz	r0, 800b7f4 <__swsetup_r+0x14>
 800b7ec:	6a03      	ldr	r3, [r0, #32]
 800b7ee:	b90b      	cbnz	r3, 800b7f4 <__swsetup_r+0x14>
 800b7f0:	f7fc fd60 	bl	80082b4 <__sinit>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7fa:	0718      	lsls	r0, r3, #28
 800b7fc:	d422      	bmi.n	800b844 <__swsetup_r+0x64>
 800b7fe:	06d9      	lsls	r1, r3, #27
 800b800:	d407      	bmi.n	800b812 <__swsetup_r+0x32>
 800b802:	2309      	movs	r3, #9
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e034      	b.n	800b87c <__swsetup_r+0x9c>
 800b812:	0758      	lsls	r0, r3, #29
 800b814:	d512      	bpl.n	800b83c <__swsetup_r+0x5c>
 800b816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b818:	b141      	cbz	r1, 800b82c <__swsetup_r+0x4c>
 800b81a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b81e:	4299      	cmp	r1, r3
 800b820:	d002      	beq.n	800b828 <__swsetup_r+0x48>
 800b822:	4628      	mov	r0, r5
 800b824:	f7fd fd0a 	bl	800923c <_free_r>
 800b828:	2300      	movs	r3, #0
 800b82a:	6363      	str	r3, [r4, #52]	; 0x34
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	2300      	movs	r3, #0
 800b836:	6063      	str	r3, [r4, #4]
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f043 0308 	orr.w	r3, r3, #8
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	b94b      	cbnz	r3, 800b85c <__swsetup_r+0x7c>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b852:	d003      	beq.n	800b85c <__swsetup_r+0x7c>
 800b854:	4621      	mov	r1, r4
 800b856:	4628      	mov	r0, r5
 800b858:	f000 f884 	bl	800b964 <__smakebuf_r>
 800b85c:	89a0      	ldrh	r0, [r4, #12]
 800b85e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b862:	f010 0301 	ands.w	r3, r0, #1
 800b866:	d00a      	beq.n	800b87e <__swsetup_r+0x9e>
 800b868:	2300      	movs	r3, #0
 800b86a:	60a3      	str	r3, [r4, #8]
 800b86c:	6963      	ldr	r3, [r4, #20]
 800b86e:	425b      	negs	r3, r3
 800b870:	61a3      	str	r3, [r4, #24]
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	b943      	cbnz	r3, 800b888 <__swsetup_r+0xa8>
 800b876:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b87a:	d1c4      	bne.n	800b806 <__swsetup_r+0x26>
 800b87c:	bd38      	pop	{r3, r4, r5, pc}
 800b87e:	0781      	lsls	r1, r0, #30
 800b880:	bf58      	it	pl
 800b882:	6963      	ldrpl	r3, [r4, #20]
 800b884:	60a3      	str	r3, [r4, #8]
 800b886:	e7f4      	b.n	800b872 <__swsetup_r+0x92>
 800b888:	2000      	movs	r0, #0
 800b88a:	e7f7      	b.n	800b87c <__swsetup_r+0x9c>
 800b88c:	2000006c 	.word	0x2000006c

0800b890 <_raise_r>:
 800b890:	291f      	cmp	r1, #31
 800b892:	b538      	push	{r3, r4, r5, lr}
 800b894:	4604      	mov	r4, r0
 800b896:	460d      	mov	r5, r1
 800b898:	d904      	bls.n	800b8a4 <_raise_r+0x14>
 800b89a:	2316      	movs	r3, #22
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b8a6:	b112      	cbz	r2, 800b8ae <_raise_r+0x1e>
 800b8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8ac:	b94b      	cbnz	r3, 800b8c2 <_raise_r+0x32>
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 f830 	bl	800b914 <_getpid_r>
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8be:	f000 b817 	b.w	800b8f0 <_kill_r>
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d00a      	beq.n	800b8dc <_raise_r+0x4c>
 800b8c6:	1c59      	adds	r1, r3, #1
 800b8c8:	d103      	bne.n	800b8d2 <_raise_r+0x42>
 800b8ca:	2316      	movs	r3, #22
 800b8cc:	6003      	str	r3, [r0, #0]
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	e7e7      	b.n	800b8a2 <_raise_r+0x12>
 800b8d2:	2400      	movs	r4, #0
 800b8d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8d8:	4628      	mov	r0, r5
 800b8da:	4798      	blx	r3
 800b8dc:	2000      	movs	r0, #0
 800b8de:	e7e0      	b.n	800b8a2 <_raise_r+0x12>

0800b8e0 <raise>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	; (800b8ec <raise+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f7ff bfd3 	b.w	800b890 <_raise_r>
 800b8ea:	bf00      	nop
 800b8ec:	2000006c 	.word	0x2000006c

0800b8f0 <_kill_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d07      	ldr	r5, [pc, #28]	; (800b910 <_kill_r+0x20>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	602b      	str	r3, [r5, #0]
 800b8fe:	f7f6 fcc5 	bl	800228c <_kill>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d102      	bne.n	800b90c <_kill_r+0x1c>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	b103      	cbz	r3, 800b90c <_kill_r+0x1c>
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	bd38      	pop	{r3, r4, r5, pc}
 800b90e:	bf00      	nop
 800b910:	2000069c 	.word	0x2000069c

0800b914 <_getpid_r>:
 800b914:	f7f6 bcb2 	b.w	800227c <_getpid>

0800b918 <__swhatbuf_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	460c      	mov	r4, r1
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	2900      	cmp	r1, #0
 800b922:	b096      	sub	sp, #88	; 0x58
 800b924:	4615      	mov	r5, r2
 800b926:	461e      	mov	r6, r3
 800b928:	da0d      	bge.n	800b946 <__swhatbuf_r+0x2e>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b930:	f04f 0100 	mov.w	r1, #0
 800b934:	bf0c      	ite	eq
 800b936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b93a:	2340      	movne	r3, #64	; 0x40
 800b93c:	2000      	movs	r0, #0
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	b016      	add	sp, #88	; 0x58
 800b944:	bd70      	pop	{r4, r5, r6, pc}
 800b946:	466a      	mov	r2, sp
 800b948:	f000 f848 	bl	800b9dc <_fstat_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	dbec      	blt.n	800b92a <__swhatbuf_r+0x12>
 800b950:	9901      	ldr	r1, [sp, #4]
 800b952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b95a:	4259      	negs	r1, r3
 800b95c:	4159      	adcs	r1, r3
 800b95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b962:	e7eb      	b.n	800b93c <__swhatbuf_r+0x24>

0800b964 <__smakebuf_r>:
 800b964:	898b      	ldrh	r3, [r1, #12]
 800b966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b968:	079d      	lsls	r5, r3, #30
 800b96a:	4606      	mov	r6, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	d507      	bpl.n	800b980 <__smakebuf_r+0x1c>
 800b970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	2301      	movs	r3, #1
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	b002      	add	sp, #8
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	ab01      	add	r3, sp, #4
 800b982:	466a      	mov	r2, sp
 800b984:	f7ff ffc8 	bl	800b918 <__swhatbuf_r>
 800b988:	9900      	ldr	r1, [sp, #0]
 800b98a:	4605      	mov	r5, r0
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7fb fc75 	bl	800727c <_malloc_r>
 800b992:	b948      	cbnz	r0, 800b9a8 <__smakebuf_r+0x44>
 800b994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b998:	059a      	lsls	r2, r3, #22
 800b99a:	d4ef      	bmi.n	800b97c <__smakebuf_r+0x18>
 800b99c:	f023 0303 	bic.w	r3, r3, #3
 800b9a0:	f043 0302 	orr.w	r3, r3, #2
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	e7e3      	b.n	800b970 <__smakebuf_r+0xc>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	6020      	str	r0, [r4, #0]
 800b9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b0:	81a3      	strh	r3, [r4, #12]
 800b9b2:	9b00      	ldr	r3, [sp, #0]
 800b9b4:	6163      	str	r3, [r4, #20]
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	6120      	str	r0, [r4, #16]
 800b9ba:	b15b      	cbz	r3, 800b9d4 <__smakebuf_r+0x70>
 800b9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f81d 	bl	800ba00 <_isatty_r>
 800b9c6:	b128      	cbz	r0, 800b9d4 <__smakebuf_r+0x70>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f023 0303 	bic.w	r3, r3, #3
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	431d      	orrs	r5, r3
 800b9d8:	81a5      	strh	r5, [r4, #12]
 800b9da:	e7cf      	b.n	800b97c <__smakebuf_r+0x18>

0800b9dc <_fstat_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	; (800b9fc <_fstat_r+0x20>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	f7f6 fcae 	bl	800234a <_fstat>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d102      	bne.n	800b9f8 <_fstat_r+0x1c>
 800b9f2:	682b      	ldr	r3, [r5, #0]
 800b9f4:	b103      	cbz	r3, 800b9f8 <_fstat_r+0x1c>
 800b9f6:	6023      	str	r3, [r4, #0]
 800b9f8:	bd38      	pop	{r3, r4, r5, pc}
 800b9fa:	bf00      	nop
 800b9fc:	2000069c 	.word	0x2000069c

0800ba00 <_isatty_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d06      	ldr	r5, [pc, #24]	; (800ba1c <_isatty_r+0x1c>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7f6 fcad 	bl	800236a <_isatty>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_isatty_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_isatty_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	2000069c 	.word	0x2000069c

0800ba20 <sqrt>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	ed2d 8b02 	vpush	{d8}
 800ba26:	ec55 4b10 	vmov	r4, r5, d0
 800ba2a:	f000 f825 	bl	800ba78 <__ieee754_sqrt>
 800ba2e:	4622      	mov	r2, r4
 800ba30:	462b      	mov	r3, r5
 800ba32:	4620      	mov	r0, r4
 800ba34:	4629      	mov	r1, r5
 800ba36:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3a:	eef0 8a60 	vmov.f32	s17, s1
 800ba3e:	f7f5 f885 	bl	8000b4c <__aeabi_dcmpun>
 800ba42:	b990      	cbnz	r0, 800ba6a <sqrt+0x4a>
 800ba44:	2200      	movs	r2, #0
 800ba46:	2300      	movs	r3, #0
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7f5 f856 	bl	8000afc <__aeabi_dcmplt>
 800ba50:	b158      	cbz	r0, 800ba6a <sqrt+0x4a>
 800ba52:	f7fc fd3d 	bl	80084d0 <__errno>
 800ba56:	2321      	movs	r3, #33	; 0x21
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4610      	mov	r0, r2
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7f4 ff03 	bl	800086c <__aeabi_ddiv>
 800ba66:	ec41 0b18 	vmov	d8, r0, r1
 800ba6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6e:	eef0 0a68 	vmov.f32	s1, s17
 800ba72:	ecbd 8b02 	vpop	{d8}
 800ba76:	bd38      	pop	{r3, r4, r5, pc}

0800ba78 <__ieee754_sqrt>:
 800ba78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	ec55 4b10 	vmov	r4, r5, d0
 800ba80:	4e67      	ldr	r6, [pc, #412]	; (800bc20 <__ieee754_sqrt+0x1a8>)
 800ba82:	43ae      	bics	r6, r5
 800ba84:	ee10 0a10 	vmov	r0, s0
 800ba88:	ee10 2a10 	vmov	r2, s0
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	462b      	mov	r3, r5
 800ba90:	d10d      	bne.n	800baae <__ieee754_sqrt+0x36>
 800ba92:	f7f4 fdc1 	bl	8000618 <__aeabi_dmul>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f7f4 fc05 	bl	80002ac <__adddf3>
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	ec45 4b10 	vmov	d0, r4, r5
 800baaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	2d00      	cmp	r5, #0
 800bab0:	dc0b      	bgt.n	800baca <__ieee754_sqrt+0x52>
 800bab2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bab6:	4326      	orrs	r6, r4
 800bab8:	d0f5      	beq.n	800baa6 <__ieee754_sqrt+0x2e>
 800baba:	b135      	cbz	r5, 800baca <__ieee754_sqrt+0x52>
 800babc:	f7f4 fbf4 	bl	80002a8 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	f7f4 fed2 	bl	800086c <__aeabi_ddiv>
 800bac8:	e7eb      	b.n	800baa2 <__ieee754_sqrt+0x2a>
 800baca:	1509      	asrs	r1, r1, #20
 800bacc:	f000 808d 	beq.w	800bbea <__ieee754_sqrt+0x172>
 800bad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bad4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800badc:	07c9      	lsls	r1, r1, #31
 800bade:	bf5c      	itt	pl
 800bae0:	005b      	lslpl	r3, r3, #1
 800bae2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bae6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800baea:	bf58      	it	pl
 800baec:	0052      	lslpl	r2, r2, #1
 800baee:	2500      	movs	r5, #0
 800baf0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800baf4:	1076      	asrs	r6, r6, #1
 800baf6:	0052      	lsls	r2, r2, #1
 800baf8:	f04f 0e16 	mov.w	lr, #22
 800bafc:	46ac      	mov	ip, r5
 800bafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb02:	eb0c 0001 	add.w	r0, ip, r1
 800bb06:	4298      	cmp	r0, r3
 800bb08:	bfde      	ittt	le
 800bb0a:	1a1b      	suble	r3, r3, r0
 800bb0c:	eb00 0c01 	addle.w	ip, r0, r1
 800bb10:	186d      	addle	r5, r5, r1
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	f1be 0e01 	subs.w	lr, lr, #1
 800bb18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb24:	d1ed      	bne.n	800bb02 <__ieee754_sqrt+0x8a>
 800bb26:	4674      	mov	r4, lr
 800bb28:	2720      	movs	r7, #32
 800bb2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bb2e:	4563      	cmp	r3, ip
 800bb30:	eb01 000e 	add.w	r0, r1, lr
 800bb34:	dc02      	bgt.n	800bb3c <__ieee754_sqrt+0xc4>
 800bb36:	d113      	bne.n	800bb60 <__ieee754_sqrt+0xe8>
 800bb38:	4290      	cmp	r0, r2
 800bb3a:	d811      	bhi.n	800bb60 <__ieee754_sqrt+0xe8>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	eb00 0e01 	add.w	lr, r0, r1
 800bb42:	da57      	bge.n	800bbf4 <__ieee754_sqrt+0x17c>
 800bb44:	f1be 0f00 	cmp.w	lr, #0
 800bb48:	db54      	blt.n	800bbf4 <__ieee754_sqrt+0x17c>
 800bb4a:	f10c 0801 	add.w	r8, ip, #1
 800bb4e:	eba3 030c 	sub.w	r3, r3, ip
 800bb52:	4290      	cmp	r0, r2
 800bb54:	bf88      	it	hi
 800bb56:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bb5a:	1a12      	subs	r2, r2, r0
 800bb5c:	440c      	add	r4, r1
 800bb5e:	46c4      	mov	ip, r8
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	3f01      	subs	r7, #1
 800bb64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bb68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bb6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bb70:	d1dd      	bne.n	800bb2e <__ieee754_sqrt+0xb6>
 800bb72:	4313      	orrs	r3, r2
 800bb74:	d01b      	beq.n	800bbae <__ieee754_sqrt+0x136>
 800bb76:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bc24 <__ieee754_sqrt+0x1ac>
 800bb7a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bc28 <__ieee754_sqrt+0x1b0>
 800bb7e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb82:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb86:	f7f4 fb8f 	bl	80002a8 <__aeabi_dsub>
 800bb8a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	f7f4 ffbb 	bl	8000b10 <__aeabi_dcmple>
 800bb9a:	b140      	cbz	r0, 800bbae <__ieee754_sqrt+0x136>
 800bb9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bba0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bba4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bba8:	d126      	bne.n	800bbf8 <__ieee754_sqrt+0x180>
 800bbaa:	3501      	adds	r5, #1
 800bbac:	463c      	mov	r4, r7
 800bbae:	106a      	asrs	r2, r5, #1
 800bbb0:	0863      	lsrs	r3, r4, #1
 800bbb2:	07e9      	lsls	r1, r5, #31
 800bbb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bbb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bbbc:	bf48      	it	mi
 800bbbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bbc2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bbc6:	461c      	mov	r4, r3
 800bbc8:	e76d      	b.n	800baa6 <__ieee754_sqrt+0x2e>
 800bbca:	0ad3      	lsrs	r3, r2, #11
 800bbcc:	3815      	subs	r0, #21
 800bbce:	0552      	lsls	r2, r2, #21
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0fa      	beq.n	800bbca <__ieee754_sqrt+0x152>
 800bbd4:	02dc      	lsls	r4, r3, #11
 800bbd6:	d50a      	bpl.n	800bbee <__ieee754_sqrt+0x176>
 800bbd8:	f1c1 0420 	rsb	r4, r1, #32
 800bbdc:	fa22 f404 	lsr.w	r4, r2, r4
 800bbe0:	1e4d      	subs	r5, r1, #1
 800bbe2:	408a      	lsls	r2, r1
 800bbe4:	4323      	orrs	r3, r4
 800bbe6:	1b41      	subs	r1, r0, r5
 800bbe8:	e772      	b.n	800bad0 <__ieee754_sqrt+0x58>
 800bbea:	4608      	mov	r0, r1
 800bbec:	e7f0      	b.n	800bbd0 <__ieee754_sqrt+0x158>
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	e7ef      	b.n	800bbd4 <__ieee754_sqrt+0x15c>
 800bbf4:	46e0      	mov	r8, ip
 800bbf6:	e7aa      	b.n	800bb4e <__ieee754_sqrt+0xd6>
 800bbf8:	f7f4 fb58 	bl	80002ac <__adddf3>
 800bbfc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4640      	mov	r0, r8
 800bc06:	4649      	mov	r1, r9
 800bc08:	f7f4 ff78 	bl	8000afc <__aeabi_dcmplt>
 800bc0c:	b120      	cbz	r0, 800bc18 <__ieee754_sqrt+0x1a0>
 800bc0e:	1ca0      	adds	r0, r4, #2
 800bc10:	bf08      	it	eq
 800bc12:	3501      	addeq	r5, #1
 800bc14:	3402      	adds	r4, #2
 800bc16:	e7ca      	b.n	800bbae <__ieee754_sqrt+0x136>
 800bc18:	3401      	adds	r4, #1
 800bc1a:	f024 0401 	bic.w	r4, r4, #1
 800bc1e:	e7c6      	b.n	800bbae <__ieee754_sqrt+0x136>
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	200001e0 	.word	0x200001e0
 800bc28:	200001e8 	.word	0x200001e8

0800bc2c <_init>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	bf00      	nop
 800bc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc32:	bc08      	pop	{r3}
 800bc34:	469e      	mov	lr, r3
 800bc36:	4770      	bx	lr

0800bc38 <_fini>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	bf00      	nop
 800bc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc3e:	bc08      	pop	{r3}
 800bc40:	469e      	mov	lr, r3
 800bc42:	4770      	bx	lr
