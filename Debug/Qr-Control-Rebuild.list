
Qr-Control-Rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800aca8  0800aca8  0001aca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b100  0800b100  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b108  0800b108  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b110  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000448  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a0e  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c50  00000000  00000000  00032c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001108  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d55  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004002  00000000  00000000  00037725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016a34  00000000  00000000  0003b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cff57  00000000  00000000  0005215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d10  00000000  00000000  001220b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00127dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac8c 	.word	0x0800ac8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800ac8c 	.word	0x0800ac8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <MX_GPIO_Init+0x118>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <MX_GPIO_Init+0x118>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_GPIO_Init+0x118>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	4b38      	ldr	r3, [pc, #224]	; (8001128 <MX_GPIO_Init+0x118>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a37      	ldr	r2, [pc, #220]	; (8001128 <MX_GPIO_Init+0x118>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b35      	ldr	r3, [pc, #212]	; (8001128 <MX_GPIO_Init+0x118>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_GPIO_Init+0x118>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a30      	ldr	r2, [pc, #192]	; (8001128 <MX_GPIO_Init+0x118>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_GPIO_Init+0x118>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_GPIO_Init+0x118>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <MX_GPIO_Init+0x118>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <MX_GPIO_Init+0x118>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_GPIO_Init+0x118>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a22      	ldr	r2, [pc, #136]	; (8001128 <MX_GPIO_Init+0x118>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_GPIO_Init+0x118>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_GPIO_Init+0x118>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_GPIO_Init+0x118>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_GPIO_Init+0x118>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_2_Pin|EN_2C3_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	210a      	movs	r1, #10
 80010d2:	4816      	ldr	r0, [pc, #88]	; (800112c <MX_GPIO_Init+0x11c>)
 80010d4:	f002 f8a8 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_1_Pin|EN_1E10_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80010de:	4814      	ldr	r0, [pc, #80]	; (8001130 <MX_GPIO_Init+0x120>)
 80010e0:	f002 f8a2 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_2_Pin|EN_2C3_Pin;
 80010e4:	230a      	movs	r3, #10
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_GPIO_Init+0x11c>)
 80010fc:	f001 fef8 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_1_Pin|EN_1E10_Pin;
 8001100:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x120>)
 800111a:	f001 fee9 	bl	8002ef0 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800
 8001130:	40021000 	.word	0x40021000

08001134 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_I2C1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x50>)
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_I2C1_Init+0x58>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_I2C1_Init+0x50>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_I2C1_Init+0x50>)
 8001172:	f002 f873 	bl	800325c <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 fb7c 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000020c 	.word	0x2000020c
 8001188:	40005400 	.word	0x40005400
 800118c:	00061a80 	.word	0x00061a80

08001190 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_I2C_MspInit+0x84>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12b      	bne.n	800120a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23c0      	movs	r3, #192	; 0xc0
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d2:	2312      	movs	r3, #18
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011de:	2304      	movs	r3, #4
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_I2C_MspInit+0x8c>)
 80011ea:	f001 fe81 	bl	8002ef0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0x88>)
 80011f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_I2C_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40005400 	.word	0x40005400
 8001218:	40023800 	.word	0x40023800
 800121c:	40020400 	.word	0x40020400

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f001 fc4e 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f828 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f7ff fef0 	bl	8001010 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001230:	f001 f836 	bl	80022a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001234:	f001 f882 	bl	800233c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001238:	f001 f928 	bl	800248c <MX_TIM5_Init>
  MX_TIM1_Init();
 800123c:	f000 ffa2 	bl	8002184 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001240:	f001 fae2 	bl	8002808 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001244:	f001 f8ce 	bl	80023e4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001248:	f7ff ff74 	bl	8001134 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SerialInit();
 800124c:	f000 f87e 	bl	800134c <SerialInit>
  MotorInit();
 8001250:	f000 fc22 	bl	8001a98 <MotorInit>
  MotorSetRun();
 8001254:	f000 fb16 	bl	8001884 <MotorSetRun>

  tProcess = NONE;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <main+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]


  tMotor1.ptd = 0.091; //2700
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <main+0x50>)
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <main+0x54>)
 8001262:	61da      	str	r2, [r3, #28]
  tMotor2.ptd = 0.091; //2580
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <main+0x58>)
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <main+0x54>)
 8001268:	61da      	str	r2, [r3, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800126a:	e7fe      	b.n	800126a <main+0x4a>
 800126c:	20000278 	.word	0x20000278
 8001270:	200002c4 	.word	0x200002c4
 8001274:	3dba5e35 	.word	0x3dba5e35
 8001278:	200002e4 	.word	0x200002e4

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	; 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	; 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f8db 	bl	8007446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <SystemClock_Config+0xc8>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <SystemClock_Config+0xc8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	; 0x40
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <SystemClock_Config+0xc8>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <SystemClock_Config+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xcc>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xcc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 80012f0:	234b      	movs	r3, #75	; 0x4b
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f002 f8ef 	bl	80034e4 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 fab4 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fb51 	bl	80039d4 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001338:	f000 fa9e 	bl	8001878 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8001350:	2212      	movs	r2, #18
 8001352:	4903      	ldr	r1, [pc, #12]	; (8001360 <SerialInit+0x14>)
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <SerialInit+0x18>)
 8001356:	f003 fff4 	bl	8005342 <HAL_UART_Receive_IT>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000260 	.word	0x20000260
 8001364:	200004a4 	.word	0x200004a4

08001368 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 800136c:	2212      	movs	r2, #18
 800136e:	4903      	ldr	r1, [pc, #12]	; (800137c <SerialAcceptReceive+0x14>)
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <SerialAcceptReceive+0x18>)
 8001372:	f003 ffe6 	bl	8005342 <HAL_UART_Receive_IT>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000260 	.word	0x20000260
 8001380:	200004a4 	.word	0x200004a4

08001384 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart2.Instance)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <HAL_UART_RxCpltCallback+0x114>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d17b      	bne.n	8001490 <HAL_UART_RxCpltCallback+0x10c>
  {

    	__HAL_TIM_SetCounter(&htim3, 0);
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_UART_RxCpltCallback+0x118>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim4, 0);
 80013a0:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <HAL_UART_RxCpltCallback+0x11c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <HAL_UART_RxCpltCallback+0x120>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_1);
 80013ae:	483e      	ldr	r0, [pc, #248]	; (80014a8 <HAL_UART_RxCpltCallback+0x124>)
 80013b0:	f000 fce0 	bl	8001d74 <PIDReset>
	    PIDReset(&tPID_2);
 80013b4:	483d      	ldr	r0, [pc, #244]	; (80014ac <HAL_UART_RxCpltCallback+0x128>)
 80013b6:	f000 fcdd 	bl	8001d74 <PIDReset>


	    if(!strcmp(dataBuffer, ARRAY_CHECKER)){
 80013ba:	493d      	ldr	r1, [pc, #244]	; (80014b0 <HAL_UART_RxCpltCallback+0x12c>)
 80013bc:	483d      	ldr	r0, [pc, #244]	; (80014b4 <HAL_UART_RxCpltCallback+0x130>)
 80013be:	f7fe ff07 	bl	80001d0 <strcmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <HAL_UART_RxCpltCallback+0x54>
	    	HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	2205      	movs	r2, #5
 80013ce:	493a      	ldr	r1, [pc, #232]	; (80014b8 <HAL_UART_RxCpltCallback+0x134>)
 80013d0:	4831      	ldr	r0, [pc, #196]	; (8001498 <HAL_UART_RxCpltCallback+0x114>)
 80013d2:	f003 ff24 	bl	800521e <HAL_UART_Transmit>
 80013d6:	e059      	b.n	800148c <HAL_UART_RxCpltCallback+0x108>
	    }
	    else {
	        HAL_UART_Transmit(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	2212      	movs	r2, #18
 80013de:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_UART_RxCpltCallback+0x130>)
 80013e0:	482d      	ldr	r0, [pc, #180]	; (8001498 <HAL_UART_RxCpltCallback+0x114>)
 80013e2:	f003 ff1c 	bl	800521e <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 80013e6:	4c35      	ldr	r4, [pc, #212]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4932      	ldr	r1, [pc, #200]	; (80014b4 <HAL_UART_RxCpltCallback+0x130>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 faa5 	bl	800293c <ArrProcess>
 80013f2:	4623      	mov	r3, r4
 80013f4:	463a      	mov	r2, r7
 80013f6:	6810      	ldr	r0, [r2, #0]
 80013f8:	6851      	ldr	r1, [r2, #4]
 80013fa:	c303      	stmia	r3!, {r0, r1}
 80013fc:	8912      	ldrh	r2, [r2, #8]
 80013fe:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 800140e:	885b      	ldrh	r3, [r3, #2]
 8001410:	ee07 3a10 	vmov	s14, r3
 8001414:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001418:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 800141a:	889b      	ldrh	r3, [r3, #4]
 800141c:	ee06 3a90 	vmov	s13, r3
 8001420:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001424:	eeb0 1a66 	vmov.f32	s2, s13
 8001428:	eef0 0a47 	vmov.f32	s1, s14
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	4823      	ldr	r0, [pc, #140]	; (80014c0 <HAL_UART_RxCpltCallback+0x13c>)
 8001432:	f000 fb85 	bl	8001b40 <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 8001438:	88db      	ldrh	r3, [r3, #6]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_UART_RxCpltCallback+0x140>)
 800143e:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_UART_RxCpltCallback+0x138>)
 8001442:	891b      	ldrh	r3, [r3, #8]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_UART_RxCpltCallback+0x144>)
 8001448:	701a      	strb	r2, [r3, #0]
	    	    tProcess = RUN_TEST;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_UART_RxCpltCallback+0x120>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
	    	        if (dir1 == HEAD)
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_UART_RxCpltCallback+0x140>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_UART_RxCpltCallback+0xe0>
	    	        {
	    	        	Motor1Forward();
 8001458:	f000 fa34 	bl	80018c4 <Motor1Forward>
	    	        	tMotor1.dir = HEAD;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_UART_RxCpltCallback+0x148>)
 800145e:	2201      	movs	r2, #1
 8001460:	761a      	strb	r2, [r3, #24]
 8001462:	e004      	b.n	800146e <HAL_UART_RxCpltCallback+0xea>
	    	        }
	    	        else
	    	        {
	    	        	Motor1Backward();
 8001464:	f000 fa3a 	bl	80018dc <Motor1Backward>
	    	        	tMotor1.dir = BACK;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_RxCpltCallback+0x148>)
 800146a:	2200      	movs	r2, #0
 800146c:	761a      	strb	r2, [r3, #24]
	    	        }
	    	        if (dir2 == HEAD)
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_RxCpltCallback+0x144>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <HAL_UART_RxCpltCallback+0xfe>
	    	        {
	    	        	Motor2Forward();
 8001476:	f000 fa3d 	bl	80018f4 <Motor2Forward>
	    	        	tMotor2.dir = HEAD;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_RxCpltCallback+0x14c>)
 800147c:	2201      	movs	r2, #1
 800147e:	761a      	strb	r2, [r3, #24]
 8001480:	e004      	b.n	800148c <HAL_UART_RxCpltCallback+0x108>
	    	        }
	    	        else
	    	        {
	    	        	Motor2Backward();
 8001482:	f000 fa43 	bl	800190c <Motor2Backward>
	    	        	tMotor2.dir = BACK;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_UART_RxCpltCallback+0x14c>)
 8001488:	2200      	movs	r2, #0
 800148a:	761a      	strb	r2, [r3, #24]
	    	        }
	    }
	    SerialAcceptReceive();
 800148c:	f7ff ff6c 	bl	8001368 <SerialAcceptReceive>
  }
}
 8001490:	bf00      	nop
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	200004a4 	.word	0x200004a4
 800149c:	200003cc 	.word	0x200003cc
 80014a0:	20000414 	.word	0x20000414
 80014a4:	20000278 	.word	0x20000278
 80014a8:	20000304 	.word	0x20000304
 80014ac:	2000031c 	.word	0x2000031c
 80014b0:	0800aca8 	.word	0x0800aca8
 80014b4:	20000260 	.word	0x20000260
 80014b8:	20000000 	.word	0x20000000
 80014bc:	2000027c 	.word	0x2000027c
 80014c0:	20000290 	.word	0x20000290
 80014c4:	20000286 	.word	0x20000286
 80014c8:	20000287 	.word	0x20000287
 80014cc:	200002c4 	.word	0x200002c4
 80014d0:	200002e4 	.word	0x200002e4

080014d4 <HAL_TIM_PeriodElapsedCallback>:


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af04      	add	r7, sp, #16
 80014da:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d120      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x56>
  {
    switch (tProcess)
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x54>
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d000      	beq.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x22>
    	ReadEncoder(&tMotor2, &htim3);
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
//    	MPU6050_Read_All(&hi2c1, &MPU6050);
    }
  }
}
 80014f4:	e019      	b.n	800152a <HAL_TIM_PeriodElapsedCallback+0x56>
    	MotorSetRun();
 80014f6:	f000 f9c5 	bl	8001884 <MotorSetRun>
    	ReadEncoder(&tMotor1, &htim4);
 80014fa:	4910      	ldr	r1, [pc, #64]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80014fe:	f000 fa11 	bl	8001924 <ReadEncoder>
    	ReadEncoder(&tMotor2, &htim3);
 8001502:	4910      	ldr	r1, [pc, #64]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001504:	4810      	ldr	r0, [pc, #64]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001506:	f000 fa0d 	bl	8001924 <ReadEncoder>
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	9202      	str	r2, [sp, #8]
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001522:	f000 f81d 	bl	8001560 <MotorMovePos>
}
 8001526:	e000      	b.n	800152a <HAL_TIM_PeriodElapsedCallback+0x56>
    	break;
 8001528:	bf00      	nop
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000384 	.word	0x20000384
 8001538:	20000278 	.word	0x20000278
 800153c:	20000414 	.word	0x20000414
 8001540:	200002c4 	.word	0x200002c4
 8001544:	200003cc 	.word	0x200003cc
 8001548:	200002e4 	.word	0x200002e4
 800154c:	20000286 	.word	0x20000286
 8001550:	20000287 	.word	0x20000287
 8001554:	2000031c 	.word	0x2000031c
 8001558:	20000304 	.word	0x20000304
 800155c:	20000290 	.word	0x20000290

08001560 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2,Motor_t *tmotor1, Motor_t *tmotor2, uint8_t dir1, uint8_t dir2)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2;

  float dPosTemp = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	d820      	bhi.n	80015cc <MotorMovePos+0x6c>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ac:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	4b9e      	ldr	r3, [pc, #632]	; (8001840 <MotorMovePos+0x2e0>)
 80015c6:	edc3 7a00 	vstr	s15, [r3]
 80015ca:	e065      	b.n	8001698 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d817      	bhi.n	8001612 <MotorMovePos+0xb2>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = tProfile->dA2;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a8c      	ldr	r2, [pc, #560]	; (8001840 <MotorMovePos+0x2e0>)
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e042      	b.n	8001698 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800161e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d834      	bhi.n	8001692 <MotorMovePos+0x132>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ed93 7a06 	vldr	s14, [r3, #24]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800163e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	edd3 6a07 	vldr	s13, [r3, #28]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	edd3 7a08 	vldr	s15, [r3, #32]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001672:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	edd3 7a07 	vldr	s15, [r3, #28]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <MotorMovePos+0x2e0>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
 8001690:	e002      	b.n	8001698 <MotorMovePos+0x138>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61fb      	str	r3, [r7, #28]
  }

  // Control PID

  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel, tMotor1.velocity, SAMPLING_TIME);
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <MotorMovePos+0x2e0>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <MotorMovePos+0x2e4>)
 80016a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a4:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8001848 <MotorMovePos+0x2e8>
 80016a8:	eef0 0a47 	vmov.f32	s1, s14
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f000 fb95 	bl	8001de0 <PIDCompute>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	61bb      	str	r3, [r7, #24]
  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel, tMotor2.velocity, SAMPLING_TIME));
 80016c6:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <MotorMovePos+0x2e0>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	4b5f      	ldr	r3, [pc, #380]	; (800184c <MotorMovePos+0x2ec>)
 80016ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80016d2:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8001848 <MotorMovePos+0x2e8>
 80016d6:	eef0 0a47 	vmov.f32	s1, s14
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fb7e 	bl	8001de0 <PIDCompute>
 80016e4:	eef0 7a40 	vmov.f32	s15, s0
 80016e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ec:	ee17 3a90 	vmov	r3, s15
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	617b      	str	r3, [r7, #20]

  dutyCycle_global_1 = g_nDutyCycle_1;
 80016f4:	4a56      	ldr	r2, [pc, #344]	; (8001850 <MotorMovePos+0x2f0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	6013      	str	r3, [r2, #0]
  dutyCycle_global_2 = g_nDutyCycle_2;
 80016fa:	4a56      	ldr	r2, [pc, #344]	; (8001854 <MotorMovePos+0x2f4>)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	6013      	str	r3, [r2, #0]


  MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	bfb8      	it	lt
 8001706:	425b      	neglt	r3, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	2101      	movs	r1, #1
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f9a1 	bl	8001a54 <MotorSetDuty>
  MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	bfb8      	it	lt
 8001718:	425b      	neglt	r3, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f998 	bl	8001a54 <MotorSetDuty>
//        }
//    }
//  strcat(result, "!");
//  HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 100);

  if (tProfile->nTime > tProfile->dMidStep3)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	dd66      	ble.n	8001808 <MotorMovePos+0x2a8>
  {
    __HAL_TIM_SetCounter(&htim4, 0);
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <MotorMovePos+0x2f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim3, 0);
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <MotorMovePos+0x2fc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    g_nDutyCycle_1 = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    g_nDutyCycle_2 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    g_dCmdVel = 0;
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <MotorMovePos+0x2e0>)
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <MotorMovePos+0x300>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1);
 800176e:	2101      	movs	r1, #1
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f96f 	bl	8001a54 <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2);
 8001776:	2102      	movs	r1, #2
 8001778:	2000      	movs	r0, #0
 800177a:	f000 f96b 	bl	8001a54 <MotorSetDuty>
    tmotor1->velocity = 0;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
    tmotor2->velocity = 0;
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
    tmotor1->position = 0;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    tmotor2->position = 0;
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    tmotor1->counter = 0;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
    tmotor2->counter = 0;
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    PIDReset(&tPID_2);
 80017aa:	482e      	ldr	r0, [pc, #184]	; (8001864 <MotorMovePos+0x304>)
 80017ac:	f000 fae2 	bl	8001d74 <PIDReset>
    PIDReset(&tPID_1);
 80017b0:	482d      	ldr	r0, [pc, #180]	; (8001868 <MotorMovePos+0x308>)
 80017b2:	f000 fadf 	bl	8001d74 <PIDReset>
    if(tProfile->dMidStep3 < 2.0f)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d514      	bpl.n	80017f4 <MotorMovePos+0x294>
    {
    for(uint64_t i = 0; i < 5000000; i++){};
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017d6:	e006      	b.n	80017e6 <MotorMovePos+0x286>
 80017d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017dc:	1c54      	adds	r4, r2, #1
 80017de:	f143 0500 	adc.w	r5, r3, #0
 80017e2:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80017e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ea:	4920      	ldr	r1, [pc, #128]	; (800186c <MotorMovePos+0x30c>)
 80017ec:	428a      	cmp	r2, r1
 80017ee:	f173 0300 	sbcs.w	r3, r3, #0
 80017f2:	d3f1      	bcc.n	80017d8 <MotorMovePos+0x278>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 80017f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f8:	2205      	movs	r2, #5
 80017fa:	491d      	ldr	r1, [pc, #116]	; (8001870 <MotorMovePos+0x310>)
 80017fc:	481d      	ldr	r0, [pc, #116]	; (8001874 <MotorMovePos+0x314>)
 80017fe:	f003 fd0e 	bl	800521e <HAL_UART_Transmit>
    tProcess = NONE;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MotorMovePos+0x300>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  }
  tProfile->nTime += SAMPLING_TIME;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feab 	bl	8000568 <__aeabi_f2d>
 8001812:	a309      	add	r3, pc, #36	; (adr r3, 8001838 <MotorMovePos+0x2d8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fd48 	bl	80002ac <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f9f0 	bl	8000c08 <__aeabi_d2f>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bdb0      	pop	{r4, r5, r7, pc}
 8001836:	bf00      	nop
 8001838:	47ae147b 	.word	0x47ae147b
 800183c:	3f747ae1 	.word	0x3f747ae1
 8001840:	20000274 	.word	0x20000274
 8001844:	200002c4 	.word	0x200002c4
 8001848:	3ba3d70a 	.word	0x3ba3d70a
 800184c:	200002e4 	.word	0x200002e4
 8001850:	20000288 	.word	0x20000288
 8001854:	2000028c 	.word	0x2000028c
 8001858:	20000414 	.word	0x20000414
 800185c:	200003cc 	.word	0x200003cc
 8001860:	20000278 	.word	0x20000278
 8001864:	2000031c 	.word	0x2000031c
 8001868:	20000304 	.word	0x20000304
 800186c:	004c4b40 	.word	0x004c4b40
 8001870:	20000000 	.word	0x20000000
 8001874:	200004a4 	.word	0x200004a4

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <MotorSetRun>:

PROFILE_t tProfile;
Motor_t tMotor1, tMotor2;

void MotorSetRun()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2102      	movs	r1, #2
 800188c:	480a      	ldr	r0, [pc, #40]	; (80018b8 <MotorSetRun+0x34>)
 800188e:	f001 fccb 	bl	8003228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2108      	movs	r1, #8
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <MotorSetRun+0x38>)
 8001898:	f001 fcc6 	bl	8003228 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a2:	4807      	ldr	r0, [pc, #28]	; (80018c0 <MotorSetRun+0x3c>)
 80018a4:	f001 fcc0 	bl	8003228 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MotorSetRun+0x3c>)
 80018b0:	f001 fcba 	bl	8003228 <HAL_GPIO_WritePin>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40021000 	.word	0x40021000

080018c4 <Motor1Forward>:

void Motor1Forward()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <Motor1Forward+0x14>)
 80018d0:	f001 fcaa 	bl	8003228 <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000

080018dc <Motor1Backward>:

void Motor1Backward()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <Motor1Backward+0x14>)
 80018e8:	f001 fc9e 	bl	8003228 <HAL_GPIO_WritePin>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <Motor2Forward>:

void Motor2Forward()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <Motor2Forward+0x14>)
 80018fe:	f001 fc93 	bl	8003228 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020800 	.word	0x40020800

0800190c <Motor2Backward>:

void Motor2Backward()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2102      	movs	r1, #2
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <Motor2Backward+0x14>)
 8001916:	f001 fc87 	bl	8003228 <HAL_GPIO_WritePin>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020800 	.word	0x40020800

08001924 <ReadEncoder>:

void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

  tmotor->counter = htim->Instance->CNT;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
  htim->Instance->CNT = 0;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
  if(tmotor->dir == 1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d141      	bne.n	80019ce <ReadEncoder+0xaa>
  {
	    int16_t temp_data = tmotor->counter;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	81bb      	strh	r3, [r7, #12]
	    temp_data = - temp_data;
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	425b      	negs	r3, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	81bb      	strh	r3, [r7, #12]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001958:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	ee17 0a90 	vmov	r0, s15
 8001968:	f7fe fdfe 	bl	8000568 <__aeabi_f2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <ReadEncoder+0x12c>)
 8001972:	f7fe fe51 	bl	8000618 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fdf0 	bl	8000568 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fe42 	bl	8000618 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f934 	bl	8000c08 <__aeabi_d2f>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	edc3 7a02 	vstr	s15, [r3, #8]
  else{
	    int16_t temp_data =  tmotor->counter;
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
  }
}
 80019cc:	e03c      	b.n	8001a48 <ReadEncoder+0x124>
	    int16_t temp_data =  tmotor->counter;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	81fb      	strh	r3, [r7, #14]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 80019d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e0:	ee17 0a90 	vmov	r0, s15
 80019e4:	f7fe fdc0 	bl	8000568 <__aeabi_f2d>
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <ReadEncoder+0x12c>)
 80019ee:	f7fe fe13 	bl	8000618 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdb2 	bl	8000568 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fe04 	bl	8000618 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8f6 	bl	8000c08 <__aeabi_d2f>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	40690000 	.word	0x40690000

08001a54 <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	4613      	mov	r3, r2
 8001a62:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8001a64:	797b      	ldrb	r3, [r7, #5]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d104      	bne.n	8001a74 <MotorSetDuty+0x20>
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,nDuty);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MotorSetDuty+0x3c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else if (channel == MOTOR_2)
  {
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
  }
}
 8001a72:	e006      	b.n	8001a82 <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8001a74:	797b      	ldrb	r3, [r7, #5]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d103      	bne.n	8001a82 <MotorSetDuty+0x2e>
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MotorSetDuty+0x40>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	88fa      	ldrh	r2, [r7, #6]
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	2000033c 	.word	0x2000033c
 8001a94:	2000045c 	.word	0x2000045c

08001a98 <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8001a9c:	481f      	ldr	r0, [pc, #124]	; (8001b1c <MotorInit+0x84>)
 8001a9e:	f002 fa09 	bl	8003eb4 <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	481e      	ldr	r0, [pc, #120]	; (8001b20 <MotorInit+0x88>)
 8001aa6:	f002 fac5 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	481c      	ldr	r0, [pc, #112]	; (8001b20 <MotorInit+0x88>)
 8001aae:	f002 fac1 	bl	8004034 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MotorInit+0x8c>)
 8001ab6:	f002 fabd 	bl	8004034 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001aba:	210c      	movs	r1, #12
 8001abc:	4819      	ldr	r0, [pc, #100]	; (8001b24 <MotorInit+0x8c>)
 8001abe:	f002 fab9 	bl	8004034 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4818      	ldr	r0, [pc, #96]	; (8001b28 <MotorInit+0x90>)
 8001ac6:	f002 fc23 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001aca:	2104      	movs	r1, #4
 8001acc:	4816      	ldr	r0, [pc, #88]	; (8001b28 <MotorInit+0x90>)
 8001ace:	f002 fc1f 	bl	8004310 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <MotorInit+0x94>)
 8001ad6:	f002 fc1b 	bl	8004310 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001ada:	2104      	movs	r1, #4
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MotorInit+0x94>)
 8001ade:	f002 fc17 	bl	8004310 <HAL_TIM_Encoder_Start>

  PIDInit(&tPID_1, 0.15, 5, 0.001);
 8001ae2:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001b30 <MotorInit+0x98>
 8001ae6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001aea:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001b34 <MotorInit+0x9c>
 8001aee:	4812      	ldr	r0, [pc, #72]	; (8001b38 <MotorInit+0xa0>)
 8001af0:	f000 f95c 	bl	8001dac <PIDInit>
  PIDInit(&tPID_2, 0.15, 5, 0.001);
 8001af4:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001b30 <MotorInit+0x98>
 8001af8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001afc:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001b34 <MotorInit+0x9c>
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <MotorInit+0xa4>)
 8001b02:	f000 f953 	bl	8001dac <PIDInit>
  MotorSetDuty(0, MOTOR_1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff ffa3 	bl	8001a54 <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8001b0e:	2102      	movs	r1, #2
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff ff9f 	bl	8001a54 <MotorSetDuty>

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000384 	.word	0x20000384
 8001b20:	2000045c 	.word	0x2000045c
 8001b24:	2000033c 	.word	0x2000033c
 8001b28:	200003cc 	.word	0x200003cc
 8001b2c:	20000414 	.word	0x20000414
 8001b30:	3a83126f 	.word	0x3a83126f
 8001b34:	3e19999a 	.word	0x3e19999a
 8001b38:	20000304 	.word	0x20000304
 8001b3c:	2000031c 	.word	0x2000031c

08001b40 <MotorTrapzoidalInit>:
    *nPulse = __HAL_TIM_GetCounter(&htim3);
  }
}

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b50:	ed87 1a00 	vstr	s2, [r7]
	if (maxPos <= 0 || maxVel <= 0 || maxAcc <= 0) {
 8001b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	f240 80fc 	bls.w	8001d5c <MotorTrapzoidalInit+0x21c>
 8001b64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	f240 80f4 	bls.w	8001d5c <MotorTrapzoidalInit+0x21c>
 8001b74:	edd7 7a00 	vldr	s15, [r7]
 8001b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	f240 80ec 	bls.w	8001d5c <MotorTrapzoidalInit+0x21c>

	        return;
	    }
	if (maxVel > sqrt(maxAcc * maxPos)) maxVel = sqrt(maxAcc * maxPos) - 1.0f;
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7fe fcef 	bl	8000568 <__aeabi_f2d>
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	ed97 7a00 	vldr	s14, [r7]
 8001b92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9a:	ee17 0a90 	vmov	r0, s15
 8001b9e:	f7fe fce3 	bl	8000568 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	ec43 2b10 	vmov	d0, r2, r3
 8001baa:	f008 ff69 	bl	800aa80 <sqrt>
 8001bae:	ec53 2b10 	vmov	r2, r3, d0
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe ffbf 	bl	8000b38 <__aeabi_dcmpgt>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01e      	beq.n	8001bfe <MotorTrapzoidalInit+0xbe>
 8001bc0:	ed97 7a00 	vldr	s14, [r7]
 8001bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fcca 	bl	8000568 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f008 ff50 	bl	800aa80 <sqrt>
 8001be0:	ec51 0b10 	vmov	r0, r1, d0
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b61      	ldr	r3, [pc, #388]	; (8001d70 <MotorTrapzoidalInit+0x230>)
 8001bea:	f7fe fb5d 	bl	80002a8 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7ff f807 	bl	8000c08 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	607b      	str	r3, [r7, #4]
	tProfile->dAccelMax = maxAcc;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos * 0.8725; //Must Increase
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7fe fcac 	bl	8000568 <__aeabi_f2d>
 8001c10:	a355      	add	r3, pc, #340	; (adr r3, 8001d68 <MotorTrapzoidalInit+0x228>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fcff 	bl	8000618 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe fff1 	bl	8000c08 <__aeabi_d2f>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c4e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001c52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001cee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cf8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tProfile->nTime = 0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
 8001d5a:	e000      	b.n	8001d5e <MotorTrapzoidalInit+0x21e>
	        return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	1eb851ec 	.word	0x1eb851ec
 8001d6c:	3febeb85 	.word	0x3febeb85
 8001d70:	3ff00000 	.word	0x3ff00000

08001d74 <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result = 0.0f;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
    g_dPIDError = 0;
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <PIDReset+0x34>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000334 	.word	0x20000334

08001dac <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001db8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dbc:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff ffd7 	bl	8001d74 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	609a      	str	r2, [r3, #8]

}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dec:	edc7 0a01 	vstr	s1, [r7, #4]
 8001df0:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001df4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <PIDCompute+0x114>)
 8001e02:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

    dP = PID_Ctrl->dKp * g_dPIDError;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <PIDCompute+0x114>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	edc7 7a06 	vstr	s15, [r7, #24]
    PID_Ctrl->dIntergral += g_dPIDError;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <PIDCompute+0x114>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e48:	edd7 7a00 	vldr	s15, [r7]
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a05 	vstr	s15, [r7, #20]

    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <PIDCompute+0x114>)
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e7c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e80:	ed97 7a00 	vldr	s14, [r7]
 8001e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e88:	edc7 7a04 	vstr	s15, [r7, #16]

    dPIDResult = dP + dI + dD;
 8001e8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
    if(dPIDResult > 99) dPIDResult = 99;
 8001ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ef8 <PIDCompute+0x118>
 8001eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	dd01      	ble.n	8001eba <PIDCompute+0xda>
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <PIDCompute+0x11c>)
 8001eb8:	61fb      	str	r3, [r7, #28]
    if(dPIDResult < -99) dPIDResult = - 99;
 8001eba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ebe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f00 <PIDCompute+0x120>
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	d501      	bpl.n	8001ed0 <PIDCompute+0xf0>
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <PIDCompute+0x124>)
 8001ece:	61fb      	str	r3, [r7, #28]
    PID_Ctrl->result = dPIDResult;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <PIDCompute+0x114>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	ee07 3a90 	vmov	s15, r3
}
 8001ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000334 	.word	0x20000334
 8001ef8:	42c60000 	.word	0x42c60000
 8001efc:	42c60000 	.word	0x42c60000
 8001f00:	c2c60000 	.word	0xc2c60000
 8001f04:	c2c60000 	.word	0xc2c60000

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f000 fde0 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TIM2_IRQHandler+0x10>)
 8001fb2:	f002 fa3b 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000384 	.word	0x20000384

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART2_IRQHandler+0x10>)
 8001fc6:	f003 f9ed 	bl	80053a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200004a4 	.word	0x200004a4

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fee:	f005 fa9f 	bl	8007530 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002016:	e7fe      	b.n	8002016 <_exit+0x12>

08002018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e009      	b.n	8002078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf1      	blt.n	8002064 <_write+0x12>
  }
  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_close>:

int _close(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b2:	605a      	str	r2, [r3, #4]
  return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_isatty>:

int _isatty(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f005 fa04 	bl	8007530 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20020000 	.word	0x20020000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000338 	.word	0x20000338
 800215c:	20000638 	.word	0x20000638

08002160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b092      	sub	sp, #72	; 0x48
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	2220      	movs	r2, #32
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 f949 	bl	8007446 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <MX_TIM1_Init+0x114>)
 80021b6:	4a39      	ldr	r2, [pc, #228]	; (800229c <MX_TIM1_Init+0x118>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <MX_TIM1_Init+0x114>)
 80021bc:	221d      	movs	r2, #29
 80021be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <MX_TIM1_Init+0x114>)
 80021c2:	2260      	movs	r2, #96	; 0x60
 80021c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <MX_TIM1_Init+0x114>)
 80021c8:	2263      	movs	r2, #99	; 0x63
 80021ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <MX_TIM1_Init+0x114>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <MX_TIM1_Init+0x114>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <MX_TIM1_Init+0x114>)
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021de:	482e      	ldr	r0, [pc, #184]	; (8002298 <MX_TIM1_Init+0x114>)
 80021e0:	f001 fed8 	bl	8003f94 <HAL_TIM_PWM_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f7ff fb45 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021fa:	4619      	mov	r1, r3
 80021fc:	4826      	ldr	r0, [pc, #152]	; (8002298 <MX_TIM1_Init+0x114>)
 80021fe:	f002 fedf 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002208:	f7ff fb36 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220c:	2360      	movs	r3, #96	; 0x60
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	2208      	movs	r2, #8
 800222e:	4619      	mov	r1, r3
 8002230:	4819      	ldr	r0, [pc, #100]	; (8002298 <MX_TIM1_Init+0x114>)
 8002232:	f002 fa03 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800223c:	f7ff fb1c 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	220c      	movs	r2, #12
 8002246:	4619      	mov	r1, r3
 8002248:	4813      	ldr	r0, [pc, #76]	; (8002298 <MX_TIM1_Init+0x114>)
 800224a:	f002 f9f7 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002254:	f7ff fb10 	bl	8001878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800226c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002270:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM1_Init+0x114>)
 800227c:	f002 ff1c 	bl	80050b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002286:	f7ff faf7 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM1_Init+0x114>)
 800228c:	f000 fa5a 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8002290:	bf00      	nop
 8002292:	3748      	adds	r7, #72	; 0x48
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000033c 	.word	0x2000033c
 800229c:	40010000 	.word	0x40010000

080022a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_TIM2_Init+0x98>)
 80022be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 749;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <MX_TIM2_Init+0x98>)
 80022c6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80022ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_TIM2_Init+0x98>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <MX_TIM2_Init+0x98>)
 80022d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80022d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_TIM2_Init+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_TIM2_Init+0x98>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e6:	4814      	ldr	r0, [pc, #80]	; (8002338 <MX_TIM2_Init+0x98>)
 80022e8:	f001 fd94 	bl	8003e14 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80022f2:	f7ff fac1 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_TIM2_Init+0x98>)
 8002304:	f002 fa5c 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800230e:	f7ff fab3 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231a:	463b      	mov	r3, r7
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <MX_TIM2_Init+0x98>)
 8002320:	f002 fe4e 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800232a:	f7ff faa5 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000384 	.word	0x20000384

0800233c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f005 f87b 	bl	8007446 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <MX_TIM3_Init+0xa0>)
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <MX_TIM3_Init+0xa4>)
 800235c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <MX_TIM3_Init+0xa0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_TIM3_Init+0xa0>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <MX_TIM3_Init+0xa0>)
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_TIM3_Init+0xa0>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <MX_TIM3_Init+0xa0>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800237e:	2303      	movs	r3, #3
 8002380:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800238e:	230a      	movs	r3, #10
 8002390:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800239e:	230a      	movs	r3, #10
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <MX_TIM3_Init+0xa0>)
 80023aa:	f001 ff0b 	bl	80041c4 <HAL_TIM_Encoder_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023b4:	f7ff fa60 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_TIM3_Init+0xa0>)
 80023c6:	f002 fdfb 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023d0:	f7ff fa52 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200003cc 	.word	0x200003cc
 80023e0:	40000400 	.word	0x40000400

080023e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 f827 	bl	8007446 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <MX_TIM4_Init+0xa0>)
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <MX_TIM4_Init+0xa4>)
 8002404:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_TIM4_Init+0xa0>)
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MX_TIM4_Init+0xa0>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_TIM4_Init+0xa0>)
 8002414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002418:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_TIM4_Init+0xa0>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_TIM4_Init+0xa0>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002426:	2303      	movs	r3, #3
 8002428:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002436:	230a      	movs	r3, #10
 8002438:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243e:	2301      	movs	r3, #1
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002446:	230a      	movs	r3, #10
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <MX_TIM4_Init+0xa0>)
 8002452:	f001 feb7 	bl	80041c4 <HAL_TIM_Encoder_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800245c:	f7ff fa0c 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <MX_TIM4_Init+0xa0>)
 800246e:	f002 fda7 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002478:	f7ff f9fe 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	3730      	adds	r7, #48	; 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000414 	.word	0x20000414
 8002488:	40000800 	.word	0x40000800

0800248c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
 80024b8:	615a      	str	r2, [r3, #20]
 80024ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024be:	4a32      	ldr	r2, [pc, #200]	; (8002588 <MX_TIM5_Init+0xfc>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 29;
 80024c2:	4b30      	ldr	r3, [pc, #192]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024c4:	221d      	movs	r2, #29
 80024c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024ca:	2260      	movs	r2, #96	; 0x60
 80024cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024d0:	2263      	movs	r2, #99	; 0x63
 80024d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024e0:	4828      	ldr	r0, [pc, #160]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024e2:	f001 fc97 	bl	8003e14 <HAL_TIM_Base_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80024ec:	f7ff f9c4 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4821      	ldr	r0, [pc, #132]	; (8002584 <MX_TIM5_Init+0xf8>)
 80024fe:	f002 f95f 	bl	80047c0 <HAL_TIM_ConfigClockSource>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8002508:	f7ff f9b6 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800250c:	481d      	ldr	r0, [pc, #116]	; (8002584 <MX_TIM5_Init+0xf8>)
 800250e:	f001 fd41 	bl	8003f94 <HAL_TIM_PWM_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002518:	f7ff f9ae 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	4619      	mov	r1, r3
 800252a:	4816      	ldr	r0, [pc, #88]	; (8002584 <MX_TIM5_Init+0xf8>)
 800252c:	f002 fd48 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8002536:	f7ff f99f 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800253a:	2360      	movs	r3, #96	; 0x60
 800253c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2200      	movs	r2, #0
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM5_Init+0xf8>)
 8002552:	f002 f873 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800255c:	f7ff f98c 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2204      	movs	r2, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <MX_TIM5_Init+0xf8>)
 8002568:	f002 f868 	bl	800463c <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8002572:	f7ff f981 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <MX_TIM5_Init+0xf8>)
 8002578:	f000 f8e4 	bl	8002744 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000045c 	.word	0x2000045c
 8002588:	40000c00 	.word	0x40000c00

0800258c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_TIM_PWM_MspInit+0x40>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_TIM_PWM_MspInit+0x40>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_TIM_PWM_MspInit+0x40>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d116      	bne.n	8002610 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2101      	movs	r1, #1
 8002602:	201c      	movs	r0, #28
 8002604:	f000 fbab 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002608:	201c      	movs	r0, #28
 800260a:	f000 fbc4 	bl	8002d96 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800260e:	e012      	b.n	8002636 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x74>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10d      	bne.n	8002636 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_TIM_Base_MspInit+0x70>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40000c00 	.word	0x40000c00

08002648 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12c      	bne.n	80026c4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a30      	ldr	r2, [pc, #192]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_CH_1_Pin|ENCODER_2_CH_2_Pin;
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	481e      	ldr	r0, [pc, #120]	; (8002738 <HAL_TIM_Encoder_MspInit+0xf0>)
 80026be:	f000 fc17 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80026c2:	e031      	b.n	8002728 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_TIM_Encoder_MspInit+0xf4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d12c      	bne.n	8002728 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_TIM_Encoder_MspInit+0xec>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_CH_1_Pin|ENCODER_1_CH_2_Pin;
 8002706:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002718:	2302      	movs	r3, #2
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4619      	mov	r1, r3
 8002722:	4807      	ldr	r0, [pc, #28]	; (8002740 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002724:	f000 fbe4 	bl	8002ef0 <HAL_GPIO_Init>
}
 8002728:	bf00      	nop
 800272a:	3730      	adds	r7, #48	; 0x30
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40000400 	.word	0x40000400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000
 800273c:	40000800 	.word	0x40000800
 8002740:	40020c00 	.word	0x40020c00

08002744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_TIM_MspPostInit+0xb0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11f      	bne.n	80027a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_CH_3_Pin|PWM_MOTOR_1_CH_4_Pin;
 8002782:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002794:	2301      	movs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	4817      	ldr	r0, [pc, #92]	; (80027fc <HAL_TIM_MspPostInit+0xb8>)
 80027a0:	f000 fba6 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80027a4:	e022      	b.n	80027ec <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_TIM_MspPostInit+0xbc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d11d      	bne.n	80027ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6313      	str	r3, [r2, #48]	; 0x30
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_TIM_MspPostInit+0xb4>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTOR_2_CH1_Pin|PWM_MOTOR_2_CH_2_Pin;
 80027cc:	2303      	movs	r3, #3
 80027ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027dc:	2302      	movs	r3, #2
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	4807      	ldr	r0, [pc, #28]	; (8002804 <HAL_TIM_MspPostInit+0xc0>)
 80027e8:	f000 fb82 	bl	8002ef0 <HAL_GPIO_Init>
}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40000c00 	.word	0x40000c00
 8002804:	40020000 	.word	0x40020000

08002808 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART2_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002840:	f002 fca0 	bl	8005184 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f7ff f815 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200004a4 	.word	0x200004a4
 8002858:	40004400 	.word	0x40004400

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2c      	ldr	r2, [pc, #176]	; (800292c <HAL_UART_MspInit+0xd0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d151      	bne.n	8002922 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_UART_MspInit+0xd4>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_UART_MspInit+0xd4>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_UART_MspInit+0xd4>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_UART_MspInit+0xd4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028d2:	2304      	movs	r3, #4
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e2:	2307      	movs	r3, #7
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	4811      	ldr	r0, [pc, #68]	; (8002934 <HAL_UART_MspInit+0xd8>)
 80028ee:	f000 faff 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002902:	2307      	movs	r3, #7
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	480a      	ldr	r0, [pc, #40]	; (8002938 <HAL_UART_MspInit+0xdc>)
 800290e:	f000 faef 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2026      	movs	r0, #38	; 0x26
 8002918:	f000 fa21 	bl	8002d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291c:	2026      	movs	r0, #38	; 0x26
 800291e:	f000 fa3a 	bl	8002d96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40004400 	.word	0x40004400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020c00 	.word	0x40020c00

0800293c <ArrProcess>:
#include <stdint.h>



ArrData_t ArrProcess(char *arr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b090      	sub	sp, #64	; 0x40
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	6839      	ldr	r1, [r7, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fe1c 	bl	800758a <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8002952:	2005      	movs	r0, #5
 8002954:	f003 fc92 	bl	800627c <malloc>
 8002958:	4603      	mov	r3, r0
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 800295c:	2005      	movs	r0, #5
 800295e:	f003 fc8d 	bl	800627c <malloc>
 8002962:	4603      	mov	r3, r0
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 8002966:	2005      	movs	r0, #5
 8002968:	f003 fc88 	bl	800627c <malloc>
 800296c:	4603      	mov	r3, r0
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8002970:	2002      	movs	r0, #2
 8002972:	f003 fc83 	bl	800627c <malloc>
 8002976:	4603      	mov	r3, r0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 800297a:	2002      	movs	r0, #2
 800297c:	f003 fc7e 	bl	800627c <malloc>
 8002980:	4603      	mov	r3, r0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2204      	movs	r2, #4
 800298a:	4619      	mov	r1, r3
 800298c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800298e:	f004 fd62 	bl	8007456 <strncpy>
    pos1[4] = '\0';
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	3304      	adds	r3, #4
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	3305      	adds	r3, #5
 80029a0:	2204      	movs	r2, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029a6:	f004 fd56 	bl	8007456 <strncpy>
    vel1[4] = '\0';
 80029aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ac:	3304      	adds	r3, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	330a      	adds	r3, #10
 80029b8:	2204      	movs	r2, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029be:	f004 fd4a 	bl	8007456 <strncpy>
    acc1[4] = '\0';
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	3304      	adds	r3, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	330f      	adds	r3, #15
 80029d0:	2201      	movs	r2, #1
 80029d2:	4619      	mov	r1, r3
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f004 fd3e 	bl	8007456 <strncpy>
    dir1[1] = '\0';
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	3301      	adds	r3, #1
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	3311      	adds	r3, #17
 80029e8:	2201      	movs	r2, #1
 80029ea:	4619      	mov	r1, r3
 80029ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ee:	f004 fd32 	bl	8007456 <strncpy>
    dir2[1] = '\0';
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	3301      	adds	r3, #1
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 80029fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029fc:	f003 fc3a 	bl	8006274 <atoi>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 8002a06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a08:	f003 fc34 	bl	8006274 <atoi>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 8002a12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a14:	f003 fc2e 	bl	8006274 <atoi>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 8002a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a20:	f003 fc28 	bl	8006274 <atoi>
 8002a24:	4603      	mov	r3, r0
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 8002a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a2c:	f003 fc22 	bl	8006274 <atoi>
 8002a30:	4603      	mov	r3, r0
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 8002a36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a38:	f003 fc28 	bl	800628c <free>
    free(vel1);
 8002a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a3e:	f003 fc25 	bl	800628c <free>
    free(acc1);
 8002a42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a44:	f003 fc22 	bl	800628c <free>
    free(dir1);
 8002a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4a:	f003 fc1f 	bl	800628c <free>
    free(dir2);
 8002a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a50:	f003 fc1c 	bl	800628c <free>

    return data;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f107 0320 	add.w	r3, r7, #32
 8002a5c:	cb03      	ldmia	r3!, {r0, r1}
 8002a5e:	6010      	str	r0, [r2, #0]
 8002a60:	6051      	str	r1, [r2, #4]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	8113      	strh	r3, [r2, #8]
}
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	3740      	adds	r7, #64	; 0x40
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a9a:	f7ff fb61 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f004 fd4d 	bl	800753c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7fe fbbd 	bl	8001220 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ab4:	0800b110 	.word	0x0800b110
  ldr r2, =_sbss
 8002ab8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002abc:	20000638 	.word	0x20000638

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 f92b 	bl	8002d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fa06 	bl	8001f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f943 	bl	8002db2 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f000 f90b 	bl	8002d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000008 	.word	0x20000008
 8002b60:	20000010 	.word	0x20000010
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	200004e8 	.word	0x200004e8

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200004e8 	.word	0x200004e8

08002ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	; (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
         );
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d14:	d301      	bcc.n	8002d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00f      	b.n	8002d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <SysTick_Config+0x40>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d22:	210f      	movs	r1, #15
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f7ff ff8e 	bl	8002c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SysTick_Config+0x40>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <SysTick_Config+0x40>)
 8002d34:	2207      	movs	r2, #7
 8002d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	e000e010 	.word	0xe000e010

08002d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff29 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d70:	f7ff ff3e 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f7ff ff8e 	bl	8002c9c <NVIC_EncodePriority>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5d 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff31 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ffa2 	bl	8002d04 <SysTick_Config>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff feda 	bl	8002b90 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d008      	beq.n	8002dfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e052      	b.n	8002ea2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0216 	bic.w	r2, r2, #22
 8002e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <HAL_DMA_Abort+0x62>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0208 	bic.w	r2, r2, #8
 8002e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4c:	e013      	b.n	8002e76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4e:	f7ff fe9f 	bl	8002b90 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d90c      	bls.n	8002e76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e015      	b.n	8002ea2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e4      	bne.n	8002e4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	223f      	movs	r2, #63	; 0x3f
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00c      	b.n	8002ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e16b      	b.n	80031e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 815a 	bne.w	80031de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b4 	beq.w	80031de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_GPIO_Init+0x30c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <HAL_GPIO_Init+0x310>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <HAL_GPIO_Init+0x324>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_GPIO_Init+0x328>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x20a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x310>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a32      	ldr	r2, [pc, #200]	; (8003224 <HAL_GPIO_Init+0x334>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x334>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae90 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e12b      	b.n	80034c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd ff84 	bl	8001190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c0:	f000 fd80 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80032c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a81      	ldr	r2, [pc, #516]	; (80034d0 <HAL_I2C_Init+0x274>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d807      	bhi.n	80032e0 <HAL_I2C_Init+0x84>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a80      	ldr	r2, [pc, #512]	; (80034d4 <HAL_I2C_Init+0x278>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e006      	b.n	80032ee <HAL_I2C_Init+0x92>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a7d      	ldr	r2, [pc, #500]	; (80034d8 <HAL_I2C_Init+0x27c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bf94      	ite	ls
 80032e8:	2301      	movls	r3, #1
 80032ea:	2300      	movhi	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0e7      	b.n	80034c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a78      	ldr	r2, [pc, #480]	; (80034dc <HAL_I2C_Init+0x280>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0c9b      	lsrs	r3, r3, #18
 8003300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_I2C_Init+0x274>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d802      	bhi.n	8003330 <HAL_I2C_Init+0xd4>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3301      	adds	r3, #1
 800332e:	e009      	b.n	8003344 <HAL_I2C_Init+0xe8>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_I2C_Init+0x284>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	3301      	adds	r3, #1
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	495c      	ldr	r1, [pc, #368]	; (80034d0 <HAL_I2C_Init+0x274>)
 8003360:	428b      	cmp	r3, r1
 8003362:	d819      	bhi.n	8003398 <HAL_I2C_Init+0x13c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e59      	subs	r1, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003378:	400b      	ands	r3, r1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_I2C_Init+0x138>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e59      	subs	r1, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fbb1 f3f3 	udiv	r3, r1, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	e051      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003394:	2304      	movs	r3, #4
 8003396:	e04f      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <HAL_I2C_Init+0x168>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e58      	subs	r0, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	440b      	add	r3, r1
 80033ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e012      	b.n	80033ea <HAL_I2C_Init+0x18e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e58      	subs	r0, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	0099      	lsls	r1, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Init+0x196>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <HAL_I2C_Init+0x1bc>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e58      	subs	r0, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	440b      	add	r3, r1
 8003408:	fbb0 f3f3 	udiv	r3, r0, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	e00f      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0099      	lsls	r1, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	6809      	ldr	r1, [r1, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6911      	ldr	r1, [r2, #16]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	000186a0 	.word	0x000186a0
 80034d4:	001e847f 	.word	0x001e847f
 80034d8:	003d08ff 	.word	0x003d08ff
 80034dc:	431bde83 	.word	0x431bde83
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e267      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b85      	ldr	r3, [pc, #532]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b82      	ldr	r3, [pc, #520]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b7e      	ldr	r3, [pc, #504]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e242      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b70      	ldr	r3, [pc, #448]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6f      	ldr	r2, [pc, #444]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6c      	ldr	r2, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b69      	ldr	r3, [pc, #420]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a68      	ldr	r2, [pc, #416]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a65      	ldr	r2, [pc, #404]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7ff faf8 	bl	8002b90 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7ff faf4 	bl	8002b90 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e207      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b5b      	ldr	r3, [pc, #364]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7ff fae4 	bl	8002b90 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7ff fae0 	bl	8002b90 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f3      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b51      	ldr	r3, [pc, #324]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b44      	ldr	r3, [pc, #272]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c7      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4937      	ldr	r1, [pc, #220]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <HAL_RCC_OscConfig+0x244>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7ff fa99 	bl	8002b90 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7ff fa95 	bl	8002b90 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a8      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4925      	ldr	r1, [pc, #148]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x244>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7ff fa78 	bl	8002b90 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7ff fa74 	bl	8002b90 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e187      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d036      	beq.n	800373c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCC_OscConfig+0x248>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7ff fa58 	bl	8002b90 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e4:	f7ff fa54 	bl	8002b90 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e167      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x240>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e01b      	b.n	800373c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_OscConfig+0x248>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7ff fa41 	bl	8002b90 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e00e      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7ff fa3d 	bl	8002b90 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e150      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003724:	40023800 	.word	0x40023800
 8003728:	42470000 	.word	0x42470000
 800372c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b88      	ldr	r3, [pc, #544]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8097 	beq.w	8003878 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b7d      	ldr	r3, [pc, #500]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a7c      	ldr	r2, [pc, #496]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b7a      	ldr	r3, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b77      	ldr	r3, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x474>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b74      	ldr	r3, [pc, #464]	; (8003958 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a73      	ldr	r2, [pc, #460]	; (8003958 <HAL_RCC_OscConfig+0x474>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7ff f9fd 	bl	8002b90 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7ff f9f9 	bl	8002b90 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e10c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <HAL_RCC_OscConfig+0x474>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <HAL_RCC_OscConfig+0x2ea>
 80037c0:	4b64      	ldr	r3, [pc, #400]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	e01c      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x30c>
 80037d6:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a5e      	ldr	r2, [pc, #376]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a5b      	ldr	r2, [pc, #364]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0x324>
 80037f0:	4b58      	ldr	r3, [pc, #352]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	4a57      	ldr	r2, [pc, #348]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	; 0x70
 80037fc:	4b55      	ldr	r3, [pc, #340]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0304 	bic.w	r3, r3, #4
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7ff f9be 	bl	8002b90 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7ff f9ba 	bl	8002b90 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0cb      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0ee      	beq.n	8003818 <HAL_RCC_OscConfig+0x334>
 800383a:	e014      	b.n	8003866 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383c:	f7ff f9a8 	bl	8002b90 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7ff f9a4 	bl	8002b90 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0b5      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ee      	bne.n	8003844 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	4a38      	ldr	r2, [pc, #224]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a1 	beq.w	80039c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003882:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d05c      	beq.n	8003948 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d141      	bne.n	800391a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCC_OscConfig+0x478>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7ff f978 	bl	8002b90 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a4:	f7ff f974 	bl	8002b90 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e087      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	3b01      	subs	r3, #1
 80038dc:	041b      	lsls	r3, r3, #16
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	491b      	ldr	r1, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <HAL_RCC_OscConfig+0x478>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7ff f94d 	bl	8002b90 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7ff f949 	bl	8002b90 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e05c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x416>
 8003918:	e054      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_RCC_OscConfig+0x478>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f936 	bl	8002b90 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7ff f932 	bl	8002b90 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e045      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_OscConfig+0x470>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x444>
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e038      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000
 800395c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d028      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d121      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d11a      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003998:	4293      	cmp	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	3b01      	subs	r3, #1
 80039aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7ff f864 	bl	8002b90 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7ff f860 	bl	8002b90 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ffc4 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0800acbc 	.word	0x0800acbc
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b094      	sub	sp, #80	; 0x50
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bac:	2300      	movs	r3, #0
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80e1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0db      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b73      	ldr	r3, [pc, #460]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bd8:	e0db      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e0d8      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	1a51      	subs	r1, r2, r1
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	4629      	mov	r1, r5
 8003c32:	eb63 0301 	sbc.w	r3, r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4e:	4651      	mov	r1, sl
 8003c50:	018a      	lsls	r2, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ebb2 0801 	subs.w	r8, r2, r1
 8003c58:	4659      	mov	r1, fp
 8003c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	eb49 0303 	adc.w	r3, r9, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c92:	4629      	mov	r1, r5
 8003c94:	024b      	lsls	r3, r1, #9
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	024a      	lsls	r2, r1, #9
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb0:	f7fc fffa 	bl	8000ca8 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d10:	ebb2 040a 	subs.w	r4, r2, sl
 8003d14:	eb63 050b 	sbc.w	r5, r3, fp
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	f7fc ffa0 	bl	8000ca8 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3750      	adds	r7, #80	; 0x50
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000008 	.word	0x20000008

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0800accc 	.word	0x0800accc

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0800accc 	.word	0x0800accc

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fbc8 	bl	80025d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fda4 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04e      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d01d      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d010      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	e007      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40001800 	.word	0x40001800

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e041      	b.n	800402a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe fae6 	bl	800258c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fce4 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_TIM_PWM_Start+0x24>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e022      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d109      	bne.n	8004072 <HAL_TIM_PWM_Start+0x3e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	e015      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d109      	bne.n	800408c <HAL_TIM_PWM_Start+0x58>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e008      	b.n	800409e <HAL_TIM_PWM_Start+0x6a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07c      	b.n	80041a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x82>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	e013      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_PWM_Start+0x92>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	e00b      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_PWM_Start+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	e003      	b.n	80040de <HAL_TIM_PWM_Start+0xaa>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff44 	bl	8004f74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <HAL_TIM_PWM_Start+0x174>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_PWM_Start+0xcc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2c      	ldr	r2, [pc, #176]	; (80041ac <HAL_TIM_PWM_Start+0x178>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_PWM_Start+0xd0>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_TIM_PWM_Start+0xd2>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <HAL_TIM_PWM_Start+0x174>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d01d      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1f      	ldr	r2, [pc, #124]	; (80041b0 <HAL_TIM_PWM_Start+0x17c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_TIM_PWM_Start+0x180>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_TIM_PWM_Start+0x184>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <HAL_TIM_PWM_Start+0x178>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_TIM_PWM_Start+0x188>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIM_PWM_Start+0x136>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_TIM_PWM_Start+0x18c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d010      	beq.n	800419e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e007      	b.n	800419e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40010400 	.word	0x40010400
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40001800 	.word	0x40001800

080041c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e097      	b.n	8004308 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fe fa2b 	bl	8002648 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004208:	f023 0307 	bic.w	r3, r3, #7
 800420c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4610      	mov	r0, r2
 800421a:	f000 fbc1 	bl	80049a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	4313      	orrs	r3, r2
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004264:	f023 030c 	bic.w	r3, r3, #12
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	4313      	orrs	r3, r2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	011a      	lsls	r2, r3, #4
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	031b      	lsls	r3, r3, #12
 8004294:	4313      	orrs	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4313      	orrs	r3, r2
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004320:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004328:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004330:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004338:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d110      	bne.n	8004362 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d102      	bne.n	800434c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004346:	7b7b      	ldrb	r3, [r7, #13]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d001      	beq.n	8004350 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e069      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	e031      	b.n	80043c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d110      	bne.n	800438a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800436e:	7b3b      	ldrb	r3, [r7, #12]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e055      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004388:	e01d      	b.n	80043c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004390:	7bbb      	ldrb	r3, [r7, #14]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439c:	7b3b      	ldrb	r3, [r7, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e03e      	b.n	8004424 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_TIM_Encoder_Start+0xc4>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d008      	beq.n	80043e4 <HAL_TIM_Encoder_Start+0xd4>
 80043d2:	e00f      	b.n	80043f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fdc9 	bl	8004f74 <TIM_CCxChannelCmd>
      break;
 80043e2:	e016      	b.n	8004412 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	2104      	movs	r1, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fdc1 	bl	8004f74 <TIM_CCxChannelCmd>
      break;
 80043f2:	e00e      	b.n	8004412 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fdb9 	bl	8004f74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	2104      	movs	r1, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fdb2 	bl	8004f74 <TIM_CCxChannelCmd>
      break;
 8004410:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d122      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b02      	cmp	r3, #2
 800444e:	d11b      	bne.n	8004488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa77 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa69 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa7a 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa4d 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa3f 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa50 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0208 	mvn.w	r2, #8
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2204      	movs	r2, #4
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa23 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fa15 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa26 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9f9 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9eb 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9fc 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc ff92 	bl	80014d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fdca 	bl	8005170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9c1 	bl	800498a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0220 	mvn.w	r2, #32
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fd94 	bl	800515c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004656:	2302      	movs	r3, #2
 8004658:	e0ae      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	f200 809f 	bhi.w	80047a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080047a9 	.word	0x080047a9
 8004678:	080047a9 	.word	0x080047a9
 800467c:	080047a9 	.word	0x080047a9
 8004680:	080046e5 	.word	0x080046e5
 8004684:	080047a9 	.word	0x080047a9
 8004688:	080047a9 	.word	0x080047a9
 800468c:	080047a9 	.word	0x080047a9
 8004690:	08004727 	.word	0x08004727
 8004694:	080047a9 	.word	0x080047a9
 8004698:	080047a9 	.word	0x080047a9
 800469c:	080047a9 	.word	0x080047a9
 80046a0:	08004767 	.word	0x08004767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fa18 	bl	8004ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	619a      	str	r2, [r3, #24]
      break;
 80046e2:	e064      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fa68 	bl	8004bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]
      break;
 8004724:	e043      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fabd 	bl	8004cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0208 	orr.w	r2, r2, #8
 8004740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0204 	bic.w	r2, r2, #4
 8004750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
      break;
 8004764:	e023      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fb11 	bl	8004d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	021a      	lsls	r2, r3, #8
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	61da      	str	r2, [r3, #28]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75fb      	strb	r3, [r7, #23]
      break;
 80047ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_ConfigClockSource+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e0b4      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x186>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d03e      	beq.n	8004894 <HAL_TIM_ConfigClockSource+0xd4>
 8004816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481a:	f200 8087 	bhi.w	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	f000 8086 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x172>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d87f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b70      	cmp	r3, #112	; 0x70
 800482e:	d01a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0xa6>
 8004830:	2b70      	cmp	r3, #112	; 0x70
 8004832:	d87b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b60      	cmp	r3, #96	; 0x60
 8004836:	d050      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x11a>
 8004838:	2b60      	cmp	r3, #96	; 0x60
 800483a:	d877      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d03c      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xfa>
 8004840:	2b50      	cmp	r3, #80	; 0x50
 8004842:	d873      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d058      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x13a>
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d86f      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d064      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004850:	2b30      	cmp	r3, #48	; 0x30
 8004852:	d86b      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b20      	cmp	r3, #32
 8004856:	d060      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b20      	cmp	r3, #32
 800485a:	d867      	bhi.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05c      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b10      	cmp	r3, #16
 8004862:	d05a      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	e062      	b.n	800492c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f000 fb5d 	bl	8004f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	609a      	str	r2, [r3, #8]
      break;
 8004892:	e04f      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6899      	ldr	r1, [r3, #8]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f000 fb46 	bl	8004f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b6:	609a      	str	r2, [r3, #8]
      break;
 80048b8:	e03c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 faba 	bl	8004e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2150      	movs	r1, #80	; 0x50
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fb13 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 80048d8:	e02c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 fad9 	bl	8004e9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2160      	movs	r1, #96	; 0x60
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fb03 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 80048f8:	e01c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 fa9a 	bl	8004e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	4618      	mov	r0, r3
 8004914:	f000 faf3 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004918:	e00c      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f000 faea 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 800492a:	e003      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      break;
 8004930:	e000      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d013      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3d      	ldr	r2, [pc, #244]	; (8004ab8 <TIM_Base_SetConfig+0x118>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3c      	ldr	r2, [pc, #240]	; (8004abc <TIM_Base_SetConfig+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3b      	ldr	r2, [pc, #236]	; (8004ac0 <TIM_Base_SetConfig+0x120>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d108      	bne.n	80049f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d027      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <TIM_Base_SetConfig+0x118>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d023      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	; (8004abc <TIM_Base_SetConfig+0x11c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01f      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <TIM_Base_SetConfig+0x120>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d017      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <TIM_Base_SetConfig+0x128>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a27      	ldr	r2, [pc, #156]	; (8004acc <TIM_Base_SetConfig+0x12c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <TIM_Base_SetConfig+0x130>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a25      	ldr	r2, [pc, #148]	; (8004ad4 <TIM_Base_SetConfig+0x134>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <TIM_Base_SetConfig+0x138>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a23      	ldr	r2, [pc, #140]	; (8004adc <TIM_Base_SetConfig+0x13c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0xf8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800
 8004ad4:	40001800 	.word	0x40001800
 8004ad8:	40001c00 	.word	0x40001c00
 8004adc:	40002000 	.word	0x40002000

08004ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f023 0302 	bic.w	r3, r3, #2
 8004b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <TIM_OC1_SetConfig+0xd8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_OC1_SetConfig+0x64>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <TIM_OC1_SetConfig+0xdc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d10c      	bne.n	8004b5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0308 	bic.w	r3, r3, #8
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 0304 	bic.w	r3, r3, #4
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC1_SetConfig+0xd8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC1_SetConfig+0x8e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <TIM_OC1_SetConfig+0xdc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d111      	bne.n	8004b92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	621a      	str	r2, [r3, #32]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0210 	bic.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0320 	bic.w	r3, r3, #32
 8004c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <TIM_OC2_SetConfig+0xe4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC2_SetConfig+0x68>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <TIM_OC2_SetConfig+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10d      	bne.n	8004c44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <TIM_OC2_SetConfig+0xe4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC2_SetConfig+0x94>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <TIM_OC2_SetConfig+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d113      	bne.n	8004c7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40010400 	.word	0x40010400

08004cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <TIM_OC3_SetConfig+0xe0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_OC3_SetConfig+0x66>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <TIM_OC3_SetConfig+0xe4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d10d      	bne.n	8004d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <TIM_OC3_SetConfig+0xe0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_OC3_SetConfig+0x92>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <TIM_OC3_SetConfig+0xe4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d113      	bne.n	8004d66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40010400 	.word	0x40010400

08004d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	031b      	lsls	r3, r3, #12
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <TIM_OC4_SetConfig+0xa4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC4_SetConfig+0x68>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <TIM_OC4_SetConfig+0xa8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d109      	bne.n	8004e10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 030a 	bic.w	r3, r3, #10
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0210 	bic.w	r2, r3, #16
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f043 0307 	orr.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	021a      	lsls	r2, r3, #8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2201      	movs	r2, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	401a      	ands	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fac:	431a      	orrs	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e05a      	b.n	800508e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d01d      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4313      	orrs	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800

080050b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e03d      	b.n	8005150 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e03f      	b.n	8005216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fd fb56 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fddf 	bl	8005d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	; 0x28
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d17c      	bne.n	8005338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UART_Transmit+0x2c>
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e075      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Transmit+0x3e>
 8005258:	2302      	movs	r3, #2
 800525a:	e06e      	b.n	800533a <HAL_UART_Transmit+0x11c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fd fc8d 	bl	8002b90 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052b0:	e02a      	b.n	8005308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fb1f 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e036      	b.n	800533a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3302      	adds	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e007      	b.n	80052fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cf      	bne.n	80052b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 faef 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b20      	cmp	r3, #32
 800535a:	d11d      	bne.n	8005398 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_UART_Receive_IT+0x26>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e016      	b.n	800539a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Receive_IT+0x38>
 8005376:	2302      	movs	r3, #2
 8005378:	e00f      	b.n	800539a <HAL_UART_Receive_IT+0x58>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	461a      	mov	r2, r3
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb24 	bl	80059dc <UART_Start_Receive_IT>
 8005394:	4603      	mov	r3, r0
 8005396:	e000      	b.n	800539a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b0ba      	sub	sp, #232	; 0xe8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_UART_IRQHandler+0x66>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fc07 	bl	8005c16 <UART_Receive_IT>
      return;
 8005408:	e256      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80de 	beq.w	80055d0 <HAL_UART_IRQHandler+0x22c>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80d1 	beq.w	80055d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HAL_UART_IRQHandler+0xae>
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d005      	beq.n	8005452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xd2>
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xf6>
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d011      	beq.n	80054ca <HAL_UART_IRQHandler+0x126>
 80054a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0208 	orr.w	r2, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 81ed 	beq.w	80058ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_UART_IRQHandler+0x14e>
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fb92 	bl	8005c16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <HAL_UART_IRQHandler+0x17a>
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04f      	beq.n	80055be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa9a 	bl	8005a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d141      	bne.n	80055b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3314      	adds	r3, #20
 800555a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800555e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800556a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1d9      	bne.n	8005532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	4a7d      	ldr	r2, [pc, #500]	; (8005780 <HAL_UART_IRQHandler+0x3dc>)
 800558c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	4618      	mov	r0, r3
 8005594:	f7fd fc89 	bl	8002eaa <HAL_DMA_Abort_IT>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	e00e      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f990 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	e00a      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f98c 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	e006      	b.n	80055cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f988 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055ca:	e170      	b.n	80058ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	bf00      	nop
    return;
 80055ce:	e16e      	b.n	80058ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 814a 	bne.w	800586e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8143 	beq.w	800586e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 813c 	beq.w	800586e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	f040 80b4 	bne.w	8005784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8140 	beq.w	80058b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800563a:	429a      	cmp	r2, r3
 800563c:	f080 8139 	bcs.w	80058b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005652:	f000 8088 	beq.w	8005766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800566c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800569a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1d9      	bne.n	8005656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3314      	adds	r3, #20
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e1      	bne.n	80056a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005748:	65ba      	str	r2, [r7, #88]	; 0x58
 800574a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	4618      	mov	r0, r3
 8005762:	f7fd fb32 	bl	8002dca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576e:	b29b      	uxth	r3, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	b29b      	uxth	r3, r3
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f8b6 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577c:	e099      	b.n	80058b2 <HAL_UART_IRQHandler+0x50e>
 800577e:	bf00      	nop
 8005780:	08005b1f 	.word	0x08005b1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 808b 	beq.w	80058b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ce:	647a      	str	r2, [r7, #68]	; 0x44
 80057d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	623b      	str	r3, [r7, #32]
   return(result);
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005806:	633a      	str	r2, [r7, #48]	; 0x30
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60fb      	str	r3, [r7, #12]
   return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	617b      	str	r3, [r7, #20]
   return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f83e 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800586c:	e023      	b.n	80058b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_UART_IRQHandler+0x4ea>
 800587a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f95d 	bl	8005b46 <UART_Transmit_IT>
    return;
 800588c:	e014      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00e      	beq.n	80058b8 <HAL_UART_IRQHandler+0x514>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f99d 	bl	8005be6 <UART_EndTransmit_IT>
    return;
 80058ac:	e004      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
    return;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
      return;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <HAL_UART_IRQHandler+0x514>
      return;
 80058b6:	bf00      	nop
  }
}
 80058b8:	37e8      	adds	r7, #232	; 0xe8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop

080058c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b090      	sub	sp, #64	; 0x40
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e050      	b.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d04c      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800591a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
 8005920:	f7fd f936 	bl	8002b90 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592c:	429a      	cmp	r2, r3
 800592e:	d241      	bcs.n	80059b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005950:	637a      	str	r2, [r7, #52]	; 0x34
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	613b      	str	r3, [r7, #16]
   return(result);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005984:	623a      	str	r2, [r7, #32]
 8005986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69f9      	ldr	r1, [r7, #28]
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	61bb      	str	r3, [r7, #24]
   return(result);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e00f      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d09f      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3740      	adds	r7, #64	; 0x40
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2222      	movs	r2, #34	; 0x22
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0220 	orr.w	r2, r2, #32
 8005a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b095      	sub	sp, #84	; 0x54
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a80:	643a      	str	r2, [r7, #64]	; 0x40
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e5      	bne.n	8005a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d119      	bne.n	8005b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0310 	bic.w	r3, r3, #16
 8005ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af0:	61ba      	str	r2, [r7, #24]
 8005af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6979      	ldr	r1, [r7, #20]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	613b      	str	r3, [r7, #16]
   return(result);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b12:	bf00      	nop
 8005b14:	3754      	adds	r7, #84	; 0x54
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fecb 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b085      	sub	sp, #20
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b21      	cmp	r3, #33	; 0x21
 8005b58:	d13e      	bne.n	8005bd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b62:	d114      	bne.n	8005b8e <UART_Transmit_IT+0x48>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]
 8005b8c:	e008      	b.n	8005ba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6211      	str	r1, [r2, #32]
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4619      	mov	r1, r3
 8005bae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10f      	bne.n	8005bd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fe5a 	bl	80058c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b08c      	sub	sp, #48	; 0x30
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b22      	cmp	r3, #34	; 0x22
 8005c28:	f040 80ab 	bne.w	8005d82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c34:	d117      	bne.n	8005c66 <UART_Receive_IT+0x50>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d113      	bne.n	8005c66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	1c9a      	adds	r2, r3, #2
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
 8005c64:	e026      	b.n	8005cb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c78:	d007      	beq.n	8005c8a <UART_Receive_IT+0x74>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <UART_Receive_IT+0x82>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e008      	b.n	8005caa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d15a      	bne.n	8005d7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0220 	bic.w	r2, r2, #32
 8005cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d135      	bne.n	8005d74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	623a      	str	r2, [r7, #32]
 8005d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	69f9      	ldr	r1, [r7, #28]
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e5      	bne.n	8005d0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0310 	and.w	r3, r3, #16
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d10a      	bne.n	8005d66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fdbb 	bl	80058e8 <HAL_UARTEx_RxEventCallback>
 8005d72:	e002      	b.n	8005d7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7fb fb05 	bl	8001384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e002      	b.n	8005d84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3730      	adds	r7, #48	; 0x30
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b0c0      	sub	sp, #256	; 0x100
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	68d9      	ldr	r1, [r3, #12]
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	ea40 0301 	orr.w	r3, r0, r1
 8005db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de4:	f021 010c 	bic.w	r1, r1, #12
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005df2:	430b      	orrs	r3, r1
 8005df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	ea40 0301 	orr.w	r3, r0, r1
 8005e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b8f      	ldr	r3, [pc, #572]	; (8006058 <UART_SetConfig+0x2cc>)
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d005      	beq.n	8005e2c <UART_SetConfig+0xa0>
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b8d      	ldr	r3, [pc, #564]	; (800605c <UART_SetConfig+0x2d0>)
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d104      	bne.n	8005e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fd ffde 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e34:	e003      	b.n	8005e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e36:	f7fd ffc5 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e48:	f040 810c 	bne.w	8006064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e66:	415b      	adcs	r3, r3
 8005e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e6e:	4621      	mov	r1, r4
 8005e70:	eb12 0801 	adds.w	r8, r2, r1
 8005e74:	4629      	mov	r1, r5
 8005e76:	eb43 0901 	adc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eba:	460b      	mov	r3, r1
 8005ebc:	18db      	adds	r3, r3, r3
 8005ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	eb42 0303 	adc.w	r3, r2, r3
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ed0:	f7fa feea 	bl	8000ca8 <__aeabi_uldivmod>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4b61      	ldr	r3, [pc, #388]	; (8006060 <UART_SetConfig+0x2d4>)
 8005eda:	fba3 2302 	umull	r2, r3, r3, r2
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	011c      	lsls	r4, r3, #4
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	1891      	adds	r1, r2, r2
 8005efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005efc:	415b      	adcs	r3, r3
 8005efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f04:	4641      	mov	r1, r8
 8005f06:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f24:	4692      	mov	sl, r2
 8005f26:	469b      	mov	fp, r3
 8005f28:	4643      	mov	r3, r8
 8005f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f32:	464b      	mov	r3, r9
 8005f34:	eb4b 0303 	adc.w	r3, fp, r3
 8005f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f50:	460b      	mov	r3, r1
 8005f52:	18db      	adds	r3, r3, r3
 8005f54:	643b      	str	r3, [r7, #64]	; 0x40
 8005f56:	4613      	mov	r3, r2
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f66:	f7fa fe9f 	bl	8000ca8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <UART_SetConfig+0x2d4>)
 8005f72:	fba3 2301 	umull	r2, r3, r3, r1
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	2264      	movs	r2, #100	; 0x64
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f86:	4b36      	ldr	r3, [pc, #216]	; (8006060 <UART_SetConfig+0x2d4>)
 8005f88:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f94:	441c      	add	r4, r3
 8005f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fb8:	4641      	mov	r1, r8
 8005fba:	1851      	adds	r1, r2, r1
 8005fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	414b      	adcs	r3, r1
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	00cb      	lsls	r3, r1, #3
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fda:	4651      	mov	r1, sl
 8005fdc:	00ca      	lsls	r2, r1, #3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fec:	464b      	mov	r3, r9
 8005fee:	460a      	mov	r2, r1
 8005ff0:	eb42 0303 	adc.w	r3, r2, r3
 8005ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800601e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006022:	f7fa fe41 	bl	8000ca8 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <UART_SetConfig+0x2d4>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	2164      	movs	r1, #100	; 0x64
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	3332      	adds	r3, #50	; 0x32
 800603e:	4a08      	ldr	r2, [pc, #32]	; (8006060 <UART_SetConfig+0x2d4>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f003 0207 	and.w	r2, r3, #7
 800604a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4422      	add	r2, r4
 8006052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006054:	e106      	b.n	8006264 <UART_SetConfig+0x4d8>
 8006056:	bf00      	nop
 8006058:	40011000 	.word	0x40011000
 800605c:	40011400 	.word	0x40011400
 8006060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006068:	2200      	movs	r2, #0
 800606a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800606e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	1891      	adds	r1, r2, r2
 800607c:	6239      	str	r1, [r7, #32]
 800607e:	415b      	adcs	r3, r3
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006086:	4641      	mov	r1, r8
 8006088:	1854      	adds	r4, r2, r1
 800608a:	4649      	mov	r1, r9
 800608c:	eb43 0501 	adc.w	r5, r3, r1
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	00eb      	lsls	r3, r5, #3
 800609a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609e:	00e2      	lsls	r2, r4, #3
 80060a0:	4614      	mov	r4, r2
 80060a2:	461d      	mov	r5, r3
 80060a4:	4643      	mov	r3, r8
 80060a6:	18e3      	adds	r3, r4, r3
 80060a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ac:	464b      	mov	r3, r9
 80060ae:	eb45 0303 	adc.w	r3, r5, r3
 80060b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060d2:	4629      	mov	r1, r5
 80060d4:	008b      	lsls	r3, r1, #2
 80060d6:	4621      	mov	r1, r4
 80060d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060dc:	4621      	mov	r1, r4
 80060de:	008a      	lsls	r2, r1, #2
 80060e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060e4:	f7fa fde0 	bl	8000ca8 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b60      	ldr	r3, [pc, #384]	; (8006270 <UART_SetConfig+0x4e4>)
 80060ee:	fba3 2302 	umull	r2, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	011c      	lsls	r4, r3, #4
 80060f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	1891      	adds	r1, r2, r2
 800610e:	61b9      	str	r1, [r7, #24]
 8006110:	415b      	adcs	r3, r3
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006118:	4641      	mov	r1, r8
 800611a:	1851      	adds	r1, r2, r1
 800611c:	6139      	str	r1, [r7, #16]
 800611e:	4649      	mov	r1, r9
 8006120:	414b      	adcs	r3, r1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006130:	4659      	mov	r1, fp
 8006132:	00cb      	lsls	r3, r1, #3
 8006134:	4651      	mov	r1, sl
 8006136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613a:	4651      	mov	r1, sl
 800613c:	00ca      	lsls	r2, r1, #3
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	4603      	mov	r3, r0
 8006144:	4642      	mov	r2, r8
 8006146:	189b      	adds	r3, r3, r2
 8006148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800614c:	464b      	mov	r3, r9
 800614e:	460a      	mov	r2, r1
 8006150:	eb42 0303 	adc.w	r3, r2, r3
 8006154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	67bb      	str	r3, [r7, #120]	; 0x78
 8006162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006170:	4649      	mov	r1, r9
 8006172:	008b      	lsls	r3, r1, #2
 8006174:	4641      	mov	r1, r8
 8006176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617a:	4641      	mov	r1, r8
 800617c:	008a      	lsls	r2, r1, #2
 800617e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006182:	f7fa fd91 	bl	8000ca8 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b38      	ldr	r3, [pc, #224]	; (8006270 <UART_SetConfig+0x4e4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	; 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a33      	ldr	r2, [pc, #204]	; (8006270 <UART_SetConfig+0x4e4>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ac:	441c      	add	r4, r3
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b2:	2200      	movs	r2, #0
 80061b4:	673b      	str	r3, [r7, #112]	; 0x70
 80061b6:	677a      	str	r2, [r7, #116]	; 0x74
 80061b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	1891      	adds	r1, r2, r2
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	415b      	adcs	r3, r3
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061cc:	4641      	mov	r1, r8
 80061ce:	1851      	adds	r1, r2, r1
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	4649      	mov	r1, r9
 80061d4:	414b      	adcs	r3, r1
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e4:	4659      	mov	r1, fp
 80061e6:	00cb      	lsls	r3, r1, #3
 80061e8:	4651      	mov	r1, sl
 80061ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ee:	4651      	mov	r1, sl
 80061f0:	00ca      	lsls	r2, r1, #3
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	4603      	mov	r3, r0
 80061f8:	4642      	mov	r2, r8
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80061fe:	464b      	mov	r3, r9
 8006200:	460a      	mov	r2, r1
 8006202:	eb42 0303 	adc.w	r3, r2, r3
 8006206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	663b      	str	r3, [r7, #96]	; 0x60
 8006212:	667a      	str	r2, [r7, #100]	; 0x64
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006220:	4649      	mov	r1, r9
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	4641      	mov	r1, r8
 8006226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622a:	4641      	mov	r1, r8
 800622c:	008a      	lsls	r2, r1, #2
 800622e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006232:	f7fa fd39 	bl	8000ca8 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <UART_SetConfig+0x4e4>)
 800623c:	fba3 1302 	umull	r1, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	2164      	movs	r1, #100	; 0x64
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	3332      	adds	r3, #50	; 0x32
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <UART_SetConfig+0x4e4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4422      	add	r2, r4
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800626a:	46bd      	mov	sp, r7
 800626c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006270:	51eb851f 	.word	0x51eb851f

08006274 <atoi>:
 8006274:	220a      	movs	r2, #10
 8006276:	2100      	movs	r1, #0
 8006278:	f000 b940 	b.w	80064fc <strtol>

0800627c <malloc>:
 800627c:	4b02      	ldr	r3, [pc, #8]	; (8006288 <malloc+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 b82b 	b.w	80062dc <_malloc_r>
 8006286:	bf00      	nop
 8006288:	2000006c 	.word	0x2000006c

0800628c <free>:
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <free+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f002 b803 	b.w	800829c <_free_r>
 8006296:	bf00      	nop
 8006298:	2000006c 	.word	0x2000006c

0800629c <sbrk_aligned>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	4e0e      	ldr	r6, [pc, #56]	; (80062d8 <sbrk_aligned+0x3c>)
 80062a0:	460c      	mov	r4, r1
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	4605      	mov	r5, r0
 80062a6:	b911      	cbnz	r1, 80062ae <sbrk_aligned+0x12>
 80062a8:	f001 f920 	bl	80074ec <_sbrk_r>
 80062ac:	6030      	str	r0, [r6, #0]
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f001 f91b 	bl	80074ec <_sbrk_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	d00a      	beq.n	80062d0 <sbrk_aligned+0x34>
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d007      	beq.n	80062d4 <sbrk_aligned+0x38>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4628      	mov	r0, r5
 80062c8:	f001 f910 	bl	80074ec <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d101      	bne.n	80062d4 <sbrk_aligned+0x38>
 80062d0:	f04f 34ff 	mov.w	r4, #4294967295
 80062d4:	4620      	mov	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	200004f0 	.word	0x200004f0

080062dc <_malloc_r>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	1ccd      	adds	r5, r1, #3
 80062e2:	f025 0503 	bic.w	r5, r5, #3
 80062e6:	3508      	adds	r5, #8
 80062e8:	2d0c      	cmp	r5, #12
 80062ea:	bf38      	it	cc
 80062ec:	250c      	movcc	r5, #12
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	4607      	mov	r7, r0
 80062f2:	db01      	blt.n	80062f8 <_malloc_r+0x1c>
 80062f4:	42a9      	cmp	r1, r5
 80062f6:	d905      	bls.n	8006304 <_malloc_r+0x28>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	2600      	movs	r6, #0
 80062fe:	4630      	mov	r0, r6
 8006300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063d8 <_malloc_r+0xfc>
 8006308:	f000 f868 	bl	80063dc <__malloc_lock>
 800630c:	f8d8 3000 	ldr.w	r3, [r8]
 8006310:	461c      	mov	r4, r3
 8006312:	bb5c      	cbnz	r4, 800636c <_malloc_r+0x90>
 8006314:	4629      	mov	r1, r5
 8006316:	4638      	mov	r0, r7
 8006318:	f7ff ffc0 	bl	800629c <sbrk_aligned>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	4604      	mov	r4, r0
 8006320:	d155      	bne.n	80063ce <_malloc_r+0xf2>
 8006322:	f8d8 4000 	ldr.w	r4, [r8]
 8006326:	4626      	mov	r6, r4
 8006328:	2e00      	cmp	r6, #0
 800632a:	d145      	bne.n	80063b8 <_malloc_r+0xdc>
 800632c:	2c00      	cmp	r4, #0
 800632e:	d048      	beq.n	80063c2 <_malloc_r+0xe6>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	4631      	mov	r1, r6
 8006334:	4638      	mov	r0, r7
 8006336:	eb04 0903 	add.w	r9, r4, r3
 800633a:	f001 f8d7 	bl	80074ec <_sbrk_r>
 800633e:	4581      	cmp	r9, r0
 8006340:	d13f      	bne.n	80063c2 <_malloc_r+0xe6>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	1a6d      	subs	r5, r5, r1
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ffa7 	bl	800629c <sbrk_aligned>
 800634e:	3001      	adds	r0, #1
 8006350:	d037      	beq.n	80063c2 <_malloc_r+0xe6>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	442b      	add	r3, r5
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	f8d8 3000 	ldr.w	r3, [r8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d038      	beq.n	80063d2 <_malloc_r+0xf6>
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	42a2      	cmp	r2, r4
 8006364:	d12b      	bne.n	80063be <_malloc_r+0xe2>
 8006366:	2200      	movs	r2, #0
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	e00f      	b.n	800638c <_malloc_r+0xb0>
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	1b52      	subs	r2, r2, r5
 8006370:	d41f      	bmi.n	80063b2 <_malloc_r+0xd6>
 8006372:	2a0b      	cmp	r2, #11
 8006374:	d917      	bls.n	80063a6 <_malloc_r+0xca>
 8006376:	1961      	adds	r1, r4, r5
 8006378:	42a3      	cmp	r3, r4
 800637a:	6025      	str	r5, [r4, #0]
 800637c:	bf18      	it	ne
 800637e:	6059      	strne	r1, [r3, #4]
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	bf08      	it	eq
 8006384:	f8c8 1000 	streq.w	r1, [r8]
 8006388:	5162      	str	r2, [r4, r5]
 800638a:	604b      	str	r3, [r1, #4]
 800638c:	4638      	mov	r0, r7
 800638e:	f104 060b 	add.w	r6, r4, #11
 8006392:	f000 f829 	bl	80063e8 <__malloc_unlock>
 8006396:	f026 0607 	bic.w	r6, r6, #7
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	1af2      	subs	r2, r6, r3
 800639e:	d0ae      	beq.n	80062fe <_malloc_r+0x22>
 80063a0:	1b9b      	subs	r3, r3, r6
 80063a2:	50a3      	str	r3, [r4, r2]
 80063a4:	e7ab      	b.n	80062fe <_malloc_r+0x22>
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	d1dd      	bne.n	8006368 <_malloc_r+0x8c>
 80063ac:	f8c8 2000 	str.w	r2, [r8]
 80063b0:	e7ec      	b.n	800638c <_malloc_r+0xb0>
 80063b2:	4623      	mov	r3, r4
 80063b4:	6864      	ldr	r4, [r4, #4]
 80063b6:	e7ac      	b.n	8006312 <_malloc_r+0x36>
 80063b8:	4634      	mov	r4, r6
 80063ba:	6876      	ldr	r6, [r6, #4]
 80063bc:	e7b4      	b.n	8006328 <_malloc_r+0x4c>
 80063be:	4613      	mov	r3, r2
 80063c0:	e7cc      	b.n	800635c <_malloc_r+0x80>
 80063c2:	230c      	movs	r3, #12
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	4638      	mov	r0, r7
 80063c8:	f000 f80e 	bl	80063e8 <__malloc_unlock>
 80063cc:	e797      	b.n	80062fe <_malloc_r+0x22>
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	e7dc      	b.n	800638c <_malloc_r+0xb0>
 80063d2:	605b      	str	r3, [r3, #4]
 80063d4:	deff      	udf	#255	; 0xff
 80063d6:	bf00      	nop
 80063d8:	200004ec 	.word	0x200004ec

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_lock+0x8>)
 80063de:	f001 b8d2 	b.w	8007586 <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	20000634 	.word	0x20000634

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f001 b8cd 	b.w	8007588 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	20000634 	.word	0x20000634

080063f4 <_strtol_l.constprop.0>:
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063fa:	d001      	beq.n	8006400 <_strtol_l.constprop.0+0xc>
 80063fc:	2b24      	cmp	r3, #36	; 0x24
 80063fe:	d906      	bls.n	800640e <_strtol_l.constprop.0+0x1a>
 8006400:	f001 f896 	bl	8007530 <__errno>
 8006404:	2316      	movs	r3, #22
 8006406:	6003      	str	r3, [r0, #0]
 8006408:	2000      	movs	r0, #0
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064f4 <_strtol_l.constprop.0+0x100>
 8006412:	460d      	mov	r5, r1
 8006414:	462e      	mov	r6, r5
 8006416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800641a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800641e:	f017 0708 	ands.w	r7, r7, #8
 8006422:	d1f7      	bne.n	8006414 <_strtol_l.constprop.0+0x20>
 8006424:	2c2d      	cmp	r4, #45	; 0x2d
 8006426:	d132      	bne.n	800648e <_strtol_l.constprop.0+0x9a>
 8006428:	782c      	ldrb	r4, [r5, #0]
 800642a:	2701      	movs	r7, #1
 800642c:	1cb5      	adds	r5, r6, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d05b      	beq.n	80064ea <_strtol_l.constprop.0+0xf6>
 8006432:	2b10      	cmp	r3, #16
 8006434:	d109      	bne.n	800644a <_strtol_l.constprop.0+0x56>
 8006436:	2c30      	cmp	r4, #48	; 0x30
 8006438:	d107      	bne.n	800644a <_strtol_l.constprop.0+0x56>
 800643a:	782c      	ldrb	r4, [r5, #0]
 800643c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006440:	2c58      	cmp	r4, #88	; 0x58
 8006442:	d14d      	bne.n	80064e0 <_strtol_l.constprop.0+0xec>
 8006444:	786c      	ldrb	r4, [r5, #1]
 8006446:	2310      	movs	r3, #16
 8006448:	3502      	adds	r5, #2
 800644a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800644e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006452:	f04f 0e00 	mov.w	lr, #0
 8006456:	fbb8 f9f3 	udiv	r9, r8, r3
 800645a:	4676      	mov	r6, lr
 800645c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006460:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006464:	f1bc 0f09 	cmp.w	ip, #9
 8006468:	d816      	bhi.n	8006498 <_strtol_l.constprop.0+0xa4>
 800646a:	4664      	mov	r4, ip
 800646c:	42a3      	cmp	r3, r4
 800646e:	dd24      	ble.n	80064ba <_strtol_l.constprop.0+0xc6>
 8006470:	f1be 3fff 	cmp.w	lr, #4294967295
 8006474:	d008      	beq.n	8006488 <_strtol_l.constprop.0+0x94>
 8006476:	45b1      	cmp	r9, r6
 8006478:	d31c      	bcc.n	80064b4 <_strtol_l.constprop.0+0xc0>
 800647a:	d101      	bne.n	8006480 <_strtol_l.constprop.0+0x8c>
 800647c:	45a2      	cmp	sl, r4
 800647e:	db19      	blt.n	80064b4 <_strtol_l.constprop.0+0xc0>
 8006480:	fb06 4603 	mla	r6, r6, r3, r4
 8006484:	f04f 0e01 	mov.w	lr, #1
 8006488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800648c:	e7e8      	b.n	8006460 <_strtol_l.constprop.0+0x6c>
 800648e:	2c2b      	cmp	r4, #43	; 0x2b
 8006490:	bf04      	itt	eq
 8006492:	782c      	ldrbeq	r4, [r5, #0]
 8006494:	1cb5      	addeq	r5, r6, #2
 8006496:	e7ca      	b.n	800642e <_strtol_l.constprop.0+0x3a>
 8006498:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800649c:	f1bc 0f19 	cmp.w	ip, #25
 80064a0:	d801      	bhi.n	80064a6 <_strtol_l.constprop.0+0xb2>
 80064a2:	3c37      	subs	r4, #55	; 0x37
 80064a4:	e7e2      	b.n	800646c <_strtol_l.constprop.0+0x78>
 80064a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064aa:	f1bc 0f19 	cmp.w	ip, #25
 80064ae:	d804      	bhi.n	80064ba <_strtol_l.constprop.0+0xc6>
 80064b0:	3c57      	subs	r4, #87	; 0x57
 80064b2:	e7db      	b.n	800646c <_strtol_l.constprop.0+0x78>
 80064b4:	f04f 3eff 	mov.w	lr, #4294967295
 80064b8:	e7e6      	b.n	8006488 <_strtol_l.constprop.0+0x94>
 80064ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80064be:	d105      	bne.n	80064cc <_strtol_l.constprop.0+0xd8>
 80064c0:	2322      	movs	r3, #34	; 0x22
 80064c2:	6003      	str	r3, [r0, #0]
 80064c4:	4646      	mov	r6, r8
 80064c6:	b942      	cbnz	r2, 80064da <_strtol_l.constprop.0+0xe6>
 80064c8:	4630      	mov	r0, r6
 80064ca:	e79e      	b.n	800640a <_strtol_l.constprop.0+0x16>
 80064cc:	b107      	cbz	r7, 80064d0 <_strtol_l.constprop.0+0xdc>
 80064ce:	4276      	negs	r6, r6
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	d0f9      	beq.n	80064c8 <_strtol_l.constprop.0+0xd4>
 80064d4:	f1be 0f00 	cmp.w	lr, #0
 80064d8:	d000      	beq.n	80064dc <_strtol_l.constprop.0+0xe8>
 80064da:	1e69      	subs	r1, r5, #1
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	e7f3      	b.n	80064c8 <_strtol_l.constprop.0+0xd4>
 80064e0:	2430      	movs	r4, #48	; 0x30
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1b1      	bne.n	800644a <_strtol_l.constprop.0+0x56>
 80064e6:	2308      	movs	r3, #8
 80064e8:	e7af      	b.n	800644a <_strtol_l.constprop.0+0x56>
 80064ea:	2c30      	cmp	r4, #48	; 0x30
 80064ec:	d0a5      	beq.n	800643a <_strtol_l.constprop.0+0x46>
 80064ee:	230a      	movs	r3, #10
 80064f0:	e7ab      	b.n	800644a <_strtol_l.constprop.0+0x56>
 80064f2:	bf00      	nop
 80064f4:	0800acd5 	.word	0x0800acd5

080064f8 <_strtol_r>:
 80064f8:	f7ff bf7c 	b.w	80063f4 <_strtol_l.constprop.0>

080064fc <strtol>:
 80064fc:	4613      	mov	r3, r2
 80064fe:	460a      	mov	r2, r1
 8006500:	4601      	mov	r1, r0
 8006502:	4802      	ldr	r0, [pc, #8]	; (800650c <strtol+0x10>)
 8006504:	6800      	ldr	r0, [r0, #0]
 8006506:	f7ff bf75 	b.w	80063f4 <_strtol_l.constprop.0>
 800650a:	bf00      	nop
 800650c:	2000006c 	.word	0x2000006c

08006510 <__cvt>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	ec55 4b10 	vmov	r4, r5, d0
 8006518:	2d00      	cmp	r5, #0
 800651a:	460e      	mov	r6, r1
 800651c:	4619      	mov	r1, r3
 800651e:	462b      	mov	r3, r5
 8006520:	bfbb      	ittet	lt
 8006522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006526:	461d      	movlt	r5, r3
 8006528:	2300      	movge	r3, #0
 800652a:	232d      	movlt	r3, #45	; 0x2d
 800652c:	700b      	strb	r3, [r1, #0]
 800652e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006534:	4691      	mov	r9, r2
 8006536:	f023 0820 	bic.w	r8, r3, #32
 800653a:	bfbc      	itt	lt
 800653c:	4622      	movlt	r2, r4
 800653e:	4614      	movlt	r4, r2
 8006540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006544:	d005      	beq.n	8006552 <__cvt+0x42>
 8006546:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800654a:	d100      	bne.n	800654e <__cvt+0x3e>
 800654c:	3601      	adds	r6, #1
 800654e:	2102      	movs	r1, #2
 8006550:	e000      	b.n	8006554 <__cvt+0x44>
 8006552:	2103      	movs	r1, #3
 8006554:	ab03      	add	r3, sp, #12
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	ab02      	add	r3, sp, #8
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	ec45 4b10 	vmov	d0, r4, r5
 8006560:	4653      	mov	r3, sl
 8006562:	4632      	mov	r2, r6
 8006564:	f001 f8a8 	bl	80076b8 <_dtoa_r>
 8006568:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800656c:	4607      	mov	r7, r0
 800656e:	d102      	bne.n	8006576 <__cvt+0x66>
 8006570:	f019 0f01 	tst.w	r9, #1
 8006574:	d022      	beq.n	80065bc <__cvt+0xac>
 8006576:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800657a:	eb07 0906 	add.w	r9, r7, r6
 800657e:	d110      	bne.n	80065a2 <__cvt+0x92>
 8006580:	783b      	ldrb	r3, [r7, #0]
 8006582:	2b30      	cmp	r3, #48	; 0x30
 8006584:	d10a      	bne.n	800659c <__cvt+0x8c>
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	4620      	mov	r0, r4
 800658c:	4629      	mov	r1, r5
 800658e:	f7fa faab 	bl	8000ae8 <__aeabi_dcmpeq>
 8006592:	b918      	cbnz	r0, 800659c <__cvt+0x8c>
 8006594:	f1c6 0601 	rsb	r6, r6, #1
 8006598:	f8ca 6000 	str.w	r6, [sl]
 800659c:	f8da 3000 	ldr.w	r3, [sl]
 80065a0:	4499      	add	r9, r3
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7fa fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80065ae:	b108      	cbz	r0, 80065b4 <__cvt+0xa4>
 80065b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b4:	2230      	movs	r2, #48	; 0x30
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	454b      	cmp	r3, r9
 80065ba:	d307      	bcc.n	80065cc <__cvt+0xbc>
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065c0:	1bdb      	subs	r3, r3, r7
 80065c2:	4638      	mov	r0, r7
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	b004      	add	sp, #16
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	9103      	str	r1, [sp, #12]
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e7f0      	b.n	80065b6 <__cvt+0xa6>

080065d4 <__exponent>:
 80065d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d6:	4603      	mov	r3, r0
 80065d8:	2900      	cmp	r1, #0
 80065da:	bfb8      	it	lt
 80065dc:	4249      	neglt	r1, r1
 80065de:	f803 2b02 	strb.w	r2, [r3], #2
 80065e2:	bfb4      	ite	lt
 80065e4:	222d      	movlt	r2, #45	; 0x2d
 80065e6:	222b      	movge	r2, #43	; 0x2b
 80065e8:	2909      	cmp	r1, #9
 80065ea:	7042      	strb	r2, [r0, #1]
 80065ec:	dd2a      	ble.n	8006644 <__exponent+0x70>
 80065ee:	f10d 0207 	add.w	r2, sp, #7
 80065f2:	4617      	mov	r7, r2
 80065f4:	260a      	movs	r6, #10
 80065f6:	4694      	mov	ip, r2
 80065f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80065fc:	fb06 1415 	mls	r4, r6, r5, r1
 8006600:	3430      	adds	r4, #48	; 0x30
 8006602:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006606:	460c      	mov	r4, r1
 8006608:	2c63      	cmp	r4, #99	; 0x63
 800660a:	f102 32ff 	add.w	r2, r2, #4294967295
 800660e:	4629      	mov	r1, r5
 8006610:	dcf1      	bgt.n	80065f6 <__exponent+0x22>
 8006612:	3130      	adds	r1, #48	; 0x30
 8006614:	f1ac 0402 	sub.w	r4, ip, #2
 8006618:	f802 1c01 	strb.w	r1, [r2, #-1]
 800661c:	1c41      	adds	r1, r0, #1
 800661e:	4622      	mov	r2, r4
 8006620:	42ba      	cmp	r2, r7
 8006622:	d30a      	bcc.n	800663a <__exponent+0x66>
 8006624:	f10d 0209 	add.w	r2, sp, #9
 8006628:	eba2 020c 	sub.w	r2, r2, ip
 800662c:	42bc      	cmp	r4, r7
 800662e:	bf88      	it	hi
 8006630:	2200      	movhi	r2, #0
 8006632:	4413      	add	r3, r2
 8006634:	1a18      	subs	r0, r3, r0
 8006636:	b003      	add	sp, #12
 8006638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800663e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006642:	e7ed      	b.n	8006620 <__exponent+0x4c>
 8006644:	2330      	movs	r3, #48	; 0x30
 8006646:	3130      	adds	r1, #48	; 0x30
 8006648:	7083      	strb	r3, [r0, #2]
 800664a:	70c1      	strb	r1, [r0, #3]
 800664c:	1d03      	adds	r3, r0, #4
 800664e:	e7f1      	b.n	8006634 <__exponent+0x60>

08006650 <_printf_float>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	ed2d 8b02 	vpush	{d8}
 8006658:	b08d      	sub	sp, #52	; 0x34
 800665a:	460c      	mov	r4, r1
 800665c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006660:	4616      	mov	r6, r2
 8006662:	461f      	mov	r7, r3
 8006664:	4605      	mov	r5, r0
 8006666:	f000 ff09 	bl	800747c <_localeconv_r>
 800666a:	f8d0 a000 	ldr.w	sl, [r0]
 800666e:	4650      	mov	r0, sl
 8006670:	f7f9 fe0e 	bl	8000290 <strlen>
 8006674:	2300      	movs	r3, #0
 8006676:	930a      	str	r3, [sp, #40]	; 0x28
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f8d8 3000 	ldr.w	r3, [r8]
 8006680:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006684:	3307      	adds	r3, #7
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	f8c8 2000 	str.w	r2, [r8]
 8006692:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800669a:	9307      	str	r3, [sp, #28]
 800669c:	f8cd 8018 	str.w	r8, [sp, #24]
 80066a0:	ee08 0a10 	vmov	s16, r0
 80066a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80066a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ac:	4b9e      	ldr	r3, [pc, #632]	; (8006928 <_printf_float+0x2d8>)
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	f7fa fa4b 	bl	8000b4c <__aeabi_dcmpun>
 80066b6:	bb88      	cbnz	r0, 800671c <_printf_float+0xcc>
 80066b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066bc:	4b9a      	ldr	r3, [pc, #616]	; (8006928 <_printf_float+0x2d8>)
 80066be:	f04f 32ff 	mov.w	r2, #4294967295
 80066c2:	f7fa fa25 	bl	8000b10 <__aeabi_dcmple>
 80066c6:	bb48      	cbnz	r0, 800671c <_printf_float+0xcc>
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7fa fa14 	bl	8000afc <__aeabi_dcmplt>
 80066d4:	b110      	cbz	r0, 80066dc <_printf_float+0x8c>
 80066d6:	232d      	movs	r3, #45	; 0x2d
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	4a93      	ldr	r2, [pc, #588]	; (800692c <_printf_float+0x2dc>)
 80066de:	4b94      	ldr	r3, [pc, #592]	; (8006930 <_printf_float+0x2e0>)
 80066e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066e4:	bf94      	ite	ls
 80066e6:	4690      	movls	r8, r2
 80066e8:	4698      	movhi	r8, r3
 80066ea:	2303      	movs	r3, #3
 80066ec:	6123      	str	r3, [r4, #16]
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	f04f 0900 	mov.w	r9, #0
 80066fa:	9700      	str	r7, [sp, #0]
 80066fc:	4633      	mov	r3, r6
 80066fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f9da 	bl	8006abc <_printf_common>
 8006708:	3001      	adds	r0, #1
 800670a:	f040 8090 	bne.w	800682e <_printf_float+0x1de>
 800670e:	f04f 30ff 	mov.w	r0, #4294967295
 8006712:	b00d      	add	sp, #52	; 0x34
 8006714:	ecbd 8b02 	vpop	{d8}
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa fa12 	bl	8000b4c <__aeabi_dcmpun>
 8006728:	b140      	cbz	r0, 800673c <_printf_float+0xec>
 800672a:	464b      	mov	r3, r9
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfbc      	itt	lt
 8006730:	232d      	movlt	r3, #45	; 0x2d
 8006732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006736:	4a7f      	ldr	r2, [pc, #508]	; (8006934 <_printf_float+0x2e4>)
 8006738:	4b7f      	ldr	r3, [pc, #508]	; (8006938 <_printf_float+0x2e8>)
 800673a:	e7d1      	b.n	80066e0 <_printf_float+0x90>
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006742:	9206      	str	r2, [sp, #24]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	d13f      	bne.n	80067c8 <_printf_float+0x178>
 8006748:	2306      	movs	r3, #6
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	9b05      	ldr	r3, [sp, #20]
 800674e:	6861      	ldr	r1, [r4, #4]
 8006750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006754:	2300      	movs	r3, #0
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	ab0a      	add	r3, sp, #40	; 0x28
 800675a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800675e:	ab09      	add	r3, sp, #36	; 0x24
 8006760:	ec49 8b10 	vmov	d0, r8, r9
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800676c:	4628      	mov	r0, r5
 800676e:	f7ff fecf 	bl	8006510 <__cvt>
 8006772:	9b06      	ldr	r3, [sp, #24]
 8006774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006776:	2b47      	cmp	r3, #71	; 0x47
 8006778:	4680      	mov	r8, r0
 800677a:	d108      	bne.n	800678e <_printf_float+0x13e>
 800677c:	1cc8      	adds	r0, r1, #3
 800677e:	db02      	blt.n	8006786 <_printf_float+0x136>
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	4299      	cmp	r1, r3
 8006784:	dd41      	ble.n	800680a <_printf_float+0x1ba>
 8006786:	f1ab 0302 	sub.w	r3, fp, #2
 800678a:	fa5f fb83 	uxtb.w	fp, r3
 800678e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006792:	d820      	bhi.n	80067d6 <_printf_float+0x186>
 8006794:	3901      	subs	r1, #1
 8006796:	465a      	mov	r2, fp
 8006798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800679c:	9109      	str	r1, [sp, #36]	; 0x24
 800679e:	f7ff ff19 	bl	80065d4 <__exponent>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a4:	1813      	adds	r3, r2, r0
 80067a6:	2a01      	cmp	r2, #1
 80067a8:	4681      	mov	r9, r0
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	dc02      	bgt.n	80067b4 <_printf_float+0x164>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	07d2      	lsls	r2, r2, #31
 80067b2:	d501      	bpl.n	80067b8 <_printf_float+0x168>
 80067b4:	3301      	adds	r3, #1
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d09c      	beq.n	80066fa <_printf_float+0xaa>
 80067c0:	232d      	movs	r3, #45	; 0x2d
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c6:	e798      	b.n	80066fa <_printf_float+0xaa>
 80067c8:	9a06      	ldr	r2, [sp, #24]
 80067ca:	2a47      	cmp	r2, #71	; 0x47
 80067cc:	d1be      	bne.n	800674c <_printf_float+0xfc>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1bc      	bne.n	800674c <_printf_float+0xfc>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7b9      	b.n	800674a <_printf_float+0xfa>
 80067d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067da:	d118      	bne.n	800680e <_printf_float+0x1be>
 80067dc:	2900      	cmp	r1, #0
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	dd0b      	ble.n	80067fa <_printf_float+0x1aa>
 80067e2:	6121      	str	r1, [r4, #16]
 80067e4:	b913      	cbnz	r3, 80067ec <_printf_float+0x19c>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	07d0      	lsls	r0, r2, #31
 80067ea:	d502      	bpl.n	80067f2 <_printf_float+0x1a2>
 80067ec:	3301      	adds	r3, #1
 80067ee:	440b      	add	r3, r1
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067f4:	f04f 0900 	mov.w	r9, #0
 80067f8:	e7de      	b.n	80067b8 <_printf_float+0x168>
 80067fa:	b913      	cbnz	r3, 8006802 <_printf_float+0x1b2>
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	07d2      	lsls	r2, r2, #31
 8006800:	d501      	bpl.n	8006806 <_printf_float+0x1b6>
 8006802:	3302      	adds	r3, #2
 8006804:	e7f4      	b.n	80067f0 <_printf_float+0x1a0>
 8006806:	2301      	movs	r3, #1
 8006808:	e7f2      	b.n	80067f0 <_printf_float+0x1a0>
 800680a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006810:	4299      	cmp	r1, r3
 8006812:	db05      	blt.n	8006820 <_printf_float+0x1d0>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	6121      	str	r1, [r4, #16]
 8006818:	07d8      	lsls	r0, r3, #31
 800681a:	d5ea      	bpl.n	80067f2 <_printf_float+0x1a2>
 800681c:	1c4b      	adds	r3, r1, #1
 800681e:	e7e7      	b.n	80067f0 <_printf_float+0x1a0>
 8006820:	2900      	cmp	r1, #0
 8006822:	bfd4      	ite	le
 8006824:	f1c1 0202 	rsble	r2, r1, #2
 8006828:	2201      	movgt	r2, #1
 800682a:	4413      	add	r3, r2
 800682c:	e7e0      	b.n	80067f0 <_printf_float+0x1a0>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	055a      	lsls	r2, r3, #21
 8006832:	d407      	bmi.n	8006844 <_printf_float+0x1f4>
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	4642      	mov	r2, r8
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d12c      	bne.n	800689c <_printf_float+0x24c>
 8006842:	e764      	b.n	800670e <_printf_float+0xbe>
 8006844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006848:	f240 80e0 	bls.w	8006a0c <_printf_float+0x3bc>
 800684c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	f7fa f948 	bl	8000ae8 <__aeabi_dcmpeq>
 8006858:	2800      	cmp	r0, #0
 800685a:	d034      	beq.n	80068c6 <_printf_float+0x276>
 800685c:	4a37      	ldr	r2, [pc, #220]	; (800693c <_printf_float+0x2ec>)
 800685e:	2301      	movs	r3, #1
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	f43f af51 	beq.w	800670e <_printf_float+0xbe>
 800686c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006870:	429a      	cmp	r2, r3
 8006872:	db02      	blt.n	800687a <_printf_float+0x22a>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	07d8      	lsls	r0, r3, #31
 8006878:	d510      	bpl.n	800689c <_printf_float+0x24c>
 800687a:	ee18 3a10 	vmov	r3, s16
 800687e:	4652      	mov	r2, sl
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	f43f af41 	beq.w	800670e <_printf_float+0xbe>
 800688c:	f04f 0800 	mov.w	r8, #0
 8006890:	f104 091a 	add.w	r9, r4, #26
 8006894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006896:	3b01      	subs	r3, #1
 8006898:	4543      	cmp	r3, r8
 800689a:	dc09      	bgt.n	80068b0 <_printf_float+0x260>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	079b      	lsls	r3, r3, #30
 80068a0:	f100 8107 	bmi.w	8006ab2 <_printf_float+0x462>
 80068a4:	68e0      	ldr	r0, [r4, #12]
 80068a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a8:	4298      	cmp	r0, r3
 80068aa:	bfb8      	it	lt
 80068ac:	4618      	movlt	r0, r3
 80068ae:	e730      	b.n	8006712 <_printf_float+0xc2>
 80068b0:	2301      	movs	r3, #1
 80068b2:	464a      	mov	r2, r9
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af27 	beq.w	800670e <_printf_float+0xbe>
 80068c0:	f108 0801 	add.w	r8, r8, #1
 80068c4:	e7e6      	b.n	8006894 <_printf_float+0x244>
 80068c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	dc39      	bgt.n	8006940 <_printf_float+0x2f0>
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <_printf_float+0x2ec>)
 80068ce:	2301      	movs	r3, #1
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f af19 	beq.w	800670e <_printf_float+0xbe>
 80068dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068e0:	4313      	orrs	r3, r2
 80068e2:	d102      	bne.n	80068ea <_printf_float+0x29a>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07d9      	lsls	r1, r3, #31
 80068e8:	d5d8      	bpl.n	800689c <_printf_float+0x24c>
 80068ea:	ee18 3a10 	vmov	r3, s16
 80068ee:	4652      	mov	r2, sl
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f af09 	beq.w	800670e <_printf_float+0xbe>
 80068fc:	f04f 0900 	mov.w	r9, #0
 8006900:	f104 0a1a 	add.w	sl, r4, #26
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	425b      	negs	r3, r3
 8006908:	454b      	cmp	r3, r9
 800690a:	dc01      	bgt.n	8006910 <_printf_float+0x2c0>
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	e792      	b.n	8006836 <_printf_float+0x1e6>
 8006910:	2301      	movs	r3, #1
 8006912:	4652      	mov	r2, sl
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f aef7 	beq.w	800670e <_printf_float+0xbe>
 8006920:	f109 0901 	add.w	r9, r9, #1
 8006924:	e7ee      	b.n	8006904 <_printf_float+0x2b4>
 8006926:	bf00      	nop
 8006928:	7fefffff 	.word	0x7fefffff
 800692c:	0800add5 	.word	0x0800add5
 8006930:	0800add9 	.word	0x0800add9
 8006934:	0800addd 	.word	0x0800addd
 8006938:	0800ade1 	.word	0x0800ade1
 800693c:	0800ade5 	.word	0x0800ade5
 8006940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006944:	429a      	cmp	r2, r3
 8006946:	bfa8      	it	ge
 8006948:	461a      	movge	r2, r3
 800694a:	2a00      	cmp	r2, #0
 800694c:	4691      	mov	r9, r2
 800694e:	dc37      	bgt.n	80069c0 <_printf_float+0x370>
 8006950:	f04f 0b00 	mov.w	fp, #0
 8006954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006958:	f104 021a 	add.w	r2, r4, #26
 800695c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	eba3 0309 	sub.w	r3, r3, r9
 8006964:	455b      	cmp	r3, fp
 8006966:	dc33      	bgt.n	80069d0 <_printf_float+0x380>
 8006968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800696c:	429a      	cmp	r2, r3
 800696e:	db3b      	blt.n	80069e8 <_printf_float+0x398>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07da      	lsls	r2, r3, #31
 8006974:	d438      	bmi.n	80069e8 <_printf_float+0x398>
 8006976:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800697a:	eba2 0903 	sub.w	r9, r2, r3
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	1ad2      	subs	r2, r2, r3
 8006982:	4591      	cmp	r9, r2
 8006984:	bfa8      	it	ge
 8006986:	4691      	movge	r9, r2
 8006988:	f1b9 0f00 	cmp.w	r9, #0
 800698c:	dc35      	bgt.n	80069fa <_printf_float+0x3aa>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006996:	f104 0a1a 	add.w	sl, r4, #26
 800699a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	eba3 0309 	sub.w	r3, r3, r9
 80069a4:	4543      	cmp	r3, r8
 80069a6:	f77f af79 	ble.w	800689c <_printf_float+0x24c>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4652      	mov	r2, sl
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f aeaa 	beq.w	800670e <_printf_float+0xbe>
 80069ba:	f108 0801 	add.w	r8, r8, #1
 80069be:	e7ec      	b.n	800699a <_printf_float+0x34a>
 80069c0:	4613      	mov	r3, r2
 80069c2:	4631      	mov	r1, r6
 80069c4:	4642      	mov	r2, r8
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	d1c0      	bne.n	8006950 <_printf_float+0x300>
 80069ce:	e69e      	b.n	800670e <_printf_float+0xbe>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	9205      	str	r2, [sp, #20]
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f ae97 	beq.w	800670e <_printf_float+0xbe>
 80069e0:	9a05      	ldr	r2, [sp, #20]
 80069e2:	f10b 0b01 	add.w	fp, fp, #1
 80069e6:	e7b9      	b.n	800695c <_printf_float+0x30c>
 80069e8:	ee18 3a10 	vmov	r3, s16
 80069ec:	4652      	mov	r2, sl
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1be      	bne.n	8006976 <_printf_float+0x326>
 80069f8:	e689      	b.n	800670e <_printf_float+0xbe>
 80069fa:	9a05      	ldr	r2, [sp, #20]
 80069fc:	464b      	mov	r3, r9
 80069fe:	4442      	add	r2, r8
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	d1c1      	bne.n	800698e <_printf_float+0x33e>
 8006a0a:	e680      	b.n	800670e <_printf_float+0xbe>
 8006a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a0e:	2a01      	cmp	r2, #1
 8006a10:	dc01      	bgt.n	8006a16 <_printf_float+0x3c6>
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d53a      	bpl.n	8006a8c <_printf_float+0x43c>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	f43f ae74 	beq.w	800670e <_printf_float+0xbe>
 8006a26:	ee18 3a10 	vmov	r3, s16
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f ae6b 	beq.w	800670e <_printf_float+0xbe>
 8006a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a44:	f7fa f850 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a48:	b9d8      	cbnz	r0, 8006a82 <_printf_float+0x432>
 8006a4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a4e:	f108 0201 	add.w	r2, r8, #1
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d10e      	bne.n	8006a7a <_printf_float+0x42a>
 8006a5c:	e657      	b.n	800670e <_printf_float+0xbe>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f ae50 	beq.w	800670e <_printf_float+0xbe>
 8006a6e:	f108 0801 	add.w	r8, r8, #1
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4543      	cmp	r3, r8
 8006a78:	dcf1      	bgt.n	8006a5e <_printf_float+0x40e>
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a80:	e6da      	b.n	8006838 <_printf_float+0x1e8>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	f104 0a1a 	add.w	sl, r4, #26
 8006a8a:	e7f2      	b.n	8006a72 <_printf_float+0x422>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4642      	mov	r2, r8
 8006a90:	e7df      	b.n	8006a52 <_printf_float+0x402>
 8006a92:	2301      	movs	r3, #1
 8006a94:	464a      	mov	r2, r9
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae36 	beq.w	800670e <_printf_float+0xbe>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aaa:	1a5b      	subs	r3, r3, r1
 8006aac:	4543      	cmp	r3, r8
 8006aae:	dcf0      	bgt.n	8006a92 <_printf_float+0x442>
 8006ab0:	e6f8      	b.n	80068a4 <_printf_float+0x254>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0919 	add.w	r9, r4, #25
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x456>

08006abc <_printf_common>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4616      	mov	r6, r2
 8006ac2:	4699      	mov	r9, r3
 8006ac4:	688a      	ldr	r2, [r1, #8]
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bfb8      	it	lt
 8006ad0:	4613      	movlt	r3, r2
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad8:	4607      	mov	r7, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	b10a      	cbz	r2, 8006ae2 <_printf_common+0x26>
 8006ade:	3301      	adds	r3, #1
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0699      	lsls	r1, r3, #26
 8006ae6:	bf42      	ittt	mi
 8006ae8:	6833      	ldrmi	r3, [r6, #0]
 8006aea:	3302      	addmi	r3, #2
 8006aec:	6033      	strmi	r3, [r6, #0]
 8006aee:	6825      	ldr	r5, [r4, #0]
 8006af0:	f015 0506 	ands.w	r5, r5, #6
 8006af4:	d106      	bne.n	8006b04 <_printf_common+0x48>
 8006af6:	f104 0a19 	add.w	sl, r4, #25
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dc26      	bgt.n	8006b52 <_printf_common+0x96>
 8006b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b08:	1e13      	subs	r3, r2, #0
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	bf18      	it	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	0692      	lsls	r2, r2, #26
 8006b12:	d42b      	bmi.n	8006b6c <_printf_common+0xb0>
 8006b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	47c0      	blx	r8
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d01e      	beq.n	8006b60 <_printf_common+0xa4>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	f003 0306 	and.w	r3, r3, #6
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	bf02      	ittt	eq
 8006b2e:	68e5      	ldreq	r5, [r4, #12]
 8006b30:	6833      	ldreq	r3, [r6, #0]
 8006b32:	1aed      	subeq	r5, r5, r3
 8006b34:	68a3      	ldr	r3, [r4, #8]
 8006b36:	bf0c      	ite	eq
 8006b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b3c:	2500      	movne	r5, #0
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bfc4      	itt	gt
 8006b42:	1a9b      	subgt	r3, r3, r2
 8006b44:	18ed      	addgt	r5, r5, r3
 8006b46:	2600      	movs	r6, #0
 8006b48:	341a      	adds	r4, #26
 8006b4a:	42b5      	cmp	r5, r6
 8006b4c:	d11a      	bne.n	8006b84 <_printf_common+0xc8>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e008      	b.n	8006b64 <_printf_common+0xa8>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4652      	mov	r2, sl
 8006b56:	4649      	mov	r1, r9
 8006b58:	4638      	mov	r0, r7
 8006b5a:	47c0      	blx	r8
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d103      	bne.n	8006b68 <_printf_common+0xac>
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	3501      	adds	r5, #1
 8006b6a:	e7c6      	b.n	8006afa <_printf_common+0x3e>
 8006b6c:	18e1      	adds	r1, r4, r3
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	2030      	movs	r0, #48	; 0x30
 8006b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b76:	4422      	add	r2, r4
 8006b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b80:	3302      	adds	r3, #2
 8006b82:	e7c7      	b.n	8006b14 <_printf_common+0x58>
 8006b84:	2301      	movs	r3, #1
 8006b86:	4622      	mov	r2, r4
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	47c0      	blx	r8
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d0e6      	beq.n	8006b60 <_printf_common+0xa4>
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7d9      	b.n	8006b4a <_printf_common+0x8e>
	...

08006b98 <_printf_i>:
 8006b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	7e0f      	ldrb	r7, [r1, #24]
 8006b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ba0:	2f78      	cmp	r7, #120	; 0x78
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bae:	d807      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bb0:	2f62      	cmp	r7, #98	; 0x62
 8006bb2:	d80a      	bhi.n	8006bca <_printf_i+0x32>
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	f000 80d4 	beq.w	8006d62 <_printf_i+0x1ca>
 8006bba:	2f58      	cmp	r7, #88	; 0x58
 8006bbc:	f000 80c0 	beq.w	8006d40 <_printf_i+0x1a8>
 8006bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc8:	e03a      	b.n	8006c40 <_printf_i+0xa8>
 8006bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bce:	2b15      	cmp	r3, #21
 8006bd0:	d8f6      	bhi.n	8006bc0 <_printf_i+0x28>
 8006bd2:	a101      	add	r1, pc, #4	; (adr r1, 8006bd8 <_printf_i+0x40>)
 8006bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c45 	.word	0x08006c45
 8006be0:	08006bc1 	.word	0x08006bc1
 8006be4:	08006bc1 	.word	0x08006bc1
 8006be8:	08006bc1 	.word	0x08006bc1
 8006bec:	08006bc1 	.word	0x08006bc1
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006bc1 	.word	0x08006bc1
 8006bf8:	08006bc1 	.word	0x08006bc1
 8006bfc:	08006bc1 	.word	0x08006bc1
 8006c00:	08006bc1 	.word	0x08006bc1
 8006c04:	08006d49 	.word	0x08006d49
 8006c08:	08006c71 	.word	0x08006c71
 8006c0c:	08006d03 	.word	0x08006d03
 8006c10:	08006bc1 	.word	0x08006bc1
 8006c14:	08006bc1 	.word	0x08006bc1
 8006c18:	08006d6b 	.word	0x08006d6b
 8006c1c:	08006bc1 	.word	0x08006bc1
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006bc1 	.word	0x08006bc1
 8006c28:	08006bc1 	.word	0x08006bc1
 8006c2c:	08006d0b 	.word	0x08006d0b
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	1d1a      	adds	r2, r3, #4
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	602a      	str	r2, [r5, #0]
 8006c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c40:	2301      	movs	r3, #1
 8006c42:	e09f      	b.n	8006d84 <_printf_i+0x1ec>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	0607      	lsls	r7, r0, #24
 8006c4a:	f103 0104 	add.w	r1, r3, #4
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	d501      	bpl.n	8006c56 <_printf_i+0xbe>
 8006c52:	681e      	ldr	r6, [r3, #0]
 8006c54:	e003      	b.n	8006c5e <_printf_i+0xc6>
 8006c56:	0646      	lsls	r6, r0, #25
 8006c58:	d5fb      	bpl.n	8006c52 <_printf_i+0xba>
 8006c5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	da03      	bge.n	8006c6a <_printf_i+0xd2>
 8006c62:	232d      	movs	r3, #45	; 0x2d
 8006c64:	4276      	negs	r6, r6
 8006c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6a:	485a      	ldr	r0, [pc, #360]	; (8006dd4 <_printf_i+0x23c>)
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	e012      	b.n	8006c96 <_printf_i+0xfe>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	6820      	ldr	r0, [r4, #0]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	6029      	str	r1, [r5, #0]
 8006c78:	0605      	lsls	r5, r0, #24
 8006c7a:	d501      	bpl.n	8006c80 <_printf_i+0xe8>
 8006c7c:	681e      	ldr	r6, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <_printf_i+0xee>
 8006c80:	0641      	lsls	r1, r0, #25
 8006c82:	d5fb      	bpl.n	8006c7c <_printf_i+0xe4>
 8006c84:	881e      	ldrh	r6, [r3, #0]
 8006c86:	4853      	ldr	r0, [pc, #332]	; (8006dd4 <_printf_i+0x23c>)
 8006c88:	2f6f      	cmp	r7, #111	; 0x6f
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2308      	moveq	r3, #8
 8006c8e:	230a      	movne	r3, #10
 8006c90:	2100      	movs	r1, #0
 8006c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c96:	6865      	ldr	r5, [r4, #4]
 8006c98:	60a5      	str	r5, [r4, #8]
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	bfa2      	ittt	ge
 8006c9e:	6821      	ldrge	r1, [r4, #0]
 8006ca0:	f021 0104 	bicge.w	r1, r1, #4
 8006ca4:	6021      	strge	r1, [r4, #0]
 8006ca6:	b90e      	cbnz	r6, 8006cac <_printf_i+0x114>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	d04b      	beq.n	8006d44 <_printf_i+0x1ac>
 8006cac:	4615      	mov	r5, r2
 8006cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cb6:	5dc7      	ldrb	r7, [r0, r7]
 8006cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cbc:	4637      	mov	r7, r6
 8006cbe:	42bb      	cmp	r3, r7
 8006cc0:	460e      	mov	r6, r1
 8006cc2:	d9f4      	bls.n	8006cae <_printf_i+0x116>
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10b      	bne.n	8006ce0 <_printf_i+0x148>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	07de      	lsls	r6, r3, #31
 8006ccc:	d508      	bpl.n	8006ce0 <_printf_i+0x148>
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	6861      	ldr	r1, [r4, #4]
 8006cd2:	4299      	cmp	r1, r3
 8006cd4:	bfde      	ittt	le
 8006cd6:	2330      	movle	r3, #48	; 0x30
 8006cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ce0:	1b52      	subs	r2, r2, r5
 8006ce2:	6122      	str	r2, [r4, #16]
 8006ce4:	f8cd a000 	str.w	sl, [sp]
 8006ce8:	464b      	mov	r3, r9
 8006cea:	aa03      	add	r2, sp, #12
 8006cec:	4621      	mov	r1, r4
 8006cee:	4640      	mov	r0, r8
 8006cf0:	f7ff fee4 	bl	8006abc <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d14a      	bne.n	8006d8e <_printf_i+0x1f6>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	b004      	add	sp, #16
 8006cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	4833      	ldr	r0, [pc, #204]	; (8006dd8 <_printf_i+0x240>)
 8006d0c:	2778      	movs	r7, #120	; 0x78
 8006d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	6829      	ldr	r1, [r5, #0]
 8006d16:	061f      	lsls	r7, r3, #24
 8006d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d1c:	d402      	bmi.n	8006d24 <_printf_i+0x18c>
 8006d1e:	065f      	lsls	r7, r3, #25
 8006d20:	bf48      	it	mi
 8006d22:	b2b6      	uxthmi	r6, r6
 8006d24:	07df      	lsls	r7, r3, #31
 8006d26:	bf48      	it	mi
 8006d28:	f043 0320 	orrmi.w	r3, r3, #32
 8006d2c:	6029      	str	r1, [r5, #0]
 8006d2e:	bf48      	it	mi
 8006d30:	6023      	strmi	r3, [r4, #0]
 8006d32:	b91e      	cbnz	r6, 8006d3c <_printf_i+0x1a4>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	f023 0320 	bic.w	r3, r3, #32
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	e7a7      	b.n	8006c90 <_printf_i+0xf8>
 8006d40:	4824      	ldr	r0, [pc, #144]	; (8006dd4 <_printf_i+0x23c>)
 8006d42:	e7e4      	b.n	8006d0e <_printf_i+0x176>
 8006d44:	4615      	mov	r5, r2
 8006d46:	e7bd      	b.n	8006cc4 <_printf_i+0x12c>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	6826      	ldr	r6, [r4, #0]
 8006d4c:	6961      	ldr	r1, [r4, #20]
 8006d4e:	1d18      	adds	r0, r3, #4
 8006d50:	6028      	str	r0, [r5, #0]
 8006d52:	0635      	lsls	r5, r6, #24
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0x1c4>
 8006d58:	6019      	str	r1, [r3, #0]
 8006d5a:	e002      	b.n	8006d62 <_printf_i+0x1ca>
 8006d5c:	0670      	lsls	r0, r6, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0x1c0>
 8006d60:	8019      	strh	r1, [r3, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	4615      	mov	r5, r2
 8006d68:	e7bc      	b.n	8006ce4 <_printf_i+0x14c>
 8006d6a:	682b      	ldr	r3, [r5, #0]
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	602a      	str	r2, [r5, #0]
 8006d70:	681d      	ldr	r5, [r3, #0]
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	2100      	movs	r1, #0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fa3a 	bl	80001f0 <memchr>
 8006d7c:	b108      	cbz	r0, 8006d82 <_printf_i+0x1ea>
 8006d7e:	1b40      	subs	r0, r0, r5
 8006d80:	6060      	str	r0, [r4, #4]
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	2300      	movs	r3, #0
 8006d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8c:	e7aa      	b.n	8006ce4 <_printf_i+0x14c>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d0ad      	beq.n	8006cf8 <_printf_i+0x160>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	079b      	lsls	r3, r3, #30
 8006da0:	d413      	bmi.n	8006dca <_printf_i+0x232>
 8006da2:	68e0      	ldr	r0, [r4, #12]
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	4298      	cmp	r0, r3
 8006da8:	bfb8      	it	lt
 8006daa:	4618      	movlt	r0, r3
 8006dac:	e7a6      	b.n	8006cfc <_printf_i+0x164>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4632      	mov	r2, r6
 8006db2:	4649      	mov	r1, r9
 8006db4:	4640      	mov	r0, r8
 8006db6:	47d0      	blx	sl
 8006db8:	3001      	adds	r0, #1
 8006dba:	d09d      	beq.n	8006cf8 <_printf_i+0x160>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	9903      	ldr	r1, [sp, #12]
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dcf2      	bgt.n	8006dae <_printf_i+0x216>
 8006dc8:	e7eb      	b.n	8006da2 <_printf_i+0x20a>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	f104 0619 	add.w	r6, r4, #25
 8006dd0:	e7f5      	b.n	8006dbe <_printf_i+0x226>
 8006dd2:	bf00      	nop
 8006dd4:	0800ade7 	.word	0x0800ade7
 8006dd8:	0800adf8 	.word	0x0800adf8

08006ddc <_scanf_float>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	b087      	sub	sp, #28
 8006de2:	4617      	mov	r7, r2
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	688b      	ldr	r3, [r1, #8]
 8006de8:	1e5a      	subs	r2, r3, #1
 8006dea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006dee:	bf83      	ittte	hi
 8006df0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006df4:	195b      	addhi	r3, r3, r5
 8006df6:	9302      	strhi	r3, [sp, #8]
 8006df8:	2300      	movls	r3, #0
 8006dfa:	bf86      	itte	hi
 8006dfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e00:	608b      	strhi	r3, [r1, #8]
 8006e02:	9302      	strls	r3, [sp, #8]
 8006e04:	680b      	ldr	r3, [r1, #0]
 8006e06:	468b      	mov	fp, r1
 8006e08:	2500      	movs	r5, #0
 8006e0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e16:	4680      	mov	r8, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	465e      	mov	r6, fp
 8006e1c:	46aa      	mov	sl, r5
 8006e1e:	46a9      	mov	r9, r5
 8006e20:	9501      	str	r5, [sp, #4]
 8006e22:	68a2      	ldr	r2, [r4, #8]
 8006e24:	b152      	cbz	r2, 8006e3c <_scanf_float+0x60>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b4e      	cmp	r3, #78	; 0x4e
 8006e2c:	d864      	bhi.n	8006ef8 <_scanf_float+0x11c>
 8006e2e:	2b40      	cmp	r3, #64	; 0x40
 8006e30:	d83c      	bhi.n	8006eac <_scanf_float+0xd0>
 8006e32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e36:	b2c8      	uxtb	r0, r1
 8006e38:	280e      	cmp	r0, #14
 8006e3a:	d93a      	bls.n	8006eb2 <_scanf_float+0xd6>
 8006e3c:	f1b9 0f00 	cmp.w	r9, #0
 8006e40:	d003      	beq.n	8006e4a <_scanf_float+0x6e>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e4e:	f1ba 0f01 	cmp.w	sl, #1
 8006e52:	f200 8113 	bhi.w	800707c <_scanf_float+0x2a0>
 8006e56:	455e      	cmp	r6, fp
 8006e58:	f200 8105 	bhi.w	8007066 <_scanf_float+0x28a>
 8006e5c:	2501      	movs	r5, #1
 8006e5e:	4628      	mov	r0, r5
 8006e60:	b007      	add	sp, #28
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e6a:	2a0d      	cmp	r2, #13
 8006e6c:	d8e6      	bhi.n	8006e3c <_scanf_float+0x60>
 8006e6e:	a101      	add	r1, pc, #4	; (adr r1, 8006e74 <_scanf_float+0x98>)
 8006e70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e74:	08006fb3 	.word	0x08006fb3
 8006e78:	08006e3d 	.word	0x08006e3d
 8006e7c:	08006e3d 	.word	0x08006e3d
 8006e80:	08006e3d 	.word	0x08006e3d
 8006e84:	08007013 	.word	0x08007013
 8006e88:	08006feb 	.word	0x08006feb
 8006e8c:	08006e3d 	.word	0x08006e3d
 8006e90:	08006e3d 	.word	0x08006e3d
 8006e94:	08006fc1 	.word	0x08006fc1
 8006e98:	08006e3d 	.word	0x08006e3d
 8006e9c:	08006e3d 	.word	0x08006e3d
 8006ea0:	08006e3d 	.word	0x08006e3d
 8006ea4:	08006e3d 	.word	0x08006e3d
 8006ea8:	08006f79 	.word	0x08006f79
 8006eac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006eb0:	e7db      	b.n	8006e6a <_scanf_float+0x8e>
 8006eb2:	290e      	cmp	r1, #14
 8006eb4:	d8c2      	bhi.n	8006e3c <_scanf_float+0x60>
 8006eb6:	a001      	add	r0, pc, #4	; (adr r0, 8006ebc <_scanf_float+0xe0>)
 8006eb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ebc:	08006f6b 	.word	0x08006f6b
 8006ec0:	08006e3d 	.word	0x08006e3d
 8006ec4:	08006f6b 	.word	0x08006f6b
 8006ec8:	08006fff 	.word	0x08006fff
 8006ecc:	08006e3d 	.word	0x08006e3d
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f55 	.word	0x08006f55
 8006ed8:	08006f55 	.word	0x08006f55
 8006edc:	08006f55 	.word	0x08006f55
 8006ee0:	08006f55 	.word	0x08006f55
 8006ee4:	08006f55 	.word	0x08006f55
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08006f55 	.word	0x08006f55
 8006ef8:	2b6e      	cmp	r3, #110	; 0x6e
 8006efa:	d809      	bhi.n	8006f10 <_scanf_float+0x134>
 8006efc:	2b60      	cmp	r3, #96	; 0x60
 8006efe:	d8b2      	bhi.n	8006e66 <_scanf_float+0x8a>
 8006f00:	2b54      	cmp	r3, #84	; 0x54
 8006f02:	d077      	beq.n	8006ff4 <_scanf_float+0x218>
 8006f04:	2b59      	cmp	r3, #89	; 0x59
 8006f06:	d199      	bne.n	8006e3c <_scanf_float+0x60>
 8006f08:	2d07      	cmp	r5, #7
 8006f0a:	d197      	bne.n	8006e3c <_scanf_float+0x60>
 8006f0c:	2508      	movs	r5, #8
 8006f0e:	e029      	b.n	8006f64 <_scanf_float+0x188>
 8006f10:	2b74      	cmp	r3, #116	; 0x74
 8006f12:	d06f      	beq.n	8006ff4 <_scanf_float+0x218>
 8006f14:	2b79      	cmp	r3, #121	; 0x79
 8006f16:	e7f6      	b.n	8006f06 <_scanf_float+0x12a>
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	05c8      	lsls	r0, r1, #23
 8006f1c:	d51a      	bpl.n	8006f54 <_scanf_float+0x178>
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f24:	6021      	str	r1, [r4, #0]
 8006f26:	f109 0901 	add.w	r9, r9, #1
 8006f2a:	b11b      	cbz	r3, 8006f34 <_scanf_float+0x158>
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	3201      	adds	r2, #1
 8006f30:	9302      	str	r3, [sp, #8]
 8006f32:	60a2      	str	r2, [r4, #8]
 8006f34:	68a3      	ldr	r3, [r4, #8]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	60a3      	str	r3, [r4, #8]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	f340 8084 	ble.w	8007054 <_scanf_float+0x278>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	e766      	b.n	8006e22 <_scanf_float+0x46>
 8006f54:	eb1a 0f05 	cmn.w	sl, r5
 8006f58:	f47f af70 	bne.w	8006e3c <_scanf_float+0x60>
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	f806 3b01 	strb.w	r3, [r6], #1
 8006f68:	e7e4      	b.n	8006f34 <_scanf_float+0x158>
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	0610      	lsls	r0, r2, #24
 8006f6e:	f57f af65 	bpl.w	8006e3c <_scanf_float+0x60>
 8006f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f76:	e7f4      	b.n	8006f62 <_scanf_float+0x186>
 8006f78:	f1ba 0f00 	cmp.w	sl, #0
 8006f7c:	d10e      	bne.n	8006f9c <_scanf_float+0x1c0>
 8006f7e:	f1b9 0f00 	cmp.w	r9, #0
 8006f82:	d10e      	bne.n	8006fa2 <_scanf_float+0x1c6>
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f8e:	d108      	bne.n	8006fa2 <_scanf_float+0x1c6>
 8006f90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	f04f 0a01 	mov.w	sl, #1
 8006f9a:	e7e3      	b.n	8006f64 <_scanf_float+0x188>
 8006f9c:	f1ba 0f02 	cmp.w	sl, #2
 8006fa0:	d055      	beq.n	800704e <_scanf_float+0x272>
 8006fa2:	2d01      	cmp	r5, #1
 8006fa4:	d002      	beq.n	8006fac <_scanf_float+0x1d0>
 8006fa6:	2d04      	cmp	r5, #4
 8006fa8:	f47f af48 	bne.w	8006e3c <_scanf_float+0x60>
 8006fac:	3501      	adds	r5, #1
 8006fae:	b2ed      	uxtb	r5, r5
 8006fb0:	e7d8      	b.n	8006f64 <_scanf_float+0x188>
 8006fb2:	f1ba 0f01 	cmp.w	sl, #1
 8006fb6:	f47f af41 	bne.w	8006e3c <_scanf_float+0x60>
 8006fba:	f04f 0a02 	mov.w	sl, #2
 8006fbe:	e7d1      	b.n	8006f64 <_scanf_float+0x188>
 8006fc0:	b97d      	cbnz	r5, 8006fe2 <_scanf_float+0x206>
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	f47f af3c 	bne.w	8006e42 <_scanf_float+0x66>
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fd4:	f47f af39 	bne.w	8006e4a <_scanf_float+0x6e>
 8006fd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	2501      	movs	r5, #1
 8006fe0:	e7c0      	b.n	8006f64 <_scanf_float+0x188>
 8006fe2:	2d03      	cmp	r5, #3
 8006fe4:	d0e2      	beq.n	8006fac <_scanf_float+0x1d0>
 8006fe6:	2d05      	cmp	r5, #5
 8006fe8:	e7de      	b.n	8006fa8 <_scanf_float+0x1cc>
 8006fea:	2d02      	cmp	r5, #2
 8006fec:	f47f af26 	bne.w	8006e3c <_scanf_float+0x60>
 8006ff0:	2503      	movs	r5, #3
 8006ff2:	e7b7      	b.n	8006f64 <_scanf_float+0x188>
 8006ff4:	2d06      	cmp	r5, #6
 8006ff6:	f47f af21 	bne.w	8006e3c <_scanf_float+0x60>
 8006ffa:	2507      	movs	r5, #7
 8006ffc:	e7b2      	b.n	8006f64 <_scanf_float+0x188>
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	0591      	lsls	r1, r2, #22
 8007002:	f57f af1b 	bpl.w	8006e3c <_scanf_float+0x60>
 8007006:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800700a:	6022      	str	r2, [r4, #0]
 800700c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007010:	e7a8      	b.n	8006f64 <_scanf_float+0x188>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007018:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800701c:	d006      	beq.n	800702c <_scanf_float+0x250>
 800701e:	0550      	lsls	r0, r2, #21
 8007020:	f57f af0c 	bpl.w	8006e3c <_scanf_float+0x60>
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	f43f af0f 	beq.w	8006e4a <_scanf_float+0x6e>
 800702c:	0591      	lsls	r1, r2, #22
 800702e:	bf58      	it	pl
 8007030:	9901      	ldrpl	r1, [sp, #4]
 8007032:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007036:	bf58      	it	pl
 8007038:	eba9 0101 	subpl.w	r1, r9, r1
 800703c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007040:	bf58      	it	pl
 8007042:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	f04f 0900 	mov.w	r9, #0
 800704c:	e78a      	b.n	8006f64 <_scanf_float+0x188>
 800704e:	f04f 0a03 	mov.w	sl, #3
 8007052:	e787      	b.n	8006f64 <_scanf_float+0x188>
 8007054:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007058:	4639      	mov	r1, r7
 800705a:	4640      	mov	r0, r8
 800705c:	4798      	blx	r3
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f aedf 	beq.w	8006e22 <_scanf_float+0x46>
 8007064:	e6ea      	b.n	8006e3c <_scanf_float+0x60>
 8007066:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800706a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800706e:	463a      	mov	r2, r7
 8007070:	4640      	mov	r0, r8
 8007072:	4798      	blx	r3
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	3b01      	subs	r3, #1
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	e6ec      	b.n	8006e56 <_scanf_float+0x7a>
 800707c:	1e6b      	subs	r3, r5, #1
 800707e:	2b06      	cmp	r3, #6
 8007080:	d825      	bhi.n	80070ce <_scanf_float+0x2f2>
 8007082:	2d02      	cmp	r5, #2
 8007084:	d836      	bhi.n	80070f4 <_scanf_float+0x318>
 8007086:	455e      	cmp	r6, fp
 8007088:	f67f aee8 	bls.w	8006e5c <_scanf_float+0x80>
 800708c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007090:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007094:	463a      	mov	r2, r7
 8007096:	4640      	mov	r0, r8
 8007098:	4798      	blx	r3
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	3b01      	subs	r3, #1
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	e7f1      	b.n	8007086 <_scanf_float+0x2aa>
 80070a2:	9802      	ldr	r0, [sp, #8]
 80070a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070ac:	9002      	str	r0, [sp, #8]
 80070ae:	463a      	mov	r2, r7
 80070b0:	4640      	mov	r0, r8
 80070b2:	4798      	blx	r3
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070be:	fa5f fa8a 	uxtb.w	sl, sl
 80070c2:	f1ba 0f02 	cmp.w	sl, #2
 80070c6:	d1ec      	bne.n	80070a2 <_scanf_float+0x2c6>
 80070c8:	3d03      	subs	r5, #3
 80070ca:	b2ed      	uxtb	r5, r5
 80070cc:	1b76      	subs	r6, r6, r5
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	05da      	lsls	r2, r3, #23
 80070d2:	d52f      	bpl.n	8007134 <_scanf_float+0x358>
 80070d4:	055b      	lsls	r3, r3, #21
 80070d6:	d510      	bpl.n	80070fa <_scanf_float+0x31e>
 80070d8:	455e      	cmp	r6, fp
 80070da:	f67f aebf 	bls.w	8006e5c <_scanf_float+0x80>
 80070de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070e6:	463a      	mov	r2, r7
 80070e8:	4640      	mov	r0, r8
 80070ea:	4798      	blx	r3
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	e7f1      	b.n	80070d8 <_scanf_float+0x2fc>
 80070f4:	46aa      	mov	sl, r5
 80070f6:	9602      	str	r6, [sp, #8]
 80070f8:	e7df      	b.n	80070ba <_scanf_float+0x2de>
 80070fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	2965      	cmp	r1, #101	; 0x65
 8007102:	f103 33ff 	add.w	r3, r3, #4294967295
 8007106:	f106 35ff 	add.w	r5, r6, #4294967295
 800710a:	6123      	str	r3, [r4, #16]
 800710c:	d00c      	beq.n	8007128 <_scanf_float+0x34c>
 800710e:	2945      	cmp	r1, #69	; 0x45
 8007110:	d00a      	beq.n	8007128 <_scanf_float+0x34c>
 8007112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007116:	463a      	mov	r2, r7
 8007118:	4640      	mov	r0, r8
 800711a:	4798      	blx	r3
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007122:	3b01      	subs	r3, #1
 8007124:	1eb5      	subs	r5, r6, #2
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712c:	463a      	mov	r2, r7
 800712e:	4640      	mov	r0, r8
 8007130:	4798      	blx	r3
 8007132:	462e      	mov	r6, r5
 8007134:	6825      	ldr	r5, [r4, #0]
 8007136:	f015 0510 	ands.w	r5, r5, #16
 800713a:	d158      	bne.n	80071ee <_scanf_float+0x412>
 800713c:	7035      	strb	r5, [r6, #0]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007148:	d11c      	bne.n	8007184 <_scanf_float+0x3a8>
 800714a:	9b01      	ldr	r3, [sp, #4]
 800714c:	454b      	cmp	r3, r9
 800714e:	eba3 0209 	sub.w	r2, r3, r9
 8007152:	d124      	bne.n	800719e <_scanf_float+0x3c2>
 8007154:	2200      	movs	r2, #0
 8007156:	4659      	mov	r1, fp
 8007158:	4640      	mov	r0, r8
 800715a:	f002 fba5 	bl	80098a8 <_strtod_r>
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	6821      	ldr	r1, [r4, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f011 0f02 	tst.w	r1, #2
 8007168:	ec57 6b10 	vmov	r6, r7, d0
 800716c:	f103 0204 	add.w	r2, r3, #4
 8007170:	d020      	beq.n	80071b4 <_scanf_float+0x3d8>
 8007172:	9903      	ldr	r1, [sp, #12]
 8007174:	600a      	str	r2, [r1, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	e9c3 6700 	strd	r6, r7, [r3]
 800717c:	68e3      	ldr	r3, [r4, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60e3      	str	r3, [r4, #12]
 8007182:	e66c      	b.n	8006e5e <_scanf_float+0x82>
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0e4      	beq.n	8007154 <_scanf_float+0x378>
 800718a:	9905      	ldr	r1, [sp, #20]
 800718c:	230a      	movs	r3, #10
 800718e:	462a      	mov	r2, r5
 8007190:	3101      	adds	r1, #1
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff f9b0 	bl	80064f8 <_strtol_r>
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	9e05      	ldr	r6, [sp, #20]
 800719c:	1ac2      	subs	r2, r0, r3
 800719e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071a2:	429e      	cmp	r6, r3
 80071a4:	bf28      	it	cs
 80071a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071aa:	4912      	ldr	r1, [pc, #72]	; (80071f4 <_scanf_float+0x418>)
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 f8e7 	bl	8007380 <siprintf>
 80071b2:	e7cf      	b.n	8007154 <_scanf_float+0x378>
 80071b4:	f011 0f04 	tst.w	r1, #4
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	600a      	str	r2, [r1, #0]
 80071bc:	d1db      	bne.n	8007176 <_scanf_float+0x39a>
 80071be:	f8d3 8000 	ldr.w	r8, [r3]
 80071c2:	ee10 2a10 	vmov	r2, s0
 80071c6:	ee10 0a10 	vmov	r0, s0
 80071ca:	463b      	mov	r3, r7
 80071cc:	4639      	mov	r1, r7
 80071ce:	f7f9 fcbd 	bl	8000b4c <__aeabi_dcmpun>
 80071d2:	b128      	cbz	r0, 80071e0 <_scanf_float+0x404>
 80071d4:	4808      	ldr	r0, [pc, #32]	; (80071f8 <_scanf_float+0x41c>)
 80071d6:	f000 f9e1 	bl	800759c <nanf>
 80071da:	ed88 0a00 	vstr	s0, [r8]
 80071de:	e7cd      	b.n	800717c <_scanf_float+0x3a0>
 80071e0:	4630      	mov	r0, r6
 80071e2:	4639      	mov	r1, r7
 80071e4:	f7f9 fd10 	bl	8000c08 <__aeabi_d2f>
 80071e8:	f8c8 0000 	str.w	r0, [r8]
 80071ec:	e7c6      	b.n	800717c <_scanf_float+0x3a0>
 80071ee:	2500      	movs	r5, #0
 80071f0:	e635      	b.n	8006e5e <_scanf_float+0x82>
 80071f2:	bf00      	nop
 80071f4:	0800ae09 	.word	0x0800ae09
 80071f8:	0800b09c 	.word	0x0800b09c

080071fc <std>:
 80071fc:	2300      	movs	r3, #0
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
 8007202:	e9c0 3300 	strd	r3, r3, [r0]
 8007206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720a:	6083      	str	r3, [r0, #8]
 800720c:	8181      	strh	r1, [r0, #12]
 800720e:	6643      	str	r3, [r0, #100]	; 0x64
 8007210:	81c2      	strh	r2, [r0, #14]
 8007212:	6183      	str	r3, [r0, #24]
 8007214:	4619      	mov	r1, r3
 8007216:	2208      	movs	r2, #8
 8007218:	305c      	adds	r0, #92	; 0x5c
 800721a:	f000 f914 	bl	8007446 <memset>
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x58>)
 8007220:	6263      	str	r3, [r4, #36]	; 0x24
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <std+0x5c>)
 8007224:	62a3      	str	r3, [r4, #40]	; 0x28
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <std+0x60>)
 8007228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <std+0x64>)
 800722c:	6323      	str	r3, [r4, #48]	; 0x30
 800722e:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <std+0x68>)
 8007230:	6224      	str	r4, [r4, #32]
 8007232:	429c      	cmp	r4, r3
 8007234:	d006      	beq.n	8007244 <std+0x48>
 8007236:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800723a:	4294      	cmp	r4, r2
 800723c:	d002      	beq.n	8007244 <std+0x48>
 800723e:	33d0      	adds	r3, #208	; 0xd0
 8007240:	429c      	cmp	r4, r3
 8007242:	d105      	bne.n	8007250 <std+0x54>
 8007244:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800724c:	f000 b99a 	b.w	8007584 <__retarget_lock_init_recursive>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	080073c1 	.word	0x080073c1
 8007258:	080073e3 	.word	0x080073e3
 800725c:	0800741b 	.word	0x0800741b
 8007260:	0800743f 	.word	0x0800743f
 8007264:	200004f4 	.word	0x200004f4

08007268 <stdio_exit_handler>:
 8007268:	4a02      	ldr	r2, [pc, #8]	; (8007274 <stdio_exit_handler+0xc>)
 800726a:	4903      	ldr	r1, [pc, #12]	; (8007278 <stdio_exit_handler+0x10>)
 800726c:	4803      	ldr	r0, [pc, #12]	; (800727c <stdio_exit_handler+0x14>)
 800726e:	f000 b869 	b.w	8007344 <_fwalk_sglue>
 8007272:	bf00      	nop
 8007274:	20000014 	.word	0x20000014
 8007278:	08009c71 	.word	0x08009c71
 800727c:	20000020 	.word	0x20000020

08007280 <cleanup_stdio>:
 8007280:	6841      	ldr	r1, [r0, #4]
 8007282:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <cleanup_stdio+0x34>)
 8007284:	4299      	cmp	r1, r3
 8007286:	b510      	push	{r4, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d001      	beq.n	8007290 <cleanup_stdio+0x10>
 800728c:	f002 fcf0 	bl	8009c70 <_fflush_r>
 8007290:	68a1      	ldr	r1, [r4, #8]
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <cleanup_stdio+0x38>)
 8007294:	4299      	cmp	r1, r3
 8007296:	d002      	beq.n	800729e <cleanup_stdio+0x1e>
 8007298:	4620      	mov	r0, r4
 800729a:	f002 fce9 	bl	8009c70 <_fflush_r>
 800729e:	68e1      	ldr	r1, [r4, #12]
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <cleanup_stdio+0x3c>)
 80072a2:	4299      	cmp	r1, r3
 80072a4:	d004      	beq.n	80072b0 <cleanup_stdio+0x30>
 80072a6:	4620      	mov	r0, r4
 80072a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ac:	f002 bce0 	b.w	8009c70 <_fflush_r>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	200004f4 	.word	0x200004f4
 80072b8:	2000055c 	.word	0x2000055c
 80072bc:	200005c4 	.word	0x200005c4

080072c0 <global_stdio_init.part.0>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <global_stdio_init.part.0+0x30>)
 80072c4:	4c0b      	ldr	r4, [pc, #44]	; (80072f4 <global_stdio_init.part.0+0x34>)
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <global_stdio_init.part.0+0x38>)
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	4620      	mov	r0, r4
 80072cc:	2200      	movs	r2, #0
 80072ce:	2104      	movs	r1, #4
 80072d0:	f7ff ff94 	bl	80071fc <std>
 80072d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072d8:	2201      	movs	r2, #1
 80072da:	2109      	movs	r1, #9
 80072dc:	f7ff ff8e 	bl	80071fc <std>
 80072e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072e4:	2202      	movs	r2, #2
 80072e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ea:	2112      	movs	r1, #18
 80072ec:	f7ff bf86 	b.w	80071fc <std>
 80072f0:	2000062c 	.word	0x2000062c
 80072f4:	200004f4 	.word	0x200004f4
 80072f8:	08007269 	.word	0x08007269

080072fc <__sfp_lock_acquire>:
 80072fc:	4801      	ldr	r0, [pc, #4]	; (8007304 <__sfp_lock_acquire+0x8>)
 80072fe:	f000 b942 	b.w	8007586 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	20000635 	.word	0x20000635

08007308 <__sfp_lock_release>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sfp_lock_release+0x8>)
 800730a:	f000 b93d 	b.w	8007588 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	20000635 	.word	0x20000635

08007314 <__sinit>:
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
 8007318:	f7ff fff0 	bl	80072fc <__sfp_lock_acquire>
 800731c:	6a23      	ldr	r3, [r4, #32]
 800731e:	b11b      	cbz	r3, 8007328 <__sinit+0x14>
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f7ff bff0 	b.w	8007308 <__sfp_lock_release>
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <__sinit+0x28>)
 800732a:	6223      	str	r3, [r4, #32]
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <__sinit+0x2c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f5      	bne.n	8007320 <__sinit+0xc>
 8007334:	f7ff ffc4 	bl	80072c0 <global_stdio_init.part.0>
 8007338:	e7f2      	b.n	8007320 <__sinit+0xc>
 800733a:	bf00      	nop
 800733c:	08007281 	.word	0x08007281
 8007340:	2000062c 	.word	0x2000062c

08007344 <_fwalk_sglue>:
 8007344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007348:	4607      	mov	r7, r0
 800734a:	4688      	mov	r8, r1
 800734c:	4614      	mov	r4, r2
 800734e:	2600      	movs	r6, #0
 8007350:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007354:	f1b9 0901 	subs.w	r9, r9, #1
 8007358:	d505      	bpl.n	8007366 <_fwalk_sglue+0x22>
 800735a:	6824      	ldr	r4, [r4, #0]
 800735c:	2c00      	cmp	r4, #0
 800735e:	d1f7      	bne.n	8007350 <_fwalk_sglue+0xc>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d907      	bls.n	800737c <_fwalk_sglue+0x38>
 800736c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007370:	3301      	adds	r3, #1
 8007372:	d003      	beq.n	800737c <_fwalk_sglue+0x38>
 8007374:	4629      	mov	r1, r5
 8007376:	4638      	mov	r0, r7
 8007378:	47c0      	blx	r8
 800737a:	4306      	orrs	r6, r0
 800737c:	3568      	adds	r5, #104	; 0x68
 800737e:	e7e9      	b.n	8007354 <_fwalk_sglue+0x10>

08007380 <siprintf>:
 8007380:	b40e      	push	{r1, r2, r3}
 8007382:	b500      	push	{lr}
 8007384:	b09c      	sub	sp, #112	; 0x70
 8007386:	ab1d      	add	r3, sp, #116	; 0x74
 8007388:	9002      	str	r0, [sp, #8]
 800738a:	9006      	str	r0, [sp, #24]
 800738c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007390:	4809      	ldr	r0, [pc, #36]	; (80073b8 <siprintf+0x38>)
 8007392:	9107      	str	r1, [sp, #28]
 8007394:	9104      	str	r1, [sp, #16]
 8007396:	4909      	ldr	r1, [pc, #36]	; (80073bc <siprintf+0x3c>)
 8007398:	f853 2b04 	ldr.w	r2, [r3], #4
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	6800      	ldr	r0, [r0, #0]
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	a902      	add	r1, sp, #8
 80073a4:	f002 fae0 	bl	8009968 <_svfiprintf_r>
 80073a8:	9b02      	ldr	r3, [sp, #8]
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	b01c      	add	sp, #112	; 0x70
 80073b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b4:	b003      	add	sp, #12
 80073b6:	4770      	bx	lr
 80073b8:	2000006c 	.word	0x2000006c
 80073bc:	ffff0208 	.word	0xffff0208

080073c0 <__sread>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c8:	f000 f87e 	bl	80074c8 <_read_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	bfab      	itete	ge
 80073d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073d2:	89a3      	ldrhlt	r3, [r4, #12]
 80073d4:	181b      	addge	r3, r3, r0
 80073d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073da:	bfac      	ite	ge
 80073dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073de:	81a3      	strhlt	r3, [r4, #12]
 80073e0:	bd10      	pop	{r4, pc}

080073e2 <__swrite>:
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	461f      	mov	r7, r3
 80073e8:	898b      	ldrh	r3, [r1, #12]
 80073ea:	05db      	lsls	r3, r3, #23
 80073ec:	4605      	mov	r5, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	4616      	mov	r6, r2
 80073f2:	d505      	bpl.n	8007400 <__swrite+0x1e>
 80073f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f8:	2302      	movs	r3, #2
 80073fa:	2200      	movs	r2, #0
 80073fc:	f000 f852 	bl	80074a4 <_lseek_r>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4628      	mov	r0, r5
 8007412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007416:	f000 b879 	b.w	800750c <_write_r>

0800741a <__sseek>:
 800741a:	b510      	push	{r4, lr}
 800741c:	460c      	mov	r4, r1
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 f83f 	bl	80074a4 <_lseek_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	bf15      	itete	ne
 800742c:	6560      	strne	r0, [r4, #84]	; 0x54
 800742e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007436:	81a3      	strheq	r3, [r4, #12]
 8007438:	bf18      	it	ne
 800743a:	81a3      	strhne	r3, [r4, #12]
 800743c:	bd10      	pop	{r4, pc}

0800743e <__sclose>:
 800743e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007442:	f000 b81f 	b.w	8007484 <_close_r>

08007446 <memset>:
 8007446:	4402      	add	r2, r0
 8007448:	4603      	mov	r3, r0
 800744a:	4293      	cmp	r3, r2
 800744c:	d100      	bne.n	8007450 <memset+0xa>
 800744e:	4770      	bx	lr
 8007450:	f803 1b01 	strb.w	r1, [r3], #1
 8007454:	e7f9      	b.n	800744a <memset+0x4>

08007456 <strncpy>:
 8007456:	b510      	push	{r4, lr}
 8007458:	3901      	subs	r1, #1
 800745a:	4603      	mov	r3, r0
 800745c:	b132      	cbz	r2, 800746c <strncpy+0x16>
 800745e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007462:	f803 4b01 	strb.w	r4, [r3], #1
 8007466:	3a01      	subs	r2, #1
 8007468:	2c00      	cmp	r4, #0
 800746a:	d1f7      	bne.n	800745c <strncpy+0x6>
 800746c:	441a      	add	r2, r3
 800746e:	2100      	movs	r1, #0
 8007470:	4293      	cmp	r3, r2
 8007472:	d100      	bne.n	8007476 <strncpy+0x20>
 8007474:	bd10      	pop	{r4, pc}
 8007476:	f803 1b01 	strb.w	r1, [r3], #1
 800747a:	e7f9      	b.n	8007470 <strncpy+0x1a>

0800747c <_localeconv_r>:
 800747c:	4800      	ldr	r0, [pc, #0]	; (8007480 <_localeconv_r+0x4>)
 800747e:	4770      	bx	lr
 8007480:	20000160 	.word	0x20000160

08007484 <_close_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	; (80074a0 <_close_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fa fdfb 	bl	800208a <_close>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_close_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_close_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20000630 	.word	0x20000630

080074a4 <_lseek_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	; (80074c4 <_lseek_r+0x20>)
 80074a8:	4604      	mov	r4, r0
 80074aa:	4608      	mov	r0, r1
 80074ac:	4611      	mov	r1, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7fa fe10 	bl	80020d8 <_lseek>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_lseek_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_lseek_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	20000630 	.word	0x20000630

080074c8 <_read_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	; (80074e8 <_read_r+0x20>)
 80074cc:	4604      	mov	r4, r0
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	2200      	movs	r2, #0
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7fa fd9e 	bl	8002018 <_read>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_read_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_read_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20000630 	.word	0x20000630

080074ec <_sbrk_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d06      	ldr	r5, [pc, #24]	; (8007508 <_sbrk_r+0x1c>)
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7fa fdfc 	bl	80020f4 <_sbrk>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_sbrk_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_sbrk_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	20000630 	.word	0x20000630

0800750c <_write_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d07      	ldr	r5, [pc, #28]	; (800752c <_write_r+0x20>)
 8007510:	4604      	mov	r4, r0
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	2200      	movs	r2, #0
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	f7fa fd99 	bl	8002052 <_write>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_write_r+0x1e>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_write_r+0x1e>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000630 	.word	0x20000630

08007530 <__errno>:
 8007530:	4b01      	ldr	r3, [pc, #4]	; (8007538 <__errno+0x8>)
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	2000006c 	.word	0x2000006c

0800753c <__libc_init_array>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4d0d      	ldr	r5, [pc, #52]	; (8007574 <__libc_init_array+0x38>)
 8007540:	4c0d      	ldr	r4, [pc, #52]	; (8007578 <__libc_init_array+0x3c>)
 8007542:	1b64      	subs	r4, r4, r5
 8007544:	10a4      	asrs	r4, r4, #2
 8007546:	2600      	movs	r6, #0
 8007548:	42a6      	cmp	r6, r4
 800754a:	d109      	bne.n	8007560 <__libc_init_array+0x24>
 800754c:	4d0b      	ldr	r5, [pc, #44]	; (800757c <__libc_init_array+0x40>)
 800754e:	4c0c      	ldr	r4, [pc, #48]	; (8007580 <__libc_init_array+0x44>)
 8007550:	f003 fb9c 	bl	800ac8c <_init>
 8007554:	1b64      	subs	r4, r4, r5
 8007556:	10a4      	asrs	r4, r4, #2
 8007558:	2600      	movs	r6, #0
 800755a:	42a6      	cmp	r6, r4
 800755c:	d105      	bne.n	800756a <__libc_init_array+0x2e>
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	f855 3b04 	ldr.w	r3, [r5], #4
 8007564:	4798      	blx	r3
 8007566:	3601      	adds	r6, #1
 8007568:	e7ee      	b.n	8007548 <__libc_init_array+0xc>
 800756a:	f855 3b04 	ldr.w	r3, [r5], #4
 800756e:	4798      	blx	r3
 8007570:	3601      	adds	r6, #1
 8007572:	e7f2      	b.n	800755a <__libc_init_array+0x1e>
 8007574:	0800b108 	.word	0x0800b108
 8007578:	0800b108 	.word	0x0800b108
 800757c:	0800b108 	.word	0x0800b108
 8007580:	0800b10c 	.word	0x0800b10c

08007584 <__retarget_lock_init_recursive>:
 8007584:	4770      	bx	lr

08007586 <__retarget_lock_acquire_recursive>:
 8007586:	4770      	bx	lr

08007588 <__retarget_lock_release_recursive>:
 8007588:	4770      	bx	lr

0800758a <strcpy>:
 800758a:	4603      	mov	r3, r0
 800758c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007590:	f803 2b01 	strb.w	r2, [r3], #1
 8007594:	2a00      	cmp	r2, #0
 8007596:	d1f9      	bne.n	800758c <strcpy+0x2>
 8007598:	4770      	bx	lr
	...

0800759c <nanf>:
 800759c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075a4 <nanf+0x8>
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	7fc00000 	.word	0x7fc00000

080075a8 <quorem>:
 80075a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	6903      	ldr	r3, [r0, #16]
 80075ae:	690c      	ldr	r4, [r1, #16]
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	4607      	mov	r7, r0
 80075b4:	db7e      	blt.n	80076b4 <quorem+0x10c>
 80075b6:	3c01      	subs	r4, #1
 80075b8:	f101 0814 	add.w	r8, r1, #20
 80075bc:	f100 0514 	add.w	r5, r0, #20
 80075c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ce:	3301      	adds	r3, #1
 80075d0:	429a      	cmp	r2, r3
 80075d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075da:	fbb2 f6f3 	udiv	r6, r2, r3
 80075de:	d331      	bcc.n	8007644 <quorem+0x9c>
 80075e0:	f04f 0e00 	mov.w	lr, #0
 80075e4:	4640      	mov	r0, r8
 80075e6:	46ac      	mov	ip, r5
 80075e8:	46f2      	mov	sl, lr
 80075ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80075ee:	b293      	uxth	r3, r2
 80075f0:	fb06 e303 	mla	r3, r6, r3, lr
 80075f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075f8:	0c1a      	lsrs	r2, r3, #16
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	ebaa 0303 	sub.w	r3, sl, r3
 8007600:	f8dc a000 	ldr.w	sl, [ip]
 8007604:	fa13 f38a 	uxtah	r3, r3, sl
 8007608:	fb06 220e 	mla	r2, r6, lr, r2
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007614:	b292      	uxth	r2, r2
 8007616:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800761a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800761e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007622:	4581      	cmp	r9, r0
 8007624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007628:	f84c 3b04 	str.w	r3, [ip], #4
 800762c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007630:	d2db      	bcs.n	80075ea <quorem+0x42>
 8007632:	f855 300b 	ldr.w	r3, [r5, fp]
 8007636:	b92b      	cbnz	r3, 8007644 <quorem+0x9c>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	3b04      	subs	r3, #4
 800763c:	429d      	cmp	r5, r3
 800763e:	461a      	mov	r2, r3
 8007640:	d32c      	bcc.n	800769c <quorem+0xf4>
 8007642:	613c      	str	r4, [r7, #16]
 8007644:	4638      	mov	r0, r7
 8007646:	f001 f93b 	bl	80088c0 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	db22      	blt.n	8007694 <quorem+0xec>
 800764e:	3601      	adds	r6, #1
 8007650:	4629      	mov	r1, r5
 8007652:	2000      	movs	r0, #0
 8007654:	f858 2b04 	ldr.w	r2, [r8], #4
 8007658:	f8d1 c000 	ldr.w	ip, [r1]
 800765c:	b293      	uxth	r3, r2
 800765e:	1ac3      	subs	r3, r0, r3
 8007660:	0c12      	lsrs	r2, r2, #16
 8007662:	fa13 f38c 	uxtah	r3, r3, ip
 8007666:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800766a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007674:	45c1      	cmp	r9, r8
 8007676:	f841 3b04 	str.w	r3, [r1], #4
 800767a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800767e:	d2e9      	bcs.n	8007654 <quorem+0xac>
 8007680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007684:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007688:	b922      	cbnz	r2, 8007694 <quorem+0xec>
 800768a:	3b04      	subs	r3, #4
 800768c:	429d      	cmp	r5, r3
 800768e:	461a      	mov	r2, r3
 8007690:	d30a      	bcc.n	80076a8 <quorem+0x100>
 8007692:	613c      	str	r4, [r7, #16]
 8007694:	4630      	mov	r0, r6
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	3b04      	subs	r3, #4
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	d1ce      	bne.n	8007642 <quorem+0x9a>
 80076a4:	3c01      	subs	r4, #1
 80076a6:	e7c9      	b.n	800763c <quorem+0x94>
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	3b04      	subs	r3, #4
 80076ac:	2a00      	cmp	r2, #0
 80076ae:	d1f0      	bne.n	8007692 <quorem+0xea>
 80076b0:	3c01      	subs	r4, #1
 80076b2:	e7eb      	b.n	800768c <quorem+0xe4>
 80076b4:	2000      	movs	r0, #0
 80076b6:	e7ee      	b.n	8007696 <quorem+0xee>

080076b8 <_dtoa_r>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	ed2d 8b04 	vpush	{d8-d9}
 80076c0:	69c5      	ldr	r5, [r0, #28]
 80076c2:	b093      	sub	sp, #76	; 0x4c
 80076c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076c8:	ec57 6b10 	vmov	r6, r7, d0
 80076cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076d0:	9107      	str	r1, [sp, #28]
 80076d2:	4604      	mov	r4, r0
 80076d4:	920a      	str	r2, [sp, #40]	; 0x28
 80076d6:	930d      	str	r3, [sp, #52]	; 0x34
 80076d8:	b975      	cbnz	r5, 80076f8 <_dtoa_r+0x40>
 80076da:	2010      	movs	r0, #16
 80076dc:	f7fe fdce 	bl	800627c <malloc>
 80076e0:	4602      	mov	r2, r0
 80076e2:	61e0      	str	r0, [r4, #28]
 80076e4:	b920      	cbnz	r0, 80076f0 <_dtoa_r+0x38>
 80076e6:	4bae      	ldr	r3, [pc, #696]	; (80079a0 <_dtoa_r+0x2e8>)
 80076e8:	21ef      	movs	r1, #239	; 0xef
 80076ea:	48ae      	ldr	r0, [pc, #696]	; (80079a4 <_dtoa_r+0x2ec>)
 80076ec:	f002 fb2c 	bl	8009d48 <__assert_func>
 80076f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076f4:	6005      	str	r5, [r0, #0]
 80076f6:	60c5      	str	r5, [r0, #12]
 80076f8:	69e3      	ldr	r3, [r4, #28]
 80076fa:	6819      	ldr	r1, [r3, #0]
 80076fc:	b151      	cbz	r1, 8007714 <_dtoa_r+0x5c>
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	604a      	str	r2, [r1, #4]
 8007702:	2301      	movs	r3, #1
 8007704:	4093      	lsls	r3, r2
 8007706:	608b      	str	r3, [r1, #8]
 8007708:	4620      	mov	r0, r4
 800770a:	f000 fe53 	bl	80083b4 <_Bfree>
 800770e:	69e3      	ldr	r3, [r4, #28]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	1e3b      	subs	r3, r7, #0
 8007716:	bfbb      	ittet	lt
 8007718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800771c:	9303      	strlt	r3, [sp, #12]
 800771e:	2300      	movge	r3, #0
 8007720:	2201      	movlt	r2, #1
 8007722:	bfac      	ite	ge
 8007724:	f8c8 3000 	strge.w	r3, [r8]
 8007728:	f8c8 2000 	strlt.w	r2, [r8]
 800772c:	4b9e      	ldr	r3, [pc, #632]	; (80079a8 <_dtoa_r+0x2f0>)
 800772e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007732:	ea33 0308 	bics.w	r3, r3, r8
 8007736:	d11b      	bne.n	8007770 <_dtoa_r+0xb8>
 8007738:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800773a:	f242 730f 	movw	r3, #9999	; 0x270f
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007744:	4333      	orrs	r3, r6
 8007746:	f000 8593 	beq.w	8008270 <_dtoa_r+0xbb8>
 800774a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800774c:	b963      	cbnz	r3, 8007768 <_dtoa_r+0xb0>
 800774e:	4b97      	ldr	r3, [pc, #604]	; (80079ac <_dtoa_r+0x2f4>)
 8007750:	e027      	b.n	80077a2 <_dtoa_r+0xea>
 8007752:	4b97      	ldr	r3, [pc, #604]	; (80079b0 <_dtoa_r+0x2f8>)
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	9800      	ldr	r0, [sp, #0]
 800775e:	b013      	add	sp, #76	; 0x4c
 8007760:	ecbd 8b04 	vpop	{d8-d9}
 8007764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007768:	4b90      	ldr	r3, [pc, #576]	; (80079ac <_dtoa_r+0x2f4>)
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	3303      	adds	r3, #3
 800776e:	e7f3      	b.n	8007758 <_dtoa_r+0xa0>
 8007770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	ec51 0b17 	vmov	r0, r1, d7
 800777a:	eeb0 8a47 	vmov.f32	s16, s14
 800777e:	eef0 8a67 	vmov.f32	s17, s15
 8007782:	2300      	movs	r3, #0
 8007784:	f7f9 f9b0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007788:	4681      	mov	r9, r0
 800778a:	b160      	cbz	r0, 80077a6 <_dtoa_r+0xee>
 800778c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800778e:	2301      	movs	r3, #1
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8568 	beq.w	800826a <_dtoa_r+0xbb2>
 800779a:	4b86      	ldr	r3, [pc, #536]	; (80079b4 <_dtoa_r+0x2fc>)
 800779c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	e7da      	b.n	800775c <_dtoa_r+0xa4>
 80077a6:	aa10      	add	r2, sp, #64	; 0x40
 80077a8:	a911      	add	r1, sp, #68	; 0x44
 80077aa:	4620      	mov	r0, r4
 80077ac:	eeb0 0a48 	vmov.f32	s0, s16
 80077b0:	eef0 0a68 	vmov.f32	s1, s17
 80077b4:	f001 f99a 	bl	8008aec <__d2b>
 80077b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80077bc:	4682      	mov	sl, r0
 80077be:	2d00      	cmp	r5, #0
 80077c0:	d07f      	beq.n	80078c2 <_dtoa_r+0x20a>
 80077c2:	ee18 3a90 	vmov	r3, s17
 80077c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80077ce:	ec51 0b18 	vmov	r0, r1, d8
 80077d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80077de:	4619      	mov	r1, r3
 80077e0:	2200      	movs	r2, #0
 80077e2:	4b75      	ldr	r3, [pc, #468]	; (80079b8 <_dtoa_r+0x300>)
 80077e4:	f7f8 fd60 	bl	80002a8 <__aeabi_dsub>
 80077e8:	a367      	add	r3, pc, #412	; (adr r3, 8007988 <_dtoa_r+0x2d0>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f7f8 ff13 	bl	8000618 <__aeabi_dmul>
 80077f2:	a367      	add	r3, pc, #412	; (adr r3, 8007990 <_dtoa_r+0x2d8>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 fd58 	bl	80002ac <__adddf3>
 80077fc:	4606      	mov	r6, r0
 80077fe:	4628      	mov	r0, r5
 8007800:	460f      	mov	r7, r1
 8007802:	f7f8 fe9f 	bl	8000544 <__aeabi_i2d>
 8007806:	a364      	add	r3, pc, #400	; (adr r3, 8007998 <_dtoa_r+0x2e0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 ff04 	bl	8000618 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fd48 	bl	80002ac <__adddf3>
 800781c:	4606      	mov	r6, r0
 800781e:	460f      	mov	r7, r1
 8007820:	f7f9 f9aa 	bl	8000b78 <__aeabi_d2iz>
 8007824:	2200      	movs	r2, #0
 8007826:	4683      	mov	fp, r0
 8007828:	2300      	movs	r3, #0
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f9 f965 	bl	8000afc <__aeabi_dcmplt>
 8007832:	b148      	cbz	r0, 8007848 <_dtoa_r+0x190>
 8007834:	4658      	mov	r0, fp
 8007836:	f7f8 fe85 	bl	8000544 <__aeabi_i2d>
 800783a:	4632      	mov	r2, r6
 800783c:	463b      	mov	r3, r7
 800783e:	f7f9 f953 	bl	8000ae8 <__aeabi_dcmpeq>
 8007842:	b908      	cbnz	r0, 8007848 <_dtoa_r+0x190>
 8007844:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007848:	f1bb 0f16 	cmp.w	fp, #22
 800784c:	d857      	bhi.n	80078fe <_dtoa_r+0x246>
 800784e:	4b5b      	ldr	r3, [pc, #364]	; (80079bc <_dtoa_r+0x304>)
 8007850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	ec51 0b18 	vmov	r0, r1, d8
 800785c:	f7f9 f94e 	bl	8000afc <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	d04e      	beq.n	8007902 <_dtoa_r+0x24a>
 8007864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007868:	2300      	movs	r3, #0
 800786a:	930c      	str	r3, [sp, #48]	; 0x30
 800786c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800786e:	1b5b      	subs	r3, r3, r5
 8007870:	1e5a      	subs	r2, r3, #1
 8007872:	bf45      	ittet	mi
 8007874:	f1c3 0301 	rsbmi	r3, r3, #1
 8007878:	9305      	strmi	r3, [sp, #20]
 800787a:	2300      	movpl	r3, #0
 800787c:	2300      	movmi	r3, #0
 800787e:	9206      	str	r2, [sp, #24]
 8007880:	bf54      	ite	pl
 8007882:	9305      	strpl	r3, [sp, #20]
 8007884:	9306      	strmi	r3, [sp, #24]
 8007886:	f1bb 0f00 	cmp.w	fp, #0
 800788a:	db3c      	blt.n	8007906 <_dtoa_r+0x24e>
 800788c:	9b06      	ldr	r3, [sp, #24]
 800788e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007892:	445b      	add	r3, fp
 8007894:	9306      	str	r3, [sp, #24]
 8007896:	2300      	movs	r3, #0
 8007898:	9308      	str	r3, [sp, #32]
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	2b09      	cmp	r3, #9
 800789e:	d868      	bhi.n	8007972 <_dtoa_r+0x2ba>
 80078a0:	2b05      	cmp	r3, #5
 80078a2:	bfc4      	itt	gt
 80078a4:	3b04      	subgt	r3, #4
 80078a6:	9307      	strgt	r3, [sp, #28]
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	f1a3 0302 	sub.w	r3, r3, #2
 80078ae:	bfcc      	ite	gt
 80078b0:	2500      	movgt	r5, #0
 80078b2:	2501      	movle	r5, #1
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	f200 8085 	bhi.w	80079c4 <_dtoa_r+0x30c>
 80078ba:	e8df f003 	tbb	[pc, r3]
 80078be:	3b2e      	.short	0x3b2e
 80078c0:	5839      	.short	0x5839
 80078c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078c6:	441d      	add	r5, r3
 80078c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	bfc1      	itttt	gt
 80078d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80078d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80078dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80078e0:	bfd6      	itet	le
 80078e2:	f1c3 0320 	rsble	r3, r3, #32
 80078e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80078ea:	fa06 f003 	lslle.w	r0, r6, r3
 80078ee:	f7f8 fe19 	bl	8000524 <__aeabi_ui2d>
 80078f2:	2201      	movs	r2, #1
 80078f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80078f8:	3d01      	subs	r5, #1
 80078fa:	920e      	str	r2, [sp, #56]	; 0x38
 80078fc:	e76f      	b.n	80077de <_dtoa_r+0x126>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7b3      	b.n	800786a <_dtoa_r+0x1b2>
 8007902:	900c      	str	r0, [sp, #48]	; 0x30
 8007904:	e7b2      	b.n	800786c <_dtoa_r+0x1b4>
 8007906:	9b05      	ldr	r3, [sp, #20]
 8007908:	eba3 030b 	sub.w	r3, r3, fp
 800790c:	9305      	str	r3, [sp, #20]
 800790e:	f1cb 0300 	rsb	r3, fp, #0
 8007912:	9308      	str	r3, [sp, #32]
 8007914:	2300      	movs	r3, #0
 8007916:	930b      	str	r3, [sp, #44]	; 0x2c
 8007918:	e7bf      	b.n	800789a <_dtoa_r+0x1e2>
 800791a:	2300      	movs	r3, #0
 800791c:	9309      	str	r3, [sp, #36]	; 0x24
 800791e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc52      	bgt.n	80079ca <_dtoa_r+0x312>
 8007924:	2301      	movs	r3, #1
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	461a      	mov	r2, r3
 800792c:	920a      	str	r2, [sp, #40]	; 0x28
 800792e:	e00b      	b.n	8007948 <_dtoa_r+0x290>
 8007930:	2301      	movs	r3, #1
 8007932:	e7f3      	b.n	800791c <_dtoa_r+0x264>
 8007934:	2300      	movs	r3, #0
 8007936:	9309      	str	r3, [sp, #36]	; 0x24
 8007938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793a:	445b      	add	r3, fp
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	3301      	adds	r3, #1
 8007940:	2b01      	cmp	r3, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	bfb8      	it	lt
 8007946:	2301      	movlt	r3, #1
 8007948:	69e0      	ldr	r0, [r4, #28]
 800794a:	2100      	movs	r1, #0
 800794c:	2204      	movs	r2, #4
 800794e:	f102 0614 	add.w	r6, r2, #20
 8007952:	429e      	cmp	r6, r3
 8007954:	d93d      	bls.n	80079d2 <_dtoa_r+0x31a>
 8007956:	6041      	str	r1, [r0, #4]
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fceb 	bl	8008334 <_Balloc>
 800795e:	9000      	str	r0, [sp, #0]
 8007960:	2800      	cmp	r0, #0
 8007962:	d139      	bne.n	80079d8 <_dtoa_r+0x320>
 8007964:	4b16      	ldr	r3, [pc, #88]	; (80079c0 <_dtoa_r+0x308>)
 8007966:	4602      	mov	r2, r0
 8007968:	f240 11af 	movw	r1, #431	; 0x1af
 800796c:	e6bd      	b.n	80076ea <_dtoa_r+0x32>
 800796e:	2301      	movs	r3, #1
 8007970:	e7e1      	b.n	8007936 <_dtoa_r+0x27e>
 8007972:	2501      	movs	r5, #1
 8007974:	2300      	movs	r3, #0
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	9509      	str	r5, [sp, #36]	; 0x24
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	2200      	movs	r2, #0
 8007984:	2312      	movs	r3, #18
 8007986:	e7d1      	b.n	800792c <_dtoa_r+0x274>
 8007988:	636f4361 	.word	0x636f4361
 800798c:	3fd287a7 	.word	0x3fd287a7
 8007990:	8b60c8b3 	.word	0x8b60c8b3
 8007994:	3fc68a28 	.word	0x3fc68a28
 8007998:	509f79fb 	.word	0x509f79fb
 800799c:	3fd34413 	.word	0x3fd34413
 80079a0:	0800ae1b 	.word	0x0800ae1b
 80079a4:	0800ae32 	.word	0x0800ae32
 80079a8:	7ff00000 	.word	0x7ff00000
 80079ac:	0800ae17 	.word	0x0800ae17
 80079b0:	0800ae0e 	.word	0x0800ae0e
 80079b4:	0800ade6 	.word	0x0800ade6
 80079b8:	3ff80000 	.word	0x3ff80000
 80079bc:	0800af20 	.word	0x0800af20
 80079c0:	0800ae8a 	.word	0x0800ae8a
 80079c4:	2301      	movs	r3, #1
 80079c6:	9309      	str	r3, [sp, #36]	; 0x24
 80079c8:	e7d7      	b.n	800797a <_dtoa_r+0x2c2>
 80079ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	e7ba      	b.n	8007948 <_dtoa_r+0x290>
 80079d2:	3101      	adds	r1, #1
 80079d4:	0052      	lsls	r2, r2, #1
 80079d6:	e7ba      	b.n	800794e <_dtoa_r+0x296>
 80079d8:	69e3      	ldr	r3, [r4, #28]
 80079da:	9a00      	ldr	r2, [sp, #0]
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	2b0e      	cmp	r3, #14
 80079e2:	f200 80a8 	bhi.w	8007b36 <_dtoa_r+0x47e>
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	f000 80a5 	beq.w	8007b36 <_dtoa_r+0x47e>
 80079ec:	f1bb 0f00 	cmp.w	fp, #0
 80079f0:	dd38      	ble.n	8007a64 <_dtoa_r+0x3ac>
 80079f2:	4bc0      	ldr	r3, [pc, #768]	; (8007cf4 <_dtoa_r+0x63c>)
 80079f4:	f00b 020f 	and.w	r2, fp, #15
 80079f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007a04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007a08:	d019      	beq.n	8007a3e <_dtoa_r+0x386>
 8007a0a:	4bbb      	ldr	r3, [pc, #748]	; (8007cf8 <_dtoa_r+0x640>)
 8007a0c:	ec51 0b18 	vmov	r0, r1, d8
 8007a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a14:	f7f8 ff2a 	bl	800086c <__aeabi_ddiv>
 8007a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1c:	f008 080f 	and.w	r8, r8, #15
 8007a20:	2503      	movs	r5, #3
 8007a22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007cf8 <_dtoa_r+0x640>
 8007a26:	f1b8 0f00 	cmp.w	r8, #0
 8007a2a:	d10a      	bne.n	8007a42 <_dtoa_r+0x38a>
 8007a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a30:	4632      	mov	r2, r6
 8007a32:	463b      	mov	r3, r7
 8007a34:	f7f8 ff1a 	bl	800086c <__aeabi_ddiv>
 8007a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a3c:	e02b      	b.n	8007a96 <_dtoa_r+0x3de>
 8007a3e:	2502      	movs	r5, #2
 8007a40:	e7ef      	b.n	8007a22 <_dtoa_r+0x36a>
 8007a42:	f018 0f01 	tst.w	r8, #1
 8007a46:	d008      	beq.n	8007a5a <_dtoa_r+0x3a2>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a50:	f7f8 fde2 	bl	8000618 <__aeabi_dmul>
 8007a54:	3501      	adds	r5, #1
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a5e:	f109 0908 	add.w	r9, r9, #8
 8007a62:	e7e0      	b.n	8007a26 <_dtoa_r+0x36e>
 8007a64:	f000 809f 	beq.w	8007ba6 <_dtoa_r+0x4ee>
 8007a68:	f1cb 0600 	rsb	r6, fp, #0
 8007a6c:	4ba1      	ldr	r3, [pc, #644]	; (8007cf4 <_dtoa_r+0x63c>)
 8007a6e:	4fa2      	ldr	r7, [pc, #648]	; (8007cf8 <_dtoa_r+0x640>)
 8007a70:	f006 020f 	and.w	r2, r6, #15
 8007a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	ec51 0b18 	vmov	r0, r1, d8
 8007a80:	f7f8 fdca 	bl	8000618 <__aeabi_dmul>
 8007a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a88:	1136      	asrs	r6, r6, #4
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2502      	movs	r5, #2
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d17e      	bne.n	8007b90 <_dtoa_r+0x4d8>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1d0      	bne.n	8007a38 <_dtoa_r+0x380>
 8007a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8084 	beq.w	8007baa <_dtoa_r+0x4f2>
 8007aa2:	4b96      	ldr	r3, [pc, #600]	; (8007cfc <_dtoa_r+0x644>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	f7f9 f827 	bl	8000afc <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d07b      	beq.n	8007baa <_dtoa_r+0x4f2>
 8007ab2:	9b04      	ldr	r3, [sp, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d078      	beq.n	8007baa <_dtoa_r+0x4f2>
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd39      	ble.n	8007b32 <_dtoa_r+0x47a>
 8007abe:	4b90      	ldr	r3, [pc, #576]	; (8007d00 <_dtoa_r+0x648>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f7f8 fda7 	bl	8000618 <__aeabi_dmul>
 8007aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ace:	9e01      	ldr	r6, [sp, #4]
 8007ad0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7f8 fd32 	bl	8000544 <__aeabi_i2d>
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	f7f8 fd98 	bl	8000618 <__aeabi_dmul>
 8007ae8:	4b86      	ldr	r3, [pc, #536]	; (8007d04 <_dtoa_r+0x64c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	f7f8 fbde 	bl	80002ac <__adddf3>
 8007af0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	2e00      	cmp	r6, #0
 8007afc:	d158      	bne.n	8007bb0 <_dtoa_r+0x4f8>
 8007afe:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <_dtoa_r+0x650>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	4640      	mov	r0, r8
 8007b04:	4649      	mov	r1, r9
 8007b06:	f7f8 fbcf 	bl	80002a8 <__aeabi_dsub>
 8007b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0e:	4680      	mov	r8, r0
 8007b10:	4689      	mov	r9, r1
 8007b12:	f7f9 f811 	bl	8000b38 <__aeabi_dcmpgt>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f040 8296 	bne.w	8008048 <_dtoa_r+0x990>
 8007b1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b20:	4640      	mov	r0, r8
 8007b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 ffe8 	bl	8000afc <__aeabi_dcmplt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f040 8289 	bne.w	8008044 <_dtoa_r+0x98c>
 8007b32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f2c0 814e 	blt.w	8007dda <_dtoa_r+0x722>
 8007b3e:	f1bb 0f0e 	cmp.w	fp, #14
 8007b42:	f300 814a 	bgt.w	8007dda <_dtoa_r+0x722>
 8007b46:	4b6b      	ldr	r3, [pc, #428]	; (8007cf4 <_dtoa_r+0x63c>)
 8007b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f280 80dc 	bge.w	8007d10 <_dtoa_r+0x658>
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f300 80d8 	bgt.w	8007d10 <_dtoa_r+0x658>
 8007b60:	f040 826f 	bne.w	8008042 <_dtoa_r+0x98a>
 8007b64:	4b68      	ldr	r3, [pc, #416]	; (8007d08 <_dtoa_r+0x650>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	f7f8 fd54 	bl	8000618 <__aeabi_dmul>
 8007b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b74:	f7f8 ffd6 	bl	8000b24 <__aeabi_dcmpge>
 8007b78:	9e04      	ldr	r6, [sp, #16]
 8007b7a:	4637      	mov	r7, r6
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f040 8245 	bne.w	800800c <_dtoa_r+0x954>
 8007b82:	9d00      	ldr	r5, [sp, #0]
 8007b84:	2331      	movs	r3, #49	; 0x31
 8007b86:	f805 3b01 	strb.w	r3, [r5], #1
 8007b8a:	f10b 0b01 	add.w	fp, fp, #1
 8007b8e:	e241      	b.n	8008014 <_dtoa_r+0x95c>
 8007b90:	07f2      	lsls	r2, r6, #31
 8007b92:	d505      	bpl.n	8007ba0 <_dtoa_r+0x4e8>
 8007b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b98:	f7f8 fd3e 	bl	8000618 <__aeabi_dmul>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	1076      	asrs	r6, r6, #1
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	e773      	b.n	8007a8e <_dtoa_r+0x3d6>
 8007ba6:	2502      	movs	r5, #2
 8007ba8:	e775      	b.n	8007a96 <_dtoa_r+0x3de>
 8007baa:	9e04      	ldr	r6, [sp, #16]
 8007bac:	465f      	mov	r7, fp
 8007bae:	e792      	b.n	8007ad6 <_dtoa_r+0x41e>
 8007bb0:	9900      	ldr	r1, [sp, #0]
 8007bb2:	4b50      	ldr	r3, [pc, #320]	; (8007cf4 <_dtoa_r+0x63c>)
 8007bb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bb8:	4431      	add	r1, r6
 8007bba:	9102      	str	r1, [sp, #8]
 8007bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bbe:	eeb0 9a47 	vmov.f32	s18, s14
 8007bc2:	eef0 9a67 	vmov.f32	s19, s15
 8007bc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	d044      	beq.n	8007c5c <_dtoa_r+0x5a4>
 8007bd2:	494e      	ldr	r1, [pc, #312]	; (8007d0c <_dtoa_r+0x654>)
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f7f8 fe49 	bl	800086c <__aeabi_ddiv>
 8007bda:	ec53 2b19 	vmov	r2, r3, d9
 8007bde:	f7f8 fb63 	bl	80002a8 <__aeabi_dsub>
 8007be2:	9d00      	ldr	r5, [sp, #0]
 8007be4:	ec41 0b19 	vmov	d9, r0, r1
 8007be8:	4649      	mov	r1, r9
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7f8 ffc4 	bl	8000b78 <__aeabi_d2iz>
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	f7f8 fca7 	bl	8000544 <__aeabi_i2d>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	f7f8 fb53 	bl	80002a8 <__aeabi_dsub>
 8007c02:	3630      	adds	r6, #48	; 0x30
 8007c04:	f805 6b01 	strb.w	r6, [r5], #1
 8007c08:	ec53 2b19 	vmov	r2, r3, d9
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4689      	mov	r9, r1
 8007c10:	f7f8 ff74 	bl	8000afc <__aeabi_dcmplt>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d164      	bne.n	8007ce2 <_dtoa_r+0x62a>
 8007c18:	4642      	mov	r2, r8
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	4937      	ldr	r1, [pc, #220]	; (8007cfc <_dtoa_r+0x644>)
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f7f8 fb42 	bl	80002a8 <__aeabi_dsub>
 8007c24:	ec53 2b19 	vmov	r2, r3, d9
 8007c28:	f7f8 ff68 	bl	8000afc <__aeabi_dcmplt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f040 80b6 	bne.w	8007d9e <_dtoa_r+0x6e6>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	429d      	cmp	r5, r3
 8007c36:	f43f af7c 	beq.w	8007b32 <_dtoa_r+0x47a>
 8007c3a:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <_dtoa_r+0x648>)
 8007c3c:	ec51 0b19 	vmov	r0, r1, d9
 8007c40:	2200      	movs	r2, #0
 8007c42:	f7f8 fce9 	bl	8000618 <__aeabi_dmul>
 8007c46:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <_dtoa_r+0x648>)
 8007c48:	ec41 0b19 	vmov	d9, r0, r1
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4640      	mov	r0, r8
 8007c50:	4649      	mov	r1, r9
 8007c52:	f7f8 fce1 	bl	8000618 <__aeabi_dmul>
 8007c56:	4680      	mov	r8, r0
 8007c58:	4689      	mov	r9, r1
 8007c5a:	e7c5      	b.n	8007be8 <_dtoa_r+0x530>
 8007c5c:	ec51 0b17 	vmov	r0, r1, d7
 8007c60:	f7f8 fcda 	bl	8000618 <__aeabi_dmul>
 8007c64:	9b02      	ldr	r3, [sp, #8]
 8007c66:	9d00      	ldr	r5, [sp, #0]
 8007c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c6a:	ec41 0b19 	vmov	d9, r0, r1
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	f7f8 ff81 	bl	8000b78 <__aeabi_d2iz>
 8007c76:	4606      	mov	r6, r0
 8007c78:	f7f8 fc64 	bl	8000544 <__aeabi_i2d>
 8007c7c:	3630      	adds	r6, #48	; 0x30
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	f7f8 fb0f 	bl	80002a8 <__aeabi_dsub>
 8007c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	429d      	cmp	r5, r3
 8007c92:	4680      	mov	r8, r0
 8007c94:	4689      	mov	r9, r1
 8007c96:	f04f 0200 	mov.w	r2, #0
 8007c9a:	d124      	bne.n	8007ce6 <_dtoa_r+0x62e>
 8007c9c:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <_dtoa_r+0x654>)
 8007c9e:	ec51 0b19 	vmov	r0, r1, d9
 8007ca2:	f7f8 fb03 	bl	80002ac <__adddf3>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f7f8 ff43 	bl	8000b38 <__aeabi_dcmpgt>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d173      	bne.n	8007d9e <_dtoa_r+0x6e6>
 8007cb6:	ec53 2b19 	vmov	r2, r3, d9
 8007cba:	4914      	ldr	r1, [pc, #80]	; (8007d0c <_dtoa_r+0x654>)
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f7f8 faf3 	bl	80002a8 <__aeabi_dsub>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 ff17 	bl	8000afc <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f af2f 	beq.w	8007b32 <_dtoa_r+0x47a>
 8007cd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cd6:	1e6b      	subs	r3, r5, #1
 8007cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cde:	2b30      	cmp	r3, #48	; 0x30
 8007ce0:	d0f8      	beq.n	8007cd4 <_dtoa_r+0x61c>
 8007ce2:	46bb      	mov	fp, r7
 8007ce4:	e04a      	b.n	8007d7c <_dtoa_r+0x6c4>
 8007ce6:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <_dtoa_r+0x648>)
 8007ce8:	f7f8 fc96 	bl	8000618 <__aeabi_dmul>
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	e7bd      	b.n	8007c6e <_dtoa_r+0x5b6>
 8007cf2:	bf00      	nop
 8007cf4:	0800af20 	.word	0x0800af20
 8007cf8:	0800aef8 	.word	0x0800aef8
 8007cfc:	3ff00000 	.word	0x3ff00000
 8007d00:	40240000 	.word	0x40240000
 8007d04:	401c0000 	.word	0x401c0000
 8007d08:	40140000 	.word	0x40140000
 8007d0c:	3fe00000 	.word	0x3fe00000
 8007d10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d14:	9d00      	ldr	r5, [sp, #0]
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fda5 	bl	800086c <__aeabi_ddiv>
 8007d22:	f7f8 ff29 	bl	8000b78 <__aeabi_d2iz>
 8007d26:	9001      	str	r0, [sp, #4]
 8007d28:	f7f8 fc0c 	bl	8000544 <__aeabi_i2d>
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	f7f8 fc72 	bl	8000618 <__aeabi_dmul>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fab4 	bl	80002a8 <__aeabi_dsub>
 8007d40:	9e01      	ldr	r6, [sp, #4]
 8007d42:	9f04      	ldr	r7, [sp, #16]
 8007d44:	3630      	adds	r6, #48	; 0x30
 8007d46:	f805 6b01 	strb.w	r6, [r5], #1
 8007d4a:	9e00      	ldr	r6, [sp, #0]
 8007d4c:	1bae      	subs	r6, r5, r6
 8007d4e:	42b7      	cmp	r7, r6
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	d134      	bne.n	8007dc0 <_dtoa_r+0x708>
 8007d56:	f7f8 faa9 	bl	80002ac <__adddf3>
 8007d5a:	4642      	mov	r2, r8
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	f7f8 fee9 	bl	8000b38 <__aeabi_dcmpgt>
 8007d66:	b9c8      	cbnz	r0, 8007d9c <_dtoa_r+0x6e4>
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	4639      	mov	r1, r7
 8007d70:	f7f8 feba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d74:	b110      	cbz	r0, 8007d7c <_dtoa_r+0x6c4>
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	07db      	lsls	r3, r3, #31
 8007d7a:	d40f      	bmi.n	8007d9c <_dtoa_r+0x6e4>
 8007d7c:	4651      	mov	r1, sl
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fb18 	bl	80083b4 <_Bfree>
 8007d84:	2300      	movs	r3, #0
 8007d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d88:	702b      	strb	r3, [r5, #0]
 8007d8a:	f10b 0301 	add.w	r3, fp, #1
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f43f ace2 	beq.w	800775c <_dtoa_r+0xa4>
 8007d98:	601d      	str	r5, [r3, #0]
 8007d9a:	e4df      	b.n	800775c <_dtoa_r+0xa4>
 8007d9c:	465f      	mov	r7, fp
 8007d9e:	462b      	mov	r3, r5
 8007da0:	461d      	mov	r5, r3
 8007da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007da6:	2a39      	cmp	r2, #57	; 0x39
 8007da8:	d106      	bne.n	8007db8 <_dtoa_r+0x700>
 8007daa:	9a00      	ldr	r2, [sp, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d1f7      	bne.n	8007da0 <_dtoa_r+0x6e8>
 8007db0:	9900      	ldr	r1, [sp, #0]
 8007db2:	2230      	movs	r2, #48	; 0x30
 8007db4:	3701      	adds	r7, #1
 8007db6:	700a      	strb	r2, [r1, #0]
 8007db8:	781a      	ldrb	r2, [r3, #0]
 8007dba:	3201      	adds	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e790      	b.n	8007ce2 <_dtoa_r+0x62a>
 8007dc0:	4ba3      	ldr	r3, [pc, #652]	; (8008050 <_dtoa_r+0x998>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f7f8 fc28 	bl	8000618 <__aeabi_dmul>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	f7f8 fe8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d09e      	beq.n	8007d16 <_dtoa_r+0x65e>
 8007dd8:	e7d0      	b.n	8007d7c <_dtoa_r+0x6c4>
 8007dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	f000 80ca 	beq.w	8007f76 <_dtoa_r+0x8be>
 8007de2:	9a07      	ldr	r2, [sp, #28]
 8007de4:	2a01      	cmp	r2, #1
 8007de6:	f300 80ad 	bgt.w	8007f44 <_dtoa_r+0x88c>
 8007dea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	f000 80a5 	beq.w	8007f3c <_dtoa_r+0x884>
 8007df2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007df6:	9e08      	ldr	r6, [sp, #32]
 8007df8:	9d05      	ldr	r5, [sp, #20]
 8007dfa:	9a05      	ldr	r2, [sp, #20]
 8007dfc:	441a      	add	r2, r3
 8007dfe:	9205      	str	r2, [sp, #20]
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	2101      	movs	r1, #1
 8007e04:	441a      	add	r2, r3
 8007e06:	4620      	mov	r0, r4
 8007e08:	9206      	str	r2, [sp, #24]
 8007e0a:	f000 fbd3 	bl	80085b4 <__i2b>
 8007e0e:	4607      	mov	r7, r0
 8007e10:	b165      	cbz	r5, 8007e2c <_dtoa_r+0x774>
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dd09      	ble.n	8007e2c <_dtoa_r+0x774>
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	9a05      	ldr	r2, [sp, #20]
 8007e1c:	bfa8      	it	ge
 8007e1e:	462b      	movge	r3, r5
 8007e20:	1ad2      	subs	r2, r2, r3
 8007e22:	9205      	str	r2, [sp, #20]
 8007e24:	9a06      	ldr	r2, [sp, #24]
 8007e26:	1aed      	subs	r5, r5, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	9306      	str	r3, [sp, #24]
 8007e2c:	9b08      	ldr	r3, [sp, #32]
 8007e2e:	b1f3      	cbz	r3, 8007e6e <_dtoa_r+0x7b6>
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 80a3 	beq.w	8007f7e <_dtoa_r+0x8c6>
 8007e38:	2e00      	cmp	r6, #0
 8007e3a:	dd10      	ble.n	8007e5e <_dtoa_r+0x7a6>
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	4632      	mov	r2, r6
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fc77 	bl	8008734 <__pow5mult>
 8007e46:	4652      	mov	r2, sl
 8007e48:	4601      	mov	r1, r0
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fbc7 	bl	80085e0 <__multiply>
 8007e52:	4651      	mov	r1, sl
 8007e54:	4680      	mov	r8, r0
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 faac 	bl	80083b4 <_Bfree>
 8007e5c:	46c2      	mov	sl, r8
 8007e5e:	9b08      	ldr	r3, [sp, #32]
 8007e60:	1b9a      	subs	r2, r3, r6
 8007e62:	d004      	beq.n	8007e6e <_dtoa_r+0x7b6>
 8007e64:	4651      	mov	r1, sl
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 fc64 	bl	8008734 <__pow5mult>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fb9f 	bl	80085b4 <__i2b>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	f340 8081 	ble.w	8007f82 <_dtoa_r+0x8ca>
 8007e80:	461a      	mov	r2, r3
 8007e82:	4601      	mov	r1, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fc55 	bl	8008734 <__pow5mult>
 8007e8a:	9b07      	ldr	r3, [sp, #28]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	4606      	mov	r6, r0
 8007e90:	dd7a      	ble.n	8007f88 <_dtoa_r+0x8d0>
 8007e92:	f04f 0800 	mov.w	r8, #0
 8007e96:	6933      	ldr	r3, [r6, #16]
 8007e98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e9c:	6918      	ldr	r0, [r3, #16]
 8007e9e:	f000 fb3b 	bl	8008518 <__hi0bits>
 8007ea2:	f1c0 0020 	rsb	r0, r0, #32
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	4418      	add	r0, r3
 8007eaa:	f010 001f 	ands.w	r0, r0, #31
 8007eae:	f000 8094 	beq.w	8007fda <_dtoa_r+0x922>
 8007eb2:	f1c0 0320 	rsb	r3, r0, #32
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	f340 8085 	ble.w	8007fc6 <_dtoa_r+0x90e>
 8007ebc:	9b05      	ldr	r3, [sp, #20]
 8007ebe:	f1c0 001c 	rsb	r0, r0, #28
 8007ec2:	4403      	add	r3, r0
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	9b06      	ldr	r3, [sp, #24]
 8007ec8:	4403      	add	r3, r0
 8007eca:	4405      	add	r5, r0
 8007ecc:	9306      	str	r3, [sp, #24]
 8007ece:	9b05      	ldr	r3, [sp, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd05      	ble.n	8007ee0 <_dtoa_r+0x828>
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fc85 	bl	80087e8 <__lshift>
 8007ede:	4682      	mov	sl, r0
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd05      	ble.n	8007ef2 <_dtoa_r+0x83a>
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fc7c 	bl	80087e8 <__lshift>
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d072      	beq.n	8007fde <_dtoa_r+0x926>
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4650      	mov	r0, sl
 8007efc:	f000 fce0 	bl	80088c0 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	da6c      	bge.n	8007fde <_dtoa_r+0x926>
 8007f04:	2300      	movs	r3, #0
 8007f06:	4651      	mov	r1, sl
 8007f08:	220a      	movs	r2, #10
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fa74 	bl	80083f8 <__multadd>
 8007f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f16:	4682      	mov	sl, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 81b0 	beq.w	800827e <_dtoa_r+0xbc6>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4639      	mov	r1, r7
 8007f22:	220a      	movs	r2, #10
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fa67 	bl	80083f8 <__multadd>
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	4607      	mov	r7, r0
 8007f30:	f300 8096 	bgt.w	8008060 <_dtoa_r+0x9a8>
 8007f34:	9b07      	ldr	r3, [sp, #28]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	dc59      	bgt.n	8007fee <_dtoa_r+0x936>
 8007f3a:	e091      	b.n	8008060 <_dtoa_r+0x9a8>
 8007f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f42:	e758      	b.n	8007df6 <_dtoa_r+0x73e>
 8007f44:	9b04      	ldr	r3, [sp, #16]
 8007f46:	1e5e      	subs	r6, r3, #1
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	42b3      	cmp	r3, r6
 8007f4c:	bfbf      	itttt	lt
 8007f4e:	9b08      	ldrlt	r3, [sp, #32]
 8007f50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f52:	9608      	strlt	r6, [sp, #32]
 8007f54:	1af3      	sublt	r3, r6, r3
 8007f56:	bfb4      	ite	lt
 8007f58:	18d2      	addlt	r2, r2, r3
 8007f5a:	1b9e      	subge	r6, r3, r6
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	bfbc      	itt	lt
 8007f60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f62:	2600      	movlt	r6, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bfb7      	itett	lt
 8007f68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f70:	1a9d      	sublt	r5, r3, r2
 8007f72:	2300      	movlt	r3, #0
 8007f74:	e741      	b.n	8007dfa <_dtoa_r+0x742>
 8007f76:	9e08      	ldr	r6, [sp, #32]
 8007f78:	9d05      	ldr	r5, [sp, #20]
 8007f7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f7c:	e748      	b.n	8007e10 <_dtoa_r+0x758>
 8007f7e:	9a08      	ldr	r2, [sp, #32]
 8007f80:	e770      	b.n	8007e64 <_dtoa_r+0x7ac>
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	dc19      	bgt.n	8007fbc <_dtoa_r+0x904>
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	b9bb      	cbnz	r3, 8007fbc <_dtoa_r+0x904>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f92:	b99b      	cbnz	r3, 8007fbc <_dtoa_r+0x904>
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f9a:	0d1b      	lsrs	r3, r3, #20
 8007f9c:	051b      	lsls	r3, r3, #20
 8007f9e:	b183      	cbz	r3, 8007fc2 <_dtoa_r+0x90a>
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	f04f 0801 	mov.w	r8, #1
 8007fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f47f af6f 	bne.w	8007e96 <_dtoa_r+0x7de>
 8007fb8:	2001      	movs	r0, #1
 8007fba:	e774      	b.n	8007ea6 <_dtoa_r+0x7ee>
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	e7f6      	b.n	8007fb0 <_dtoa_r+0x8f8>
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	e7f4      	b.n	8007fb0 <_dtoa_r+0x8f8>
 8007fc6:	d082      	beq.n	8007ece <_dtoa_r+0x816>
 8007fc8:	9a05      	ldr	r2, [sp, #20]
 8007fca:	331c      	adds	r3, #28
 8007fcc:	441a      	add	r2, r3
 8007fce:	9205      	str	r2, [sp, #20]
 8007fd0:	9a06      	ldr	r2, [sp, #24]
 8007fd2:	441a      	add	r2, r3
 8007fd4:	441d      	add	r5, r3
 8007fd6:	9206      	str	r2, [sp, #24]
 8007fd8:	e779      	b.n	8007ece <_dtoa_r+0x816>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	e7f4      	b.n	8007fc8 <_dtoa_r+0x910>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dc37      	bgt.n	8008054 <_dtoa_r+0x99c>
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	dd34      	ble.n	8008054 <_dtoa_r+0x99c>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	b963      	cbnz	r3, 800800c <_dtoa_r+0x954>
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	2205      	movs	r2, #5
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f9fe 	bl	80083f8 <__multadd>
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	4606      	mov	r6, r0
 8008000:	4650      	mov	r0, sl
 8008002:	f000 fc5d 	bl	80088c0 <__mcmp>
 8008006:	2800      	cmp	r0, #0
 8008008:	f73f adbb 	bgt.w	8007b82 <_dtoa_r+0x4ca>
 800800c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800e:	9d00      	ldr	r5, [sp, #0]
 8008010:	ea6f 0b03 	mvn.w	fp, r3
 8008014:	f04f 0800 	mov.w	r8, #0
 8008018:	4631      	mov	r1, r6
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f9ca 	bl	80083b4 <_Bfree>
 8008020:	2f00      	cmp	r7, #0
 8008022:	f43f aeab 	beq.w	8007d7c <_dtoa_r+0x6c4>
 8008026:	f1b8 0f00 	cmp.w	r8, #0
 800802a:	d005      	beq.n	8008038 <_dtoa_r+0x980>
 800802c:	45b8      	cmp	r8, r7
 800802e:	d003      	beq.n	8008038 <_dtoa_r+0x980>
 8008030:	4641      	mov	r1, r8
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f9be 	bl	80083b4 <_Bfree>
 8008038:	4639      	mov	r1, r7
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f9ba 	bl	80083b4 <_Bfree>
 8008040:	e69c      	b.n	8007d7c <_dtoa_r+0x6c4>
 8008042:	2600      	movs	r6, #0
 8008044:	4637      	mov	r7, r6
 8008046:	e7e1      	b.n	800800c <_dtoa_r+0x954>
 8008048:	46bb      	mov	fp, r7
 800804a:	4637      	mov	r7, r6
 800804c:	e599      	b.n	8007b82 <_dtoa_r+0x4ca>
 800804e:	bf00      	nop
 8008050:	40240000 	.word	0x40240000
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 80c8 	beq.w	80081ec <_dtoa_r+0xb34>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	2d00      	cmp	r5, #0
 8008062:	dd05      	ble.n	8008070 <_dtoa_r+0x9b8>
 8008064:	4639      	mov	r1, r7
 8008066:	462a      	mov	r2, r5
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fbbd 	bl	80087e8 <__lshift>
 800806e:	4607      	mov	r7, r0
 8008070:	f1b8 0f00 	cmp.w	r8, #0
 8008074:	d05b      	beq.n	800812e <_dtoa_r+0xa76>
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4620      	mov	r0, r4
 800807a:	f000 f95b 	bl	8008334 <_Balloc>
 800807e:	4605      	mov	r5, r0
 8008080:	b928      	cbnz	r0, 800808e <_dtoa_r+0x9d6>
 8008082:	4b83      	ldr	r3, [pc, #524]	; (8008290 <_dtoa_r+0xbd8>)
 8008084:	4602      	mov	r2, r0
 8008086:	f240 21ef 	movw	r1, #751	; 0x2ef
 800808a:	f7ff bb2e 	b.w	80076ea <_dtoa_r+0x32>
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	3202      	adds	r2, #2
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	f107 010c 	add.w	r1, r7, #12
 8008098:	300c      	adds	r0, #12
 800809a:	f001 fe3d 	bl	8009d18 <memcpy>
 800809e:	2201      	movs	r2, #1
 80080a0:	4629      	mov	r1, r5
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 fba0 	bl	80087e8 <__lshift>
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b2:	4413      	add	r3, r2
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	9b02      	ldr	r3, [sp, #8]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	46b8      	mov	r8, r7
 80080be:	9306      	str	r3, [sp, #24]
 80080c0:	4607      	mov	r7, r0
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	4631      	mov	r1, r6
 80080c6:	3b01      	subs	r3, #1
 80080c8:	4650      	mov	r0, sl
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	f7ff fa6c 	bl	80075a8 <quorem>
 80080d0:	4641      	mov	r1, r8
 80080d2:	9002      	str	r0, [sp, #8]
 80080d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080d8:	4650      	mov	r0, sl
 80080da:	f000 fbf1 	bl	80088c0 <__mcmp>
 80080de:	463a      	mov	r2, r7
 80080e0:	9005      	str	r0, [sp, #20]
 80080e2:	4631      	mov	r1, r6
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fc07 	bl	80088f8 <__mdiff>
 80080ea:	68c2      	ldr	r2, [r0, #12]
 80080ec:	4605      	mov	r5, r0
 80080ee:	bb02      	cbnz	r2, 8008132 <_dtoa_r+0xa7a>
 80080f0:	4601      	mov	r1, r0
 80080f2:	4650      	mov	r0, sl
 80080f4:	f000 fbe4 	bl	80088c0 <__mcmp>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4629      	mov	r1, r5
 80080fc:	4620      	mov	r0, r4
 80080fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008100:	f000 f958 	bl	80083b4 <_Bfree>
 8008104:	9b07      	ldr	r3, [sp, #28]
 8008106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008108:	9d04      	ldr	r5, [sp, #16]
 800810a:	ea43 0102 	orr.w	r1, r3, r2
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	4319      	orrs	r1, r3
 8008112:	d110      	bne.n	8008136 <_dtoa_r+0xa7e>
 8008114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008118:	d029      	beq.n	800816e <_dtoa_r+0xab6>
 800811a:	9b05      	ldr	r3, [sp, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd02      	ble.n	8008126 <_dtoa_r+0xa6e>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	f883 9000 	strb.w	r9, [r3]
 800812c:	e774      	b.n	8008018 <_dtoa_r+0x960>
 800812e:	4638      	mov	r0, r7
 8008130:	e7ba      	b.n	80080a8 <_dtoa_r+0x9f0>
 8008132:	2201      	movs	r2, #1
 8008134:	e7e1      	b.n	80080fa <_dtoa_r+0xa42>
 8008136:	9b05      	ldr	r3, [sp, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	db04      	blt.n	8008146 <_dtoa_r+0xa8e>
 800813c:	9907      	ldr	r1, [sp, #28]
 800813e:	430b      	orrs	r3, r1
 8008140:	9906      	ldr	r1, [sp, #24]
 8008142:	430b      	orrs	r3, r1
 8008144:	d120      	bne.n	8008188 <_dtoa_r+0xad0>
 8008146:	2a00      	cmp	r2, #0
 8008148:	dded      	ble.n	8008126 <_dtoa_r+0xa6e>
 800814a:	4651      	mov	r1, sl
 800814c:	2201      	movs	r2, #1
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fb4a 	bl	80087e8 <__lshift>
 8008154:	4631      	mov	r1, r6
 8008156:	4682      	mov	sl, r0
 8008158:	f000 fbb2 	bl	80088c0 <__mcmp>
 800815c:	2800      	cmp	r0, #0
 800815e:	dc03      	bgt.n	8008168 <_dtoa_r+0xab0>
 8008160:	d1e1      	bne.n	8008126 <_dtoa_r+0xa6e>
 8008162:	f019 0f01 	tst.w	r9, #1
 8008166:	d0de      	beq.n	8008126 <_dtoa_r+0xa6e>
 8008168:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800816c:	d1d8      	bne.n	8008120 <_dtoa_r+0xa68>
 800816e:	9a01      	ldr	r2, [sp, #4]
 8008170:	2339      	movs	r3, #57	; 0x39
 8008172:	7013      	strb	r3, [r2, #0]
 8008174:	462b      	mov	r3, r5
 8008176:	461d      	mov	r5, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800817e:	2a39      	cmp	r2, #57	; 0x39
 8008180:	d06c      	beq.n	800825c <_dtoa_r+0xba4>
 8008182:	3201      	adds	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e747      	b.n	8008018 <_dtoa_r+0x960>
 8008188:	2a00      	cmp	r2, #0
 800818a:	dd07      	ble.n	800819c <_dtoa_r+0xae4>
 800818c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008190:	d0ed      	beq.n	800816e <_dtoa_r+0xab6>
 8008192:	9a01      	ldr	r2, [sp, #4]
 8008194:	f109 0301 	add.w	r3, r9, #1
 8008198:	7013      	strb	r3, [r2, #0]
 800819a:	e73d      	b.n	8008018 <_dtoa_r+0x960>
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d043      	beq.n	8008230 <_dtoa_r+0xb78>
 80081a8:	4651      	mov	r1, sl
 80081aa:	2300      	movs	r3, #0
 80081ac:	220a      	movs	r2, #10
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f922 	bl	80083f8 <__multadd>
 80081b4:	45b8      	cmp	r8, r7
 80081b6:	4682      	mov	sl, r0
 80081b8:	f04f 0300 	mov.w	r3, #0
 80081bc:	f04f 020a 	mov.w	r2, #10
 80081c0:	4641      	mov	r1, r8
 80081c2:	4620      	mov	r0, r4
 80081c4:	d107      	bne.n	80081d6 <_dtoa_r+0xb1e>
 80081c6:	f000 f917 	bl	80083f8 <__multadd>
 80081ca:	4680      	mov	r8, r0
 80081cc:	4607      	mov	r7, r0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3301      	adds	r3, #1
 80081d2:	9304      	str	r3, [sp, #16]
 80081d4:	e775      	b.n	80080c2 <_dtoa_r+0xa0a>
 80081d6:	f000 f90f 	bl	80083f8 <__multadd>
 80081da:	4639      	mov	r1, r7
 80081dc:	4680      	mov	r8, r0
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f908 	bl	80083f8 <__multadd>
 80081e8:	4607      	mov	r7, r0
 80081ea:	e7f0      	b.n	80081ce <_dtoa_r+0xb16>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	9d00      	ldr	r5, [sp, #0]
 80081f2:	4631      	mov	r1, r6
 80081f4:	4650      	mov	r0, sl
 80081f6:	f7ff f9d7 	bl	80075a8 <quorem>
 80081fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081fe:	9b00      	ldr	r3, [sp, #0]
 8008200:	f805 9b01 	strb.w	r9, [r5], #1
 8008204:	1aea      	subs	r2, r5, r3
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	4293      	cmp	r3, r2
 800820a:	dd07      	ble.n	800821c <_dtoa_r+0xb64>
 800820c:	4651      	mov	r1, sl
 800820e:	2300      	movs	r3, #0
 8008210:	220a      	movs	r2, #10
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f8f0 	bl	80083f8 <__multadd>
 8008218:	4682      	mov	sl, r0
 800821a:	e7ea      	b.n	80081f2 <_dtoa_r+0xb3a>
 800821c:	9b01      	ldr	r3, [sp, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfc8      	it	gt
 8008222:	461d      	movgt	r5, r3
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	bfd8      	it	le
 8008228:	2501      	movle	r5, #1
 800822a:	441d      	add	r5, r3
 800822c:	f04f 0800 	mov.w	r8, #0
 8008230:	4651      	mov	r1, sl
 8008232:	2201      	movs	r2, #1
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fad7 	bl	80087e8 <__lshift>
 800823a:	4631      	mov	r1, r6
 800823c:	4682      	mov	sl, r0
 800823e:	f000 fb3f 	bl	80088c0 <__mcmp>
 8008242:	2800      	cmp	r0, #0
 8008244:	dc96      	bgt.n	8008174 <_dtoa_r+0xabc>
 8008246:	d102      	bne.n	800824e <_dtoa_r+0xb96>
 8008248:	f019 0f01 	tst.w	r9, #1
 800824c:	d192      	bne.n	8008174 <_dtoa_r+0xabc>
 800824e:	462b      	mov	r3, r5
 8008250:	461d      	mov	r5, r3
 8008252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008256:	2a30      	cmp	r2, #48	; 0x30
 8008258:	d0fa      	beq.n	8008250 <_dtoa_r+0xb98>
 800825a:	e6dd      	b.n	8008018 <_dtoa_r+0x960>
 800825c:	9a00      	ldr	r2, [sp, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d189      	bne.n	8008176 <_dtoa_r+0xabe>
 8008262:	f10b 0b01 	add.w	fp, fp, #1
 8008266:	2331      	movs	r3, #49	; 0x31
 8008268:	e796      	b.n	8008198 <_dtoa_r+0xae0>
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <_dtoa_r+0xbdc>)
 800826c:	f7ff ba99 	b.w	80077a2 <_dtoa_r+0xea>
 8008270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008272:	2b00      	cmp	r3, #0
 8008274:	f47f aa6d 	bne.w	8007752 <_dtoa_r+0x9a>
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <_dtoa_r+0xbe0>)
 800827a:	f7ff ba92 	b.w	80077a2 <_dtoa_r+0xea>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	dcb5      	bgt.n	80081f0 <_dtoa_r+0xb38>
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	2b02      	cmp	r3, #2
 8008288:	f73f aeb1 	bgt.w	8007fee <_dtoa_r+0x936>
 800828c:	e7b0      	b.n	80081f0 <_dtoa_r+0xb38>
 800828e:	bf00      	nop
 8008290:	0800ae8a 	.word	0x0800ae8a
 8008294:	0800ade5 	.word	0x0800ade5
 8008298:	0800ae0e 	.word	0x0800ae0e

0800829c <_free_r>:
 800829c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800829e:	2900      	cmp	r1, #0
 80082a0:	d044      	beq.n	800832c <_free_r+0x90>
 80082a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a6:	9001      	str	r0, [sp, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f1a1 0404 	sub.w	r4, r1, #4
 80082ae:	bfb8      	it	lt
 80082b0:	18e4      	addlt	r4, r4, r3
 80082b2:	f7fe f893 	bl	80063dc <__malloc_lock>
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <_free_r+0x94>)
 80082b8:	9801      	ldr	r0, [sp, #4]
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	b933      	cbnz	r3, 80082cc <_free_r+0x30>
 80082be:	6063      	str	r3, [r4, #4]
 80082c0:	6014      	str	r4, [r2, #0]
 80082c2:	b003      	add	sp, #12
 80082c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082c8:	f7fe b88e 	b.w	80063e8 <__malloc_unlock>
 80082cc:	42a3      	cmp	r3, r4
 80082ce:	d908      	bls.n	80082e2 <_free_r+0x46>
 80082d0:	6825      	ldr	r5, [r4, #0]
 80082d2:	1961      	adds	r1, r4, r5
 80082d4:	428b      	cmp	r3, r1
 80082d6:	bf01      	itttt	eq
 80082d8:	6819      	ldreq	r1, [r3, #0]
 80082da:	685b      	ldreq	r3, [r3, #4]
 80082dc:	1949      	addeq	r1, r1, r5
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	e7ed      	b.n	80082be <_free_r+0x22>
 80082e2:	461a      	mov	r2, r3
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	b10b      	cbz	r3, 80082ec <_free_r+0x50>
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	d9fa      	bls.n	80082e2 <_free_r+0x46>
 80082ec:	6811      	ldr	r1, [r2, #0]
 80082ee:	1855      	adds	r5, r2, r1
 80082f0:	42a5      	cmp	r5, r4
 80082f2:	d10b      	bne.n	800830c <_free_r+0x70>
 80082f4:	6824      	ldr	r4, [r4, #0]
 80082f6:	4421      	add	r1, r4
 80082f8:	1854      	adds	r4, r2, r1
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	6011      	str	r1, [r2, #0]
 80082fe:	d1e0      	bne.n	80082c2 <_free_r+0x26>
 8008300:	681c      	ldr	r4, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	6053      	str	r3, [r2, #4]
 8008306:	440c      	add	r4, r1
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	e7da      	b.n	80082c2 <_free_r+0x26>
 800830c:	d902      	bls.n	8008314 <_free_r+0x78>
 800830e:	230c      	movs	r3, #12
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	e7d6      	b.n	80082c2 <_free_r+0x26>
 8008314:	6825      	ldr	r5, [r4, #0]
 8008316:	1961      	adds	r1, r4, r5
 8008318:	428b      	cmp	r3, r1
 800831a:	bf04      	itt	eq
 800831c:	6819      	ldreq	r1, [r3, #0]
 800831e:	685b      	ldreq	r3, [r3, #4]
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	bf04      	itt	eq
 8008324:	1949      	addeq	r1, r1, r5
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	6054      	str	r4, [r2, #4]
 800832a:	e7ca      	b.n	80082c2 <_free_r+0x26>
 800832c:	b003      	add	sp, #12
 800832e:	bd30      	pop	{r4, r5, pc}
 8008330:	200004ec 	.word	0x200004ec

08008334 <_Balloc>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	69c6      	ldr	r6, [r0, #28]
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	b976      	cbnz	r6, 800835c <_Balloc+0x28>
 800833e:	2010      	movs	r0, #16
 8008340:	f7fd ff9c 	bl	800627c <malloc>
 8008344:	4602      	mov	r2, r0
 8008346:	61e0      	str	r0, [r4, #28]
 8008348:	b920      	cbnz	r0, 8008354 <_Balloc+0x20>
 800834a:	4b18      	ldr	r3, [pc, #96]	; (80083ac <_Balloc+0x78>)
 800834c:	4818      	ldr	r0, [pc, #96]	; (80083b0 <_Balloc+0x7c>)
 800834e:	216b      	movs	r1, #107	; 0x6b
 8008350:	f001 fcfa 	bl	8009d48 <__assert_func>
 8008354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008358:	6006      	str	r6, [r0, #0]
 800835a:	60c6      	str	r6, [r0, #12]
 800835c:	69e6      	ldr	r6, [r4, #28]
 800835e:	68f3      	ldr	r3, [r6, #12]
 8008360:	b183      	cbz	r3, 8008384 <_Balloc+0x50>
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800836a:	b9b8      	cbnz	r0, 800839c <_Balloc+0x68>
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f605 	lsl.w	r6, r1, r5
 8008372:	1d72      	adds	r2, r6, #5
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4620      	mov	r0, r4
 8008378:	f001 fd04 	bl	8009d84 <_calloc_r>
 800837c:	b160      	cbz	r0, 8008398 <_Balloc+0x64>
 800837e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008382:	e00e      	b.n	80083a2 <_Balloc+0x6e>
 8008384:	2221      	movs	r2, #33	; 0x21
 8008386:	2104      	movs	r1, #4
 8008388:	4620      	mov	r0, r4
 800838a:	f001 fcfb 	bl	8009d84 <_calloc_r>
 800838e:	69e3      	ldr	r3, [r4, #28]
 8008390:	60f0      	str	r0, [r6, #12]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e4      	bne.n	8008362 <_Balloc+0x2e>
 8008398:	2000      	movs	r0, #0
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083a2:	2300      	movs	r3, #0
 80083a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a8:	e7f7      	b.n	800839a <_Balloc+0x66>
 80083aa:	bf00      	nop
 80083ac:	0800ae1b 	.word	0x0800ae1b
 80083b0:	0800ae9b 	.word	0x0800ae9b

080083b4 <_Bfree>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	69c6      	ldr	r6, [r0, #28]
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b976      	cbnz	r6, 80083dc <_Bfree+0x28>
 80083be:	2010      	movs	r0, #16
 80083c0:	f7fd ff5c 	bl	800627c <malloc>
 80083c4:	4602      	mov	r2, r0
 80083c6:	61e8      	str	r0, [r5, #28]
 80083c8:	b920      	cbnz	r0, 80083d4 <_Bfree+0x20>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <_Bfree+0x3c>)
 80083cc:	4809      	ldr	r0, [pc, #36]	; (80083f4 <_Bfree+0x40>)
 80083ce:	218f      	movs	r1, #143	; 0x8f
 80083d0:	f001 fcba 	bl	8009d48 <__assert_func>
 80083d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d8:	6006      	str	r6, [r0, #0]
 80083da:	60c6      	str	r6, [r0, #12]
 80083dc:	b13c      	cbz	r4, 80083ee <_Bfree+0x3a>
 80083de:	69eb      	ldr	r3, [r5, #28]
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e8:	6021      	str	r1, [r4, #0]
 80083ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	0800ae1b 	.word	0x0800ae1b
 80083f4:	0800ae9b 	.word	0x0800ae9b

080083f8 <__multadd>:
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	690d      	ldr	r5, [r1, #16]
 80083fe:	4607      	mov	r7, r0
 8008400:	460c      	mov	r4, r1
 8008402:	461e      	mov	r6, r3
 8008404:	f101 0c14 	add.w	ip, r1, #20
 8008408:	2000      	movs	r0, #0
 800840a:	f8dc 3000 	ldr.w	r3, [ip]
 800840e:	b299      	uxth	r1, r3
 8008410:	fb02 6101 	mla	r1, r2, r1, r6
 8008414:	0c1e      	lsrs	r6, r3, #16
 8008416:	0c0b      	lsrs	r3, r1, #16
 8008418:	fb02 3306 	mla	r3, r2, r6, r3
 800841c:	b289      	uxth	r1, r1
 800841e:	3001      	adds	r0, #1
 8008420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008424:	4285      	cmp	r5, r0
 8008426:	f84c 1b04 	str.w	r1, [ip], #4
 800842a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800842e:	dcec      	bgt.n	800840a <__multadd+0x12>
 8008430:	b30e      	cbz	r6, 8008476 <__multadd+0x7e>
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc19      	bgt.n	800846c <__multadd+0x74>
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	4638      	mov	r0, r7
 800843c:	3101      	adds	r1, #1
 800843e:	f7ff ff79 	bl	8008334 <_Balloc>
 8008442:	4680      	mov	r8, r0
 8008444:	b928      	cbnz	r0, 8008452 <__multadd+0x5a>
 8008446:	4602      	mov	r2, r0
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <__multadd+0x84>)
 800844a:	480d      	ldr	r0, [pc, #52]	; (8008480 <__multadd+0x88>)
 800844c:	21ba      	movs	r1, #186	; 0xba
 800844e:	f001 fc7b 	bl	8009d48 <__assert_func>
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	f104 010c 	add.w	r1, r4, #12
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	300c      	adds	r0, #12
 800845e:	f001 fc5b 	bl	8009d18 <memcpy>
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ffa5 	bl	80083b4 <_Bfree>
 800846a:	4644      	mov	r4, r8
 800846c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008470:	3501      	adds	r5, #1
 8008472:	615e      	str	r6, [r3, #20]
 8008474:	6125      	str	r5, [r4, #16]
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	0800ae8a 	.word	0x0800ae8a
 8008480:	0800ae9b 	.word	0x0800ae9b

08008484 <__s2b>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4615      	mov	r5, r2
 800848c:	461f      	mov	r7, r3
 800848e:	2209      	movs	r2, #9
 8008490:	3308      	adds	r3, #8
 8008492:	4606      	mov	r6, r0
 8008494:	fb93 f3f2 	sdiv	r3, r3, r2
 8008498:	2100      	movs	r1, #0
 800849a:	2201      	movs	r2, #1
 800849c:	429a      	cmp	r2, r3
 800849e:	db09      	blt.n	80084b4 <__s2b+0x30>
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff ff47 	bl	8008334 <_Balloc>
 80084a6:	b940      	cbnz	r0, 80084ba <__s2b+0x36>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b19      	ldr	r3, [pc, #100]	; (8008510 <__s2b+0x8c>)
 80084ac:	4819      	ldr	r0, [pc, #100]	; (8008514 <__s2b+0x90>)
 80084ae:	21d3      	movs	r1, #211	; 0xd3
 80084b0:	f001 fc4a 	bl	8009d48 <__assert_func>
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	3101      	adds	r1, #1
 80084b8:	e7f0      	b.n	800849c <__s2b+0x18>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	6143      	str	r3, [r0, #20]
 80084be:	2d09      	cmp	r5, #9
 80084c0:	f04f 0301 	mov.w	r3, #1
 80084c4:	6103      	str	r3, [r0, #16]
 80084c6:	dd16      	ble.n	80084f6 <__s2b+0x72>
 80084c8:	f104 0909 	add.w	r9, r4, #9
 80084cc:	46c8      	mov	r8, r9
 80084ce:	442c      	add	r4, r5
 80084d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084d4:	4601      	mov	r1, r0
 80084d6:	3b30      	subs	r3, #48	; 0x30
 80084d8:	220a      	movs	r2, #10
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ff8c 	bl	80083f8 <__multadd>
 80084e0:	45a0      	cmp	r8, r4
 80084e2:	d1f5      	bne.n	80084d0 <__s2b+0x4c>
 80084e4:	f1a5 0408 	sub.w	r4, r5, #8
 80084e8:	444c      	add	r4, r9
 80084ea:	1b2d      	subs	r5, r5, r4
 80084ec:	1963      	adds	r3, r4, r5
 80084ee:	42bb      	cmp	r3, r7
 80084f0:	db04      	blt.n	80084fc <__s2b+0x78>
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	340a      	adds	r4, #10
 80084f8:	2509      	movs	r5, #9
 80084fa:	e7f6      	b.n	80084ea <__s2b+0x66>
 80084fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008500:	4601      	mov	r1, r0
 8008502:	3b30      	subs	r3, #48	; 0x30
 8008504:	220a      	movs	r2, #10
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff76 	bl	80083f8 <__multadd>
 800850c:	e7ee      	b.n	80084ec <__s2b+0x68>
 800850e:	bf00      	nop
 8008510:	0800ae8a 	.word	0x0800ae8a
 8008514:	0800ae9b 	.word	0x0800ae9b

08008518 <__hi0bits>:
 8008518:	0c03      	lsrs	r3, r0, #16
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	b9d3      	cbnz	r3, 8008554 <__hi0bits+0x3c>
 800851e:	0400      	lsls	r0, r0, #16
 8008520:	2310      	movs	r3, #16
 8008522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008526:	bf04      	itt	eq
 8008528:	0200      	lsleq	r0, r0, #8
 800852a:	3308      	addeq	r3, #8
 800852c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008530:	bf04      	itt	eq
 8008532:	0100      	lsleq	r0, r0, #4
 8008534:	3304      	addeq	r3, #4
 8008536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800853a:	bf04      	itt	eq
 800853c:	0080      	lsleq	r0, r0, #2
 800853e:	3302      	addeq	r3, #2
 8008540:	2800      	cmp	r0, #0
 8008542:	db05      	blt.n	8008550 <__hi0bits+0x38>
 8008544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008548:	f103 0301 	add.w	r3, r3, #1
 800854c:	bf08      	it	eq
 800854e:	2320      	moveq	r3, #32
 8008550:	4618      	mov	r0, r3
 8008552:	4770      	bx	lr
 8008554:	2300      	movs	r3, #0
 8008556:	e7e4      	b.n	8008522 <__hi0bits+0xa>

08008558 <__lo0bits>:
 8008558:	6803      	ldr	r3, [r0, #0]
 800855a:	f013 0207 	ands.w	r2, r3, #7
 800855e:	d00c      	beq.n	800857a <__lo0bits+0x22>
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d422      	bmi.n	80085aa <__lo0bits+0x52>
 8008564:	079a      	lsls	r2, r3, #30
 8008566:	bf49      	itett	mi
 8008568:	085b      	lsrmi	r3, r3, #1
 800856a:	089b      	lsrpl	r3, r3, #2
 800856c:	6003      	strmi	r3, [r0, #0]
 800856e:	2201      	movmi	r2, #1
 8008570:	bf5c      	itt	pl
 8008572:	6003      	strpl	r3, [r0, #0]
 8008574:	2202      	movpl	r2, #2
 8008576:	4610      	mov	r0, r2
 8008578:	4770      	bx	lr
 800857a:	b299      	uxth	r1, r3
 800857c:	b909      	cbnz	r1, 8008582 <__lo0bits+0x2a>
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	2210      	movs	r2, #16
 8008582:	b2d9      	uxtb	r1, r3
 8008584:	b909      	cbnz	r1, 800858a <__lo0bits+0x32>
 8008586:	3208      	adds	r2, #8
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	0719      	lsls	r1, r3, #28
 800858c:	bf04      	itt	eq
 800858e:	091b      	lsreq	r3, r3, #4
 8008590:	3204      	addeq	r2, #4
 8008592:	0799      	lsls	r1, r3, #30
 8008594:	bf04      	itt	eq
 8008596:	089b      	lsreq	r3, r3, #2
 8008598:	3202      	addeq	r2, #2
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d403      	bmi.n	80085a6 <__lo0bits+0x4e>
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	f102 0201 	add.w	r2, r2, #1
 80085a4:	d003      	beq.n	80085ae <__lo0bits+0x56>
 80085a6:	6003      	str	r3, [r0, #0]
 80085a8:	e7e5      	b.n	8008576 <__lo0bits+0x1e>
 80085aa:	2200      	movs	r2, #0
 80085ac:	e7e3      	b.n	8008576 <__lo0bits+0x1e>
 80085ae:	2220      	movs	r2, #32
 80085b0:	e7e1      	b.n	8008576 <__lo0bits+0x1e>
	...

080085b4 <__i2b>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	460c      	mov	r4, r1
 80085b8:	2101      	movs	r1, #1
 80085ba:	f7ff febb 	bl	8008334 <_Balloc>
 80085be:	4602      	mov	r2, r0
 80085c0:	b928      	cbnz	r0, 80085ce <__i2b+0x1a>
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <__i2b+0x24>)
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <__i2b+0x28>)
 80085c6:	f240 1145 	movw	r1, #325	; 0x145
 80085ca:	f001 fbbd 	bl	8009d48 <__assert_func>
 80085ce:	2301      	movs	r3, #1
 80085d0:	6144      	str	r4, [r0, #20]
 80085d2:	6103      	str	r3, [r0, #16]
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	bf00      	nop
 80085d8:	0800ae8a 	.word	0x0800ae8a
 80085dc:	0800ae9b 	.word	0x0800ae9b

080085e0 <__multiply>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	4691      	mov	r9, r2
 80085e6:	690a      	ldr	r2, [r1, #16]
 80085e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	bfb8      	it	lt
 80085f0:	460b      	movlt	r3, r1
 80085f2:	460c      	mov	r4, r1
 80085f4:	bfbc      	itt	lt
 80085f6:	464c      	movlt	r4, r9
 80085f8:	4699      	movlt	r9, r3
 80085fa:	6927      	ldr	r7, [r4, #16]
 80085fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008600:	68a3      	ldr	r3, [r4, #8]
 8008602:	6861      	ldr	r1, [r4, #4]
 8008604:	eb07 060a 	add.w	r6, r7, sl
 8008608:	42b3      	cmp	r3, r6
 800860a:	b085      	sub	sp, #20
 800860c:	bfb8      	it	lt
 800860e:	3101      	addlt	r1, #1
 8008610:	f7ff fe90 	bl	8008334 <_Balloc>
 8008614:	b930      	cbnz	r0, 8008624 <__multiply+0x44>
 8008616:	4602      	mov	r2, r0
 8008618:	4b44      	ldr	r3, [pc, #272]	; (800872c <__multiply+0x14c>)
 800861a:	4845      	ldr	r0, [pc, #276]	; (8008730 <__multiply+0x150>)
 800861c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008620:	f001 fb92 	bl	8009d48 <__assert_func>
 8008624:	f100 0514 	add.w	r5, r0, #20
 8008628:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800862c:	462b      	mov	r3, r5
 800862e:	2200      	movs	r2, #0
 8008630:	4543      	cmp	r3, r8
 8008632:	d321      	bcc.n	8008678 <__multiply+0x98>
 8008634:	f104 0314 	add.w	r3, r4, #20
 8008638:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800863c:	f109 0314 	add.w	r3, r9, #20
 8008640:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008644:	9202      	str	r2, [sp, #8]
 8008646:	1b3a      	subs	r2, r7, r4
 8008648:	3a15      	subs	r2, #21
 800864a:	f022 0203 	bic.w	r2, r2, #3
 800864e:	3204      	adds	r2, #4
 8008650:	f104 0115 	add.w	r1, r4, #21
 8008654:	428f      	cmp	r7, r1
 8008656:	bf38      	it	cc
 8008658:	2204      	movcc	r2, #4
 800865a:	9201      	str	r2, [sp, #4]
 800865c:	9a02      	ldr	r2, [sp, #8]
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	429a      	cmp	r2, r3
 8008662:	d80c      	bhi.n	800867e <__multiply+0x9e>
 8008664:	2e00      	cmp	r6, #0
 8008666:	dd03      	ble.n	8008670 <__multiply+0x90>
 8008668:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05b      	beq.n	8008728 <__multiply+0x148>
 8008670:	6106      	str	r6, [r0, #16]
 8008672:	b005      	add	sp, #20
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	f843 2b04 	str.w	r2, [r3], #4
 800867c:	e7d8      	b.n	8008630 <__multiply+0x50>
 800867e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008682:	f1ba 0f00 	cmp.w	sl, #0
 8008686:	d024      	beq.n	80086d2 <__multiply+0xf2>
 8008688:	f104 0e14 	add.w	lr, r4, #20
 800868c:	46a9      	mov	r9, r5
 800868e:	f04f 0c00 	mov.w	ip, #0
 8008692:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008696:	f8d9 1000 	ldr.w	r1, [r9]
 800869a:	fa1f fb82 	uxth.w	fp, r2
 800869e:	b289      	uxth	r1, r1
 80086a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80086a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086a8:	f8d9 2000 	ldr.w	r2, [r9]
 80086ac:	4461      	add	r1, ip
 80086ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80086b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086ba:	b289      	uxth	r1, r1
 80086bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086c0:	4577      	cmp	r7, lr
 80086c2:	f849 1b04 	str.w	r1, [r9], #4
 80086c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086ca:	d8e2      	bhi.n	8008692 <__multiply+0xb2>
 80086cc:	9a01      	ldr	r2, [sp, #4]
 80086ce:	f845 c002 	str.w	ip, [r5, r2]
 80086d2:	9a03      	ldr	r2, [sp, #12]
 80086d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086d8:	3304      	adds	r3, #4
 80086da:	f1b9 0f00 	cmp.w	r9, #0
 80086de:	d021      	beq.n	8008724 <__multiply+0x144>
 80086e0:	6829      	ldr	r1, [r5, #0]
 80086e2:	f104 0c14 	add.w	ip, r4, #20
 80086e6:	46ae      	mov	lr, r5
 80086e8:	f04f 0a00 	mov.w	sl, #0
 80086ec:	f8bc b000 	ldrh.w	fp, [ip]
 80086f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086f4:	fb09 220b 	mla	r2, r9, fp, r2
 80086f8:	4452      	add	r2, sl
 80086fa:	b289      	uxth	r1, r1
 80086fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008700:	f84e 1b04 	str.w	r1, [lr], #4
 8008704:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800870c:	f8be 1000 	ldrh.w	r1, [lr]
 8008710:	fb09 110a 	mla	r1, r9, sl, r1
 8008714:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008718:	4567      	cmp	r7, ip
 800871a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800871e:	d8e5      	bhi.n	80086ec <__multiply+0x10c>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	50a9      	str	r1, [r5, r2]
 8008724:	3504      	adds	r5, #4
 8008726:	e799      	b.n	800865c <__multiply+0x7c>
 8008728:	3e01      	subs	r6, #1
 800872a:	e79b      	b.n	8008664 <__multiply+0x84>
 800872c:	0800ae8a 	.word	0x0800ae8a
 8008730:	0800ae9b 	.word	0x0800ae9b

08008734 <__pow5mult>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4615      	mov	r5, r2
 800873a:	f012 0203 	ands.w	r2, r2, #3
 800873e:	4606      	mov	r6, r0
 8008740:	460f      	mov	r7, r1
 8008742:	d007      	beq.n	8008754 <__pow5mult+0x20>
 8008744:	4c25      	ldr	r4, [pc, #148]	; (80087dc <__pow5mult+0xa8>)
 8008746:	3a01      	subs	r2, #1
 8008748:	2300      	movs	r3, #0
 800874a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800874e:	f7ff fe53 	bl	80083f8 <__multadd>
 8008752:	4607      	mov	r7, r0
 8008754:	10ad      	asrs	r5, r5, #2
 8008756:	d03d      	beq.n	80087d4 <__pow5mult+0xa0>
 8008758:	69f4      	ldr	r4, [r6, #28]
 800875a:	b97c      	cbnz	r4, 800877c <__pow5mult+0x48>
 800875c:	2010      	movs	r0, #16
 800875e:	f7fd fd8d 	bl	800627c <malloc>
 8008762:	4602      	mov	r2, r0
 8008764:	61f0      	str	r0, [r6, #28]
 8008766:	b928      	cbnz	r0, 8008774 <__pow5mult+0x40>
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <__pow5mult+0xac>)
 800876a:	481e      	ldr	r0, [pc, #120]	; (80087e4 <__pow5mult+0xb0>)
 800876c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008770:	f001 faea 	bl	8009d48 <__assert_func>
 8008774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008778:	6004      	str	r4, [r0, #0]
 800877a:	60c4      	str	r4, [r0, #12]
 800877c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008784:	b94c      	cbnz	r4, 800879a <__pow5mult+0x66>
 8008786:	f240 2171 	movw	r1, #625	; 0x271
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ff12 	bl	80085b4 <__i2b>
 8008790:	2300      	movs	r3, #0
 8008792:	f8c8 0008 	str.w	r0, [r8, #8]
 8008796:	4604      	mov	r4, r0
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 0900 	mov.w	r9, #0
 800879e:	07eb      	lsls	r3, r5, #31
 80087a0:	d50a      	bpl.n	80087b8 <__pow5mult+0x84>
 80087a2:	4639      	mov	r1, r7
 80087a4:	4622      	mov	r2, r4
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7ff ff1a 	bl	80085e0 <__multiply>
 80087ac:	4639      	mov	r1, r7
 80087ae:	4680      	mov	r8, r0
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff fdff 	bl	80083b4 <_Bfree>
 80087b6:	4647      	mov	r7, r8
 80087b8:	106d      	asrs	r5, r5, #1
 80087ba:	d00b      	beq.n	80087d4 <__pow5mult+0xa0>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	b938      	cbnz	r0, 80087d0 <__pow5mult+0x9c>
 80087c0:	4622      	mov	r2, r4
 80087c2:	4621      	mov	r1, r4
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ff0b 	bl	80085e0 <__multiply>
 80087ca:	6020      	str	r0, [r4, #0]
 80087cc:	f8c0 9000 	str.w	r9, [r0]
 80087d0:	4604      	mov	r4, r0
 80087d2:	e7e4      	b.n	800879e <__pow5mult+0x6a>
 80087d4:	4638      	mov	r0, r7
 80087d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087da:	bf00      	nop
 80087dc:	0800afe8 	.word	0x0800afe8
 80087e0:	0800ae1b 	.word	0x0800ae1b
 80087e4:	0800ae9b 	.word	0x0800ae9b

080087e8 <__lshift>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	460c      	mov	r4, r1
 80087ee:	6849      	ldr	r1, [r1, #4]
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	4607      	mov	r7, r0
 80087fa:	4691      	mov	r9, r2
 80087fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008800:	f108 0601 	add.w	r6, r8, #1
 8008804:	42b3      	cmp	r3, r6
 8008806:	db0b      	blt.n	8008820 <__lshift+0x38>
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff fd93 	bl	8008334 <_Balloc>
 800880e:	4605      	mov	r5, r0
 8008810:	b948      	cbnz	r0, 8008826 <__lshift+0x3e>
 8008812:	4602      	mov	r2, r0
 8008814:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <__lshift+0xd0>)
 8008816:	4829      	ldr	r0, [pc, #164]	; (80088bc <__lshift+0xd4>)
 8008818:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800881c:	f001 fa94 	bl	8009d48 <__assert_func>
 8008820:	3101      	adds	r1, #1
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	e7ee      	b.n	8008804 <__lshift+0x1c>
 8008826:	2300      	movs	r3, #0
 8008828:	f100 0114 	add.w	r1, r0, #20
 800882c:	f100 0210 	add.w	r2, r0, #16
 8008830:	4618      	mov	r0, r3
 8008832:	4553      	cmp	r3, sl
 8008834:	db33      	blt.n	800889e <__lshift+0xb6>
 8008836:	6920      	ldr	r0, [r4, #16]
 8008838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800883c:	f104 0314 	add.w	r3, r4, #20
 8008840:	f019 091f 	ands.w	r9, r9, #31
 8008844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008848:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800884c:	d02b      	beq.n	80088a6 <__lshift+0xbe>
 800884e:	f1c9 0e20 	rsb	lr, r9, #32
 8008852:	468a      	mov	sl, r1
 8008854:	2200      	movs	r2, #0
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	fa00 f009 	lsl.w	r0, r0, r9
 800885c:	4310      	orrs	r0, r2
 800885e:	f84a 0b04 	str.w	r0, [sl], #4
 8008862:	f853 2b04 	ldr.w	r2, [r3], #4
 8008866:	459c      	cmp	ip, r3
 8008868:	fa22 f20e 	lsr.w	r2, r2, lr
 800886c:	d8f3      	bhi.n	8008856 <__lshift+0x6e>
 800886e:	ebac 0304 	sub.w	r3, ip, r4
 8008872:	3b15      	subs	r3, #21
 8008874:	f023 0303 	bic.w	r3, r3, #3
 8008878:	3304      	adds	r3, #4
 800887a:	f104 0015 	add.w	r0, r4, #21
 800887e:	4584      	cmp	ip, r0
 8008880:	bf38      	it	cc
 8008882:	2304      	movcc	r3, #4
 8008884:	50ca      	str	r2, [r1, r3]
 8008886:	b10a      	cbz	r2, 800888c <__lshift+0xa4>
 8008888:	f108 0602 	add.w	r6, r8, #2
 800888c:	3e01      	subs	r6, #1
 800888e:	4638      	mov	r0, r7
 8008890:	612e      	str	r6, [r5, #16]
 8008892:	4621      	mov	r1, r4
 8008894:	f7ff fd8e 	bl	80083b4 <_Bfree>
 8008898:	4628      	mov	r0, r5
 800889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889e:	f842 0f04 	str.w	r0, [r2, #4]!
 80088a2:	3301      	adds	r3, #1
 80088a4:	e7c5      	b.n	8008832 <__lshift+0x4a>
 80088a6:	3904      	subs	r1, #4
 80088a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80088b0:	459c      	cmp	ip, r3
 80088b2:	d8f9      	bhi.n	80088a8 <__lshift+0xc0>
 80088b4:	e7ea      	b.n	800888c <__lshift+0xa4>
 80088b6:	bf00      	nop
 80088b8:	0800ae8a 	.word	0x0800ae8a
 80088bc:	0800ae9b 	.word	0x0800ae9b

080088c0 <__mcmp>:
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	6902      	ldr	r2, [r0, #16]
 80088c4:	690c      	ldr	r4, [r1, #16]
 80088c6:	1b12      	subs	r2, r2, r4
 80088c8:	d10e      	bne.n	80088e8 <__mcmp+0x28>
 80088ca:	f100 0314 	add.w	r3, r0, #20
 80088ce:	3114      	adds	r1, #20
 80088d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088e0:	42a5      	cmp	r5, r4
 80088e2:	d003      	beq.n	80088ec <__mcmp+0x2c>
 80088e4:	d305      	bcc.n	80088f2 <__mcmp+0x32>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4610      	mov	r0, r2
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	4283      	cmp	r3, r0
 80088ee:	d3f3      	bcc.n	80088d8 <__mcmp+0x18>
 80088f0:	e7fa      	b.n	80088e8 <__mcmp+0x28>
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295
 80088f6:	e7f7      	b.n	80088e8 <__mcmp+0x28>

080088f8 <__mdiff>:
 80088f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	4606      	mov	r6, r0
 8008900:	4611      	mov	r1, r2
 8008902:	4620      	mov	r0, r4
 8008904:	4690      	mov	r8, r2
 8008906:	f7ff ffdb 	bl	80088c0 <__mcmp>
 800890a:	1e05      	subs	r5, r0, #0
 800890c:	d110      	bne.n	8008930 <__mdiff+0x38>
 800890e:	4629      	mov	r1, r5
 8008910:	4630      	mov	r0, r6
 8008912:	f7ff fd0f 	bl	8008334 <_Balloc>
 8008916:	b930      	cbnz	r0, 8008926 <__mdiff+0x2e>
 8008918:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <__mdiff+0x10c>)
 800891a:	4602      	mov	r2, r0
 800891c:	f240 2137 	movw	r1, #567	; 0x237
 8008920:	4839      	ldr	r0, [pc, #228]	; (8008a08 <__mdiff+0x110>)
 8008922:	f001 fa11 	bl	8009d48 <__assert_func>
 8008926:	2301      	movs	r3, #1
 8008928:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800892c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	bfa4      	itt	ge
 8008932:	4643      	movge	r3, r8
 8008934:	46a0      	movge	r8, r4
 8008936:	4630      	mov	r0, r6
 8008938:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800893c:	bfa6      	itte	ge
 800893e:	461c      	movge	r4, r3
 8008940:	2500      	movge	r5, #0
 8008942:	2501      	movlt	r5, #1
 8008944:	f7ff fcf6 	bl	8008334 <_Balloc>
 8008948:	b920      	cbnz	r0, 8008954 <__mdiff+0x5c>
 800894a:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <__mdiff+0x10c>)
 800894c:	4602      	mov	r2, r0
 800894e:	f240 2145 	movw	r1, #581	; 0x245
 8008952:	e7e5      	b.n	8008920 <__mdiff+0x28>
 8008954:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008958:	6926      	ldr	r6, [r4, #16]
 800895a:	60c5      	str	r5, [r0, #12]
 800895c:	f104 0914 	add.w	r9, r4, #20
 8008960:	f108 0514 	add.w	r5, r8, #20
 8008964:	f100 0e14 	add.w	lr, r0, #20
 8008968:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800896c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008970:	f108 0210 	add.w	r2, r8, #16
 8008974:	46f2      	mov	sl, lr
 8008976:	2100      	movs	r1, #0
 8008978:	f859 3b04 	ldr.w	r3, [r9], #4
 800897c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008980:	fa11 f88b 	uxtah	r8, r1, fp
 8008984:	b299      	uxth	r1, r3
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	eba8 0801 	sub.w	r8, r8, r1
 800898c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008990:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008994:	fa1f f888 	uxth.w	r8, r8
 8008998:	1419      	asrs	r1, r3, #16
 800899a:	454e      	cmp	r6, r9
 800899c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089a0:	f84a 3b04 	str.w	r3, [sl], #4
 80089a4:	d8e8      	bhi.n	8008978 <__mdiff+0x80>
 80089a6:	1b33      	subs	r3, r6, r4
 80089a8:	3b15      	subs	r3, #21
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	3304      	adds	r3, #4
 80089b0:	3415      	adds	r4, #21
 80089b2:	42a6      	cmp	r6, r4
 80089b4:	bf38      	it	cc
 80089b6:	2304      	movcc	r3, #4
 80089b8:	441d      	add	r5, r3
 80089ba:	4473      	add	r3, lr
 80089bc:	469e      	mov	lr, r3
 80089be:	462e      	mov	r6, r5
 80089c0:	4566      	cmp	r6, ip
 80089c2:	d30e      	bcc.n	80089e2 <__mdiff+0xea>
 80089c4:	f10c 0203 	add.w	r2, ip, #3
 80089c8:	1b52      	subs	r2, r2, r5
 80089ca:	f022 0203 	bic.w	r2, r2, #3
 80089ce:	3d03      	subs	r5, #3
 80089d0:	45ac      	cmp	ip, r5
 80089d2:	bf38      	it	cc
 80089d4:	2200      	movcc	r2, #0
 80089d6:	4413      	add	r3, r2
 80089d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80089dc:	b17a      	cbz	r2, 80089fe <__mdiff+0x106>
 80089de:	6107      	str	r7, [r0, #16]
 80089e0:	e7a4      	b.n	800892c <__mdiff+0x34>
 80089e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80089e6:	fa11 f288 	uxtah	r2, r1, r8
 80089ea:	1414      	asrs	r4, r2, #16
 80089ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089f0:	b292      	uxth	r2, r2
 80089f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089f6:	f84e 2b04 	str.w	r2, [lr], #4
 80089fa:	1421      	asrs	r1, r4, #16
 80089fc:	e7e0      	b.n	80089c0 <__mdiff+0xc8>
 80089fe:	3f01      	subs	r7, #1
 8008a00:	e7ea      	b.n	80089d8 <__mdiff+0xe0>
 8008a02:	bf00      	nop
 8008a04:	0800ae8a 	.word	0x0800ae8a
 8008a08:	0800ae9b 	.word	0x0800ae9b

08008a0c <__ulp>:
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	ed8d 0b00 	vstr	d0, [sp]
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <__ulp+0x48>)
 8008a16:	4013      	ands	r3, r2
 8008a18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc08      	bgt.n	8008a32 <__ulp+0x26>
 8008a20:	425b      	negs	r3, r3
 8008a22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008a26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a2a:	da04      	bge.n	8008a36 <__ulp+0x2a>
 8008a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a30:	4113      	asrs	r3, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	e008      	b.n	8008a48 <__ulp+0x3c>
 8008a36:	f1a2 0314 	sub.w	r3, r2, #20
 8008a3a:	2b1e      	cmp	r3, #30
 8008a3c:	bfda      	itte	le
 8008a3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a42:	40da      	lsrle	r2, r3
 8008a44:	2201      	movgt	r2, #1
 8008a46:	2300      	movs	r3, #0
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	ec41 0b10 	vmov	d0, r0, r1
 8008a50:	b002      	add	sp, #8
 8008a52:	4770      	bx	lr
 8008a54:	7ff00000 	.word	0x7ff00000

08008a58 <__b2d>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	6906      	ldr	r6, [r0, #16]
 8008a5e:	f100 0814 	add.w	r8, r0, #20
 8008a62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a66:	1f37      	subs	r7, r6, #4
 8008a68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7ff fd53 	bl	8008518 <__hi0bits>
 8008a72:	f1c0 0320 	rsb	r3, r0, #32
 8008a76:	280a      	cmp	r0, #10
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	491b      	ldr	r1, [pc, #108]	; (8008ae8 <__b2d+0x90>)
 8008a7c:	dc15      	bgt.n	8008aaa <__b2d+0x52>
 8008a7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a82:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a86:	45b8      	cmp	r8, r7
 8008a88:	ea43 0501 	orr.w	r5, r3, r1
 8008a8c:	bf34      	ite	cc
 8008a8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a92:	2300      	movcs	r3, #0
 8008a94:	3015      	adds	r0, #21
 8008a96:	fa02 f000 	lsl.w	r0, r2, r0
 8008a9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a9e:	4303      	orrs	r3, r0
 8008aa0:	461c      	mov	r4, r3
 8008aa2:	ec45 4b10 	vmov	d0, r4, r5
 8008aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aaa:	45b8      	cmp	r8, r7
 8008aac:	bf3a      	itte	cc
 8008aae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ab2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ab6:	2300      	movcs	r3, #0
 8008ab8:	380b      	subs	r0, #11
 8008aba:	d012      	beq.n	8008ae2 <__b2d+0x8a>
 8008abc:	f1c0 0120 	rsb	r1, r0, #32
 8008ac0:	fa23 f401 	lsr.w	r4, r3, r1
 8008ac4:	4082      	lsls	r2, r0
 8008ac6:	4322      	orrs	r2, r4
 8008ac8:	4547      	cmp	r7, r8
 8008aca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008ace:	bf8c      	ite	hi
 8008ad0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ad4:	2200      	movls	r2, #0
 8008ad6:	4083      	lsls	r3, r0
 8008ad8:	40ca      	lsrs	r2, r1
 8008ada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	e7de      	b.n	8008aa0 <__b2d+0x48>
 8008ae2:	ea42 0501 	orr.w	r5, r2, r1
 8008ae6:	e7db      	b.n	8008aa0 <__b2d+0x48>
 8008ae8:	3ff00000 	.word	0x3ff00000

08008aec <__d2b>:
 8008aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	460f      	mov	r7, r1
 8008af2:	2101      	movs	r1, #1
 8008af4:	ec59 8b10 	vmov	r8, r9, d0
 8008af8:	4616      	mov	r6, r2
 8008afa:	f7ff fc1b 	bl	8008334 <_Balloc>
 8008afe:	4604      	mov	r4, r0
 8008b00:	b930      	cbnz	r0, 8008b10 <__d2b+0x24>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <__d2b+0xac>)
 8008b06:	4825      	ldr	r0, [pc, #148]	; (8008b9c <__d2b+0xb0>)
 8008b08:	f240 310f 	movw	r1, #783	; 0x30f
 8008b0c:	f001 f91c 	bl	8009d48 <__assert_func>
 8008b10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b18:	bb2d      	cbnz	r5, 8008b66 <__d2b+0x7a>
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b20:	d026      	beq.n	8008b70 <__d2b+0x84>
 8008b22:	4668      	mov	r0, sp
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f7ff fd17 	bl	8008558 <__lo0bits>
 8008b2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b2e:	b1e8      	cbz	r0, 8008b6c <__d2b+0x80>
 8008b30:	f1c0 0320 	rsb	r3, r0, #32
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	40c2      	lsrs	r2, r0
 8008b3c:	6163      	str	r3, [r4, #20]
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	61a3      	str	r3, [r4, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf14      	ite	ne
 8008b48:	2202      	movne	r2, #2
 8008b4a:	2201      	moveq	r2, #1
 8008b4c:	6122      	str	r2, [r4, #16]
 8008b4e:	b1bd      	cbz	r5, 8008b80 <__d2b+0x94>
 8008b50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b54:	4405      	add	r5, r0
 8008b56:	603d      	str	r5, [r7, #0]
 8008b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	b003      	add	sp, #12
 8008b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b6a:	e7d6      	b.n	8008b1a <__d2b+0x2e>
 8008b6c:	6161      	str	r1, [r4, #20]
 8008b6e:	e7e7      	b.n	8008b40 <__d2b+0x54>
 8008b70:	a801      	add	r0, sp, #4
 8008b72:	f7ff fcf1 	bl	8008558 <__lo0bits>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	6163      	str	r3, [r4, #20]
 8008b7a:	3020      	adds	r0, #32
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	e7e5      	b.n	8008b4c <__d2b+0x60>
 8008b80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b88:	6038      	str	r0, [r7, #0]
 8008b8a:	6918      	ldr	r0, [r3, #16]
 8008b8c:	f7ff fcc4 	bl	8008518 <__hi0bits>
 8008b90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b94:	e7e2      	b.n	8008b5c <__d2b+0x70>
 8008b96:	bf00      	nop
 8008b98:	0800ae8a 	.word	0x0800ae8a
 8008b9c:	0800ae9b 	.word	0x0800ae9b

08008ba0 <__ratio>:
 8008ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	4688      	mov	r8, r1
 8008ba6:	4669      	mov	r1, sp
 8008ba8:	4681      	mov	r9, r0
 8008baa:	f7ff ff55 	bl	8008a58 <__b2d>
 8008bae:	a901      	add	r1, sp, #4
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	ec55 4b10 	vmov	r4, r5, d0
 8008bb6:	f7ff ff4f 	bl	8008a58 <__b2d>
 8008bba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bc2:	eba3 0c02 	sub.w	ip, r3, r2
 8008bc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008bd0:	ec51 0b10 	vmov	r0, r1, d0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfd6      	itet	le
 8008bd8:	460a      	movle	r2, r1
 8008bda:	462a      	movgt	r2, r5
 8008bdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008be0:	468b      	mov	fp, r1
 8008be2:	462f      	mov	r7, r5
 8008be4:	bfd4      	ite	le
 8008be6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008bea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bee:	4620      	mov	r0, r4
 8008bf0:	ee10 2a10 	vmov	r2, s0
 8008bf4:	465b      	mov	r3, fp
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	f7f7 fe38 	bl	800086c <__aeabi_ddiv>
 8008bfc:	ec41 0b10 	vmov	d0, r0, r1
 8008c00:	b003      	add	sp, #12
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c06 <__copybits>:
 8008c06:	3901      	subs	r1, #1
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	1149      	asrs	r1, r1, #5
 8008c0c:	6914      	ldr	r4, [r2, #16]
 8008c0e:	3101      	adds	r1, #1
 8008c10:	f102 0314 	add.w	r3, r2, #20
 8008c14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c1c:	1f05      	subs	r5, r0, #4
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	d30c      	bcc.n	8008c3c <__copybits+0x36>
 8008c22:	1aa3      	subs	r3, r4, r2
 8008c24:	3b11      	subs	r3, #17
 8008c26:	f023 0303 	bic.w	r3, r3, #3
 8008c2a:	3211      	adds	r2, #17
 8008c2c:	42a2      	cmp	r2, r4
 8008c2e:	bf88      	it	hi
 8008c30:	2300      	movhi	r3, #0
 8008c32:	4418      	add	r0, r3
 8008c34:	2300      	movs	r3, #0
 8008c36:	4288      	cmp	r0, r1
 8008c38:	d305      	bcc.n	8008c46 <__copybits+0x40>
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c40:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c44:	e7eb      	b.n	8008c1e <__copybits+0x18>
 8008c46:	f840 3b04 	str.w	r3, [r0], #4
 8008c4a:	e7f4      	b.n	8008c36 <__copybits+0x30>

08008c4c <__any_on>:
 8008c4c:	f100 0214 	add.w	r2, r0, #20
 8008c50:	6900      	ldr	r0, [r0, #16]
 8008c52:	114b      	asrs	r3, r1, #5
 8008c54:	4298      	cmp	r0, r3
 8008c56:	b510      	push	{r4, lr}
 8008c58:	db11      	blt.n	8008c7e <__any_on+0x32>
 8008c5a:	dd0a      	ble.n	8008c72 <__any_on+0x26>
 8008c5c:	f011 011f 	ands.w	r1, r1, #31
 8008c60:	d007      	beq.n	8008c72 <__any_on+0x26>
 8008c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c66:	fa24 f001 	lsr.w	r0, r4, r1
 8008c6a:	fa00 f101 	lsl.w	r1, r0, r1
 8008c6e:	428c      	cmp	r4, r1
 8008c70:	d10b      	bne.n	8008c8a <__any_on+0x3e>
 8008c72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d803      	bhi.n	8008c82 <__any_on+0x36>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	4603      	mov	r3, r0
 8008c80:	e7f7      	b.n	8008c72 <__any_on+0x26>
 8008c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d0f5      	beq.n	8008c76 <__any_on+0x2a>
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	e7f6      	b.n	8008c7c <__any_on+0x30>

08008c8e <sulp>:
 8008c8e:	b570      	push	{r4, r5, r6, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	ec45 4b10 	vmov	d0, r4, r5
 8008c98:	4616      	mov	r6, r2
 8008c9a:	f7ff feb7 	bl	8008a0c <__ulp>
 8008c9e:	ec51 0b10 	vmov	r0, r1, d0
 8008ca2:	b17e      	cbz	r6, 8008cc4 <sulp+0x36>
 8008ca4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ca8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd09      	ble.n	8008cc4 <sulp+0x36>
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fcaa 	bl	8000618 <__aeabi_dmul>
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cc8 <_strtod_l>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	ed2d 8b02 	vpush	{d8}
 8008cd0:	b09b      	sub	sp, #108	; 0x6c
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	9216      	str	r2, [sp, #88]	; 0x58
 8008cda:	460d      	mov	r5, r1
 8008cdc:	f04f 0800 	mov.w	r8, #0
 8008ce0:	f04f 0900 	mov.w	r9, #0
 8008ce4:	460a      	mov	r2, r1
 8008ce6:	9215      	str	r2, [sp, #84]	; 0x54
 8008ce8:	7811      	ldrb	r1, [r2, #0]
 8008cea:	292b      	cmp	r1, #43	; 0x2b
 8008cec:	d04c      	beq.n	8008d88 <_strtod_l+0xc0>
 8008cee:	d83a      	bhi.n	8008d66 <_strtod_l+0x9e>
 8008cf0:	290d      	cmp	r1, #13
 8008cf2:	d834      	bhi.n	8008d5e <_strtod_l+0x96>
 8008cf4:	2908      	cmp	r1, #8
 8008cf6:	d834      	bhi.n	8008d62 <_strtod_l+0x9a>
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d03d      	beq.n	8008d78 <_strtod_l+0xb0>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8008d00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008d02:	7832      	ldrb	r2, [r6, #0]
 8008d04:	2a30      	cmp	r2, #48	; 0x30
 8008d06:	f040 80b4 	bne.w	8008e72 <_strtod_l+0x1aa>
 8008d0a:	7872      	ldrb	r2, [r6, #1]
 8008d0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008d10:	2a58      	cmp	r2, #88	; 0x58
 8008d12:	d170      	bne.n	8008df6 <_strtod_l+0x12e>
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	ab16      	add	r3, sp, #88	; 0x58
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4a8e      	ldr	r2, [pc, #568]	; (8008f58 <_strtod_l+0x290>)
 8008d20:	ab17      	add	r3, sp, #92	; 0x5c
 8008d22:	a915      	add	r1, sp, #84	; 0x54
 8008d24:	4620      	mov	r0, r4
 8008d26:	f001 f8ab 	bl	8009e80 <__gethex>
 8008d2a:	f010 070f 	ands.w	r7, r0, #15
 8008d2e:	4605      	mov	r5, r0
 8008d30:	d005      	beq.n	8008d3e <_strtod_l+0x76>
 8008d32:	2f06      	cmp	r7, #6
 8008d34:	d12a      	bne.n	8008d8c <_strtod_l+0xc4>
 8008d36:	3601      	adds	r6, #1
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9615      	str	r6, [sp, #84]	; 0x54
 8008d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008d3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 857f 	bne.w	8009844 <_strtod_l+0xb7c>
 8008d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d48:	b1db      	cbz	r3, 8008d82 <_strtod_l+0xba>
 8008d4a:	4642      	mov	r2, r8
 8008d4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d50:	ec43 2b10 	vmov	d0, r2, r3
 8008d54:	b01b      	add	sp, #108	; 0x6c
 8008d56:	ecbd 8b02 	vpop	{d8}
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	2920      	cmp	r1, #32
 8008d60:	d1cc      	bne.n	8008cfc <_strtod_l+0x34>
 8008d62:	3201      	adds	r2, #1
 8008d64:	e7bf      	b.n	8008ce6 <_strtod_l+0x1e>
 8008d66:	292d      	cmp	r1, #45	; 0x2d
 8008d68:	d1c8      	bne.n	8008cfc <_strtod_l+0x34>
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	910a      	str	r1, [sp, #40]	; 0x28
 8008d6e:	1c51      	adds	r1, r2, #1
 8008d70:	9115      	str	r1, [sp, #84]	; 0x54
 8008d72:	7852      	ldrb	r2, [r2, #1]
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	d1c3      	bne.n	8008d00 <_strtod_l+0x38>
 8008d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d7a:	9515      	str	r5, [sp, #84]	; 0x54
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 855f 	bne.w	8009840 <_strtod_l+0xb78>
 8008d82:	4642      	mov	r2, r8
 8008d84:	464b      	mov	r3, r9
 8008d86:	e7e3      	b.n	8008d50 <_strtod_l+0x88>
 8008d88:	2100      	movs	r1, #0
 8008d8a:	e7ef      	b.n	8008d6c <_strtod_l+0xa4>
 8008d8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d8e:	b13a      	cbz	r2, 8008da0 <_strtod_l+0xd8>
 8008d90:	2135      	movs	r1, #53	; 0x35
 8008d92:	a818      	add	r0, sp, #96	; 0x60
 8008d94:	f7ff ff37 	bl	8008c06 <__copybits>
 8008d98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7ff fb0a 	bl	80083b4 <_Bfree>
 8008da0:	3f01      	subs	r7, #1
 8008da2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008da4:	2f04      	cmp	r7, #4
 8008da6:	d806      	bhi.n	8008db6 <_strtod_l+0xee>
 8008da8:	e8df f007 	tbb	[pc, r7]
 8008dac:	201d0314 	.word	0x201d0314
 8008db0:	14          	.byte	0x14
 8008db1:	00          	.byte	0x00
 8008db2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008db6:	05e9      	lsls	r1, r5, #23
 8008db8:	bf48      	it	mi
 8008dba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008dbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1b9      	bne.n	8008d3e <_strtod_l+0x76>
 8008dca:	f7fe fbb1 	bl	8007530 <__errno>
 8008dce:	2322      	movs	r3, #34	; 0x22
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	e7b4      	b.n	8008d3e <_strtod_l+0x76>
 8008dd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008dd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ddc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008de0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008de4:	e7e7      	b.n	8008db6 <_strtod_l+0xee>
 8008de6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f60 <_strtod_l+0x298>
 8008dea:	e7e4      	b.n	8008db6 <_strtod_l+0xee>
 8008dec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008df0:	f04f 38ff 	mov.w	r8, #4294967295
 8008df4:	e7df      	b.n	8008db6 <_strtod_l+0xee>
 8008df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	9215      	str	r2, [sp, #84]	; 0x54
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b30      	cmp	r3, #48	; 0x30
 8008e00:	d0f9      	beq.n	8008df6 <_strtod_l+0x12e>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d09b      	beq.n	8008d3e <_strtod_l+0x76>
 8008e06:	2301      	movs	r3, #1
 8008e08:	f04f 0a00 	mov.w	sl, #0
 8008e0c:	9304      	str	r3, [sp, #16]
 8008e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008e16:	46d3      	mov	fp, sl
 8008e18:	220a      	movs	r2, #10
 8008e1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008e1c:	7806      	ldrb	r6, [r0, #0]
 8008e1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e22:	b2d9      	uxtb	r1, r3
 8008e24:	2909      	cmp	r1, #9
 8008e26:	d926      	bls.n	8008e76 <_strtod_l+0x1ae>
 8008e28:	494c      	ldr	r1, [pc, #304]	; (8008f5c <_strtod_l+0x294>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f000 ff62 	bl	8009cf4 <strncmp>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d030      	beq.n	8008e96 <_strtod_l+0x1ce>
 8008e34:	2000      	movs	r0, #0
 8008e36:	4632      	mov	r2, r6
 8008e38:	9005      	str	r0, [sp, #20]
 8008e3a:	465e      	mov	r6, fp
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2a65      	cmp	r2, #101	; 0x65
 8008e40:	d001      	beq.n	8008e46 <_strtod_l+0x17e>
 8008e42:	2a45      	cmp	r2, #69	; 0x45
 8008e44:	d113      	bne.n	8008e6e <_strtod_l+0x1a6>
 8008e46:	b91e      	cbnz	r6, 8008e50 <_strtod_l+0x188>
 8008e48:	9a04      	ldr	r2, [sp, #16]
 8008e4a:	4302      	orrs	r2, r0
 8008e4c:	d094      	beq.n	8008d78 <_strtod_l+0xb0>
 8008e4e:	2600      	movs	r6, #0
 8008e50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008e52:	1c6a      	adds	r2, r5, #1
 8008e54:	9215      	str	r2, [sp, #84]	; 0x54
 8008e56:	786a      	ldrb	r2, [r5, #1]
 8008e58:	2a2b      	cmp	r2, #43	; 0x2b
 8008e5a:	d074      	beq.n	8008f46 <_strtod_l+0x27e>
 8008e5c:	2a2d      	cmp	r2, #45	; 0x2d
 8008e5e:	d078      	beq.n	8008f52 <_strtod_l+0x28a>
 8008e60:	f04f 0c00 	mov.w	ip, #0
 8008e64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e68:	2909      	cmp	r1, #9
 8008e6a:	d97f      	bls.n	8008f6c <_strtod_l+0x2a4>
 8008e6c:	9515      	str	r5, [sp, #84]	; 0x54
 8008e6e:	2700      	movs	r7, #0
 8008e70:	e09e      	b.n	8008fb0 <_strtod_l+0x2e8>
 8008e72:	2300      	movs	r3, #0
 8008e74:	e7c8      	b.n	8008e08 <_strtod_l+0x140>
 8008e76:	f1bb 0f08 	cmp.w	fp, #8
 8008e7a:	bfd8      	it	le
 8008e7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008e7e:	f100 0001 	add.w	r0, r0, #1
 8008e82:	bfda      	itte	le
 8008e84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e88:	9309      	strle	r3, [sp, #36]	; 0x24
 8008e8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008e8e:	f10b 0b01 	add.w	fp, fp, #1
 8008e92:	9015      	str	r0, [sp, #84]	; 0x54
 8008e94:	e7c1      	b.n	8008e1a <_strtod_l+0x152>
 8008e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	9215      	str	r2, [sp, #84]	; 0x54
 8008e9c:	785a      	ldrb	r2, [r3, #1]
 8008e9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ea2:	d037      	beq.n	8008f14 <_strtod_l+0x24c>
 8008ea4:	9005      	str	r0, [sp, #20]
 8008ea6:	465e      	mov	r6, fp
 8008ea8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008eac:	2b09      	cmp	r3, #9
 8008eae:	d912      	bls.n	8008ed6 <_strtod_l+0x20e>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e7c4      	b.n	8008e3e <_strtod_l+0x176>
 8008eb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	9215      	str	r2, [sp, #84]	; 0x54
 8008eba:	785a      	ldrb	r2, [r3, #1]
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	2a30      	cmp	r2, #48	; 0x30
 8008ec0:	d0f8      	beq.n	8008eb4 <_strtod_l+0x1ec>
 8008ec2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	f200 84c1 	bhi.w	800984e <_strtod_l+0xb86>
 8008ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ece:	9005      	str	r0, [sp, #20]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	3a30      	subs	r2, #48	; 0x30
 8008ed8:	f100 0301 	add.w	r3, r0, #1
 8008edc:	d014      	beq.n	8008f08 <_strtod_l+0x240>
 8008ede:	9905      	ldr	r1, [sp, #20]
 8008ee0:	4419      	add	r1, r3
 8008ee2:	9105      	str	r1, [sp, #20]
 8008ee4:	4633      	mov	r3, r6
 8008ee6:	eb00 0c06 	add.w	ip, r0, r6
 8008eea:	210a      	movs	r1, #10
 8008eec:	4563      	cmp	r3, ip
 8008eee:	d113      	bne.n	8008f18 <_strtod_l+0x250>
 8008ef0:	1833      	adds	r3, r6, r0
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	f106 0601 	add.w	r6, r6, #1
 8008ef8:	4406      	add	r6, r0
 8008efa:	dc1a      	bgt.n	8008f32 <_strtod_l+0x26a>
 8008efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008efe:	230a      	movs	r3, #10
 8008f00:	fb03 2301 	mla	r3, r3, r1, r2
 8008f04:	9309      	str	r3, [sp, #36]	; 0x24
 8008f06:	2300      	movs	r3, #0
 8008f08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f0a:	1c51      	adds	r1, r2, #1
 8008f0c:	9115      	str	r1, [sp, #84]	; 0x54
 8008f0e:	7852      	ldrb	r2, [r2, #1]
 8008f10:	4618      	mov	r0, r3
 8008f12:	e7c9      	b.n	8008ea8 <_strtod_l+0x1e0>
 8008f14:	4658      	mov	r0, fp
 8008f16:	e7d2      	b.n	8008ebe <_strtod_l+0x1f6>
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	f103 0301 	add.w	r3, r3, #1
 8008f1e:	dc03      	bgt.n	8008f28 <_strtod_l+0x260>
 8008f20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f22:	434f      	muls	r7, r1
 8008f24:	9709      	str	r7, [sp, #36]	; 0x24
 8008f26:	e7e1      	b.n	8008eec <_strtod_l+0x224>
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	bfd8      	it	le
 8008f2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008f30:	e7dc      	b.n	8008eec <_strtod_l+0x224>
 8008f32:	2e10      	cmp	r6, #16
 8008f34:	bfdc      	itt	le
 8008f36:	230a      	movle	r3, #10
 8008f38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008f3c:	e7e3      	b.n	8008f06 <_strtod_l+0x23e>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	2301      	movs	r3, #1
 8008f44:	e780      	b.n	8008e48 <_strtod_l+0x180>
 8008f46:	f04f 0c00 	mov.w	ip, #0
 8008f4a:	1caa      	adds	r2, r5, #2
 8008f4c:	9215      	str	r2, [sp, #84]	; 0x54
 8008f4e:	78aa      	ldrb	r2, [r5, #2]
 8008f50:	e788      	b.n	8008e64 <_strtod_l+0x19c>
 8008f52:	f04f 0c01 	mov.w	ip, #1
 8008f56:	e7f8      	b.n	8008f4a <_strtod_l+0x282>
 8008f58:	0800aff8 	.word	0x0800aff8
 8008f5c:	0800aff4 	.word	0x0800aff4
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f66:	1c51      	adds	r1, r2, #1
 8008f68:	9115      	str	r1, [sp, #84]	; 0x54
 8008f6a:	7852      	ldrb	r2, [r2, #1]
 8008f6c:	2a30      	cmp	r2, #48	; 0x30
 8008f6e:	d0f9      	beq.n	8008f64 <_strtod_l+0x29c>
 8008f70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f74:	2908      	cmp	r1, #8
 8008f76:	f63f af7a 	bhi.w	8008e6e <_strtod_l+0x1a6>
 8008f7a:	3a30      	subs	r2, #48	; 0x30
 8008f7c:	9208      	str	r2, [sp, #32]
 8008f7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f80:	920c      	str	r2, [sp, #48]	; 0x30
 8008f82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f84:	1c57      	adds	r7, r2, #1
 8008f86:	9715      	str	r7, [sp, #84]	; 0x54
 8008f88:	7852      	ldrb	r2, [r2, #1]
 8008f8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f8e:	f1be 0f09 	cmp.w	lr, #9
 8008f92:	d938      	bls.n	8009006 <_strtod_l+0x33e>
 8008f94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f96:	1a7f      	subs	r7, r7, r1
 8008f98:	2f08      	cmp	r7, #8
 8008f9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f9e:	dc03      	bgt.n	8008fa8 <_strtod_l+0x2e0>
 8008fa0:	9908      	ldr	r1, [sp, #32]
 8008fa2:	428f      	cmp	r7, r1
 8008fa4:	bfa8      	it	ge
 8008fa6:	460f      	movge	r7, r1
 8008fa8:	f1bc 0f00 	cmp.w	ip, #0
 8008fac:	d000      	beq.n	8008fb0 <_strtod_l+0x2e8>
 8008fae:	427f      	negs	r7, r7
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	d14f      	bne.n	8009054 <_strtod_l+0x38c>
 8008fb4:	9904      	ldr	r1, [sp, #16]
 8008fb6:	4301      	orrs	r1, r0
 8008fb8:	f47f aec1 	bne.w	8008d3e <_strtod_l+0x76>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f47f aedb 	bne.w	8008d78 <_strtod_l+0xb0>
 8008fc2:	2a69      	cmp	r2, #105	; 0x69
 8008fc4:	d029      	beq.n	800901a <_strtod_l+0x352>
 8008fc6:	dc26      	bgt.n	8009016 <_strtod_l+0x34e>
 8008fc8:	2a49      	cmp	r2, #73	; 0x49
 8008fca:	d026      	beq.n	800901a <_strtod_l+0x352>
 8008fcc:	2a4e      	cmp	r2, #78	; 0x4e
 8008fce:	f47f aed3 	bne.w	8008d78 <_strtod_l+0xb0>
 8008fd2:	499b      	ldr	r1, [pc, #620]	; (8009240 <_strtod_l+0x578>)
 8008fd4:	a815      	add	r0, sp, #84	; 0x54
 8008fd6:	f001 f993 	bl	800a300 <__match>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f43f aecc 	beq.w	8008d78 <_strtod_l+0xb0>
 8008fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b28      	cmp	r3, #40	; 0x28
 8008fe6:	d12f      	bne.n	8009048 <_strtod_l+0x380>
 8008fe8:	4996      	ldr	r1, [pc, #600]	; (8009244 <_strtod_l+0x57c>)
 8008fea:	aa18      	add	r2, sp, #96	; 0x60
 8008fec:	a815      	add	r0, sp, #84	; 0x54
 8008fee:	f001 f99b 	bl	800a328 <__hexnan>
 8008ff2:	2805      	cmp	r0, #5
 8008ff4:	d128      	bne.n	8009048 <_strtod_l+0x380>
 8008ff6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ffc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009000:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009004:	e69b      	b.n	8008d3e <_strtod_l+0x76>
 8009006:	9f08      	ldr	r7, [sp, #32]
 8009008:	210a      	movs	r1, #10
 800900a:	fb01 2107 	mla	r1, r1, r7, r2
 800900e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009012:	9208      	str	r2, [sp, #32]
 8009014:	e7b5      	b.n	8008f82 <_strtod_l+0x2ba>
 8009016:	2a6e      	cmp	r2, #110	; 0x6e
 8009018:	e7d9      	b.n	8008fce <_strtod_l+0x306>
 800901a:	498b      	ldr	r1, [pc, #556]	; (8009248 <_strtod_l+0x580>)
 800901c:	a815      	add	r0, sp, #84	; 0x54
 800901e:	f001 f96f 	bl	800a300 <__match>
 8009022:	2800      	cmp	r0, #0
 8009024:	f43f aea8 	beq.w	8008d78 <_strtod_l+0xb0>
 8009028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800902a:	4988      	ldr	r1, [pc, #544]	; (800924c <_strtod_l+0x584>)
 800902c:	3b01      	subs	r3, #1
 800902e:	a815      	add	r0, sp, #84	; 0x54
 8009030:	9315      	str	r3, [sp, #84]	; 0x54
 8009032:	f001 f965 	bl	800a300 <__match>
 8009036:	b910      	cbnz	r0, 800903e <_strtod_l+0x376>
 8009038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800903a:	3301      	adds	r3, #1
 800903c:	9315      	str	r3, [sp, #84]	; 0x54
 800903e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800925c <_strtod_l+0x594>
 8009042:	f04f 0800 	mov.w	r8, #0
 8009046:	e67a      	b.n	8008d3e <_strtod_l+0x76>
 8009048:	4881      	ldr	r0, [pc, #516]	; (8009250 <_strtod_l+0x588>)
 800904a:	f000 fe75 	bl	8009d38 <nan>
 800904e:	ec59 8b10 	vmov	r8, r9, d0
 8009052:	e674      	b.n	8008d3e <_strtod_l+0x76>
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009058:	1afb      	subs	r3, r7, r3
 800905a:	f1bb 0f00 	cmp.w	fp, #0
 800905e:	bf08      	it	eq
 8009060:	46b3      	moveq	fp, r6
 8009062:	2e10      	cmp	r6, #16
 8009064:	9308      	str	r3, [sp, #32]
 8009066:	4635      	mov	r5, r6
 8009068:	bfa8      	it	ge
 800906a:	2510      	movge	r5, #16
 800906c:	f7f7 fa5a 	bl	8000524 <__aeabi_ui2d>
 8009070:	2e09      	cmp	r6, #9
 8009072:	4680      	mov	r8, r0
 8009074:	4689      	mov	r9, r1
 8009076:	dd13      	ble.n	80090a0 <_strtod_l+0x3d8>
 8009078:	4b76      	ldr	r3, [pc, #472]	; (8009254 <_strtod_l+0x58c>)
 800907a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800907e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009082:	f7f7 fac9 	bl	8000618 <__aeabi_dmul>
 8009086:	4680      	mov	r8, r0
 8009088:	4650      	mov	r0, sl
 800908a:	4689      	mov	r9, r1
 800908c:	f7f7 fa4a 	bl	8000524 <__aeabi_ui2d>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4640      	mov	r0, r8
 8009096:	4649      	mov	r1, r9
 8009098:	f7f7 f908 	bl	80002ac <__adddf3>
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	2e0f      	cmp	r6, #15
 80090a2:	dc38      	bgt.n	8009116 <_strtod_l+0x44e>
 80090a4:	9b08      	ldr	r3, [sp, #32]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f43f ae49 	beq.w	8008d3e <_strtod_l+0x76>
 80090ac:	dd24      	ble.n	80090f8 <_strtod_l+0x430>
 80090ae:	2b16      	cmp	r3, #22
 80090b0:	dc0b      	bgt.n	80090ca <_strtod_l+0x402>
 80090b2:	4968      	ldr	r1, [pc, #416]	; (8009254 <_strtod_l+0x58c>)
 80090b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090bc:	4642      	mov	r2, r8
 80090be:	464b      	mov	r3, r9
 80090c0:	f7f7 faaa 	bl	8000618 <__aeabi_dmul>
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	e639      	b.n	8008d3e <_strtod_l+0x76>
 80090ca:	9a08      	ldr	r2, [sp, #32]
 80090cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80090d0:	4293      	cmp	r3, r2
 80090d2:	db20      	blt.n	8009116 <_strtod_l+0x44e>
 80090d4:	4c5f      	ldr	r4, [pc, #380]	; (8009254 <_strtod_l+0x58c>)
 80090d6:	f1c6 060f 	rsb	r6, r6, #15
 80090da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80090de:	4642      	mov	r2, r8
 80090e0:	464b      	mov	r3, r9
 80090e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e6:	f7f7 fa97 	bl	8000618 <__aeabi_dmul>
 80090ea:	9b08      	ldr	r3, [sp, #32]
 80090ec:	1b9e      	subs	r6, r3, r6
 80090ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80090f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090f6:	e7e3      	b.n	80090c0 <_strtod_l+0x3f8>
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	3316      	adds	r3, #22
 80090fc:	db0b      	blt.n	8009116 <_strtod_l+0x44e>
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	1bdf      	subs	r7, r3, r7
 8009102:	4b54      	ldr	r3, [pc, #336]	; (8009254 <_strtod_l+0x58c>)
 8009104:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800910c:	4640      	mov	r0, r8
 800910e:	4649      	mov	r1, r9
 8009110:	f7f7 fbac 	bl	800086c <__aeabi_ddiv>
 8009114:	e7d6      	b.n	80090c4 <_strtod_l+0x3fc>
 8009116:	9b08      	ldr	r3, [sp, #32]
 8009118:	1b75      	subs	r5, r6, r5
 800911a:	441d      	add	r5, r3
 800911c:	2d00      	cmp	r5, #0
 800911e:	dd70      	ble.n	8009202 <_strtod_l+0x53a>
 8009120:	f015 030f 	ands.w	r3, r5, #15
 8009124:	d00a      	beq.n	800913c <_strtod_l+0x474>
 8009126:	494b      	ldr	r1, [pc, #300]	; (8009254 <_strtod_l+0x58c>)
 8009128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009134:	f7f7 fa70 	bl	8000618 <__aeabi_dmul>
 8009138:	4680      	mov	r8, r0
 800913a:	4689      	mov	r9, r1
 800913c:	f035 050f 	bics.w	r5, r5, #15
 8009140:	d04d      	beq.n	80091de <_strtod_l+0x516>
 8009142:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009146:	dd22      	ble.n	800918e <_strtod_l+0x4c6>
 8009148:	2500      	movs	r5, #0
 800914a:	46ab      	mov	fp, r5
 800914c:	9509      	str	r5, [sp, #36]	; 0x24
 800914e:	9505      	str	r5, [sp, #20]
 8009150:	2322      	movs	r3, #34	; 0x22
 8009152:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800925c <_strtod_l+0x594>
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	f04f 0800 	mov.w	r8, #0
 800915c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f aded 	beq.w	8008d3e <_strtod_l+0x76>
 8009164:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff f924 	bl	80083b4 <_Bfree>
 800916c:	9905      	ldr	r1, [sp, #20]
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff f920 	bl	80083b4 <_Bfree>
 8009174:	4659      	mov	r1, fp
 8009176:	4620      	mov	r0, r4
 8009178:	f7ff f91c 	bl	80083b4 <_Bfree>
 800917c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917e:	4620      	mov	r0, r4
 8009180:	f7ff f918 	bl	80083b4 <_Bfree>
 8009184:	4629      	mov	r1, r5
 8009186:	4620      	mov	r0, r4
 8009188:	f7ff f914 	bl	80083b4 <_Bfree>
 800918c:	e5d7      	b.n	8008d3e <_strtod_l+0x76>
 800918e:	4b32      	ldr	r3, [pc, #200]	; (8009258 <_strtod_l+0x590>)
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	2300      	movs	r3, #0
 8009194:	112d      	asrs	r5, r5, #4
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	469a      	mov	sl, r3
 800919c:	2d01      	cmp	r5, #1
 800919e:	dc21      	bgt.n	80091e4 <_strtod_l+0x51c>
 80091a0:	b10b      	cbz	r3, 80091a6 <_strtod_l+0x4de>
 80091a2:	4680      	mov	r8, r0
 80091a4:	4689      	mov	r9, r1
 80091a6:	492c      	ldr	r1, [pc, #176]	; (8009258 <_strtod_l+0x590>)
 80091a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091b8:	f7f7 fa2e 	bl	8000618 <__aeabi_dmul>
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <_strtod_l+0x594>)
 80091be:	460a      	mov	r2, r1
 80091c0:	400b      	ands	r3, r1
 80091c2:	4927      	ldr	r1, [pc, #156]	; (8009260 <_strtod_l+0x598>)
 80091c4:	428b      	cmp	r3, r1
 80091c6:	4680      	mov	r8, r0
 80091c8:	d8be      	bhi.n	8009148 <_strtod_l+0x480>
 80091ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091ce:	428b      	cmp	r3, r1
 80091d0:	bf86      	itte	hi
 80091d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009264 <_strtod_l+0x59c>
 80091d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80091da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091de:	2300      	movs	r3, #0
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	e07b      	b.n	80092dc <_strtod_l+0x614>
 80091e4:	07ea      	lsls	r2, r5, #31
 80091e6:	d505      	bpl.n	80091f4 <_strtod_l+0x52c>
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa13 	bl	8000618 <__aeabi_dmul>
 80091f2:	2301      	movs	r3, #1
 80091f4:	9a04      	ldr	r2, [sp, #16]
 80091f6:	3208      	adds	r2, #8
 80091f8:	f10a 0a01 	add.w	sl, sl, #1
 80091fc:	106d      	asrs	r5, r5, #1
 80091fe:	9204      	str	r2, [sp, #16]
 8009200:	e7cc      	b.n	800919c <_strtod_l+0x4d4>
 8009202:	d0ec      	beq.n	80091de <_strtod_l+0x516>
 8009204:	426d      	negs	r5, r5
 8009206:	f015 020f 	ands.w	r2, r5, #15
 800920a:	d00a      	beq.n	8009222 <_strtod_l+0x55a>
 800920c:	4b11      	ldr	r3, [pc, #68]	; (8009254 <_strtod_l+0x58c>)
 800920e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 fb27 	bl	800086c <__aeabi_ddiv>
 800921e:	4680      	mov	r8, r0
 8009220:	4689      	mov	r9, r1
 8009222:	112d      	asrs	r5, r5, #4
 8009224:	d0db      	beq.n	80091de <_strtod_l+0x516>
 8009226:	2d1f      	cmp	r5, #31
 8009228:	dd1e      	ble.n	8009268 <_strtod_l+0x5a0>
 800922a:	2500      	movs	r5, #0
 800922c:	46ab      	mov	fp, r5
 800922e:	9509      	str	r5, [sp, #36]	; 0x24
 8009230:	9505      	str	r5, [sp, #20]
 8009232:	2322      	movs	r3, #34	; 0x22
 8009234:	f04f 0800 	mov.w	r8, #0
 8009238:	f04f 0900 	mov.w	r9, #0
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	e78d      	b.n	800915c <_strtod_l+0x494>
 8009240:	0800ade2 	.word	0x0800ade2
 8009244:	0800b00c 	.word	0x0800b00c
 8009248:	0800adda 	.word	0x0800adda
 800924c:	0800ae11 	.word	0x0800ae11
 8009250:	0800b09c 	.word	0x0800b09c
 8009254:	0800af20 	.word	0x0800af20
 8009258:	0800aef8 	.word	0x0800aef8
 800925c:	7ff00000 	.word	0x7ff00000
 8009260:	7ca00000 	.word	0x7ca00000
 8009264:	7fefffff 	.word	0x7fefffff
 8009268:	f015 0310 	ands.w	r3, r5, #16
 800926c:	bf18      	it	ne
 800926e:	236a      	movne	r3, #106	; 0x6a
 8009270:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009614 <_strtod_l+0x94c>
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	2300      	movs	r3, #0
 800927c:	07ea      	lsls	r2, r5, #31
 800927e:	d504      	bpl.n	800928a <_strtod_l+0x5c2>
 8009280:	e9da 2300 	ldrd	r2, r3, [sl]
 8009284:	f7f7 f9c8 	bl	8000618 <__aeabi_dmul>
 8009288:	2301      	movs	r3, #1
 800928a:	106d      	asrs	r5, r5, #1
 800928c:	f10a 0a08 	add.w	sl, sl, #8
 8009290:	d1f4      	bne.n	800927c <_strtod_l+0x5b4>
 8009292:	b10b      	cbz	r3, 8009298 <_strtod_l+0x5d0>
 8009294:	4680      	mov	r8, r0
 8009296:	4689      	mov	r9, r1
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	b1bb      	cbz	r3, 80092cc <_strtod_l+0x604>
 800929c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	4649      	mov	r1, r9
 80092a8:	dd10      	ble.n	80092cc <_strtod_l+0x604>
 80092aa:	2b1f      	cmp	r3, #31
 80092ac:	f340 811e 	ble.w	80094ec <_strtod_l+0x824>
 80092b0:	2b34      	cmp	r3, #52	; 0x34
 80092b2:	bfde      	ittt	le
 80092b4:	f04f 33ff 	movle.w	r3, #4294967295
 80092b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092bc:	4093      	lslle	r3, r2
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	bfcc      	ite	gt
 80092c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092c8:	ea03 0901 	andle.w	r9, r3, r1
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f7 fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d1a6      	bne.n	800922a <_strtod_l+0x562>
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092e2:	4633      	mov	r3, r6
 80092e4:	465a      	mov	r2, fp
 80092e6:	4620      	mov	r0, r4
 80092e8:	f7ff f8cc 	bl	8008484 <__s2b>
 80092ec:	9009      	str	r0, [sp, #36]	; 0x24
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f43f af2a 	beq.w	8009148 <_strtod_l+0x480>
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	9b05      	ldr	r3, [sp, #20]
 80092f8:	2a00      	cmp	r2, #0
 80092fa:	eba3 0307 	sub.w	r3, r3, r7
 80092fe:	bfa8      	it	ge
 8009300:	2300      	movge	r3, #0
 8009302:	930c      	str	r3, [sp, #48]	; 0x30
 8009304:	2500      	movs	r5, #0
 8009306:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800930a:	9312      	str	r3, [sp, #72]	; 0x48
 800930c:	46ab      	mov	fp, r5
 800930e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009310:	4620      	mov	r0, r4
 8009312:	6859      	ldr	r1, [r3, #4]
 8009314:	f7ff f80e 	bl	8008334 <_Balloc>
 8009318:	9005      	str	r0, [sp, #20]
 800931a:	2800      	cmp	r0, #0
 800931c:	f43f af18 	beq.w	8009150 <_strtod_l+0x488>
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	3202      	adds	r2, #2
 8009326:	f103 010c 	add.w	r1, r3, #12
 800932a:	0092      	lsls	r2, r2, #2
 800932c:	300c      	adds	r0, #12
 800932e:	f000 fcf3 	bl	8009d18 <memcpy>
 8009332:	ec49 8b10 	vmov	d0, r8, r9
 8009336:	aa18      	add	r2, sp, #96	; 0x60
 8009338:	a917      	add	r1, sp, #92	; 0x5c
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff fbd6 	bl	8008aec <__d2b>
 8009340:	ec49 8b18 	vmov	d8, r8, r9
 8009344:	9016      	str	r0, [sp, #88]	; 0x58
 8009346:	2800      	cmp	r0, #0
 8009348:	f43f af02 	beq.w	8009150 <_strtod_l+0x488>
 800934c:	2101      	movs	r1, #1
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff f930 	bl	80085b4 <__i2b>
 8009354:	4683      	mov	fp, r0
 8009356:	2800      	cmp	r0, #0
 8009358:	f43f aefa 	beq.w	8009150 <_strtod_l+0x488>
 800935c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800935e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009360:	2e00      	cmp	r6, #0
 8009362:	bfab      	itete	ge
 8009364:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009366:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009368:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800936a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800936e:	bfac      	ite	ge
 8009370:	eb06 0a03 	addge.w	sl, r6, r3
 8009374:	1b9f      	sublt	r7, r3, r6
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	1af6      	subs	r6, r6, r3
 800937a:	4416      	add	r6, r2
 800937c:	4ba0      	ldr	r3, [pc, #640]	; (8009600 <_strtod_l+0x938>)
 800937e:	3e01      	subs	r6, #1
 8009380:	429e      	cmp	r6, r3
 8009382:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009386:	f280 80c4 	bge.w	8009512 <_strtod_l+0x84a>
 800938a:	1b9b      	subs	r3, r3, r6
 800938c:	2b1f      	cmp	r3, #31
 800938e:	eba2 0203 	sub.w	r2, r2, r3
 8009392:	f04f 0101 	mov.w	r1, #1
 8009396:	f300 80b0 	bgt.w	80094fa <_strtod_l+0x832>
 800939a:	fa01 f303 	lsl.w	r3, r1, r3
 800939e:	930e      	str	r3, [sp, #56]	; 0x38
 80093a0:	2300      	movs	r3, #0
 80093a2:	930d      	str	r3, [sp, #52]	; 0x34
 80093a4:	eb0a 0602 	add.w	r6, sl, r2
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	45b2      	cmp	sl, r6
 80093ac:	4417      	add	r7, r2
 80093ae:	441f      	add	r7, r3
 80093b0:	4653      	mov	r3, sl
 80093b2:	bfa8      	it	ge
 80093b4:	4633      	movge	r3, r6
 80093b6:	42bb      	cmp	r3, r7
 80093b8:	bfa8      	it	ge
 80093ba:	463b      	movge	r3, r7
 80093bc:	2b00      	cmp	r3, #0
 80093be:	bfc2      	ittt	gt
 80093c0:	1af6      	subgt	r6, r6, r3
 80093c2:	1aff      	subgt	r7, r7, r3
 80093c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80093c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	dd17      	ble.n	80093fe <_strtod_l+0x736>
 80093ce:	4659      	mov	r1, fp
 80093d0:	461a      	mov	r2, r3
 80093d2:	4620      	mov	r0, r4
 80093d4:	f7ff f9ae 	bl	8008734 <__pow5mult>
 80093d8:	4683      	mov	fp, r0
 80093da:	2800      	cmp	r0, #0
 80093dc:	f43f aeb8 	beq.w	8009150 <_strtod_l+0x488>
 80093e0:	4601      	mov	r1, r0
 80093e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff f8fb 	bl	80085e0 <__multiply>
 80093ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f aeaf 	beq.w	8009150 <_strtod_l+0x488>
 80093f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093f4:	4620      	mov	r0, r4
 80093f6:	f7fe ffdd 	bl	80083b4 <_Bfree>
 80093fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093fc:	9316      	str	r3, [sp, #88]	; 0x58
 80093fe:	2e00      	cmp	r6, #0
 8009400:	f300 808c 	bgt.w	800951c <_strtod_l+0x854>
 8009404:	9b08      	ldr	r3, [sp, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dd08      	ble.n	800941c <_strtod_l+0x754>
 800940a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800940c:	9905      	ldr	r1, [sp, #20]
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff f990 	bl	8008734 <__pow5mult>
 8009414:	9005      	str	r0, [sp, #20]
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f ae9a 	beq.w	8009150 <_strtod_l+0x488>
 800941c:	2f00      	cmp	r7, #0
 800941e:	dd08      	ble.n	8009432 <_strtod_l+0x76a>
 8009420:	9905      	ldr	r1, [sp, #20]
 8009422:	463a      	mov	r2, r7
 8009424:	4620      	mov	r0, r4
 8009426:	f7ff f9df 	bl	80087e8 <__lshift>
 800942a:	9005      	str	r0, [sp, #20]
 800942c:	2800      	cmp	r0, #0
 800942e:	f43f ae8f 	beq.w	8009150 <_strtod_l+0x488>
 8009432:	f1ba 0f00 	cmp.w	sl, #0
 8009436:	dd08      	ble.n	800944a <_strtod_l+0x782>
 8009438:	4659      	mov	r1, fp
 800943a:	4652      	mov	r2, sl
 800943c:	4620      	mov	r0, r4
 800943e:	f7ff f9d3 	bl	80087e8 <__lshift>
 8009442:	4683      	mov	fp, r0
 8009444:	2800      	cmp	r0, #0
 8009446:	f43f ae83 	beq.w	8009150 <_strtod_l+0x488>
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800944e:	4620      	mov	r0, r4
 8009450:	f7ff fa52 	bl	80088f8 <__mdiff>
 8009454:	4605      	mov	r5, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f ae7a 	beq.w	8009150 <_strtod_l+0x488>
 800945c:	68c3      	ldr	r3, [r0, #12]
 800945e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009460:	2300      	movs	r3, #0
 8009462:	60c3      	str	r3, [r0, #12]
 8009464:	4659      	mov	r1, fp
 8009466:	f7ff fa2b 	bl	80088c0 <__mcmp>
 800946a:	2800      	cmp	r0, #0
 800946c:	da60      	bge.n	8009530 <_strtod_l+0x868>
 800946e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009470:	ea53 0308 	orrs.w	r3, r3, r8
 8009474:	f040 8084 	bne.w	8009580 <_strtod_l+0x8b8>
 8009478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800947c:	2b00      	cmp	r3, #0
 800947e:	d17f      	bne.n	8009580 <_strtod_l+0x8b8>
 8009480:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009484:	0d1b      	lsrs	r3, r3, #20
 8009486:	051b      	lsls	r3, r3, #20
 8009488:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800948c:	d978      	bls.n	8009580 <_strtod_l+0x8b8>
 800948e:	696b      	ldr	r3, [r5, #20]
 8009490:	b913      	cbnz	r3, 8009498 <_strtod_l+0x7d0>
 8009492:	692b      	ldr	r3, [r5, #16]
 8009494:	2b01      	cmp	r3, #1
 8009496:	dd73      	ble.n	8009580 <_strtod_l+0x8b8>
 8009498:	4629      	mov	r1, r5
 800949a:	2201      	movs	r2, #1
 800949c:	4620      	mov	r0, r4
 800949e:	f7ff f9a3 	bl	80087e8 <__lshift>
 80094a2:	4659      	mov	r1, fp
 80094a4:	4605      	mov	r5, r0
 80094a6:	f7ff fa0b 	bl	80088c0 <__mcmp>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	dd68      	ble.n	8009580 <_strtod_l+0x8b8>
 80094ae:	9904      	ldr	r1, [sp, #16]
 80094b0:	4a54      	ldr	r2, [pc, #336]	; (8009604 <_strtod_l+0x93c>)
 80094b2:	464b      	mov	r3, r9
 80094b4:	2900      	cmp	r1, #0
 80094b6:	f000 8084 	beq.w	80095c2 <_strtod_l+0x8fa>
 80094ba:	ea02 0109 	and.w	r1, r2, r9
 80094be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094c2:	dc7e      	bgt.n	80095c2 <_strtod_l+0x8fa>
 80094c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094c8:	f77f aeb3 	ble.w	8009232 <_strtod_l+0x56a>
 80094cc:	4b4e      	ldr	r3, [pc, #312]	; (8009608 <_strtod_l+0x940>)
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	2200      	movs	r2, #0
 80094d4:	f7f7 f8a0 	bl	8000618 <__aeabi_dmul>
 80094d8:	4b4a      	ldr	r3, [pc, #296]	; (8009604 <_strtod_l+0x93c>)
 80094da:	400b      	ands	r3, r1
 80094dc:	4680      	mov	r8, r0
 80094de:	4689      	mov	r9, r1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f47f ae3f 	bne.w	8009164 <_strtod_l+0x49c>
 80094e6:	2322      	movs	r3, #34	; 0x22
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	e63b      	b.n	8009164 <_strtod_l+0x49c>
 80094ec:	f04f 32ff 	mov.w	r2, #4294967295
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	ea03 0808 	and.w	r8, r3, r8
 80094f8:	e6e8      	b.n	80092cc <_strtod_l+0x604>
 80094fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80094fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009502:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009506:	36e2      	adds	r6, #226	; 0xe2
 8009508:	fa01 f306 	lsl.w	r3, r1, r6
 800950c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009510:	e748      	b.n	80093a4 <_strtod_l+0x6dc>
 8009512:	2100      	movs	r1, #0
 8009514:	2301      	movs	r3, #1
 8009516:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800951a:	e743      	b.n	80093a4 <_strtod_l+0x6dc>
 800951c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800951e:	4632      	mov	r2, r6
 8009520:	4620      	mov	r0, r4
 8009522:	f7ff f961 	bl	80087e8 <__lshift>
 8009526:	9016      	str	r0, [sp, #88]	; 0x58
 8009528:	2800      	cmp	r0, #0
 800952a:	f47f af6b 	bne.w	8009404 <_strtod_l+0x73c>
 800952e:	e60f      	b.n	8009150 <_strtod_l+0x488>
 8009530:	46ca      	mov	sl, r9
 8009532:	d171      	bne.n	8009618 <_strtod_l+0x950>
 8009534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009536:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800953a:	b352      	cbz	r2, 8009592 <_strtod_l+0x8ca>
 800953c:	4a33      	ldr	r2, [pc, #204]	; (800960c <_strtod_l+0x944>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d12a      	bne.n	8009598 <_strtod_l+0x8d0>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	4641      	mov	r1, r8
 8009546:	b1fb      	cbz	r3, 8009588 <_strtod_l+0x8c0>
 8009548:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <_strtod_l+0x93c>)
 800954a:	ea09 0303 	and.w	r3, r9, r3
 800954e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	d81a      	bhi.n	800958e <_strtod_l+0x8c6>
 8009558:	0d1b      	lsrs	r3, r3, #20
 800955a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800955e:	fa02 f303 	lsl.w	r3, r2, r3
 8009562:	4299      	cmp	r1, r3
 8009564:	d118      	bne.n	8009598 <_strtod_l+0x8d0>
 8009566:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <_strtod_l+0x948>)
 8009568:	459a      	cmp	sl, r3
 800956a:	d102      	bne.n	8009572 <_strtod_l+0x8aa>
 800956c:	3101      	adds	r1, #1
 800956e:	f43f adef 	beq.w	8009150 <_strtod_l+0x488>
 8009572:	4b24      	ldr	r3, [pc, #144]	; (8009604 <_strtod_l+0x93c>)
 8009574:	ea0a 0303 	and.w	r3, sl, r3
 8009578:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800957c:	f04f 0800 	mov.w	r8, #0
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1a2      	bne.n	80094cc <_strtod_l+0x804>
 8009586:	e5ed      	b.n	8009164 <_strtod_l+0x49c>
 8009588:	f04f 33ff 	mov.w	r3, #4294967295
 800958c:	e7e9      	b.n	8009562 <_strtod_l+0x89a>
 800958e:	4613      	mov	r3, r2
 8009590:	e7e7      	b.n	8009562 <_strtod_l+0x89a>
 8009592:	ea53 0308 	orrs.w	r3, r3, r8
 8009596:	d08a      	beq.n	80094ae <_strtod_l+0x7e6>
 8009598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959a:	b1e3      	cbz	r3, 80095d6 <_strtod_l+0x90e>
 800959c:	ea13 0f0a 	tst.w	r3, sl
 80095a0:	d0ee      	beq.n	8009580 <_strtod_l+0x8b8>
 80095a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a4:	9a04      	ldr	r2, [sp, #16]
 80095a6:	4640      	mov	r0, r8
 80095a8:	4649      	mov	r1, r9
 80095aa:	b1c3      	cbz	r3, 80095de <_strtod_l+0x916>
 80095ac:	f7ff fb6f 	bl	8008c8e <sulp>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	ec51 0b18 	vmov	r0, r1, d8
 80095b8:	f7f6 fe78 	bl	80002ac <__adddf3>
 80095bc:	4680      	mov	r8, r0
 80095be:	4689      	mov	r9, r1
 80095c0:	e7de      	b.n	8009580 <_strtod_l+0x8b8>
 80095c2:	4013      	ands	r3, r2
 80095c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095d0:	f04f 38ff 	mov.w	r8, #4294967295
 80095d4:	e7d4      	b.n	8009580 <_strtod_l+0x8b8>
 80095d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095d8:	ea13 0f08 	tst.w	r3, r8
 80095dc:	e7e0      	b.n	80095a0 <_strtod_l+0x8d8>
 80095de:	f7ff fb56 	bl	8008c8e <sulp>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	ec51 0b18 	vmov	r0, r1, d8
 80095ea:	f7f6 fe5d 	bl	80002a8 <__aeabi_dsub>
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	4680      	mov	r8, r0
 80095f4:	4689      	mov	r9, r1
 80095f6:	f7f7 fa77 	bl	8000ae8 <__aeabi_dcmpeq>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d0c0      	beq.n	8009580 <_strtod_l+0x8b8>
 80095fe:	e618      	b.n	8009232 <_strtod_l+0x56a>
 8009600:	fffffc02 	.word	0xfffffc02
 8009604:	7ff00000 	.word	0x7ff00000
 8009608:	39500000 	.word	0x39500000
 800960c:	000fffff 	.word	0x000fffff
 8009610:	7fefffff 	.word	0x7fefffff
 8009614:	0800b020 	.word	0x0800b020
 8009618:	4659      	mov	r1, fp
 800961a:	4628      	mov	r0, r5
 800961c:	f7ff fac0 	bl	8008ba0 <__ratio>
 8009620:	ec57 6b10 	vmov	r6, r7, d0
 8009624:	ee10 0a10 	vmov	r0, s0
 8009628:	2200      	movs	r2, #0
 800962a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800962e:	4639      	mov	r1, r7
 8009630:	f7f7 fa6e 	bl	8000b10 <__aeabi_dcmple>
 8009634:	2800      	cmp	r0, #0
 8009636:	d071      	beq.n	800971c <_strtod_l+0xa54>
 8009638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d17c      	bne.n	8009738 <_strtod_l+0xa70>
 800963e:	f1b8 0f00 	cmp.w	r8, #0
 8009642:	d15a      	bne.n	80096fa <_strtod_l+0xa32>
 8009644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009648:	2b00      	cmp	r3, #0
 800964a:	d15d      	bne.n	8009708 <_strtod_l+0xa40>
 800964c:	4b90      	ldr	r3, [pc, #576]	; (8009890 <_strtod_l+0xbc8>)
 800964e:	2200      	movs	r2, #0
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 fa52 	bl	8000afc <__aeabi_dcmplt>
 8009658:	2800      	cmp	r0, #0
 800965a:	d15c      	bne.n	8009716 <_strtod_l+0xa4e>
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	4b8c      	ldr	r3, [pc, #560]	; (8009894 <_strtod_l+0xbcc>)
 8009662:	2200      	movs	r2, #0
 8009664:	f7f6 ffd8 	bl	8000618 <__aeabi_dmul>
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009670:	9606      	str	r6, [sp, #24]
 8009672:	9307      	str	r3, [sp, #28]
 8009674:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009678:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800967c:	4b86      	ldr	r3, [pc, #536]	; (8009898 <_strtod_l+0xbd0>)
 800967e:	ea0a 0303 	and.w	r3, sl, r3
 8009682:	930d      	str	r3, [sp, #52]	; 0x34
 8009684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009686:	4b85      	ldr	r3, [pc, #532]	; (800989c <_strtod_l+0xbd4>)
 8009688:	429a      	cmp	r2, r3
 800968a:	f040 8090 	bne.w	80097ae <_strtod_l+0xae6>
 800968e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009692:	ec49 8b10 	vmov	d0, r8, r9
 8009696:	f7ff f9b9 	bl	8008a0c <__ulp>
 800969a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800969e:	ec51 0b10 	vmov	r0, r1, d0
 80096a2:	f7f6 ffb9 	bl	8000618 <__aeabi_dmul>
 80096a6:	4642      	mov	r2, r8
 80096a8:	464b      	mov	r3, r9
 80096aa:	f7f6 fdff 	bl	80002ac <__adddf3>
 80096ae:	460b      	mov	r3, r1
 80096b0:	4979      	ldr	r1, [pc, #484]	; (8009898 <_strtod_l+0xbd0>)
 80096b2:	4a7b      	ldr	r2, [pc, #492]	; (80098a0 <_strtod_l+0xbd8>)
 80096b4:	4019      	ands	r1, r3
 80096b6:	4291      	cmp	r1, r2
 80096b8:	4680      	mov	r8, r0
 80096ba:	d944      	bls.n	8009746 <_strtod_l+0xa7e>
 80096bc:	ee18 2a90 	vmov	r2, s17
 80096c0:	4b78      	ldr	r3, [pc, #480]	; (80098a4 <_strtod_l+0xbdc>)
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d104      	bne.n	80096d0 <_strtod_l+0xa08>
 80096c6:	ee18 3a10 	vmov	r3, s16
 80096ca:	3301      	adds	r3, #1
 80096cc:	f43f ad40 	beq.w	8009150 <_strtod_l+0x488>
 80096d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80098a4 <_strtod_l+0xbdc>
 80096d4:	f04f 38ff 	mov.w	r8, #4294967295
 80096d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096da:	4620      	mov	r0, r4
 80096dc:	f7fe fe6a 	bl	80083b4 <_Bfree>
 80096e0:	9905      	ldr	r1, [sp, #20]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7fe fe66 	bl	80083b4 <_Bfree>
 80096e8:	4659      	mov	r1, fp
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7fe fe62 	bl	80083b4 <_Bfree>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7fe fe5e 	bl	80083b4 <_Bfree>
 80096f8:	e609      	b.n	800930e <_strtod_l+0x646>
 80096fa:	f1b8 0f01 	cmp.w	r8, #1
 80096fe:	d103      	bne.n	8009708 <_strtod_l+0xa40>
 8009700:	f1b9 0f00 	cmp.w	r9, #0
 8009704:	f43f ad95 	beq.w	8009232 <_strtod_l+0x56a>
 8009708:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009860 <_strtod_l+0xb98>
 800970c:	4f60      	ldr	r7, [pc, #384]	; (8009890 <_strtod_l+0xbc8>)
 800970e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009712:	2600      	movs	r6, #0
 8009714:	e7ae      	b.n	8009674 <_strtod_l+0x9ac>
 8009716:	4f5f      	ldr	r7, [pc, #380]	; (8009894 <_strtod_l+0xbcc>)
 8009718:	2600      	movs	r6, #0
 800971a:	e7a7      	b.n	800966c <_strtod_l+0x9a4>
 800971c:	4b5d      	ldr	r3, [pc, #372]	; (8009894 <_strtod_l+0xbcc>)
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	2200      	movs	r2, #0
 8009724:	f7f6 ff78 	bl	8000618 <__aeabi_dmul>
 8009728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d09c      	beq.n	800966c <_strtod_l+0x9a4>
 8009732:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009736:	e79d      	b.n	8009674 <_strtod_l+0x9ac>
 8009738:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009868 <_strtod_l+0xba0>
 800973c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009740:	ec57 6b17 	vmov	r6, r7, d7
 8009744:	e796      	b.n	8009674 <_strtod_l+0x9ac>
 8009746:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	46ca      	mov	sl, r9
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1c2      	bne.n	80096d8 <_strtod_l+0xa10>
 8009752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009758:	0d1b      	lsrs	r3, r3, #20
 800975a:	051b      	lsls	r3, r3, #20
 800975c:	429a      	cmp	r2, r3
 800975e:	d1bb      	bne.n	80096d8 <_strtod_l+0xa10>
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f7 fab8 	bl	8000cd8 <__aeabi_d2lz>
 8009768:	f7f6 ff28 	bl	80005bc <__aeabi_l2d>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	f7f6 fd98 	bl	80002a8 <__aeabi_dsub>
 8009778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800977a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800977e:	ea43 0308 	orr.w	r3, r3, r8
 8009782:	4313      	orrs	r3, r2
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	d054      	beq.n	8009834 <_strtod_l+0xb6c>
 800978a:	a339      	add	r3, pc, #228	; (adr r3, 8009870 <_strtod_l+0xba8>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f7 f9b4 	bl	8000afc <__aeabi_dcmplt>
 8009794:	2800      	cmp	r0, #0
 8009796:	f47f ace5 	bne.w	8009164 <_strtod_l+0x49c>
 800979a:	a337      	add	r3, pc, #220	; (adr r3, 8009878 <_strtod_l+0xbb0>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f9c8 	bl	8000b38 <__aeabi_dcmpgt>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d095      	beq.n	80096d8 <_strtod_l+0xa10>
 80097ac:	e4da      	b.n	8009164 <_strtod_l+0x49c>
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	b333      	cbz	r3, 8009800 <_strtod_l+0xb38>
 80097b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097b8:	d822      	bhi.n	8009800 <_strtod_l+0xb38>
 80097ba:	a331      	add	r3, pc, #196	; (adr r3, 8009880 <_strtod_l+0xbb8>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f7f7 f9a4 	bl	8000b10 <__aeabi_dcmple>
 80097c8:	b1a0      	cbz	r0, 80097f4 <_strtod_l+0xb2c>
 80097ca:	4639      	mov	r1, r7
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7f7 f9fb 	bl	8000bc8 <__aeabi_d2uiz>
 80097d2:	2801      	cmp	r0, #1
 80097d4:	bf38      	it	cc
 80097d6:	2001      	movcc	r0, #1
 80097d8:	f7f6 fea4 	bl	8000524 <__aeabi_ui2d>
 80097dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097de:	4606      	mov	r6, r0
 80097e0:	460f      	mov	r7, r1
 80097e2:	bb23      	cbnz	r3, 800982e <_strtod_l+0xb66>
 80097e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097e8:	9010      	str	r0, [sp, #64]	; 0x40
 80097ea:	9311      	str	r3, [sp, #68]	; 0x44
 80097ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80097f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009800:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009804:	eeb0 0a48 	vmov.f32	s0, s16
 8009808:	eef0 0a68 	vmov.f32	s1, s17
 800980c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009810:	f7ff f8fc 	bl	8008a0c <__ulp>
 8009814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009818:	ec53 2b10 	vmov	r2, r3, d0
 800981c:	f7f6 fefc 	bl	8000618 <__aeabi_dmul>
 8009820:	ec53 2b18 	vmov	r2, r3, d8
 8009824:	f7f6 fd42 	bl	80002ac <__adddf3>
 8009828:	4680      	mov	r8, r0
 800982a:	4689      	mov	r9, r1
 800982c:	e78d      	b.n	800974a <_strtod_l+0xa82>
 800982e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009832:	e7db      	b.n	80097ec <_strtod_l+0xb24>
 8009834:	a314      	add	r3, pc, #80	; (adr r3, 8009888 <_strtod_l+0xbc0>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f7 f95f 	bl	8000afc <__aeabi_dcmplt>
 800983e:	e7b3      	b.n	80097a8 <_strtod_l+0xae0>
 8009840:	2300      	movs	r3, #0
 8009842:	930a      	str	r3, [sp, #40]	; 0x28
 8009844:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	f7ff ba7c 	b.w	8008d46 <_strtod_l+0x7e>
 800984e:	2a65      	cmp	r2, #101	; 0x65
 8009850:	f43f ab75 	beq.w	8008f3e <_strtod_l+0x276>
 8009854:	2a45      	cmp	r2, #69	; 0x45
 8009856:	f43f ab72 	beq.w	8008f3e <_strtod_l+0x276>
 800985a:	2301      	movs	r3, #1
 800985c:	f7ff bbaa 	b.w	8008fb4 <_strtod_l+0x2ec>
 8009860:	00000000 	.word	0x00000000
 8009864:	bff00000 	.word	0xbff00000
 8009868:	00000000 	.word	0x00000000
 800986c:	3ff00000 	.word	0x3ff00000
 8009870:	94a03595 	.word	0x94a03595
 8009874:	3fdfffff 	.word	0x3fdfffff
 8009878:	35afe535 	.word	0x35afe535
 800987c:	3fe00000 	.word	0x3fe00000
 8009880:	ffc00000 	.word	0xffc00000
 8009884:	41dfffff 	.word	0x41dfffff
 8009888:	94a03595 	.word	0x94a03595
 800988c:	3fcfffff 	.word	0x3fcfffff
 8009890:	3ff00000 	.word	0x3ff00000
 8009894:	3fe00000 	.word	0x3fe00000
 8009898:	7ff00000 	.word	0x7ff00000
 800989c:	7fe00000 	.word	0x7fe00000
 80098a0:	7c9fffff 	.word	0x7c9fffff
 80098a4:	7fefffff 	.word	0x7fefffff

080098a8 <_strtod_r>:
 80098a8:	4b01      	ldr	r3, [pc, #4]	; (80098b0 <_strtod_r+0x8>)
 80098aa:	f7ff ba0d 	b.w	8008cc8 <_strtod_l>
 80098ae:	bf00      	nop
 80098b0:	20000070 	.word	0x20000070

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	461f      	mov	r7, r3
 80098bc:	42be      	cmp	r6, r7
 80098be:	680b      	ldr	r3, [r1, #0]
 80098c0:	4682      	mov	sl, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4690      	mov	r8, r2
 80098c6:	d82c      	bhi.n	8009922 <__ssputs_r+0x6e>
 80098c8:	898a      	ldrh	r2, [r1, #12]
 80098ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098ce:	d026      	beq.n	800991e <__ssputs_r+0x6a>
 80098d0:	6965      	ldr	r5, [r4, #20]
 80098d2:	6909      	ldr	r1, [r1, #16]
 80098d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098d8:	eba3 0901 	sub.w	r9, r3, r1
 80098dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e0:	1c7b      	adds	r3, r7, #1
 80098e2:	444b      	add	r3, r9
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	429d      	cmp	r5, r3
 80098e8:	bf38      	it	cc
 80098ea:	461d      	movcc	r5, r3
 80098ec:	0553      	lsls	r3, r2, #21
 80098ee:	d527      	bpl.n	8009940 <__ssputs_r+0x8c>
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7fc fcf3 	bl	80062dc <_malloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	b360      	cbz	r0, 8009954 <__ssputs_r+0xa0>
 80098fa:	6921      	ldr	r1, [r4, #16]
 80098fc:	464a      	mov	r2, r9
 80098fe:	f000 fa0b 	bl	8009d18 <memcpy>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6126      	str	r6, [r4, #16]
 8009910:	6165      	str	r5, [r4, #20]
 8009912:	444e      	add	r6, r9
 8009914:	eba5 0509 	sub.w	r5, r5, r9
 8009918:	6026      	str	r6, [r4, #0]
 800991a:	60a5      	str	r5, [r4, #8]
 800991c:	463e      	mov	r6, r7
 800991e:	42be      	cmp	r6, r7
 8009920:	d900      	bls.n	8009924 <__ssputs_r+0x70>
 8009922:	463e      	mov	r6, r7
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	4632      	mov	r2, r6
 8009928:	4641      	mov	r1, r8
 800992a:	f000 f9c9 	bl	8009cc0 <memmove>
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	1b9b      	subs	r3, r3, r6
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	4433      	add	r3, r6
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	462a      	mov	r2, r5
 8009942:	f000 fd9e 	bl	800a482 <_realloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	2800      	cmp	r0, #0
 800994a:	d1e0      	bne.n	800990e <__ssputs_r+0x5a>
 800994c:	6921      	ldr	r1, [r4, #16]
 800994e:	4650      	mov	r0, sl
 8009950:	f7fe fca4 	bl	800829c <_free_r>
 8009954:	230c      	movs	r3, #12
 8009956:	f8ca 3000 	str.w	r3, [sl]
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009960:	81a3      	strh	r3, [r4, #12]
 8009962:	f04f 30ff 	mov.w	r0, #4294967295
 8009966:	e7e9      	b.n	800993c <__ssputs_r+0x88>

08009968 <_svfiprintf_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	4698      	mov	r8, r3
 800996e:	898b      	ldrh	r3, [r1, #12]
 8009970:	061b      	lsls	r3, r3, #24
 8009972:	b09d      	sub	sp, #116	; 0x74
 8009974:	4607      	mov	r7, r0
 8009976:	460d      	mov	r5, r1
 8009978:	4614      	mov	r4, r2
 800997a:	d50e      	bpl.n	800999a <_svfiprintf_r+0x32>
 800997c:	690b      	ldr	r3, [r1, #16]
 800997e:	b963      	cbnz	r3, 800999a <_svfiprintf_r+0x32>
 8009980:	2140      	movs	r1, #64	; 0x40
 8009982:	f7fc fcab 	bl	80062dc <_malloc_r>
 8009986:	6028      	str	r0, [r5, #0]
 8009988:	6128      	str	r0, [r5, #16]
 800998a:	b920      	cbnz	r0, 8009996 <_svfiprintf_r+0x2e>
 800998c:	230c      	movs	r3, #12
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	e0d0      	b.n	8009b38 <_svfiprintf_r+0x1d0>
 8009996:	2340      	movs	r3, #64	; 0x40
 8009998:	616b      	str	r3, [r5, #20]
 800999a:	2300      	movs	r3, #0
 800999c:	9309      	str	r3, [sp, #36]	; 0x24
 800999e:	2320      	movs	r3, #32
 80099a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a8:	2330      	movs	r3, #48	; 0x30
 80099aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b50 <_svfiprintf_r+0x1e8>
 80099ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b2:	f04f 0901 	mov.w	r9, #1
 80099b6:	4623      	mov	r3, r4
 80099b8:	469a      	mov	sl, r3
 80099ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099be:	b10a      	cbz	r2, 80099c4 <_svfiprintf_r+0x5c>
 80099c0:	2a25      	cmp	r2, #37	; 0x25
 80099c2:	d1f9      	bne.n	80099b8 <_svfiprintf_r+0x50>
 80099c4:	ebba 0b04 	subs.w	fp, sl, r4
 80099c8:	d00b      	beq.n	80099e2 <_svfiprintf_r+0x7a>
 80099ca:	465b      	mov	r3, fp
 80099cc:	4622      	mov	r2, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff ff6f 	bl	80098b4 <__ssputs_r>
 80099d6:	3001      	adds	r0, #1
 80099d8:	f000 80a9 	beq.w	8009b2e <_svfiprintf_r+0x1c6>
 80099dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099de:	445a      	add	r2, fp
 80099e0:	9209      	str	r2, [sp, #36]	; 0x24
 80099e2:	f89a 3000 	ldrb.w	r3, [sl]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 80a1 	beq.w	8009b2e <_svfiprintf_r+0x1c6>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f6:	f10a 0a01 	add.w	sl, sl, #1
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a02:	931a      	str	r3, [sp, #104]	; 0x68
 8009a04:	4654      	mov	r4, sl
 8009a06:	2205      	movs	r2, #5
 8009a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0c:	4850      	ldr	r0, [pc, #320]	; (8009b50 <_svfiprintf_r+0x1e8>)
 8009a0e:	f7f6 fbef 	bl	80001f0 <memchr>
 8009a12:	9a04      	ldr	r2, [sp, #16]
 8009a14:	b9d8      	cbnz	r0, 8009a4e <_svfiprintf_r+0xe6>
 8009a16:	06d0      	lsls	r0, r2, #27
 8009a18:	bf44      	itt	mi
 8009a1a:	2320      	movmi	r3, #32
 8009a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a20:	0711      	lsls	r1, r2, #28
 8009a22:	bf44      	itt	mi
 8009a24:	232b      	movmi	r3, #43	; 0x2b
 8009a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a30:	d015      	beq.n	8009a5e <_svfiprintf_r+0xf6>
 8009a32:	9a07      	ldr	r2, [sp, #28]
 8009a34:	4654      	mov	r4, sl
 8009a36:	2000      	movs	r0, #0
 8009a38:	f04f 0c0a 	mov.w	ip, #10
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a42:	3b30      	subs	r3, #48	; 0x30
 8009a44:	2b09      	cmp	r3, #9
 8009a46:	d94d      	bls.n	8009ae4 <_svfiprintf_r+0x17c>
 8009a48:	b1b0      	cbz	r0, 8009a78 <_svfiprintf_r+0x110>
 8009a4a:	9207      	str	r2, [sp, #28]
 8009a4c:	e014      	b.n	8009a78 <_svfiprintf_r+0x110>
 8009a4e:	eba0 0308 	sub.w	r3, r0, r8
 8009a52:	fa09 f303 	lsl.w	r3, r9, r3
 8009a56:	4313      	orrs	r3, r2
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	46a2      	mov	sl, r4
 8009a5c:	e7d2      	b.n	8009a04 <_svfiprintf_r+0x9c>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	1d19      	adds	r1, r3, #4
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	9103      	str	r1, [sp, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bfbb      	ittet	lt
 8009a6a:	425b      	neglt	r3, r3
 8009a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a70:	9307      	strge	r3, [sp, #28]
 8009a72:	9307      	strlt	r3, [sp, #28]
 8009a74:	bfb8      	it	lt
 8009a76:	9204      	strlt	r2, [sp, #16]
 8009a78:	7823      	ldrb	r3, [r4, #0]
 8009a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a7c:	d10c      	bne.n	8009a98 <_svfiprintf_r+0x130>
 8009a7e:	7863      	ldrb	r3, [r4, #1]
 8009a80:	2b2a      	cmp	r3, #42	; 0x2a
 8009a82:	d134      	bne.n	8009aee <_svfiprintf_r+0x186>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	9203      	str	r2, [sp, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfb8      	it	lt
 8009a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a94:	3402      	adds	r4, #2
 8009a96:	9305      	str	r3, [sp, #20]
 8009a98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b60 <_svfiprintf_r+0x1f8>
 8009a9c:	7821      	ldrb	r1, [r4, #0]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	4650      	mov	r0, sl
 8009aa2:	f7f6 fba5 	bl	80001f0 <memchr>
 8009aa6:	b138      	cbz	r0, 8009ab8 <_svfiprintf_r+0x150>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	eba0 000a 	sub.w	r0, r0, sl
 8009aae:	2240      	movs	r2, #64	; 0x40
 8009ab0:	4082      	lsls	r2, r0
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	3401      	adds	r4, #1
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	4825      	ldr	r0, [pc, #148]	; (8009b54 <_svfiprintf_r+0x1ec>)
 8009abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac2:	2206      	movs	r2, #6
 8009ac4:	f7f6 fb94 	bl	80001f0 <memchr>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d038      	beq.n	8009b3e <_svfiprintf_r+0x1d6>
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <_svfiprintf_r+0x1f0>)
 8009ace:	bb1b      	cbnz	r3, 8009b18 <_svfiprintf_r+0x1b0>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	3307      	adds	r3, #7
 8009ad4:	f023 0307 	bic.w	r3, r3, #7
 8009ad8:	3308      	adds	r3, #8
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ade:	4433      	add	r3, r6
 8009ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae2:	e768      	b.n	80099b6 <_svfiprintf_r+0x4e>
 8009ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae8:	460c      	mov	r4, r1
 8009aea:	2001      	movs	r0, #1
 8009aec:	e7a6      	b.n	8009a3c <_svfiprintf_r+0xd4>
 8009aee:	2300      	movs	r3, #0
 8009af0:	3401      	adds	r4, #1
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	4619      	mov	r1, r3
 8009af6:	f04f 0c0a 	mov.w	ip, #10
 8009afa:	4620      	mov	r0, r4
 8009afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b00:	3a30      	subs	r2, #48	; 0x30
 8009b02:	2a09      	cmp	r2, #9
 8009b04:	d903      	bls.n	8009b0e <_svfiprintf_r+0x1a6>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0c6      	beq.n	8009a98 <_svfiprintf_r+0x130>
 8009b0a:	9105      	str	r1, [sp, #20]
 8009b0c:	e7c4      	b.n	8009a98 <_svfiprintf_r+0x130>
 8009b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b12:	4604      	mov	r4, r0
 8009b14:	2301      	movs	r3, #1
 8009b16:	e7f0      	b.n	8009afa <_svfiprintf_r+0x192>
 8009b18:	ab03      	add	r3, sp, #12
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	462a      	mov	r2, r5
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <_svfiprintf_r+0x1f4>)
 8009b20:	a904      	add	r1, sp, #16
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7fc fd94 	bl	8006650 <_printf_float>
 8009b28:	1c42      	adds	r2, r0, #1
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	d1d6      	bne.n	8009adc <_svfiprintf_r+0x174>
 8009b2e:	89ab      	ldrh	r3, [r5, #12]
 8009b30:	065b      	lsls	r3, r3, #25
 8009b32:	f53f af2d 	bmi.w	8009990 <_svfiprintf_r+0x28>
 8009b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b38:	b01d      	add	sp, #116	; 0x74
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <_svfiprintf_r+0x1f4>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7fd f825 	bl	8006b98 <_printf_i>
 8009b4e:	e7eb      	b.n	8009b28 <_svfiprintf_r+0x1c0>
 8009b50:	0800b048 	.word	0x0800b048
 8009b54:	0800b052 	.word	0x0800b052
 8009b58:	08006651 	.word	0x08006651
 8009b5c:	080098b5 	.word	0x080098b5
 8009b60:	0800b04e 	.word	0x0800b04e

08009b64 <__sflush_r>:
 8009b64:	898a      	ldrh	r2, [r1, #12]
 8009b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	0710      	lsls	r0, r2, #28
 8009b6e:	460c      	mov	r4, r1
 8009b70:	d458      	bmi.n	8009c24 <__sflush_r+0xc0>
 8009b72:	684b      	ldr	r3, [r1, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dc05      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc02      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d0f9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b90:	682f      	ldr	r7, [r5, #0]
 8009b92:	6a21      	ldr	r1, [r4, #32]
 8009b94:	602b      	str	r3, [r5, #0]
 8009b96:	d032      	beq.n	8009bfe <__sflush_r+0x9a>
 8009b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	075a      	lsls	r2, r3, #29
 8009b9e:	d505      	bpl.n	8009bac <__sflush_r+0x48>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	1ac0      	subs	r0, r0, r3
 8009ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba6:	b10b      	cbz	r3, 8009bac <__sflush_r+0x48>
 8009ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009baa:	1ac0      	subs	r0, r0, r3
 8009bac:	2300      	movs	r3, #0
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb2:	6a21      	ldr	r1, [r4, #32]
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	d106      	bne.n	8009bcc <__sflush_r+0x68>
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	291d      	cmp	r1, #29
 8009bc2:	d82b      	bhi.n	8009c1c <__sflush_r+0xb8>
 8009bc4:	4a29      	ldr	r2, [pc, #164]	; (8009c6c <__sflush_r+0x108>)
 8009bc6:	410a      	asrs	r2, r1
 8009bc8:	07d6      	lsls	r6, r2, #31
 8009bca:	d427      	bmi.n	8009c1c <__sflush_r+0xb8>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	6062      	str	r2, [r4, #4]
 8009bd0:	04d9      	lsls	r1, r3, #19
 8009bd2:	6922      	ldr	r2, [r4, #16]
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	d504      	bpl.n	8009be2 <__sflush_r+0x7e>
 8009bd8:	1c42      	adds	r2, r0, #1
 8009bda:	d101      	bne.n	8009be0 <__sflush_r+0x7c>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b903      	cbnz	r3, 8009be2 <__sflush_r+0x7e>
 8009be0:	6560      	str	r0, [r4, #84]	; 0x54
 8009be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be4:	602f      	str	r7, [r5, #0]
 8009be6:	2900      	cmp	r1, #0
 8009be8:	d0c9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	d002      	beq.n	8009bf8 <__sflush_r+0x94>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f7fe fb52 	bl	800829c <_free_r>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009bfc:	e7c0      	b.n	8009b80 <__sflush_r+0x1c>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b0      	blx	r6
 8009c04:	1c41      	adds	r1, r0, #1
 8009c06:	d1c8      	bne.n	8009b9a <__sflush_r+0x36>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0c5      	beq.n	8009b9a <__sflush_r+0x36>
 8009c0e:	2b1d      	cmp	r3, #29
 8009c10:	d001      	beq.n	8009c16 <__sflush_r+0xb2>
 8009c12:	2b16      	cmp	r3, #22
 8009c14:	d101      	bne.n	8009c1a <__sflush_r+0xb6>
 8009c16:	602f      	str	r7, [r5, #0]
 8009c18:	e7b1      	b.n	8009b7e <__sflush_r+0x1a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7ad      	b.n	8009b80 <__sflush_r+0x1c>
 8009c24:	690f      	ldr	r7, [r1, #16]
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	d0a9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009c2a:	0793      	lsls	r3, r2, #30
 8009c2c:	680e      	ldr	r6, [r1, #0]
 8009c2e:	bf08      	it	eq
 8009c30:	694b      	ldreq	r3, [r1, #20]
 8009c32:	600f      	str	r7, [r1, #0]
 8009c34:	bf18      	it	ne
 8009c36:	2300      	movne	r3, #0
 8009c38:	eba6 0807 	sub.w	r8, r6, r7
 8009c3c:	608b      	str	r3, [r1, #8]
 8009c3e:	f1b8 0f00 	cmp.w	r8, #0
 8009c42:	dd9c      	ble.n	8009b7e <__sflush_r+0x1a>
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c48:	4643      	mov	r3, r8
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b0      	blx	r6
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dc06      	bgt.n	8009c62 <__sflush_r+0xfe>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e78e      	b.n	8009b80 <__sflush_r+0x1c>
 8009c62:	4407      	add	r7, r0
 8009c64:	eba8 0800 	sub.w	r8, r8, r0
 8009c68:	e7e9      	b.n	8009c3e <__sflush_r+0xda>
 8009c6a:	bf00      	nop
 8009c6c:	dfbffffe 	.word	0xdfbffffe

08009c70 <_fflush_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b913      	cbnz	r3, 8009c80 <_fflush_r+0x10>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	b118      	cbz	r0, 8009c8a <_fflush_r+0x1a>
 8009c82:	6a03      	ldr	r3, [r0, #32]
 8009c84:	b90b      	cbnz	r3, 8009c8a <_fflush_r+0x1a>
 8009c86:	f7fd fb45 	bl	8007314 <__sinit>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f3      	beq.n	8009c7a <_fflush_r+0xa>
 8009c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c94:	07d0      	lsls	r0, r2, #31
 8009c96:	d404      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c98:	0599      	lsls	r1, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9e:	f7fd fc72 	bl	8007586 <__retarget_lock_acquire_recursive>
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f7ff ff5d 	bl	8009b64 <__sflush_r>
 8009caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cac:	07da      	lsls	r2, r3, #31
 8009cae:	4605      	mov	r5, r0
 8009cb0:	d4e4      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	059b      	lsls	r3, r3, #22
 8009cb6:	d4e1      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cba:	f7fd fc65 	bl	8007588 <__retarget_lock_release_recursive>
 8009cbe:	e7dd      	b.n	8009c7c <_fflush_r+0xc>

08009cc0 <memmove>:
 8009cc0:	4288      	cmp	r0, r1
 8009cc2:	b510      	push	{r4, lr}
 8009cc4:	eb01 0402 	add.w	r4, r1, r2
 8009cc8:	d902      	bls.n	8009cd0 <memmove+0x10>
 8009cca:	4284      	cmp	r4, r0
 8009ccc:	4623      	mov	r3, r4
 8009cce:	d807      	bhi.n	8009ce0 <memmove+0x20>
 8009cd0:	1e43      	subs	r3, r0, #1
 8009cd2:	42a1      	cmp	r1, r4
 8009cd4:	d008      	beq.n	8009ce8 <memmove+0x28>
 8009cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cde:	e7f8      	b.n	8009cd2 <memmove+0x12>
 8009ce0:	4402      	add	r2, r0
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	428a      	cmp	r2, r1
 8009ce6:	d100      	bne.n	8009cea <memmove+0x2a>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cf2:	e7f7      	b.n	8009ce4 <memmove+0x24>

08009cf4 <strncmp>:
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	b16a      	cbz	r2, 8009d14 <strncmp+0x20>
 8009cf8:	3901      	subs	r1, #1
 8009cfa:	1884      	adds	r4, r0, r2
 8009cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d103      	bne.n	8009d10 <strncmp+0x1c>
 8009d08:	42a0      	cmp	r0, r4
 8009d0a:	d001      	beq.n	8009d10 <strncmp+0x1c>
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1f5      	bne.n	8009cfc <strncmp+0x8>
 8009d10:	1ad0      	subs	r0, r2, r3
 8009d12:	bd10      	pop	{r4, pc}
 8009d14:	4610      	mov	r0, r2
 8009d16:	e7fc      	b.n	8009d12 <strncmp+0x1e>

08009d18 <memcpy>:
 8009d18:	440a      	add	r2, r1
 8009d1a:	4291      	cmp	r1, r2
 8009d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d20:	d100      	bne.n	8009d24 <memcpy+0xc>
 8009d22:	4770      	bx	lr
 8009d24:	b510      	push	{r4, lr}
 8009d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d2e:	4291      	cmp	r1, r2
 8009d30:	d1f9      	bne.n	8009d26 <memcpy+0xe>
 8009d32:	bd10      	pop	{r4, pc}
 8009d34:	0000      	movs	r0, r0
	...

08009d38 <nan>:
 8009d38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d40 <nan+0x8>
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	00000000 	.word	0x00000000
 8009d44:	7ff80000 	.word	0x7ff80000

08009d48 <__assert_func>:
 8009d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d4a:	4614      	mov	r4, r2
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <__assert_func+0x2c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4605      	mov	r5, r0
 8009d54:	68d8      	ldr	r0, [r3, #12]
 8009d56:	b14c      	cbz	r4, 8009d6c <__assert_func+0x24>
 8009d58:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <__assert_func+0x30>)
 8009d5a:	9100      	str	r1, [sp, #0]
 8009d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d60:	4906      	ldr	r1, [pc, #24]	; (8009d7c <__assert_func+0x34>)
 8009d62:	462b      	mov	r3, r5
 8009d64:	f000 fbca 	bl	800a4fc <fiprintf>
 8009d68:	f000 fbda 	bl	800a520 <abort>
 8009d6c:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <__assert_func+0x38>)
 8009d6e:	461c      	mov	r4, r3
 8009d70:	e7f3      	b.n	8009d5a <__assert_func+0x12>
 8009d72:	bf00      	nop
 8009d74:	2000006c 	.word	0x2000006c
 8009d78:	0800b061 	.word	0x0800b061
 8009d7c:	0800b06e 	.word	0x0800b06e
 8009d80:	0800b09c 	.word	0x0800b09c

08009d84 <_calloc_r>:
 8009d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d86:	fba1 2402 	umull	r2, r4, r1, r2
 8009d8a:	b94c      	cbnz	r4, 8009da0 <_calloc_r+0x1c>
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	9201      	str	r2, [sp, #4]
 8009d90:	f7fc faa4 	bl	80062dc <_malloc_r>
 8009d94:	9a01      	ldr	r2, [sp, #4]
 8009d96:	4605      	mov	r5, r0
 8009d98:	b930      	cbnz	r0, 8009da8 <_calloc_r+0x24>
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bd30      	pop	{r4, r5, pc}
 8009da0:	220c      	movs	r2, #12
 8009da2:	6002      	str	r2, [r0, #0]
 8009da4:	2500      	movs	r5, #0
 8009da6:	e7f8      	b.n	8009d9a <_calloc_r+0x16>
 8009da8:	4621      	mov	r1, r4
 8009daa:	f7fd fb4c 	bl	8007446 <memset>
 8009dae:	e7f4      	b.n	8009d9a <_calloc_r+0x16>

08009db0 <rshift>:
 8009db0:	6903      	ldr	r3, [r0, #16]
 8009db2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009db6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dbe:	f100 0414 	add.w	r4, r0, #20
 8009dc2:	dd45      	ble.n	8009e50 <rshift+0xa0>
 8009dc4:	f011 011f 	ands.w	r1, r1, #31
 8009dc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009dd0:	d10c      	bne.n	8009dec <rshift+0x3c>
 8009dd2:	f100 0710 	add.w	r7, r0, #16
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	42b1      	cmp	r1, r6
 8009dda:	d334      	bcc.n	8009e46 <rshift+0x96>
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	1eea      	subs	r2, r5, #3
 8009de2:	4296      	cmp	r6, r2
 8009de4:	bf38      	it	cc
 8009de6:	2300      	movcc	r3, #0
 8009de8:	4423      	add	r3, r4
 8009dea:	e015      	b.n	8009e18 <rshift+0x68>
 8009dec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009df0:	f1c1 0820 	rsb	r8, r1, #32
 8009df4:	40cf      	lsrs	r7, r1
 8009df6:	f105 0e04 	add.w	lr, r5, #4
 8009dfa:	46a1      	mov	r9, r4
 8009dfc:	4576      	cmp	r6, lr
 8009dfe:	46f4      	mov	ip, lr
 8009e00:	d815      	bhi.n	8009e2e <rshift+0x7e>
 8009e02:	1a9a      	subs	r2, r3, r2
 8009e04:	0092      	lsls	r2, r2, #2
 8009e06:	3a04      	subs	r2, #4
 8009e08:	3501      	adds	r5, #1
 8009e0a:	42ae      	cmp	r6, r5
 8009e0c:	bf38      	it	cc
 8009e0e:	2200      	movcc	r2, #0
 8009e10:	18a3      	adds	r3, r4, r2
 8009e12:	50a7      	str	r7, [r4, r2]
 8009e14:	b107      	cbz	r7, 8009e18 <rshift+0x68>
 8009e16:	3304      	adds	r3, #4
 8009e18:	1b1a      	subs	r2, r3, r4
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e20:	bf08      	it	eq
 8009e22:	2300      	moveq	r3, #0
 8009e24:	6102      	str	r2, [r0, #16]
 8009e26:	bf08      	it	eq
 8009e28:	6143      	streq	r3, [r0, #20]
 8009e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	f8dc c000 	ldr.w	ip, [ip]
 8009e32:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e36:	ea4c 0707 	orr.w	r7, ip, r7
 8009e3a:	f849 7b04 	str.w	r7, [r9], #4
 8009e3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e42:	40cf      	lsrs	r7, r1
 8009e44:	e7da      	b.n	8009dfc <rshift+0x4c>
 8009e46:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e4e:	e7c3      	b.n	8009dd8 <rshift+0x28>
 8009e50:	4623      	mov	r3, r4
 8009e52:	e7e1      	b.n	8009e18 <rshift+0x68>

08009e54 <__hexdig_fun>:
 8009e54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d802      	bhi.n	8009e62 <__hexdig_fun+0xe>
 8009e5c:	3820      	subs	r0, #32
 8009e5e:	b2c0      	uxtb	r0, r0
 8009e60:	4770      	bx	lr
 8009e62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d801      	bhi.n	8009e6e <__hexdig_fun+0x1a>
 8009e6a:	3847      	subs	r0, #71	; 0x47
 8009e6c:	e7f7      	b.n	8009e5e <__hexdig_fun+0xa>
 8009e6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	d801      	bhi.n	8009e7a <__hexdig_fun+0x26>
 8009e76:	3827      	subs	r0, #39	; 0x27
 8009e78:	e7f1      	b.n	8009e5e <__hexdig_fun+0xa>
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	4770      	bx	lr
	...

08009e80 <__gethex>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	4617      	mov	r7, r2
 8009e86:	680a      	ldr	r2, [r1, #0]
 8009e88:	b085      	sub	sp, #20
 8009e8a:	f102 0b02 	add.w	fp, r2, #2
 8009e8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e96:	4681      	mov	r9, r0
 8009e98:	468a      	mov	sl, r1
 8009e9a:	9302      	str	r3, [sp, #8]
 8009e9c:	32fe      	adds	r2, #254	; 0xfe
 8009e9e:	eb02 030b 	add.w	r3, r2, fp
 8009ea2:	46d8      	mov	r8, fp
 8009ea4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	2830      	cmp	r0, #48	; 0x30
 8009eac:	d0f7      	beq.n	8009e9e <__gethex+0x1e>
 8009eae:	f7ff ffd1 	bl	8009e54 <__hexdig_fun>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d138      	bne.n	8009f2a <__gethex+0xaa>
 8009eb8:	49a7      	ldr	r1, [pc, #668]	; (800a158 <__gethex+0x2d8>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	f7ff ff19 	bl	8009cf4 <strncmp>
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d169      	bne.n	8009f9c <__gethex+0x11c>
 8009ec8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009ecc:	465d      	mov	r5, fp
 8009ece:	f7ff ffc1 	bl	8009e54 <__hexdig_fun>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d064      	beq.n	8009fa0 <__gethex+0x120>
 8009ed6:	465a      	mov	r2, fp
 8009ed8:	7810      	ldrb	r0, [r2, #0]
 8009eda:	2830      	cmp	r0, #48	; 0x30
 8009edc:	4690      	mov	r8, r2
 8009ede:	f102 0201 	add.w	r2, r2, #1
 8009ee2:	d0f9      	beq.n	8009ed8 <__gethex+0x58>
 8009ee4:	f7ff ffb6 	bl	8009e54 <__hexdig_fun>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	fab0 f480 	clz	r4, r0
 8009eee:	0964      	lsrs	r4, r4, #5
 8009ef0:	465e      	mov	r6, fp
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	4615      	mov	r5, r2
 8009ef8:	3201      	adds	r2, #1
 8009efa:	7828      	ldrb	r0, [r5, #0]
 8009efc:	f7ff ffaa 	bl	8009e54 <__hexdig_fun>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d1f8      	bne.n	8009ef6 <__gethex+0x76>
 8009f04:	4994      	ldr	r1, [pc, #592]	; (800a158 <__gethex+0x2d8>)
 8009f06:	2201      	movs	r2, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7ff fef3 	bl	8009cf4 <strncmp>
 8009f0e:	b978      	cbnz	r0, 8009f30 <__gethex+0xb0>
 8009f10:	b946      	cbnz	r6, 8009f24 <__gethex+0xa4>
 8009f12:	1c6e      	adds	r6, r5, #1
 8009f14:	4632      	mov	r2, r6
 8009f16:	4615      	mov	r5, r2
 8009f18:	3201      	adds	r2, #1
 8009f1a:	7828      	ldrb	r0, [r5, #0]
 8009f1c:	f7ff ff9a 	bl	8009e54 <__hexdig_fun>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1f8      	bne.n	8009f16 <__gethex+0x96>
 8009f24:	1b73      	subs	r3, r6, r5
 8009f26:	009e      	lsls	r6, r3, #2
 8009f28:	e004      	b.n	8009f34 <__gethex+0xb4>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	4626      	mov	r6, r4
 8009f2e:	e7e1      	b.n	8009ef4 <__gethex+0x74>
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	d1f7      	bne.n	8009f24 <__gethex+0xa4>
 8009f34:	782b      	ldrb	r3, [r5, #0]
 8009f36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f3a:	2b50      	cmp	r3, #80	; 0x50
 8009f3c:	d13d      	bne.n	8009fba <__gethex+0x13a>
 8009f3e:	786b      	ldrb	r3, [r5, #1]
 8009f40:	2b2b      	cmp	r3, #43	; 0x2b
 8009f42:	d02f      	beq.n	8009fa4 <__gethex+0x124>
 8009f44:	2b2d      	cmp	r3, #45	; 0x2d
 8009f46:	d031      	beq.n	8009fac <__gethex+0x12c>
 8009f48:	1c69      	adds	r1, r5, #1
 8009f4a:	f04f 0b00 	mov.w	fp, #0
 8009f4e:	7808      	ldrb	r0, [r1, #0]
 8009f50:	f7ff ff80 	bl	8009e54 <__hexdig_fun>
 8009f54:	1e42      	subs	r2, r0, #1
 8009f56:	b2d2      	uxtb	r2, r2
 8009f58:	2a18      	cmp	r2, #24
 8009f5a:	d82e      	bhi.n	8009fba <__gethex+0x13a>
 8009f5c:	f1a0 0210 	sub.w	r2, r0, #16
 8009f60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f64:	f7ff ff76 	bl	8009e54 <__hexdig_fun>
 8009f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f6c:	fa5f fc8c 	uxtb.w	ip, ip
 8009f70:	f1bc 0f18 	cmp.w	ip, #24
 8009f74:	d91d      	bls.n	8009fb2 <__gethex+0x132>
 8009f76:	f1bb 0f00 	cmp.w	fp, #0
 8009f7a:	d000      	beq.n	8009f7e <__gethex+0xfe>
 8009f7c:	4252      	negs	r2, r2
 8009f7e:	4416      	add	r6, r2
 8009f80:	f8ca 1000 	str.w	r1, [sl]
 8009f84:	b1dc      	cbz	r4, 8009fbe <__gethex+0x13e>
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	bf14      	ite	ne
 8009f8c:	f04f 0800 	movne.w	r8, #0
 8009f90:	f04f 0806 	moveq.w	r8, #6
 8009f94:	4640      	mov	r0, r8
 8009f96:	b005      	add	sp, #20
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	4645      	mov	r5, r8
 8009f9e:	4626      	mov	r6, r4
 8009fa0:	2401      	movs	r4, #1
 8009fa2:	e7c7      	b.n	8009f34 <__gethex+0xb4>
 8009fa4:	f04f 0b00 	mov.w	fp, #0
 8009fa8:	1ca9      	adds	r1, r5, #2
 8009faa:	e7d0      	b.n	8009f4e <__gethex+0xce>
 8009fac:	f04f 0b01 	mov.w	fp, #1
 8009fb0:	e7fa      	b.n	8009fa8 <__gethex+0x128>
 8009fb2:	230a      	movs	r3, #10
 8009fb4:	fb03 0002 	mla	r0, r3, r2, r0
 8009fb8:	e7d0      	b.n	8009f5c <__gethex+0xdc>
 8009fba:	4629      	mov	r1, r5
 8009fbc:	e7e0      	b.n	8009f80 <__gethex+0x100>
 8009fbe:	eba5 0308 	sub.w	r3, r5, r8
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	2b07      	cmp	r3, #7
 8009fc8:	dc0a      	bgt.n	8009fe0 <__gethex+0x160>
 8009fca:	4648      	mov	r0, r9
 8009fcc:	f7fe f9b2 	bl	8008334 <_Balloc>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	b940      	cbnz	r0, 8009fe6 <__gethex+0x166>
 8009fd4:	4b61      	ldr	r3, [pc, #388]	; (800a15c <__gethex+0x2dc>)
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	21e4      	movs	r1, #228	; 0xe4
 8009fda:	4861      	ldr	r0, [pc, #388]	; (800a160 <__gethex+0x2e0>)
 8009fdc:	f7ff feb4 	bl	8009d48 <__assert_func>
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	105b      	asrs	r3, r3, #1
 8009fe4:	e7ef      	b.n	8009fc6 <__gethex+0x146>
 8009fe6:	f100 0a14 	add.w	sl, r0, #20
 8009fea:	2300      	movs	r3, #0
 8009fec:	495a      	ldr	r1, [pc, #360]	; (800a158 <__gethex+0x2d8>)
 8009fee:	f8cd a004 	str.w	sl, [sp, #4]
 8009ff2:	469b      	mov	fp, r3
 8009ff4:	45a8      	cmp	r8, r5
 8009ff6:	d342      	bcc.n	800a07e <__gethex+0x1fe>
 8009ff8:	9801      	ldr	r0, [sp, #4]
 8009ffa:	f840 bb04 	str.w	fp, [r0], #4
 8009ffe:	eba0 000a 	sub.w	r0, r0, sl
 800a002:	1080      	asrs	r0, r0, #2
 800a004:	6120      	str	r0, [r4, #16]
 800a006:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a00a:	4658      	mov	r0, fp
 800a00c:	f7fe fa84 	bl	8008518 <__hi0bits>
 800a010:	683d      	ldr	r5, [r7, #0]
 800a012:	eba8 0000 	sub.w	r0, r8, r0
 800a016:	42a8      	cmp	r0, r5
 800a018:	dd59      	ble.n	800a0ce <__gethex+0x24e>
 800a01a:	eba0 0805 	sub.w	r8, r0, r5
 800a01e:	4641      	mov	r1, r8
 800a020:	4620      	mov	r0, r4
 800a022:	f7fe fe13 	bl	8008c4c <__any_on>
 800a026:	4683      	mov	fp, r0
 800a028:	b1b8      	cbz	r0, 800a05a <__gethex+0x1da>
 800a02a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a02e:	1159      	asrs	r1, r3, #5
 800a030:	f003 021f 	and.w	r2, r3, #31
 800a034:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a038:	f04f 0b01 	mov.w	fp, #1
 800a03c:	fa0b f202 	lsl.w	r2, fp, r2
 800a040:	420a      	tst	r2, r1
 800a042:	d00a      	beq.n	800a05a <__gethex+0x1da>
 800a044:	455b      	cmp	r3, fp
 800a046:	dd06      	ble.n	800a056 <__gethex+0x1d6>
 800a048:	f1a8 0102 	sub.w	r1, r8, #2
 800a04c:	4620      	mov	r0, r4
 800a04e:	f7fe fdfd 	bl	8008c4c <__any_on>
 800a052:	2800      	cmp	r0, #0
 800a054:	d138      	bne.n	800a0c8 <__gethex+0x248>
 800a056:	f04f 0b02 	mov.w	fp, #2
 800a05a:	4641      	mov	r1, r8
 800a05c:	4620      	mov	r0, r4
 800a05e:	f7ff fea7 	bl	8009db0 <rshift>
 800a062:	4446      	add	r6, r8
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	42b3      	cmp	r3, r6
 800a068:	da41      	bge.n	800a0ee <__gethex+0x26e>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4648      	mov	r0, r9
 800a06e:	f7fe f9a1 	bl	80083b4 <_Bfree>
 800a072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a074:	2300      	movs	r3, #0
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a07c:	e78a      	b.n	8009f94 <__gethex+0x114>
 800a07e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a082:	2a2e      	cmp	r2, #46	; 0x2e
 800a084:	d014      	beq.n	800a0b0 <__gethex+0x230>
 800a086:	2b20      	cmp	r3, #32
 800a088:	d106      	bne.n	800a098 <__gethex+0x218>
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	f843 bb04 	str.w	fp, [r3], #4
 800a090:	f04f 0b00 	mov.w	fp, #0
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	465b      	mov	r3, fp
 800a098:	7828      	ldrb	r0, [r5, #0]
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	f7ff feda 	bl	8009e54 <__hexdig_fun>
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	f000 000f 	and.w	r0, r0, #15
 800a0a6:	4098      	lsls	r0, r3
 800a0a8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	e7a1      	b.n	8009ff4 <__gethex+0x174>
 800a0b0:	45a8      	cmp	r8, r5
 800a0b2:	d8e8      	bhi.n	800a086 <__gethex+0x206>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	9303      	str	r3, [sp, #12]
 800a0ba:	f7ff fe1b 	bl	8009cf4 <strncmp>
 800a0be:	4926      	ldr	r1, [pc, #152]	; (800a158 <__gethex+0x2d8>)
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d1df      	bne.n	800a086 <__gethex+0x206>
 800a0c6:	e795      	b.n	8009ff4 <__gethex+0x174>
 800a0c8:	f04f 0b03 	mov.w	fp, #3
 800a0cc:	e7c5      	b.n	800a05a <__gethex+0x1da>
 800a0ce:	da0b      	bge.n	800a0e8 <__gethex+0x268>
 800a0d0:	eba5 0800 	sub.w	r8, r5, r0
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	4648      	mov	r0, r9
 800a0da:	f7fe fb85 	bl	80087e8 <__lshift>
 800a0de:	eba6 0608 	sub.w	r6, r6, r8
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	f100 0a14 	add.w	sl, r0, #20
 800a0e8:	f04f 0b00 	mov.w	fp, #0
 800a0ec:	e7ba      	b.n	800a064 <__gethex+0x1e4>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	42b3      	cmp	r3, r6
 800a0f2:	dd73      	ble.n	800a1dc <__gethex+0x35c>
 800a0f4:	1b9e      	subs	r6, r3, r6
 800a0f6:	42b5      	cmp	r5, r6
 800a0f8:	dc34      	bgt.n	800a164 <__gethex+0x2e4>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d023      	beq.n	800a148 <__gethex+0x2c8>
 800a100:	2b03      	cmp	r3, #3
 800a102:	d025      	beq.n	800a150 <__gethex+0x2d0>
 800a104:	2b01      	cmp	r3, #1
 800a106:	d115      	bne.n	800a134 <__gethex+0x2b4>
 800a108:	42b5      	cmp	r5, r6
 800a10a:	d113      	bne.n	800a134 <__gethex+0x2b4>
 800a10c:	2d01      	cmp	r5, #1
 800a10e:	d10b      	bne.n	800a128 <__gethex+0x2a8>
 800a110:	9a02      	ldr	r2, [sp, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	2301      	movs	r3, #1
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	f8ca 3000 	str.w	r3, [sl]
 800a11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a120:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a124:	601c      	str	r4, [r3, #0]
 800a126:	e735      	b.n	8009f94 <__gethex+0x114>
 800a128:	1e69      	subs	r1, r5, #1
 800a12a:	4620      	mov	r0, r4
 800a12c:	f7fe fd8e 	bl	8008c4c <__any_on>
 800a130:	2800      	cmp	r0, #0
 800a132:	d1ed      	bne.n	800a110 <__gethex+0x290>
 800a134:	4621      	mov	r1, r4
 800a136:	4648      	mov	r0, r9
 800a138:	f7fe f93c 	bl	80083b4 <_Bfree>
 800a13c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a13e:	2300      	movs	r3, #0
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a146:	e725      	b.n	8009f94 <__gethex+0x114>
 800a148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f2      	bne.n	800a134 <__gethex+0x2b4>
 800a14e:	e7df      	b.n	800a110 <__gethex+0x290>
 800a150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1dc      	bne.n	800a110 <__gethex+0x290>
 800a156:	e7ed      	b.n	800a134 <__gethex+0x2b4>
 800a158:	0800aff4 	.word	0x0800aff4
 800a15c:	0800ae8a 	.word	0x0800ae8a
 800a160:	0800b09d 	.word	0x0800b09d
 800a164:	f106 38ff 	add.w	r8, r6, #4294967295
 800a168:	f1bb 0f00 	cmp.w	fp, #0
 800a16c:	d133      	bne.n	800a1d6 <__gethex+0x356>
 800a16e:	f1b8 0f00 	cmp.w	r8, #0
 800a172:	d004      	beq.n	800a17e <__gethex+0x2fe>
 800a174:	4641      	mov	r1, r8
 800a176:	4620      	mov	r0, r4
 800a178:	f7fe fd68 	bl	8008c4c <__any_on>
 800a17c:	4683      	mov	fp, r0
 800a17e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a182:	2301      	movs	r3, #1
 800a184:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a188:	f008 081f 	and.w	r8, r8, #31
 800a18c:	fa03 f308 	lsl.w	r3, r3, r8
 800a190:	4213      	tst	r3, r2
 800a192:	4631      	mov	r1, r6
 800a194:	4620      	mov	r0, r4
 800a196:	bf18      	it	ne
 800a198:	f04b 0b02 	orrne.w	fp, fp, #2
 800a19c:	1bad      	subs	r5, r5, r6
 800a19e:	f7ff fe07 	bl	8009db0 <rshift>
 800a1a2:	687e      	ldr	r6, [r7, #4]
 800a1a4:	f04f 0802 	mov.w	r8, #2
 800a1a8:	f1bb 0f00 	cmp.w	fp, #0
 800a1ac:	d04a      	beq.n	800a244 <__gethex+0x3c4>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d016      	beq.n	800a1e2 <__gethex+0x362>
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d018      	beq.n	800a1ea <__gethex+0x36a>
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d109      	bne.n	800a1d0 <__gethex+0x350>
 800a1bc:	f01b 0f02 	tst.w	fp, #2
 800a1c0:	d006      	beq.n	800a1d0 <__gethex+0x350>
 800a1c2:	f8da 3000 	ldr.w	r3, [sl]
 800a1c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a1ca:	f01b 0f01 	tst.w	fp, #1
 800a1ce:	d10f      	bne.n	800a1f0 <__gethex+0x370>
 800a1d0:	f048 0810 	orr.w	r8, r8, #16
 800a1d4:	e036      	b.n	800a244 <__gethex+0x3c4>
 800a1d6:	f04f 0b01 	mov.w	fp, #1
 800a1da:	e7d0      	b.n	800a17e <__gethex+0x2fe>
 800a1dc:	f04f 0801 	mov.w	r8, #1
 800a1e0:	e7e2      	b.n	800a1a8 <__gethex+0x328>
 800a1e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1e4:	f1c3 0301 	rsb	r3, r3, #1
 800a1e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0ef      	beq.n	800a1d0 <__gethex+0x350>
 800a1f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a1f4:	f104 0214 	add.w	r2, r4, #20
 800a1f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a202:	2300      	movs	r3, #0
 800a204:	4694      	mov	ip, r2
 800a206:	f852 1b04 	ldr.w	r1, [r2], #4
 800a20a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a20e:	d01e      	beq.n	800a24e <__gethex+0x3ce>
 800a210:	3101      	adds	r1, #1
 800a212:	f8cc 1000 	str.w	r1, [ip]
 800a216:	f1b8 0f02 	cmp.w	r8, #2
 800a21a:	f104 0214 	add.w	r2, r4, #20
 800a21e:	d13d      	bne.n	800a29c <__gethex+0x41c>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	3b01      	subs	r3, #1
 800a224:	42ab      	cmp	r3, r5
 800a226:	d10b      	bne.n	800a240 <__gethex+0x3c0>
 800a228:	1169      	asrs	r1, r5, #5
 800a22a:	2301      	movs	r3, #1
 800a22c:	f005 051f 	and.w	r5, r5, #31
 800a230:	fa03 f505 	lsl.w	r5, r3, r5
 800a234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a238:	421d      	tst	r5, r3
 800a23a:	bf18      	it	ne
 800a23c:	f04f 0801 	movne.w	r8, #1
 800a240:	f048 0820 	orr.w	r8, r8, #32
 800a244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a246:	601c      	str	r4, [r3, #0]
 800a248:	9b02      	ldr	r3, [sp, #8]
 800a24a:	601e      	str	r6, [r3, #0]
 800a24c:	e6a2      	b.n	8009f94 <__gethex+0x114>
 800a24e:	4290      	cmp	r0, r2
 800a250:	f842 3c04 	str.w	r3, [r2, #-4]
 800a254:	d8d6      	bhi.n	800a204 <__gethex+0x384>
 800a256:	68a2      	ldr	r2, [r4, #8]
 800a258:	4593      	cmp	fp, r2
 800a25a:	db17      	blt.n	800a28c <__gethex+0x40c>
 800a25c:	6861      	ldr	r1, [r4, #4]
 800a25e:	4648      	mov	r0, r9
 800a260:	3101      	adds	r1, #1
 800a262:	f7fe f867 	bl	8008334 <_Balloc>
 800a266:	4682      	mov	sl, r0
 800a268:	b918      	cbnz	r0, 800a272 <__gethex+0x3f2>
 800a26a:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <__gethex+0x458>)
 800a26c:	4602      	mov	r2, r0
 800a26e:	2184      	movs	r1, #132	; 0x84
 800a270:	e6b3      	b.n	8009fda <__gethex+0x15a>
 800a272:	6922      	ldr	r2, [r4, #16]
 800a274:	3202      	adds	r2, #2
 800a276:	f104 010c 	add.w	r1, r4, #12
 800a27a:	0092      	lsls	r2, r2, #2
 800a27c:	300c      	adds	r0, #12
 800a27e:	f7ff fd4b 	bl	8009d18 <memcpy>
 800a282:	4621      	mov	r1, r4
 800a284:	4648      	mov	r0, r9
 800a286:	f7fe f895 	bl	80083b4 <_Bfree>
 800a28a:	4654      	mov	r4, sl
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	1c51      	adds	r1, r2, #1
 800a290:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a294:	6121      	str	r1, [r4, #16]
 800a296:	2101      	movs	r1, #1
 800a298:	6151      	str	r1, [r2, #20]
 800a29a:	e7bc      	b.n	800a216 <__gethex+0x396>
 800a29c:	6921      	ldr	r1, [r4, #16]
 800a29e:	4559      	cmp	r1, fp
 800a2a0:	dd0b      	ble.n	800a2ba <__gethex+0x43a>
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f7ff fd83 	bl	8009db0 <rshift>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3601      	adds	r6, #1
 800a2ae:	42b3      	cmp	r3, r6
 800a2b0:	f6ff aedb 	blt.w	800a06a <__gethex+0x1ea>
 800a2b4:	f04f 0801 	mov.w	r8, #1
 800a2b8:	e7c2      	b.n	800a240 <__gethex+0x3c0>
 800a2ba:	f015 051f 	ands.w	r5, r5, #31
 800a2be:	d0f9      	beq.n	800a2b4 <__gethex+0x434>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	441a      	add	r2, r3
 800a2c4:	f1c5 0520 	rsb	r5, r5, #32
 800a2c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a2cc:	f7fe f924 	bl	8008518 <__hi0bits>
 800a2d0:	42a8      	cmp	r0, r5
 800a2d2:	dbe6      	blt.n	800a2a2 <__gethex+0x422>
 800a2d4:	e7ee      	b.n	800a2b4 <__gethex+0x434>
 800a2d6:	bf00      	nop
 800a2d8:	0800ae8a 	.word	0x0800ae8a

0800a2dc <L_shift>:
 800a2dc:	f1c2 0208 	rsb	r2, r2, #8
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	b570      	push	{r4, r5, r6, lr}
 800a2e4:	f1c2 0620 	rsb	r6, r2, #32
 800a2e8:	6843      	ldr	r3, [r0, #4]
 800a2ea:	6804      	ldr	r4, [r0, #0]
 800a2ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a2f0:	432c      	orrs	r4, r5
 800a2f2:	40d3      	lsrs	r3, r2
 800a2f4:	6004      	str	r4, [r0, #0]
 800a2f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2fa:	4288      	cmp	r0, r1
 800a2fc:	d3f4      	bcc.n	800a2e8 <L_shift+0xc>
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}

0800a300 <__match>:
 800a300:	b530      	push	{r4, r5, lr}
 800a302:	6803      	ldr	r3, [r0, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a30a:	b914      	cbnz	r4, 800a312 <__match+0x12>
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	2001      	movs	r0, #1
 800a310:	bd30      	pop	{r4, r5, pc}
 800a312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a316:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a31a:	2d19      	cmp	r5, #25
 800a31c:	bf98      	it	ls
 800a31e:	3220      	addls	r2, #32
 800a320:	42a2      	cmp	r2, r4
 800a322:	d0f0      	beq.n	800a306 <__match+0x6>
 800a324:	2000      	movs	r0, #0
 800a326:	e7f3      	b.n	800a310 <__match+0x10>

0800a328 <__hexnan>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	680b      	ldr	r3, [r1, #0]
 800a32e:	6801      	ldr	r1, [r0, #0]
 800a330:	115e      	asrs	r6, r3, #5
 800a332:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a336:	f013 031f 	ands.w	r3, r3, #31
 800a33a:	b087      	sub	sp, #28
 800a33c:	bf18      	it	ne
 800a33e:	3604      	addne	r6, #4
 800a340:	2500      	movs	r5, #0
 800a342:	1f37      	subs	r7, r6, #4
 800a344:	4682      	mov	sl, r0
 800a346:	4690      	mov	r8, r2
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a34e:	46b9      	mov	r9, r7
 800a350:	463c      	mov	r4, r7
 800a352:	9502      	str	r5, [sp, #8]
 800a354:	46ab      	mov	fp, r5
 800a356:	784a      	ldrb	r2, [r1, #1]
 800a358:	1c4b      	adds	r3, r1, #1
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	b342      	cbz	r2, 800a3b0 <__hexnan+0x88>
 800a35e:	4610      	mov	r0, r2
 800a360:	9105      	str	r1, [sp, #20]
 800a362:	9204      	str	r2, [sp, #16]
 800a364:	f7ff fd76 	bl	8009e54 <__hexdig_fun>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d14f      	bne.n	800a40c <__hexnan+0xe4>
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	9905      	ldr	r1, [sp, #20]
 800a370:	2a20      	cmp	r2, #32
 800a372:	d818      	bhi.n	800a3a6 <__hexnan+0x7e>
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	459b      	cmp	fp, r3
 800a378:	dd13      	ble.n	800a3a2 <__hexnan+0x7a>
 800a37a:	454c      	cmp	r4, r9
 800a37c:	d206      	bcs.n	800a38c <__hexnan+0x64>
 800a37e:	2d07      	cmp	r5, #7
 800a380:	dc04      	bgt.n	800a38c <__hexnan+0x64>
 800a382:	462a      	mov	r2, r5
 800a384:	4649      	mov	r1, r9
 800a386:	4620      	mov	r0, r4
 800a388:	f7ff ffa8 	bl	800a2dc <L_shift>
 800a38c:	4544      	cmp	r4, r8
 800a38e:	d950      	bls.n	800a432 <__hexnan+0x10a>
 800a390:	2300      	movs	r3, #0
 800a392:	f1a4 0904 	sub.w	r9, r4, #4
 800a396:	f844 3c04 	str.w	r3, [r4, #-4]
 800a39a:	f8cd b008 	str.w	fp, [sp, #8]
 800a39e:	464c      	mov	r4, r9
 800a3a0:	461d      	mov	r5, r3
 800a3a2:	9903      	ldr	r1, [sp, #12]
 800a3a4:	e7d7      	b.n	800a356 <__hexnan+0x2e>
 800a3a6:	2a29      	cmp	r2, #41	; 0x29
 800a3a8:	d155      	bne.n	800a456 <__hexnan+0x12e>
 800a3aa:	3102      	adds	r1, #2
 800a3ac:	f8ca 1000 	str.w	r1, [sl]
 800a3b0:	f1bb 0f00 	cmp.w	fp, #0
 800a3b4:	d04f      	beq.n	800a456 <__hexnan+0x12e>
 800a3b6:	454c      	cmp	r4, r9
 800a3b8:	d206      	bcs.n	800a3c8 <__hexnan+0xa0>
 800a3ba:	2d07      	cmp	r5, #7
 800a3bc:	dc04      	bgt.n	800a3c8 <__hexnan+0xa0>
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff ff8a 	bl	800a2dc <L_shift>
 800a3c8:	4544      	cmp	r4, r8
 800a3ca:	d934      	bls.n	800a436 <__hexnan+0x10e>
 800a3cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3da:	429f      	cmp	r7, r3
 800a3dc:	d2f9      	bcs.n	800a3d2 <__hexnan+0xaa>
 800a3de:	1b3b      	subs	r3, r7, r4
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	3e03      	subs	r6, #3
 800a3e8:	3401      	adds	r4, #1
 800a3ea:	42a6      	cmp	r6, r4
 800a3ec:	bf38      	it	cc
 800a3ee:	2304      	movcc	r3, #4
 800a3f0:	4443      	add	r3, r8
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f843 2b04 	str.w	r2, [r3], #4
 800a3f8:	429f      	cmp	r7, r3
 800a3fa:	d2fb      	bcs.n	800a3f4 <__hexnan+0xcc>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	b91b      	cbnz	r3, 800a408 <__hexnan+0xe0>
 800a400:	4547      	cmp	r7, r8
 800a402:	d126      	bne.n	800a452 <__hexnan+0x12a>
 800a404:	2301      	movs	r3, #1
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	2005      	movs	r0, #5
 800a40a:	e025      	b.n	800a458 <__hexnan+0x130>
 800a40c:	3501      	adds	r5, #1
 800a40e:	2d08      	cmp	r5, #8
 800a410:	f10b 0b01 	add.w	fp, fp, #1
 800a414:	dd06      	ble.n	800a424 <__hexnan+0xfc>
 800a416:	4544      	cmp	r4, r8
 800a418:	d9c3      	bls.n	800a3a2 <__hexnan+0x7a>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a420:	2501      	movs	r5, #1
 800a422:	3c04      	subs	r4, #4
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	f000 000f 	and.w	r0, r0, #15
 800a42a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a42e:	6020      	str	r0, [r4, #0]
 800a430:	e7b7      	b.n	800a3a2 <__hexnan+0x7a>
 800a432:	2508      	movs	r5, #8
 800a434:	e7b5      	b.n	800a3a2 <__hexnan+0x7a>
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0df      	beq.n	800a3fc <__hexnan+0xd4>
 800a43c:	f1c3 0320 	rsb	r3, r3, #32
 800a440:	f04f 32ff 	mov.w	r2, #4294967295
 800a444:	40da      	lsrs	r2, r3
 800a446:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a44a:	4013      	ands	r3, r2
 800a44c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a450:	e7d4      	b.n	800a3fc <__hexnan+0xd4>
 800a452:	3f04      	subs	r7, #4
 800a454:	e7d2      	b.n	800a3fc <__hexnan+0xd4>
 800a456:	2004      	movs	r0, #4
 800a458:	b007      	add	sp, #28
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a45e <__ascii_mbtowc>:
 800a45e:	b082      	sub	sp, #8
 800a460:	b901      	cbnz	r1, 800a464 <__ascii_mbtowc+0x6>
 800a462:	a901      	add	r1, sp, #4
 800a464:	b142      	cbz	r2, 800a478 <__ascii_mbtowc+0x1a>
 800a466:	b14b      	cbz	r3, 800a47c <__ascii_mbtowc+0x1e>
 800a468:	7813      	ldrb	r3, [r2, #0]
 800a46a:	600b      	str	r3, [r1, #0]
 800a46c:	7812      	ldrb	r2, [r2, #0]
 800a46e:	1e10      	subs	r0, r2, #0
 800a470:	bf18      	it	ne
 800a472:	2001      	movne	r0, #1
 800a474:	b002      	add	sp, #8
 800a476:	4770      	bx	lr
 800a478:	4610      	mov	r0, r2
 800a47a:	e7fb      	b.n	800a474 <__ascii_mbtowc+0x16>
 800a47c:	f06f 0001 	mvn.w	r0, #1
 800a480:	e7f8      	b.n	800a474 <__ascii_mbtowc+0x16>

0800a482 <_realloc_r>:
 800a482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a486:	4680      	mov	r8, r0
 800a488:	4614      	mov	r4, r2
 800a48a:	460e      	mov	r6, r1
 800a48c:	b921      	cbnz	r1, 800a498 <_realloc_r+0x16>
 800a48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	4611      	mov	r1, r2
 800a494:	f7fb bf22 	b.w	80062dc <_malloc_r>
 800a498:	b92a      	cbnz	r2, 800a4a6 <_realloc_r+0x24>
 800a49a:	f7fd feff 	bl	800829c <_free_r>
 800a49e:	4625      	mov	r5, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a6:	f000 f842 	bl	800a52e <_malloc_usable_size_r>
 800a4aa:	4284      	cmp	r4, r0
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	d802      	bhi.n	800a4b6 <_realloc_r+0x34>
 800a4b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4b4:	d812      	bhi.n	800a4dc <_realloc_r+0x5a>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f7fb ff0f 	bl	80062dc <_malloc_r>
 800a4be:	4605      	mov	r5, r0
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0ed      	beq.n	800a4a0 <_realloc_r+0x1e>
 800a4c4:	42bc      	cmp	r4, r7
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	bf28      	it	cs
 800a4cc:	463a      	movcs	r2, r7
 800a4ce:	f7ff fc23 	bl	8009d18 <memcpy>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	f7fd fee1 	bl	800829c <_free_r>
 800a4da:	e7e1      	b.n	800a4a0 <_realloc_r+0x1e>
 800a4dc:	4635      	mov	r5, r6
 800a4de:	e7df      	b.n	800a4a0 <_realloc_r+0x1e>

0800a4e0 <__ascii_wctomb>:
 800a4e0:	b149      	cbz	r1, 800a4f6 <__ascii_wctomb+0x16>
 800a4e2:	2aff      	cmp	r2, #255	; 0xff
 800a4e4:	bf85      	ittet	hi
 800a4e6:	238a      	movhi	r3, #138	; 0x8a
 800a4e8:	6003      	strhi	r3, [r0, #0]
 800a4ea:	700a      	strbls	r2, [r1, #0]
 800a4ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4f0:	bf98      	it	ls
 800a4f2:	2001      	movls	r0, #1
 800a4f4:	4770      	bx	lr
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	4770      	bx	lr
	...

0800a4fc <fiprintf>:
 800a4fc:	b40e      	push	{r1, r2, r3}
 800a4fe:	b503      	push	{r0, r1, lr}
 800a500:	4601      	mov	r1, r0
 800a502:	ab03      	add	r3, sp, #12
 800a504:	4805      	ldr	r0, [pc, #20]	; (800a51c <fiprintf+0x20>)
 800a506:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50a:	6800      	ldr	r0, [r0, #0]
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	f000 f83f 	bl	800a590 <_vfiprintf_r>
 800a512:	b002      	add	sp, #8
 800a514:	f85d eb04 	ldr.w	lr, [sp], #4
 800a518:	b003      	add	sp, #12
 800a51a:	4770      	bx	lr
 800a51c:	2000006c 	.word	0x2000006c

0800a520 <abort>:
 800a520:	b508      	push	{r3, lr}
 800a522:	2006      	movs	r0, #6
 800a524:	f000 fa0c 	bl	800a940 <raise>
 800a528:	2001      	movs	r0, #1
 800a52a:	f7f7 fd6b 	bl	8002004 <_exit>

0800a52e <_malloc_usable_size_r>:
 800a52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a532:	1f18      	subs	r0, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfbc      	itt	lt
 800a538:	580b      	ldrlt	r3, [r1, r0]
 800a53a:	18c0      	addlt	r0, r0, r3
 800a53c:	4770      	bx	lr

0800a53e <__sfputc_r>:
 800a53e:	6893      	ldr	r3, [r2, #8]
 800a540:	3b01      	subs	r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	b410      	push	{r4}
 800a546:	6093      	str	r3, [r2, #8]
 800a548:	da08      	bge.n	800a55c <__sfputc_r+0x1e>
 800a54a:	6994      	ldr	r4, [r2, #24]
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	db01      	blt.n	800a554 <__sfputc_r+0x16>
 800a550:	290a      	cmp	r1, #10
 800a552:	d103      	bne.n	800a55c <__sfputc_r+0x1e>
 800a554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a558:	f000 b934 	b.w	800a7c4 <__swbuf_r>
 800a55c:	6813      	ldr	r3, [r2, #0]
 800a55e:	1c58      	adds	r0, r3, #1
 800a560:	6010      	str	r0, [r2, #0]
 800a562:	7019      	strb	r1, [r3, #0]
 800a564:	4608      	mov	r0, r1
 800a566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <__sfputs_r>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	4614      	mov	r4, r2
 800a574:	18d5      	adds	r5, r2, r3
 800a576:	42ac      	cmp	r4, r5
 800a578:	d101      	bne.n	800a57e <__sfputs_r+0x12>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e007      	b.n	800a58e <__sfputs_r+0x22>
 800a57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a582:	463a      	mov	r2, r7
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff ffda 	bl	800a53e <__sfputc_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d1f3      	bne.n	800a576 <__sfputs_r+0xa>
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a590 <_vfiprintf_r>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	460d      	mov	r5, r1
 800a596:	b09d      	sub	sp, #116	; 0x74
 800a598:	4614      	mov	r4, r2
 800a59a:	4698      	mov	r8, r3
 800a59c:	4606      	mov	r6, r0
 800a59e:	b118      	cbz	r0, 800a5a8 <_vfiprintf_r+0x18>
 800a5a0:	6a03      	ldr	r3, [r0, #32]
 800a5a2:	b90b      	cbnz	r3, 800a5a8 <_vfiprintf_r+0x18>
 800a5a4:	f7fc feb6 	bl	8007314 <__sinit>
 800a5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5aa:	07d9      	lsls	r1, r3, #31
 800a5ac:	d405      	bmi.n	800a5ba <_vfiprintf_r+0x2a>
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	059a      	lsls	r2, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_vfiprintf_r+0x2a>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b6:	f7fc ffe6 	bl	8007586 <__retarget_lock_acquire_recursive>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	071b      	lsls	r3, r3, #28
 800a5be:	d501      	bpl.n	800a5c4 <_vfiprintf_r+0x34>
 800a5c0:	692b      	ldr	r3, [r5, #16]
 800a5c2:	b99b      	cbnz	r3, 800a5ec <_vfiprintf_r+0x5c>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f000 f93a 	bl	800a840 <__swsetup_r>
 800a5cc:	b170      	cbz	r0, 800a5ec <_vfiprintf_r+0x5c>
 800a5ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d0:	07dc      	lsls	r4, r3, #31
 800a5d2:	d504      	bpl.n	800a5de <_vfiprintf_r+0x4e>
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	b01d      	add	sp, #116	; 0x74
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	0598      	lsls	r0, r3, #22
 800a5e2:	d4f7      	bmi.n	800a5d4 <_vfiprintf_r+0x44>
 800a5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5e6:	f7fc ffcf 	bl	8007588 <__retarget_lock_release_recursive>
 800a5ea:	e7f3      	b.n	800a5d4 <_vfiprintf_r+0x44>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5fa:	2330      	movs	r3, #48	; 0x30
 800a5fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a7b0 <_vfiprintf_r+0x220>
 800a600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a604:	f04f 0901 	mov.w	r9, #1
 800a608:	4623      	mov	r3, r4
 800a60a:	469a      	mov	sl, r3
 800a60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a610:	b10a      	cbz	r2, 800a616 <_vfiprintf_r+0x86>
 800a612:	2a25      	cmp	r2, #37	; 0x25
 800a614:	d1f9      	bne.n	800a60a <_vfiprintf_r+0x7a>
 800a616:	ebba 0b04 	subs.w	fp, sl, r4
 800a61a:	d00b      	beq.n	800a634 <_vfiprintf_r+0xa4>
 800a61c:	465b      	mov	r3, fp
 800a61e:	4622      	mov	r2, r4
 800a620:	4629      	mov	r1, r5
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffa2 	bl	800a56c <__sfputs_r>
 800a628:	3001      	adds	r0, #1
 800a62a:	f000 80a9 	beq.w	800a780 <_vfiprintf_r+0x1f0>
 800a62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a630:	445a      	add	r2, fp
 800a632:	9209      	str	r2, [sp, #36]	; 0x24
 800a634:	f89a 3000 	ldrb.w	r3, [sl]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 80a1 	beq.w	800a780 <_vfiprintf_r+0x1f0>
 800a63e:	2300      	movs	r3, #0
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a648:	f10a 0a01 	add.w	sl, sl, #1
 800a64c:	9304      	str	r3, [sp, #16]
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a654:	931a      	str	r3, [sp, #104]	; 0x68
 800a656:	4654      	mov	r4, sl
 800a658:	2205      	movs	r2, #5
 800a65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65e:	4854      	ldr	r0, [pc, #336]	; (800a7b0 <_vfiprintf_r+0x220>)
 800a660:	f7f5 fdc6 	bl	80001f0 <memchr>
 800a664:	9a04      	ldr	r2, [sp, #16]
 800a666:	b9d8      	cbnz	r0, 800a6a0 <_vfiprintf_r+0x110>
 800a668:	06d1      	lsls	r1, r2, #27
 800a66a:	bf44      	itt	mi
 800a66c:	2320      	movmi	r3, #32
 800a66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a672:	0713      	lsls	r3, r2, #28
 800a674:	bf44      	itt	mi
 800a676:	232b      	movmi	r3, #43	; 0x2b
 800a678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a67c:	f89a 3000 	ldrb.w	r3, [sl]
 800a680:	2b2a      	cmp	r3, #42	; 0x2a
 800a682:	d015      	beq.n	800a6b0 <_vfiprintf_r+0x120>
 800a684:	9a07      	ldr	r2, [sp, #28]
 800a686:	4654      	mov	r4, sl
 800a688:	2000      	movs	r0, #0
 800a68a:	f04f 0c0a 	mov.w	ip, #10
 800a68e:	4621      	mov	r1, r4
 800a690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a694:	3b30      	subs	r3, #48	; 0x30
 800a696:	2b09      	cmp	r3, #9
 800a698:	d94d      	bls.n	800a736 <_vfiprintf_r+0x1a6>
 800a69a:	b1b0      	cbz	r0, 800a6ca <_vfiprintf_r+0x13a>
 800a69c:	9207      	str	r2, [sp, #28]
 800a69e:	e014      	b.n	800a6ca <_vfiprintf_r+0x13a>
 800a6a0:	eba0 0308 	sub.w	r3, r0, r8
 800a6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	46a2      	mov	sl, r4
 800a6ae:	e7d2      	b.n	800a656 <_vfiprintf_r+0xc6>
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	1d19      	adds	r1, r3, #4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	9103      	str	r1, [sp, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfbb      	ittet	lt
 800a6bc:	425b      	neglt	r3, r3
 800a6be:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c2:	9307      	strge	r3, [sp, #28]
 800a6c4:	9307      	strlt	r3, [sp, #28]
 800a6c6:	bfb8      	it	lt
 800a6c8:	9204      	strlt	r2, [sp, #16]
 800a6ca:	7823      	ldrb	r3, [r4, #0]
 800a6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ce:	d10c      	bne.n	800a6ea <_vfiprintf_r+0x15a>
 800a6d0:	7863      	ldrb	r3, [r4, #1]
 800a6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d4:	d134      	bne.n	800a740 <_vfiprintf_r+0x1b0>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9203      	str	r2, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfb8      	it	lt
 800a6e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6e6:	3402      	adds	r4, #2
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a7c0 <_vfiprintf_r+0x230>
 800a6ee:	7821      	ldrb	r1, [r4, #0]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f7f5 fd7c 	bl	80001f0 <memchr>
 800a6f8:	b138      	cbz	r0, 800a70a <_vfiprintf_r+0x17a>
 800a6fa:	9b04      	ldr	r3, [sp, #16]
 800a6fc:	eba0 000a 	sub.w	r0, r0, sl
 800a700:	2240      	movs	r2, #64	; 0x40
 800a702:	4082      	lsls	r2, r0
 800a704:	4313      	orrs	r3, r2
 800a706:	3401      	adds	r4, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70e:	4829      	ldr	r0, [pc, #164]	; (800a7b4 <_vfiprintf_r+0x224>)
 800a710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a714:	2206      	movs	r2, #6
 800a716:	f7f5 fd6b 	bl	80001f0 <memchr>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d03f      	beq.n	800a79e <_vfiprintf_r+0x20e>
 800a71e:	4b26      	ldr	r3, [pc, #152]	; (800a7b8 <_vfiprintf_r+0x228>)
 800a720:	bb1b      	cbnz	r3, 800a76a <_vfiprintf_r+0x1da>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	3307      	adds	r3, #7
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	3308      	adds	r3, #8
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	443b      	add	r3, r7
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	e768      	b.n	800a608 <_vfiprintf_r+0x78>
 800a736:	fb0c 3202 	mla	r2, ip, r2, r3
 800a73a:	460c      	mov	r4, r1
 800a73c:	2001      	movs	r0, #1
 800a73e:	e7a6      	b.n	800a68e <_vfiprintf_r+0xfe>
 800a740:	2300      	movs	r3, #0
 800a742:	3401      	adds	r4, #1
 800a744:	9305      	str	r3, [sp, #20]
 800a746:	4619      	mov	r1, r3
 800a748:	f04f 0c0a 	mov.w	ip, #10
 800a74c:	4620      	mov	r0, r4
 800a74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a752:	3a30      	subs	r2, #48	; 0x30
 800a754:	2a09      	cmp	r2, #9
 800a756:	d903      	bls.n	800a760 <_vfiprintf_r+0x1d0>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0c6      	beq.n	800a6ea <_vfiprintf_r+0x15a>
 800a75c:	9105      	str	r1, [sp, #20]
 800a75e:	e7c4      	b.n	800a6ea <_vfiprintf_r+0x15a>
 800a760:	fb0c 2101 	mla	r1, ip, r1, r2
 800a764:	4604      	mov	r4, r0
 800a766:	2301      	movs	r3, #1
 800a768:	e7f0      	b.n	800a74c <_vfiprintf_r+0x1bc>
 800a76a:	ab03      	add	r3, sp, #12
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	462a      	mov	r2, r5
 800a770:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <_vfiprintf_r+0x22c>)
 800a772:	a904      	add	r1, sp, #16
 800a774:	4630      	mov	r0, r6
 800a776:	f7fb ff6b 	bl	8006650 <_printf_float>
 800a77a:	4607      	mov	r7, r0
 800a77c:	1c78      	adds	r0, r7, #1
 800a77e:	d1d6      	bne.n	800a72e <_vfiprintf_r+0x19e>
 800a780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a782:	07d9      	lsls	r1, r3, #31
 800a784:	d405      	bmi.n	800a792 <_vfiprintf_r+0x202>
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	059a      	lsls	r2, r3, #22
 800a78a:	d402      	bmi.n	800a792 <_vfiprintf_r+0x202>
 800a78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78e:	f7fc fefb 	bl	8007588 <__retarget_lock_release_recursive>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	065b      	lsls	r3, r3, #25
 800a796:	f53f af1d 	bmi.w	800a5d4 <_vfiprintf_r+0x44>
 800a79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79c:	e71c      	b.n	800a5d8 <_vfiprintf_r+0x48>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <_vfiprintf_r+0x22c>)
 800a7a6:	a904      	add	r1, sp, #16
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7fc f9f5 	bl	8006b98 <_printf_i>
 800a7ae:	e7e4      	b.n	800a77a <_vfiprintf_r+0x1ea>
 800a7b0:	0800b048 	.word	0x0800b048
 800a7b4:	0800b052 	.word	0x0800b052
 800a7b8:	08006651 	.word	0x08006651
 800a7bc:	0800a56d 	.word	0x0800a56d
 800a7c0:	0800b04e 	.word	0x0800b04e

0800a7c4 <__swbuf_r>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	460e      	mov	r6, r1
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	b118      	cbz	r0, 800a7d6 <__swbuf_r+0x12>
 800a7ce:	6a03      	ldr	r3, [r0, #32]
 800a7d0:	b90b      	cbnz	r3, 800a7d6 <__swbuf_r+0x12>
 800a7d2:	f7fc fd9f 	bl	8007314 <__sinit>
 800a7d6:	69a3      	ldr	r3, [r4, #24]
 800a7d8:	60a3      	str	r3, [r4, #8]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	071a      	lsls	r2, r3, #28
 800a7de:	d525      	bpl.n	800a82c <__swbuf_r+0x68>
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	b31b      	cbz	r3, 800a82c <__swbuf_r+0x68>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	6922      	ldr	r2, [r4, #16]
 800a7e8:	1a98      	subs	r0, r3, r2
 800a7ea:	6963      	ldr	r3, [r4, #20]
 800a7ec:	b2f6      	uxtb	r6, r6
 800a7ee:	4283      	cmp	r3, r0
 800a7f0:	4637      	mov	r7, r6
 800a7f2:	dc04      	bgt.n	800a7fe <__swbuf_r+0x3a>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fa3a 	bl	8009c70 <_fflush_r>
 800a7fc:	b9e0      	cbnz	r0, 800a838 <__swbuf_r+0x74>
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	3b01      	subs	r3, #1
 800a802:	60a3      	str	r3, [r4, #8]
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	6022      	str	r2, [r4, #0]
 800a80a:	701e      	strb	r6, [r3, #0]
 800a80c:	6962      	ldr	r2, [r4, #20]
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	429a      	cmp	r2, r3
 800a812:	d004      	beq.n	800a81e <__swbuf_r+0x5a>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d506      	bpl.n	800a828 <__swbuf_r+0x64>
 800a81a:	2e0a      	cmp	r6, #10
 800a81c:	d104      	bne.n	800a828 <__swbuf_r+0x64>
 800a81e:	4621      	mov	r1, r4
 800a820:	4628      	mov	r0, r5
 800a822:	f7ff fa25 	bl	8009c70 <_fflush_r>
 800a826:	b938      	cbnz	r0, 800a838 <__swbuf_r+0x74>
 800a828:	4638      	mov	r0, r7
 800a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 f806 	bl	800a840 <__swsetup_r>
 800a834:	2800      	cmp	r0, #0
 800a836:	d0d5      	beq.n	800a7e4 <__swbuf_r+0x20>
 800a838:	f04f 37ff 	mov.w	r7, #4294967295
 800a83c:	e7f4      	b.n	800a828 <__swbuf_r+0x64>
	...

0800a840 <__swsetup_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <__swsetup_r+0xac>)
 800a844:	4605      	mov	r5, r0
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	460c      	mov	r4, r1
 800a84a:	b118      	cbz	r0, 800a854 <__swsetup_r+0x14>
 800a84c:	6a03      	ldr	r3, [r0, #32]
 800a84e:	b90b      	cbnz	r3, 800a854 <__swsetup_r+0x14>
 800a850:	f7fc fd60 	bl	8007314 <__sinit>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a85a:	0718      	lsls	r0, r3, #28
 800a85c:	d422      	bmi.n	800a8a4 <__swsetup_r+0x64>
 800a85e:	06d9      	lsls	r1, r3, #27
 800a860:	d407      	bmi.n	800a872 <__swsetup_r+0x32>
 800a862:	2309      	movs	r3, #9
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e034      	b.n	800a8dc <__swsetup_r+0x9c>
 800a872:	0758      	lsls	r0, r3, #29
 800a874:	d512      	bpl.n	800a89c <__swsetup_r+0x5c>
 800a876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a878:	b141      	cbz	r1, 800a88c <__swsetup_r+0x4c>
 800a87a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a87e:	4299      	cmp	r1, r3
 800a880:	d002      	beq.n	800a888 <__swsetup_r+0x48>
 800a882:	4628      	mov	r0, r5
 800a884:	f7fd fd0a 	bl	800829c <_free_r>
 800a888:	2300      	movs	r3, #0
 800a88a:	6363      	str	r3, [r4, #52]	; 0x34
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	2300      	movs	r3, #0
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	f043 0308 	orr.w	r3, r3, #8
 800a8a2:	81a3      	strh	r3, [r4, #12]
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	b94b      	cbnz	r3, 800a8bc <__swsetup_r+0x7c>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b2:	d003      	beq.n	800a8bc <__swsetup_r+0x7c>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f884 	bl	800a9c4 <__smakebuf_r>
 800a8bc:	89a0      	ldrh	r0, [r4, #12]
 800a8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c2:	f010 0301 	ands.w	r3, r0, #1
 800a8c6:	d00a      	beq.n	800a8de <__swsetup_r+0x9e>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60a3      	str	r3, [r4, #8]
 800a8cc:	6963      	ldr	r3, [r4, #20]
 800a8ce:	425b      	negs	r3, r3
 800a8d0:	61a3      	str	r3, [r4, #24]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	b943      	cbnz	r3, 800a8e8 <__swsetup_r+0xa8>
 800a8d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8da:	d1c4      	bne.n	800a866 <__swsetup_r+0x26>
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	0781      	lsls	r1, r0, #30
 800a8e0:	bf58      	it	pl
 800a8e2:	6963      	ldrpl	r3, [r4, #20]
 800a8e4:	60a3      	str	r3, [r4, #8]
 800a8e6:	e7f4      	b.n	800a8d2 <__swsetup_r+0x92>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e7f7      	b.n	800a8dc <__swsetup_r+0x9c>
 800a8ec:	2000006c 	.word	0x2000006c

0800a8f0 <_raise_r>:
 800a8f0:	291f      	cmp	r1, #31
 800a8f2:	b538      	push	{r3, r4, r5, lr}
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	d904      	bls.n	800a904 <_raise_r+0x14>
 800a8fa:	2316      	movs	r3, #22
 800a8fc:	6003      	str	r3, [r0, #0]
 800a8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a906:	b112      	cbz	r2, 800a90e <_raise_r+0x1e>
 800a908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a90c:	b94b      	cbnz	r3, 800a922 <_raise_r+0x32>
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 f830 	bl	800a974 <_getpid_r>
 800a914:	462a      	mov	r2, r5
 800a916:	4601      	mov	r1, r0
 800a918:	4620      	mov	r0, r4
 800a91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a91e:	f000 b817 	b.w	800a950 <_kill_r>
 800a922:	2b01      	cmp	r3, #1
 800a924:	d00a      	beq.n	800a93c <_raise_r+0x4c>
 800a926:	1c59      	adds	r1, r3, #1
 800a928:	d103      	bne.n	800a932 <_raise_r+0x42>
 800a92a:	2316      	movs	r3, #22
 800a92c:	6003      	str	r3, [r0, #0]
 800a92e:	2001      	movs	r0, #1
 800a930:	e7e7      	b.n	800a902 <_raise_r+0x12>
 800a932:	2400      	movs	r4, #0
 800a934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a938:	4628      	mov	r0, r5
 800a93a:	4798      	blx	r3
 800a93c:	2000      	movs	r0, #0
 800a93e:	e7e0      	b.n	800a902 <_raise_r+0x12>

0800a940 <raise>:
 800a940:	4b02      	ldr	r3, [pc, #8]	; (800a94c <raise+0xc>)
 800a942:	4601      	mov	r1, r0
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	f7ff bfd3 	b.w	800a8f0 <_raise_r>
 800a94a:	bf00      	nop
 800a94c:	2000006c 	.word	0x2000006c

0800a950 <_kill_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4d07      	ldr	r5, [pc, #28]	; (800a970 <_kill_r+0x20>)
 800a954:	2300      	movs	r3, #0
 800a956:	4604      	mov	r4, r0
 800a958:	4608      	mov	r0, r1
 800a95a:	4611      	mov	r1, r2
 800a95c:	602b      	str	r3, [r5, #0]
 800a95e:	f7f7 fb41 	bl	8001fe4 <_kill>
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	d102      	bne.n	800a96c <_kill_r+0x1c>
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	b103      	cbz	r3, 800a96c <_kill_r+0x1c>
 800a96a:	6023      	str	r3, [r4, #0]
 800a96c:	bd38      	pop	{r3, r4, r5, pc}
 800a96e:	bf00      	nop
 800a970:	20000630 	.word	0x20000630

0800a974 <_getpid_r>:
 800a974:	f7f7 bb2e 	b.w	8001fd4 <_getpid>

0800a978 <__swhatbuf_r>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	460c      	mov	r4, r1
 800a97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a980:	2900      	cmp	r1, #0
 800a982:	b096      	sub	sp, #88	; 0x58
 800a984:	4615      	mov	r5, r2
 800a986:	461e      	mov	r6, r3
 800a988:	da0d      	bge.n	800a9a6 <__swhatbuf_r+0x2e>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a990:	f04f 0100 	mov.w	r1, #0
 800a994:	bf0c      	ite	eq
 800a996:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a99a:	2340      	movne	r3, #64	; 0x40
 800a99c:	2000      	movs	r0, #0
 800a99e:	6031      	str	r1, [r6, #0]
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	b016      	add	sp, #88	; 0x58
 800a9a4:	bd70      	pop	{r4, r5, r6, pc}
 800a9a6:	466a      	mov	r2, sp
 800a9a8:	f000 f848 	bl	800aa3c <_fstat_r>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	dbec      	blt.n	800a98a <__swhatbuf_r+0x12>
 800a9b0:	9901      	ldr	r1, [sp, #4]
 800a9b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a9b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a9ba:	4259      	negs	r1, r3
 800a9bc:	4159      	adcs	r1, r3
 800a9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c2:	e7eb      	b.n	800a99c <__swhatbuf_r+0x24>

0800a9c4 <__smakebuf_r>:
 800a9c4:	898b      	ldrh	r3, [r1, #12]
 800a9c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9c8:	079d      	lsls	r5, r3, #30
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	d507      	bpl.n	800a9e0 <__smakebuf_r+0x1c>
 800a9d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	6123      	str	r3, [r4, #16]
 800a9d8:	2301      	movs	r3, #1
 800a9da:	6163      	str	r3, [r4, #20]
 800a9dc:	b002      	add	sp, #8
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	ab01      	add	r3, sp, #4
 800a9e2:	466a      	mov	r2, sp
 800a9e4:	f7ff ffc8 	bl	800a978 <__swhatbuf_r>
 800a9e8:	9900      	ldr	r1, [sp, #0]
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7fb fc75 	bl	80062dc <_malloc_r>
 800a9f2:	b948      	cbnz	r0, 800aa08 <__smakebuf_r+0x44>
 800a9f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d4ef      	bmi.n	800a9dc <__smakebuf_r+0x18>
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	e7e3      	b.n	800a9d0 <__smakebuf_r+0xc>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	6120      	str	r0, [r4, #16]
 800aa1a:	b15b      	cbz	r3, 800aa34 <__smakebuf_r+0x70>
 800aa1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa20:	4630      	mov	r0, r6
 800aa22:	f000 f81d 	bl	800aa60 <_isatty_r>
 800aa26:	b128      	cbz	r0, 800aa34 <__smakebuf_r+0x70>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f023 0303 	bic.w	r3, r3, #3
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	431d      	orrs	r5, r3
 800aa38:	81a5      	strh	r5, [r4, #12]
 800aa3a:	e7cf      	b.n	800a9dc <__smakebuf_r+0x18>

0800aa3c <_fstat_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_fstat_r+0x20>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f7f7 fb2a 	bl	80020a2 <_fstat>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d102      	bne.n	800aa58 <_fstat_r+0x1c>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	b103      	cbz	r3, 800aa58 <_fstat_r+0x1c>
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000630 	.word	0x20000630

0800aa60 <_isatty_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_isatty_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f7 fb29 	bl	80020c2 <_isatty>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_isatty_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_isatty_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000630 	.word	0x20000630

0800aa80 <sqrt>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	ed2d 8b02 	vpush	{d8}
 800aa86:	ec55 4b10 	vmov	r4, r5, d0
 800aa8a:	f000 f825 	bl	800aad8 <__ieee754_sqrt>
 800aa8e:	4622      	mov	r2, r4
 800aa90:	462b      	mov	r3, r5
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	eeb0 8a40 	vmov.f32	s16, s0
 800aa9a:	eef0 8a60 	vmov.f32	s17, s1
 800aa9e:	f7f6 f855 	bl	8000b4c <__aeabi_dcmpun>
 800aaa2:	b990      	cbnz	r0, 800aaca <sqrt+0x4a>
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	f7f6 f826 	bl	8000afc <__aeabi_dcmplt>
 800aab0:	b158      	cbz	r0, 800aaca <sqrt+0x4a>
 800aab2:	f7fc fd3d 	bl	8007530 <__errno>
 800aab6:	2321      	movs	r3, #33	; 0x21
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	4610      	mov	r0, r2
 800aac0:	4619      	mov	r1, r3
 800aac2:	f7f5 fed3 	bl	800086c <__aeabi_ddiv>
 800aac6:	ec41 0b18 	vmov	d8, r0, r1
 800aaca:	eeb0 0a48 	vmov.f32	s0, s16
 800aace:	eef0 0a68 	vmov.f32	s1, s17
 800aad2:	ecbd 8b02 	vpop	{d8}
 800aad6:	bd38      	pop	{r3, r4, r5, pc}

0800aad8 <__ieee754_sqrt>:
 800aad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	ec55 4b10 	vmov	r4, r5, d0
 800aae0:	4e67      	ldr	r6, [pc, #412]	; (800ac80 <__ieee754_sqrt+0x1a8>)
 800aae2:	43ae      	bics	r6, r5
 800aae4:	ee10 0a10 	vmov	r0, s0
 800aae8:	ee10 2a10 	vmov	r2, s0
 800aaec:	4629      	mov	r1, r5
 800aaee:	462b      	mov	r3, r5
 800aaf0:	d10d      	bne.n	800ab0e <__ieee754_sqrt+0x36>
 800aaf2:	f7f5 fd91 	bl	8000618 <__aeabi_dmul>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 fbd5 	bl	80002ac <__adddf3>
 800ab02:	4604      	mov	r4, r0
 800ab04:	460d      	mov	r5, r1
 800ab06:	ec45 4b10 	vmov	d0, r4, r5
 800ab0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	dc0b      	bgt.n	800ab2a <__ieee754_sqrt+0x52>
 800ab12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab16:	4326      	orrs	r6, r4
 800ab18:	d0f5      	beq.n	800ab06 <__ieee754_sqrt+0x2e>
 800ab1a:	b135      	cbz	r5, 800ab2a <__ieee754_sqrt+0x52>
 800ab1c:	f7f5 fbc4 	bl	80002a8 <__aeabi_dsub>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	f7f5 fea2 	bl	800086c <__aeabi_ddiv>
 800ab28:	e7eb      	b.n	800ab02 <__ieee754_sqrt+0x2a>
 800ab2a:	1509      	asrs	r1, r1, #20
 800ab2c:	f000 808d 	beq.w	800ac4a <__ieee754_sqrt+0x172>
 800ab30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab34:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ab38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab3c:	07c9      	lsls	r1, r1, #31
 800ab3e:	bf5c      	itt	pl
 800ab40:	005b      	lslpl	r3, r3, #1
 800ab42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ab46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab4a:	bf58      	it	pl
 800ab4c:	0052      	lslpl	r2, r2, #1
 800ab4e:	2500      	movs	r5, #0
 800ab50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab54:	1076      	asrs	r6, r6, #1
 800ab56:	0052      	lsls	r2, r2, #1
 800ab58:	f04f 0e16 	mov.w	lr, #22
 800ab5c:	46ac      	mov	ip, r5
 800ab5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab62:	eb0c 0001 	add.w	r0, ip, r1
 800ab66:	4298      	cmp	r0, r3
 800ab68:	bfde      	ittt	le
 800ab6a:	1a1b      	suble	r3, r3, r0
 800ab6c:	eb00 0c01 	addle.w	ip, r0, r1
 800ab70:	186d      	addle	r5, r5, r1
 800ab72:	005b      	lsls	r3, r3, #1
 800ab74:	f1be 0e01 	subs.w	lr, lr, #1
 800ab78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ab7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ab80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ab84:	d1ed      	bne.n	800ab62 <__ieee754_sqrt+0x8a>
 800ab86:	4674      	mov	r4, lr
 800ab88:	2720      	movs	r7, #32
 800ab8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ab8e:	4563      	cmp	r3, ip
 800ab90:	eb01 000e 	add.w	r0, r1, lr
 800ab94:	dc02      	bgt.n	800ab9c <__ieee754_sqrt+0xc4>
 800ab96:	d113      	bne.n	800abc0 <__ieee754_sqrt+0xe8>
 800ab98:	4290      	cmp	r0, r2
 800ab9a:	d811      	bhi.n	800abc0 <__ieee754_sqrt+0xe8>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	eb00 0e01 	add.w	lr, r0, r1
 800aba2:	da57      	bge.n	800ac54 <__ieee754_sqrt+0x17c>
 800aba4:	f1be 0f00 	cmp.w	lr, #0
 800aba8:	db54      	blt.n	800ac54 <__ieee754_sqrt+0x17c>
 800abaa:	f10c 0801 	add.w	r8, ip, #1
 800abae:	eba3 030c 	sub.w	r3, r3, ip
 800abb2:	4290      	cmp	r0, r2
 800abb4:	bf88      	it	hi
 800abb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800abba:	1a12      	subs	r2, r2, r0
 800abbc:	440c      	add	r4, r1
 800abbe:	46c4      	mov	ip, r8
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	3f01      	subs	r7, #1
 800abc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800abc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800abcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800abd0:	d1dd      	bne.n	800ab8e <__ieee754_sqrt+0xb6>
 800abd2:	4313      	orrs	r3, r2
 800abd4:	d01b      	beq.n	800ac0e <__ieee754_sqrt+0x136>
 800abd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ac84 <__ieee754_sqrt+0x1ac>
 800abda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ac88 <__ieee754_sqrt+0x1b0>
 800abde:	e9da 0100 	ldrd	r0, r1, [sl]
 800abe2:	e9db 2300 	ldrd	r2, r3, [fp]
 800abe6:	f7f5 fb5f 	bl	80002a8 <__aeabi_dsub>
 800abea:	e9da 8900 	ldrd	r8, r9, [sl]
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 ff8b 	bl	8000b10 <__aeabi_dcmple>
 800abfa:	b140      	cbz	r0, 800ac0e <__ieee754_sqrt+0x136>
 800abfc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ac00:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac04:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac08:	d126      	bne.n	800ac58 <__ieee754_sqrt+0x180>
 800ac0a:	3501      	adds	r5, #1
 800ac0c:	463c      	mov	r4, r7
 800ac0e:	106a      	asrs	r2, r5, #1
 800ac10:	0863      	lsrs	r3, r4, #1
 800ac12:	07e9      	lsls	r1, r5, #31
 800ac14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ac18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ac1c:	bf48      	it	mi
 800ac1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ac22:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ac26:	461c      	mov	r4, r3
 800ac28:	e76d      	b.n	800ab06 <__ieee754_sqrt+0x2e>
 800ac2a:	0ad3      	lsrs	r3, r2, #11
 800ac2c:	3815      	subs	r0, #21
 800ac2e:	0552      	lsls	r2, r2, #21
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0fa      	beq.n	800ac2a <__ieee754_sqrt+0x152>
 800ac34:	02dc      	lsls	r4, r3, #11
 800ac36:	d50a      	bpl.n	800ac4e <__ieee754_sqrt+0x176>
 800ac38:	f1c1 0420 	rsb	r4, r1, #32
 800ac3c:	fa22 f404 	lsr.w	r4, r2, r4
 800ac40:	1e4d      	subs	r5, r1, #1
 800ac42:	408a      	lsls	r2, r1
 800ac44:	4323      	orrs	r3, r4
 800ac46:	1b41      	subs	r1, r0, r5
 800ac48:	e772      	b.n	800ab30 <__ieee754_sqrt+0x58>
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	e7f0      	b.n	800ac30 <__ieee754_sqrt+0x158>
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	3101      	adds	r1, #1
 800ac52:	e7ef      	b.n	800ac34 <__ieee754_sqrt+0x15c>
 800ac54:	46e0      	mov	r8, ip
 800ac56:	e7aa      	b.n	800abae <__ieee754_sqrt+0xd6>
 800ac58:	f7f5 fb28 	bl	80002ac <__adddf3>
 800ac5c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 ff48 	bl	8000afc <__aeabi_dcmplt>
 800ac6c:	b120      	cbz	r0, 800ac78 <__ieee754_sqrt+0x1a0>
 800ac6e:	1ca0      	adds	r0, r4, #2
 800ac70:	bf08      	it	eq
 800ac72:	3501      	addeq	r5, #1
 800ac74:	3402      	adds	r4, #2
 800ac76:	e7ca      	b.n	800ac0e <__ieee754_sqrt+0x136>
 800ac78:	3401      	adds	r4, #1
 800ac7a:	f024 0401 	bic.w	r4, r4, #1
 800ac7e:	e7c6      	b.n	800ac0e <__ieee754_sqrt+0x136>
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	200001e0 	.word	0x200001e0
 800ac88:	200001e8 	.word	0x200001e8

0800ac8c <_init>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	bf00      	nop
 800ac90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac92:	bc08      	pop	{r3}
 800ac94:	469e      	mov	lr, r3
 800ac96:	4770      	bx	lr

0800ac98 <_fini>:
 800ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9a:	bf00      	nop
 800ac9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9e:	bc08      	pop	{r3}
 800aca0:	469e      	mov	lr, r3
 800aca2:	4770      	bx	lr
