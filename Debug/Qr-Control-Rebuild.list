
Qr-Control-Rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800bba8  0800bba8  0001bba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c000  0800c000  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c008  0800c008  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c008  0800c008  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c00c  0800c00c  0001c00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c010  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000004bc  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013823  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e6d  00000000  00000000  00033a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001158  00000000  00000000  000368f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d91  00000000  00000000  00037a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a35  00000000  00000000  000387e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000175b5  00000000  00000000  0005c216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d018f  00000000  00000000  000737cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e34  00000000  00000000  0014395c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00149790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb8c 	.word	0x0800bb8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800bb8c 	.word	0x0800bb8c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MPU6050_Init>:
};

KalmanSingle_t K;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2275      	movs	r2, #117	; 0x75
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f002 fc57 	bl	80038e0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b68      	cmp	r3, #104	; 0x68
 8001036:	d13d      	bne.n	80010b4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030e 	add.w	r3, r7, #14
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	226b      	movs	r2, #107	; 0x6b
 800104e:	21d0      	movs	r1, #208	; 0xd0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fb4b 	bl	80036ec <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001056:	2307      	movs	r3, #7
 8001058:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030e 	add.w	r3, r7, #14
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2219      	movs	r2, #25
 800106c:	21d0      	movs	r1, #208	; 0xd0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fb3c 	bl	80036ec <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 030e 	add.w	r3, r7, #14
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	221c      	movs	r2, #28
 800108a:	21d0      	movs	r1, #208	; 0xd0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f002 fb2d 	bl	80036ec <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 030e 	add.w	r3, r7, #14
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	221b      	movs	r2, #27
 80010a8:	21d0      	movs	r1, #208	; 0xd0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 fb1e 	bl	80036ec <HAL_I2C_Mem_Write>
        return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <MPU6050_Init+0xa6>
    }
    return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
   // int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	230e      	movs	r3, #14
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	223b      	movs	r2, #59	; 0x3b
 80010dc:	21d0      	movs	r1, #208	; 0xd0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fbfe 	bl	80038e0 <HAL_I2C_Mem_Read>
//    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
//    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
//    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
//    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
//    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80010e4:	7d3b      	ldrb	r3, [r7, #20]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	849a      	strh	r2, [r3, #36]	; 0x24
//    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
//    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
//    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
//    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
//    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 - 0.5;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa21 	bl	8000544 <__aeabi_i2d>
 8001102:	a30c      	add	r3, pc, #48	; (adr r3, 8001134 <MPU6050_Read_All+0x74>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fbb0 	bl	800086c <__aeabi_ddiv>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <MPU6050_Read_All+0x70>)
 800111a:	f7ff f8c5 	bl	80002a8 <__aeabi_dsub>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
//    	DataStruct->CFAngleX = 0.98 * ( DataStruct->CFAngleX + DataStruct->Gx * dt ) +0.02 * roll;
//    K.x =  DataStruct->Gz;
//    kalman_single(&K, 0.0127, 0.001);
//    DataStruct->Gz = K.x_hat;
//    DataStruct->yaw +=  DataStruct->Gz * dt;
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	3fe00000 	.word	0x3fe00000
 8001134:	00000000 	.word	0x00000000
 8001138:	40606000 	.word	0x40606000

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <MX_GPIO_Init+0x118>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <MX_GPIO_Init+0x118>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <MX_GPIO_Init+0x118>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <MX_GPIO_Init+0x118>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a37      	ldr	r2, [pc, #220]	; (8001254 <MX_GPIO_Init+0x118>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <MX_GPIO_Init+0x118>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <MX_GPIO_Init+0x118>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a30      	ldr	r2, [pc, #192]	; (8001254 <MX_GPIO_Init+0x118>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_GPIO_Init+0x118>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_GPIO_Init+0x118>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a29      	ldr	r2, [pc, #164]	; (8001254 <MX_GPIO_Init+0x118>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_GPIO_Init+0x118>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_GPIO_Init+0x118>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a22      	ldr	r2, [pc, #136]	; (8001254 <MX_GPIO_Init+0x118>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_GPIO_Init+0x118>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_GPIO_Init+0x118>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <MX_GPIO_Init+0x118>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_GPIO_Init+0x118>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_2_Pin|EN_2C3_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210a      	movs	r1, #10
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001200:	f002 f916 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_1_Pin|EN_1E10_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <MX_GPIO_Init+0x120>)
 800120c:	f002 f910 	bl	8003430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_2_Pin|EN_2C3_Pin;
 8001210:	230a      	movs	r3, #10
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_GPIO_Init+0x11c>)
 8001228:	f001 ff66 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = EN_1_Pin|EN_1E10_Pin;
 800122c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_GPIO_Init+0x120>)
 8001246:	f001 ff57 	bl	80030f8 <HAL_GPIO_Init>

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800
 800125c:	40021000 	.word	0x40021000

08001260 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MX_I2C1_Init+0x54>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x50>)
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_I2C1_Init+0x58>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_I2C1_Init+0x50>)
 800127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_I2C1_Init+0x50>)
 800129e:	f002 f8e1 	bl	8003464 <HAL_I2C_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a8:	f000 fbea 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000020c 	.word	0x2000020c
 80012b4:	40005400 	.word	0x40005400
 80012b8:	00061a80 	.word	0x00061a80

080012bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <HAL_I2C_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12b      	bne.n	8001336 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130a:	2304      	movs	r3, #4
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <HAL_I2C_MspInit+0x8c>)
 8001316:	f001 feef 	bl	80030f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_I2C_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0x88>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_I2C_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f001 fcbc 	bl	8002ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f832 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f7ff fef0 	bl	800113c <MX_GPIO_Init>
  MX_TIM2_Init();
 800135c:	f001 f8a4 	bl	80024a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001360:	f001 f8f0 	bl	8002544 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001364:	f001 f996 	bl	8002694 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001368:	f001 f810 	bl	800238c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800136c:	f001 fb50 	bl	8002a10 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001370:	f001 f93c 	bl	80025ec <MX_TIM4_Init>
  MX_I2C1_Init();
 8001374:	f7ff ff74 	bl	8001260 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001378:	bf00      	nop
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <main+0x5c>)
 800137c:	f7ff fe48 	bl	8001010 <MPU6050_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d0f9      	beq.n	800137a <main+0x2e>
  SerialInit();
 8001386:	f000 f881 	bl	800148c <SerialInit>
  MotorInit();
 800138a:	f000 fc89 	bl	8001ca0 <MotorInit>
  MotorSetRun();
 800138e:	f000 fb7d 	bl	8001a8c <MotorSetRun>

  tProcess = NONE;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <main+0x60>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]


  tMotor1.ptd = 0.091; //2700
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <main+0x64>)
 800139a:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <main+0x68>)
 800139c:	61da      	str	r2, [r3, #28]
  tMotor2.ptd = 0.091; //2580
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <main+0x6c>)
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <main+0x68>)
 80013a2:	61da      	str	r2, [r3, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80013a4:	e7fe      	b.n	80013a4 <main+0x58>
 80013a6:	bf00      	nop
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	200002ec 	.word	0x200002ec
 80013b0:	20000338 	.word	0x20000338
 80013b4:	3dba5e35 	.word	0x3dba5e35
 80013b8:	20000358 	.word	0x20000358

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 ffbb 	bl	8008346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <SystemClock_Config+0xc8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <SystemClock_Config+0xc8>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <SystemClock_Config+0xc8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <SystemClock_Config+0xcc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <SystemClock_Config+0xcc>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <SystemClock_Config+0xcc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001430:	234b      	movs	r3, #75	; 0x4b
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4618      	mov	r0, r3
 8001442:	f002 ffcf 	bl	80043e4 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800144c:	f000 fb18 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2102      	movs	r1, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa31 	bl	80048d4 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001478:	f000 fb02 	bl	8001a80 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	; 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8001490:	2212      	movs	r2, #18
 8001492:	4903      	ldr	r1, [pc, #12]	; (80014a0 <SerialInit+0x14>)
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <SerialInit+0x18>)
 8001496:	f004 fed4 	bl	8006242 <HAL_UART_Receive_IT>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000260 	.word	0x20000260
 80014a4:	20000518 	.word	0x20000518

080014a8 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 80014ac:	2212      	movs	r2, #18
 80014ae:	4903      	ldr	r1, [pc, #12]	; (80014bc <SerialAcceptReceive+0x14>)
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <SerialAcceptReceive+0x18>)
 80014b2:	f004 fec6 	bl	8006242 <HAL_UART_Receive_IT>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000260 	.word	0x20000260
 80014c0:	20000518 	.word	0x20000518

080014c4 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart2.Instance)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_UART_RxCpltCallback+0x114>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d17b      	bne.n	80015d0 <HAL_UART_RxCpltCallback+0x10c>
  {

    	__HAL_TIM_SetCounter(&htim3, 0);
 80014d8:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_UART_RxCpltCallback+0x118>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim4, 0);
 80014e0:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_UART_RxCpltCallback+0x11c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HAL_UART_RxCpltCallback+0x120>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_1);
 80014ee:	483e      	ldr	r0, [pc, #248]	; (80015e8 <HAL_UART_RxCpltCallback+0x124>)
 80014f0:	f000 fd44 	bl	8001f7c <PIDReset>
	    PIDReset(&tPID_2);
 80014f4:	483d      	ldr	r0, [pc, #244]	; (80015ec <HAL_UART_RxCpltCallback+0x128>)
 80014f6:	f000 fd41 	bl	8001f7c <PIDReset>


	    if(!strcmp(dataBuffer, ARRAY_CHECKER)){
 80014fa:	493d      	ldr	r1, [pc, #244]	; (80015f0 <HAL_UART_RxCpltCallback+0x12c>)
 80014fc:	483d      	ldr	r0, [pc, #244]	; (80015f4 <HAL_UART_RxCpltCallback+0x130>)
 80014fe:	f7fe fe67 	bl	80001d0 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_UART_RxCpltCallback+0x54>
	    	HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	2205      	movs	r2, #5
 800150e:	493a      	ldr	r1, [pc, #232]	; (80015f8 <HAL_UART_RxCpltCallback+0x134>)
 8001510:	4831      	ldr	r0, [pc, #196]	; (80015d8 <HAL_UART_RxCpltCallback+0x114>)
 8001512:	f004 fe04 	bl	800611e <HAL_UART_Transmit>
 8001516:	e059      	b.n	80015cc <HAL_UART_RxCpltCallback+0x108>
	    }
	    else {
	        HAL_UART_Transmit(&huart2, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	2212      	movs	r2, #18
 800151e:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_UART_RxCpltCallback+0x130>)
 8001520:	482d      	ldr	r0, [pc, #180]	; (80015d8 <HAL_UART_RxCpltCallback+0x114>)
 8001522:	f004 fdfc 	bl	800611e <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 8001526:	4c35      	ldr	r4, [pc, #212]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 8001528:	463b      	mov	r3, r7
 800152a:	4932      	ldr	r1, [pc, #200]	; (80015f4 <HAL_UART_RxCpltCallback+0x130>)
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fb09 	bl	8002b44 <ArrProcess>
 8001532:	4623      	mov	r3, r4
 8001534:	463a      	mov	r2, r7
 8001536:	6810      	ldr	r0, [r2, #0]
 8001538:	6851      	ldr	r1, [r2, #4]
 800153a:	c303      	stmia	r3!, {r0, r1}
 800153c:	8912      	ldrh	r2, [r2, #8]
 800153e:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 800154e:	885b      	ldrh	r3, [r3, #2]
 8001550:	ee07 3a10 	vmov	s14, r3
 8001554:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	ee06 3a90 	vmov	s13, r3
 8001560:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001564:	eeb0 1a66 	vmov.f32	s2, s13
 8001568:	eef0 0a47 	vmov.f32	s1, s14
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	4823      	ldr	r0, [pc, #140]	; (8001600 <HAL_UART_RxCpltCallback+0x13c>)
 8001572:	f000 fbe9 	bl	8001d48 <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 8001578:	88db      	ldrh	r3, [r3, #6]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_UART_RxCpltCallback+0x140>)
 800157e:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_UART_RxCpltCallback+0x138>)
 8001582:	891b      	ldrh	r3, [r3, #8]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_UART_RxCpltCallback+0x144>)
 8001588:	701a      	strb	r2, [r3, #0]

	    	    tProcess = RUN_TEST;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_UART_RxCpltCallback+0x120>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]

	    	        if (dir1 == HEAD)
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_UART_RxCpltCallback+0x140>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0xe0>
	    	        {
	    	        	Motor1Forward();
 8001598:	f000 fa98 	bl	8001acc <Motor1Forward>
	    	        	tMotor1.dir = HEAD;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_UART_RxCpltCallback+0x148>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
 80015a2:	e004      	b.n	80015ae <HAL_UART_RxCpltCallback+0xea>
	    	        }
	    	        else
	    	        {
	    	        	Motor1Backward();
 80015a4:	f000 fa9e 	bl	8001ae4 <Motor1Backward>
	    	        	tMotor1.dir = BACK;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_RxCpltCallback+0x148>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	761a      	strb	r2, [r3, #24]
	    	        }
	    	        if (dir2 == HEAD)
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_UART_RxCpltCallback+0x144>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_UART_RxCpltCallback+0xfe>
	    	        {
	    	        	Motor2Forward();
 80015b6:	f000 faa1 	bl	8001afc <Motor2Forward>
	    	        	tMotor2.dir = HEAD;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_RxCpltCallback+0x14c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	761a      	strb	r2, [r3, #24]
 80015c0:	e004      	b.n	80015cc <HAL_UART_RxCpltCallback+0x108>
	    	        }
	    	        else
	    	        {
	    	        	Motor2Backward();
 80015c2:	f000 faa7 	bl	8001b14 <Motor2Backward>
	    	        	tMotor2.dir = BACK;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_UART_RxCpltCallback+0x14c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	761a      	strb	r2, [r3, #24]
	    	        }
	    }
	    SerialAcceptReceive();
 80015cc:	f7ff ff6c 	bl	80014a8 <SerialAcceptReceive>
  }
}
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000518 	.word	0x20000518
 80015dc:	20000440 	.word	0x20000440
 80015e0:	20000488 	.word	0x20000488
 80015e4:	200002ec 	.word	0x200002ec
 80015e8:	20000378 	.word	0x20000378
 80015ec:	20000390 	.word	0x20000390
 80015f0:	0800bba8 	.word	0x0800bba8
 80015f4:	20000260 	.word	0x20000260
 80015f8:	20000000 	.word	0x20000000
 80015fc:	200002f0 	.word	0x200002f0
 8001600:	20000304 	.word	0x20000304
 8001604:	200002fa 	.word	0x200002fa
 8001608:	200002fb 	.word	0x200002fb
 800160c:	20000338 	.word	0x20000338
 8001610:	20000358 	.word	0x20000358

08001614 <HAL_TIM_PeriodElapsedCallback>:


/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af04      	add	r7, sp, #16
 800161a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim2.Instance)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d128      	bne.n	800167a <HAL_TIM_PeriodElapsedCallback+0x66>
  {
    switch (tProcess)
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d006      	beq.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x2e>
    	ReadEncoder(&tMotor2, &htim3);
    	MPU6050_Read_All(&hi2c1, &MPU6050);
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
    }
  }
}
 8001634:	e021      	b.n	800167a <HAL_TIM_PeriodElapsedCallback+0x66>
    	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001636:	4915      	ldr	r1, [pc, #84]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800163a:	f7ff fd41 	bl	80010c0 <MPU6050_Read_All>
    	break;
 800163e:	bf00      	nop
}
 8001640:	e01b      	b.n	800167a <HAL_TIM_PeriodElapsedCallback+0x66>
    	MotorSetRun();
 8001642:	f000 fa23 	bl	8001a8c <MotorSetRun>
    	ReadEncoder(&tMotor1, &htim4);
 8001646:	4913      	ldr	r1, [pc, #76]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001648:	4813      	ldr	r0, [pc, #76]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800164a:	f000 fa6f 	bl	8001b2c <ReadEncoder>
    	ReadEncoder(&tMotor2, &htim3);
 800164e:	4913      	ldr	r1, [pc, #76]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001652:	f000 fa6b 	bl	8001b2c <ReadEncoder>
    	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800165a:	f7ff fd31 	bl	80010c0 <MPU6050_Read_All>
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tMotor1, &tMotor2, dir1, dir2);
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	9202      	str	r2, [sp, #8]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001672:	490f      	ldr	r1, [pc, #60]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001676:	f000 f81f 	bl	80016b8 <MotorMovePos>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200003f8 	.word	0x200003f8
 8001688:	200002ec 	.word	0x200002ec
 800168c:	20000278 	.word	0x20000278
 8001690:	2000020c 	.word	0x2000020c
 8001694:	20000488 	.word	0x20000488
 8001698:	20000338 	.word	0x20000338
 800169c:	20000440 	.word	0x20000440
 80016a0:	20000358 	.word	0x20000358
 80016a4:	200002fa 	.word	0x200002fa
 80016a8:	200002fb 	.word	0x200002fb
 80016ac:	20000390 	.word	0x20000390
 80016b0:	20000378 	.word	0x20000378
 80016b4:	20000304 	.word	0x20000304

080016b8 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2,Motor_t *tmotor1, Motor_t *tmotor2, uint8_t dir1, uint8_t dir2)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2;


  float dPosTemp = 0;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d820      	bhi.n	8001724 <MotorMovePos+0x6c>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edd3 7a03 	vldr	s15, [r3, #12]
 800170e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	4bad      	ldr	r3, [pc, #692]	; (80019d4 <MotorMovePos+0x31c>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
 8001722:	e065      	b.n	80017f0 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d817      	bhi.n	800176a <MotorMovePos+0xb2>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175c:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = tProfile->dA2;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a9b      	ldr	r2, [pc, #620]	; (80019d4 <MotorMovePos+0x31c>)
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e042      	b.n	80017f0 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d834      	bhi.n	80017ea <MotorMovePos+0x132>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	ed93 7a06 	vldr	s14, [r3, #24]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800178c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	edd3 6a07 	vldr	s13, [r3, #28]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80017b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	edc7 7a07 	vstr	s15, [r7, #28]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edd3 7a07 	vldr	s15, [r3, #28]
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	4b7c      	ldr	r3, [pc, #496]	; (80019d4 <MotorMovePos+0x31c>)
 80017e4:	edc3 7a00 	vstr	s15, [r3]
 80017e8:	e002      	b.n	80017f0 <MotorMovePos+0x138>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61fb      	str	r3, [r7, #28]
  }

  // Control PID
  if(tMotor1.dir == tMotor2.dir)
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <MotorMovePos+0x320>)
 80017f2:	f993 2018 	ldrsb.w	r2, [r3, #24]
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <MotorMovePos+0x324>)
 80017f8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d149      	bne.n	8001894 <MotorMovePos+0x1dc>
  	{
	 g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel + MPU6050.Gz, tMotor1.velocity, SAMPLING_TIME);
 8001800:	4b74      	ldr	r3, [pc, #464]	; (80019d4 <MotorMovePos+0x31c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe feaf 	bl	8000568 <__aeabi_f2d>
 800180a:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <MotorMovePos+0x328>)
 800180c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001810:	f7fe fd4c 	bl	80002ac <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f9f4 	bl	8000c08 <__aeabi_d2f>
 8001820:	4602      	mov	r2, r0
 8001822:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <MotorMovePos+0x320>)
 8001824:	edd3 7a01 	vldr	s15, [r3, #4]
 8001828:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80019e4 <MotorMovePos+0x32c>
 800182c:	eef0 0a67 	vmov.f32	s1, s15
 8001830:	ee00 2a10 	vmov	s0, r2
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f000 fbd7 	bl	8001fe8 <PIDCompute>
 800183a:	eef0 7a40 	vmov.f32	s15, s0
 800183e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001842:	ee17 3a90 	vmov	r3, s15
 8001846:	b21b      	sxth	r3, r3
 8001848:	61bb      	str	r3, [r7, #24]
	  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel - MPU6050.Gz, tMotor2.velocity, SAMPLING_TIME));
 800184a:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <MotorMovePos+0x31c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe8a 	bl	8000568 <__aeabi_f2d>
 8001854:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <MotorMovePos+0x328>)
 8001856:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800185a:	f7fe fd25 	bl	80002a8 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f9cf 	bl	8000c08 <__aeabi_d2f>
 800186a:	4602      	mov	r2, r0
 800186c:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <MotorMovePos+0x324>)
 800186e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001872:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 80019e4 <MotorMovePos+0x32c>
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	ee00 2a10 	vmov	s0, r2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fbb2 	bl	8001fe8 <PIDCompute>
 8001884:	eef0 7a40 	vmov.f32	s15, s0
 8001888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188c:	ee17 3a90 	vmov	r3, s15
 8001890:	b21b      	sxth	r3, r3
 8001892:	617b      	str	r3, [r7, #20]
	}
  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel, tMotor1.velocity, SAMPLING_TIME);
 8001894:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <MotorMovePos+0x31c>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <MotorMovePos+0x320>)
 800189c:	ed93 7a01 	vldr	s14, [r3, #4]
 80018a0:	ed9f 1a50 	vldr	s2, [pc, #320]	; 80019e4 <MotorMovePos+0x32c>
 80018a4:	eef0 0a47 	vmov.f32	s1, s14
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f000 fb9b 	bl	8001fe8 <PIDCompute>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	b21b      	sxth	r3, r3
 80018c0:	61bb      	str	r3, [r7, #24]
  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel, tMotor2.velocity, SAMPLING_TIME));
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <MotorMovePos+0x31c>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	4b44      	ldr	r3, [pc, #272]	; (80019dc <MotorMovePos+0x324>)
 80018ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ce:	ed9f 1a45 	vldr	s2, [pc, #276]	; 80019e4 <MotorMovePos+0x32c>
 80018d2:	eef0 0a47 	vmov.f32	s1, s14
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fb84 	bl	8001fe8 <PIDCompute>
 80018e0:	eef0 7a40 	vmov.f32	s15, s0
 80018e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e8:	ee17 3a90 	vmov	r3, s15
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	617b      	str	r3, [r7, #20]

  dutyCycle_global_1 = g_nDutyCycle_1;
 80018f0:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <MotorMovePos+0x330>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]
  dutyCycle_global_2 = g_nDutyCycle_2;
 80018f6:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <MotorMovePos+0x334>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	6013      	str	r3, [r2, #0]


  MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bfb8      	it	lt
 8001902:	425b      	neglt	r3, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	2101      	movs	r1, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f9a7 	bl	8001c5c <MotorSetDuty>
  MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	bfb8      	it	lt
 8001914:	425b      	neglt	r3, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	2102      	movs	r1, #2
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f99e 	bl	8001c5c <MotorSetDuty>
//        }
//    }
//  strcat(result, "!");
//  HAL_UART_Transmit(&huart2, (uint8_t *)result, sizeof(result), 100);

  if (tProfile->nTime > tProfile->dMidStep3)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dd7e      	ble.n	8001a34 <MotorMovePos+0x37c>
  {
    __HAL_TIM_SetCounter(&htim4, 0);
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <MotorMovePos+0x338>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim3, 0);
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <MotorMovePos+0x33c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    g_nDutyCycle_1 = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
    g_nDutyCycle_2 = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
    g_dCmdVel = 0;
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MotorMovePos+0x31c>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MotorMovePos+0x340>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1);
 800196a:	2101      	movs	r1, #1
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f975 	bl	8001c5c <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2);
 8001972:	2102      	movs	r1, #2
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f971 	bl	8001c5c <MotorSetDuty>
    tmotor1->velocity = 0;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
    tmotor2->velocity = 0;
 8001982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
    tmotor1->position = 0;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    tmotor2->position = 0;
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
    tmotor1->counter = 0;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
    tmotor2->counter = 0;
 80019a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
    PIDReset(&tPID_2);
 80019a6:	4815      	ldr	r0, [pc, #84]	; (80019fc <MotorMovePos+0x344>)
 80019a8:	f000 fae8 	bl	8001f7c <PIDReset>
    PIDReset(&tPID_1);
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <MotorMovePos+0x348>)
 80019ae:	f000 fae5 	bl	8001f7c <PIDReset>
    if(tProfile->dMidStep3 < 2.0f)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d52c      	bpl.n	8001a20 <MotorMovePos+0x368>
    {
    for(uint64_t i = 0; i < 5000000; i++){};
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80019d2:	e01e      	b.n	8001a12 <MotorMovePos+0x35a>
 80019d4:	200002e8 	.word	0x200002e8
 80019d8:	20000338 	.word	0x20000338
 80019dc:	20000358 	.word	0x20000358
 80019e0:	20000278 	.word	0x20000278
 80019e4:	3ba3d70a 	.word	0x3ba3d70a
 80019e8:	200002fc 	.word	0x200002fc
 80019ec:	20000300 	.word	0x20000300
 80019f0:	20000488 	.word	0x20000488
 80019f4:	20000440 	.word	0x20000440
 80019f8:	200002ec 	.word	0x200002ec
 80019fc:	20000390 	.word	0x20000390
 8001a00:	20000378 	.word	0x20000378
 8001a04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a08:	1c54      	adds	r4, r2, #1
 8001a0a:	f143 0500 	adc.w	r5, r3, #0
 8001a0e:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8001a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a16:	4916      	ldr	r1, [pc, #88]	; (8001a70 <MotorMovePos+0x3b8>)
 8001a18:	428a      	cmp	r2, r1
 8001a1a:	f173 0300 	sbcs.w	r3, r3, #0
 8001a1e:	d3f1      	bcc.n	8001a04 <MotorMovePos+0x34c>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8001a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a24:	2205      	movs	r2, #5
 8001a26:	4913      	ldr	r1, [pc, #76]	; (8001a74 <MotorMovePos+0x3bc>)
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MotorMovePos+0x3c0>)
 8001a2a:	f004 fb78 	bl	800611e <HAL_UART_Transmit>
    tProcess = NONE;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MotorMovePos+0x3c4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
  }
  tProfile->nTime += SAMPLING_TIME;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd95 	bl	8000568 <__aeabi_f2d>
 8001a3e:	a30a      	add	r3, pc, #40	; (adr r3, 8001a68 <MotorMovePos+0x3b0>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc32 	bl	80002ac <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8da 	bl	8000c08 <__aeabi_d2f>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	47ae147b 	.word	0x47ae147b
 8001a6c:	3f747ae1 	.word	0x3f747ae1
 8001a70:	004c4b40 	.word	0x004c4b40
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000518 	.word	0x20000518
 8001a7c:	200002ec 	.word	0x200002ec

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <MotorSetRun>:

PROFILE_t tProfile;
Motor_t tMotor1, tMotor2;

void MotorSetRun()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2102      	movs	r1, #2
 8001a94:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <MotorSetRun+0x34>)
 8001a96:	f001 fccb 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2108      	movs	r1, #8
 8001a9e:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MotorSetRun+0x38>)
 8001aa0:	f001 fcc6 	bl	8003430 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <MotorSetRun+0x3c>)
 8001aac:	f001 fcc0 	bl	8003430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MotorSetRun+0x3c>)
 8001ab8:	f001 fcba 	bl	8003430 <HAL_GPIO_WritePin>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40021000 	.word	0x40021000

08001acc <Motor1Forward>:

void Motor1Forward()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad6:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <Motor1Forward+0x14>)
 8001ad8:	f001 fcaa 	bl	8003430 <HAL_GPIO_WritePin>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <Motor1Backward>:

void Motor1Backward()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <Motor1Backward+0x14>)
 8001af0:	f001 fc9e 	bl	8003430 <HAL_GPIO_WritePin>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000

08001afc <Motor2Forward>:

void Motor2Forward()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2102      	movs	r1, #2
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <Motor2Forward+0x14>)
 8001b06:	f001 fc93 	bl	8003430 <HAL_GPIO_WritePin>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020800 	.word	0x40020800

08001b14 <Motor2Backward>:

void Motor2Backward()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <Motor2Backward+0x14>)
 8001b1e:	f001 fc87 	bl	8003430 <HAL_GPIO_WritePin>
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020800 	.word	0x40020800

08001b2c <ReadEncoder>:

void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]

  tmotor->counter = htim->Instance->CNT;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
  htim->Instance->CNT = 0;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  if(tmotor->dir == 1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d141      	bne.n	8001bd6 <ReadEncoder+0xaa>
  {
	    int16_t temp_data = tmotor->counter;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	81bb      	strh	r3, [r7, #12]
	    temp_data = - temp_data;
 8001b58:	89bb      	ldrh	r3, [r7, #12]
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	81bb      	strh	r3, [r7, #12]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001b60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6c:	ee17 0a90 	vmov	r0, s15
 8001b70:	f7fe fcfa 	bl	8000568 <__aeabi_f2d>
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <ReadEncoder+0x12c>)
 8001b7a:	f7fe fd4d 	bl	8000618 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4614      	mov	r4, r2
 8001b84:	461d      	mov	r5, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcec 	bl	8000568 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fd3e 	bl	8000618 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7ff f830 	bl	8000c08 <__aeabi_d2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	edc3 7a02 	vstr	s15, [r3, #8]
  else{
	    int16_t temp_data =  tmotor->counter;
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
  }
}
 8001bd4:	e03c      	b.n	8001c50 <ReadEncoder+0x124>
	    int16_t temp_data =  tmotor->counter;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	81fb      	strh	r3, [r7, #14]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcbc 	bl	8000568 <__aeabi_f2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <ReadEncoder+0x12c>)
 8001bf6:	f7fe fd0f 	bl	8000618 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcae 	bl	8000568 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fd00 	bl	8000618 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe fff2 	bl	8000c08 <__aeabi_d2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	40690000 	.word	0x40690000

08001c5c <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	460a      	mov	r2, r1
 8001c66:	80fb      	strh	r3, [r7, #6]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8001c6c:	797b      	ldrb	r3, [r7, #5]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d104      	bne.n	8001c7c <MotorSetDuty+0x20>
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,nDuty);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MotorSetDuty+0x3c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else if (channel == MOTOR_2)
  {
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
  }
}
 8001c7a:	e006      	b.n	8001c8a <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d103      	bne.n	8001c8a <MotorSetDuty+0x2e>
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1,nDuty);
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MotorSetDuty+0x40>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200003b0 	.word	0x200003b0
 8001c9c:	200004d0 	.word	0x200004d0

08001ca0 <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8001ca4:	481f      	ldr	r0, [pc, #124]	; (8001d24 <MotorInit+0x84>)
 8001ca6:	f003 f885 	bl	8004db4 <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001caa:	2104      	movs	r1, #4
 8001cac:	481e      	ldr	r0, [pc, #120]	; (8001d28 <MotorInit+0x88>)
 8001cae:	f003 f941 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	481c      	ldr	r0, [pc, #112]	; (8001d28 <MotorInit+0x88>)
 8001cb6:	f003 f93d 	bl	8004f34 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001cba:	2108      	movs	r1, #8
 8001cbc:	481b      	ldr	r0, [pc, #108]	; (8001d2c <MotorInit+0x8c>)
 8001cbe:	f003 f939 	bl	8004f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001cc2:	210c      	movs	r1, #12
 8001cc4:	4819      	ldr	r0, [pc, #100]	; (8001d2c <MotorInit+0x8c>)
 8001cc6:	f003 f935 	bl	8004f34 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4818      	ldr	r0, [pc, #96]	; (8001d30 <MotorInit+0x90>)
 8001cce:	f003 fa9f 	bl	8005210 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MotorInit+0x90>)
 8001cd6:	f003 fa9b 	bl	8005210 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4815      	ldr	r0, [pc, #84]	; (8001d34 <MotorInit+0x94>)
 8001cde:	f003 fa97 	bl	8005210 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <MotorInit+0x94>)
 8001ce6:	f003 fa93 	bl	8005210 <HAL_TIM_Encoder_Start>

  PIDInit(&tPID_1, 0.15, 5, 0.001);
 8001cea:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001d38 <MotorInit+0x98>
 8001cee:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001cf2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001d3c <MotorInit+0x9c>
 8001cf6:	4812      	ldr	r0, [pc, #72]	; (8001d40 <MotorInit+0xa0>)
 8001cf8:	f000 f95c 	bl	8001fb4 <PIDInit>
  PIDInit(&tPID_2, 0.15, 5, 0.001);
 8001cfc:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001d38 <MotorInit+0x98>
 8001d00:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001d04:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001d3c <MotorInit+0x9c>
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <MotorInit+0xa4>)
 8001d0a:	f000 f953 	bl	8001fb4 <PIDInit>
  MotorSetDuty(0, MOTOR_1);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff ffa3 	bl	8001c5c <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8001d16:	2102      	movs	r1, #2
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ff9f 	bl	8001c5c <MotorSetDuty>

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003f8 	.word	0x200003f8
 8001d28:	200004d0 	.word	0x200004d0
 8001d2c:	200003b0 	.word	0x200003b0
 8001d30:	20000440 	.word	0x20000440
 8001d34:	20000488 	.word	0x20000488
 8001d38:	3a83126f 	.word	0x3a83126f
 8001d3c:	3e19999a 	.word	0x3e19999a
 8001d40:	20000378 	.word	0x20000378
 8001d44:	20000390 	.word	0x20000390

08001d48 <MotorTrapzoidalInit>:
    *nPulse = __HAL_TIM_GetCounter(&htim3);
  }
}

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d54:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d58:	ed87 1a00 	vstr	s2, [r7]
	if (maxPos <= 0 || maxVel <= 0 || maxAcc <= 0) {
 8001d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	f240 80fc 	bls.w	8001f64 <MotorTrapzoidalInit+0x21c>
 8001d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	f240 80f4 	bls.w	8001f64 <MotorTrapzoidalInit+0x21c>
 8001d7c:	edd7 7a00 	vldr	s15, [r7]
 8001d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	f240 80ec 	bls.w	8001f64 <MotorTrapzoidalInit+0x21c>

	        return;
	    }
	if (maxVel > sqrt(maxAcc * maxPos)) maxVel = sqrt(maxAcc * maxPos) - 1.0f;
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fbeb 	bl	8000568 <__aeabi_f2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	ed97 7a00 	vldr	s14, [r7]
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbdf 	bl	8000568 <__aeabi_f2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	ec43 2b10 	vmov	d0, r2, r3
 8001db2:	f009 fde5 	bl	800b980 <sqrt>
 8001db6:	ec53 2b10 	vmov	r2, r3, d0
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe febb 	bl	8000b38 <__aeabi_dcmpgt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01e      	beq.n	8001e06 <MotorTrapzoidalInit+0xbe>
 8001dc8:	ed97 7a00 	vldr	s14, [r7]
 8001dcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	ee17 0a90 	vmov	r0, s15
 8001dd8:	f7fe fbc6 	bl	8000568 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b10 	vmov	d0, r2, r3
 8001de4:	f009 fdcc 	bl	800b980 <sqrt>
 8001de8:	ec51 0b10 	vmov	r0, r1, d0
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <MotorTrapzoidalInit+0x230>)
 8001df2:	f7fe fa59 	bl	80002a8 <__aeabi_dsub>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe ff03 	bl	8000c08 <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	607b      	str	r3, [r7, #4]
	tProfile->dAccelMax = maxAcc;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos * 0.8725; //Must Increase
 8001e12:	68b8      	ldr	r0, [r7, #8]
 8001e14:	f7fe fba8 	bl	8000568 <__aeabi_f2d>
 8001e18:	a355      	add	r3, pc, #340	; (adr r3, 8001f70 <MotorTrapzoidalInit+0x228>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbfb 	bl	8000618 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe feed 	bl	8000c08 <__aeabi_d2f>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e56:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e64:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ebc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001ef6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f00:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tProfile->nTime = 0;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
 8001f62:	e000      	b.n	8001f66 <MotorTrapzoidalInit+0x21e>
	        return;
 8001f64:	bf00      	nop
}
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6c:	f3af 8000 	nop.w
 8001f70:	1eb851ec 	.word	0x1eb851ec
 8001f74:	3febeb85 	.word	0x3febeb85
 8001f78:	3ff00000 	.word	0x3ff00000

08001f7c <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result = 0.0f;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
    g_dPIDError = 0;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <PIDReset+0x34>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	200003a8 	.word	0x200003a8

08001fb4 <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fc0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fc4:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff ffd7 	bl	8001f7c <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	609a      	str	r2, [r3, #8]

}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ff4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ff8:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8001ffc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002000:	edd7 7a01 	vldr	s15, [r7, #4]
 8002004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <PIDCompute+0x114>)
 800200a:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	613b      	str	r3, [r7, #16]

    dP = PID_Ctrl->dKp * g_dPIDError;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	ed93 7a00 	vldr	s14, [r3]
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <PIDCompute+0x114>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002030:	edc7 7a06 	vstr	s15, [r7, #24]
    PID_Ctrl->dIntergral += g_dPIDError;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	ed93 7a04 	vldr	s14, [r3, #16]
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <PIDCompute+0x114>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002050:	edd7 7a00 	vldr	s15, [r7]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800205c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	edd3 7a04 	vldr	s15, [r3, #16]
 8002066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206a:	edc7 7a05 	vstr	s15, [r7, #20]

    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	ed93 7a02 	vldr	s14, [r3, #8]
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <PIDCompute+0x114>)
 8002076:	edd3 6a00 	vldr	s13, [r3]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002080:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002084:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002088:	ed97 7a00 	vldr	s14, [r7]
 800208c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002090:	edc7 7a04 	vstr	s15, [r7, #16]

    dPIDResult = dP + dI + dD;
 8002094:	ed97 7a06 	vldr	s14, [r7, #24]
 8002098:	edd7 7a05 	vldr	s15, [r7, #20]
 800209c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	edc7 7a07 	vstr	s15, [r7, #28]
    if(dPIDResult > 99) dPIDResult = 99;
 80020ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80020b0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002100 <PIDCompute+0x118>
 80020b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020bc:	dd01      	ble.n	80020c2 <PIDCompute+0xda>
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <PIDCompute+0x11c>)
 80020c0:	61fb      	str	r3, [r7, #28]
    if(dPIDResult < -99) dPIDResult = - 99;
 80020c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002108 <PIDCompute+0x120>
 80020ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d501      	bpl.n	80020d8 <PIDCompute+0xf0>
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <PIDCompute+0x124>)
 80020d6:	61fb      	str	r3, [r7, #28]
    PID_Ctrl->result = dPIDResult;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	615a      	str	r2, [r3, #20]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <PIDCompute+0x114>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	ee07 3a90 	vmov	s15, r3
}
 80020ec:	eeb0 0a67 	vmov.f32	s0, s15
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	200003a8 	.word	0x200003a8
 8002100:	42c60000 	.word	0x42c60000
 8002104:	42c60000 	.word	0x42c60000
 8002108:	c2c60000 	.word	0xc2c60000
 800210c:	c2c60000 	.word	0xc2c60000

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <NMI_Handler+0x4>

08002166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216a:	e7fe      	b.n	800216a <HardFault_Handler+0x4>

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler+0x4>

08002172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <UsageFault_Handler+0x4>

0800217e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ac:	f000 fde0 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM2_IRQHandler+0x10>)
 80021ba:	f003 f8b7 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200003f8 	.word	0x200003f8

080021c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART2_IRQHandler+0x10>)
 80021ce:	f004 f869 	bl	80062a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000518 	.word	0x20000518

080021dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_kill>:

int _kill(int pid, int sig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021f6:	f006 f91b 	bl	8008430 <__errno>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2216      	movs	r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_exit>:

void _exit (int status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ffe7 	bl	80021ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800221e:	e7fe      	b.n	800221e <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
  }

  return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
  }
  return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
  return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f006 f880 	bl	8008430 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20020000 	.word	0x20020000
 800235c:	00000400 	.word	0x00000400
 8002360:	200003ac 	.word	0x200003ac
 8002364:	200006b0 	.word	0x200006b0

08002368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b092      	sub	sp, #72	; 0x48
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002392:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2220      	movs	r2, #32
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 ffc5 	bl	8008346 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023bc:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023be:	4a39      	ldr	r2, [pc, #228]	; (80024a4 <MX_TIM1_Init+0x118>)
 80023c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29;
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023c4:	221d      	movs	r2, #29
 80023c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023ca:	2260      	movs	r2, #96	; 0x60
 80023cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023d0:	2263      	movs	r2, #99	; 0x63
 80023d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023e6:	482e      	ldr	r0, [pc, #184]	; (80024a0 <MX_TIM1_Init+0x114>)
 80023e8:	f002 fd54 	bl	8004e94 <HAL_TIM_PWM_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80023f2:	f7ff fb45 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002402:	4619      	mov	r1, r3
 8002404:	4826      	ldr	r0, [pc, #152]	; (80024a0 <MX_TIM1_Init+0x114>)
 8002406:	f003 fd5b 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002410:	f7ff fb36 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002414:	2360      	movs	r3, #96	; 0x60
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002434:	2208      	movs	r2, #8
 8002436:	4619      	mov	r1, r3
 8002438:	4819      	ldr	r0, [pc, #100]	; (80024a0 <MX_TIM1_Init+0x114>)
 800243a:	f003 f87f 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002444:	f7ff fb1c 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	220c      	movs	r2, #12
 800244e:	4619      	mov	r1, r3
 8002450:	4813      	ldr	r0, [pc, #76]	; (80024a0 <MX_TIM1_Init+0x114>)
 8002452:	f003 f873 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800245c:	f7ff fb10 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002478:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM1_Init+0x114>)
 8002484:	f003 fd98 	bl	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800248e:	f7ff faf7 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM1_Init+0x114>)
 8002494:	f000 fa5a 	bl	800294c <HAL_TIM_MspPostInit>

}
 8002498:	bf00      	nop
 800249a:	3748      	adds	r7, #72	; 0x48
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200003b0 	.word	0x200003b0
 80024a4:	40010000 	.word	0x40010000

080024a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	463b      	mov	r3, r7
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <MX_TIM2_Init+0x98>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 749;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_TIM2_Init+0x98>)
 80024ce:	f240 22ed 	movw	r2, #749	; 0x2ed
 80024d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_TIM2_Init+0x98>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <MX_TIM2_Init+0x98>)
 80024dc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80024e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_TIM2_Init+0x98>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_TIM2_Init+0x98>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ee:	4814      	ldr	r0, [pc, #80]	; (8002540 <MX_TIM2_Init+0x98>)
 80024f0:	f002 fc10 	bl	8004d14 <HAL_TIM_Base_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024fa:	f7ff fac1 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4619      	mov	r1, r3
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_TIM2_Init+0x98>)
 800250c:	f003 f8d8 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002516:	f7ff fab3 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002522:	463b      	mov	r3, r7
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MX_TIM2_Init+0x98>)
 8002528:	f003 fcca 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002532:	f7ff faa5 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200003f8 	.word	0x200003f8

08002544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fef7 	bl	8008346 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <MX_TIM3_Init+0xa4>)
 8002564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_TIM3_Init+0xa0>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_TIM3_Init+0xa0>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002586:	2303      	movs	r3, #3
 8002588:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800258e:	2301      	movs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002596:	230a      	movs	r3, #10
 8002598:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80025a6:	230a      	movs	r3, #10
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <MX_TIM3_Init+0xa0>)
 80025b2:	f002 fd87 	bl	80050c4 <HAL_TIM_Encoder_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80025bc:	f7ff fa60 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM3_Init+0xa0>)
 80025ce:	f003 fc77 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80025d8:	f7ff fa52 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000440 	.word	0x20000440
 80025e8:	40000400 	.word	0x40000400

080025ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f005 fea3 	bl	8008346 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <MX_TIM4_Init+0xa0>)
 800260a:	4a21      	ldr	r2, [pc, #132]	; (8002690 <MX_TIM4_Init+0xa4>)
 800260c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <MX_TIM4_Init+0xa0>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM4_Init+0xa0>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM4_Init+0xa0>)
 800261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM4_Init+0xa0>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_TIM4_Init+0xa0>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800262e:	2303      	movs	r3, #3
 8002630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002636:	2301      	movs	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800263e:	230a      	movs	r3, #10
 8002640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002646:	2301      	movs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800264e:	230a      	movs	r3, #10
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_TIM4_Init+0xa0>)
 800265a:	f002 fd33 	bl	80050c4 <HAL_TIM_Encoder_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002664:	f7ff fa0c 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_TIM4_Init+0xa0>)
 8002676:	f003 fc23 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002680:	f7ff f9fe 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3730      	adds	r7, #48	; 0x30
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000488 	.word	0x20000488
 8002690:	40000800 	.word	0x40000800

08002694 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
 80026c0:	615a      	str	r2, [r3, #20]
 80026c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <MX_TIM5_Init+0xf8>)
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <MX_TIM5_Init+0xfc>)
 80026c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 29;
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <MX_TIM5_Init+0xf8>)
 80026cc:	221d      	movs	r2, #29
 80026ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <MX_TIM5_Init+0xf8>)
 80026d2:	2260      	movs	r2, #96	; 0x60
 80026d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <MX_TIM5_Init+0xf8>)
 80026d8:	2263      	movs	r2, #99	; 0x63
 80026da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <MX_TIM5_Init+0xf8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <MX_TIM5_Init+0xf8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026e8:	4828      	ldr	r0, [pc, #160]	; (800278c <MX_TIM5_Init+0xf8>)
 80026ea:	f002 fb13 	bl	8004d14 <HAL_TIM_Base_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80026f4:	f7ff f9c4 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002702:	4619      	mov	r1, r3
 8002704:	4821      	ldr	r0, [pc, #132]	; (800278c <MX_TIM5_Init+0xf8>)
 8002706:	f002 ffdb 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8002710:	f7ff f9b6 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002714:	481d      	ldr	r0, [pc, #116]	; (800278c <MX_TIM5_Init+0xf8>)
 8002716:	f002 fbbd 	bl	8004e94 <HAL_TIM_PWM_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002720:	f7ff f9ae 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800272c:	f107 0320 	add.w	r3, r7, #32
 8002730:	4619      	mov	r1, r3
 8002732:	4816      	ldr	r0, [pc, #88]	; (800278c <MX_TIM5_Init+0xf8>)
 8002734:	f003 fbc4 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800273e:	f7ff f99f 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002742:	2360      	movs	r3, #96	; 0x60
 8002744:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_TIM5_Init+0xf8>)
 800275a:	f002 feef 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8002764:	f7ff f98c 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2204      	movs	r2, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_TIM5_Init+0xf8>)
 8002770:	f002 fee4 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800277a:	f7ff f981 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <MX_TIM5_Init+0xf8>)
 8002780:	f000 f8e4 	bl	800294c <HAL_TIM_MspPostInit>

}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200004d0 	.word	0x200004d0
 8002790:	40000c00 	.word	0x40000c00

08002794 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_PWM_MspInit+0x40>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_PWM_MspInit+0x40>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_PWM_MspInit+0x40>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d116      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2101      	movs	r1, #1
 800280a:	201c      	movs	r0, #28
 800280c:	f000 fbab 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002810:	201c      	movs	r0, #28
 8002812:	f000 fbc4 	bl	8002f9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002816:	e012      	b.n	800283e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <HAL_TIM_Base_MspInit+0x74>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10d      	bne.n	800283e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_TIM_Base_MspInit+0x70>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40000c00 	.word	0x40000c00

08002850 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_TIM_Encoder_MspInit+0xe8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12c      	bne.n	80028cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6413      	str	r3, [r2, #64]	; 0x40
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_CH_1_Pin|ENCODER_2_CH_2_Pin;
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ba:	2302      	movs	r3, #2
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	4619      	mov	r1, r3
 80028c4:	481e      	ldr	r0, [pc, #120]	; (8002940 <HAL_TIM_Encoder_MspInit+0xf0>)
 80028c6:	f000 fc17 	bl	80030f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028ca:	e031      	b.n	8002930 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_TIM_Encoder_MspInit+0xf4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12c      	bne.n	8002930 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_TIM_Encoder_MspInit+0xec>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_CH_1_Pin|ENCODER_1_CH_2_Pin;
 800290e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <HAL_TIM_Encoder_MspInit+0xf8>)
 800292c:	f000 fbe4 	bl	80030f8 <HAL_GPIO_Init>
}
 8002930:	bf00      	nop
 8002932:	3730      	adds	r7, #48	; 0x30
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40000400 	.word	0x40000400
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	40000800 	.word	0x40000800
 8002948:	40020c00 	.word	0x40020c00

0800294c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_TIM_MspPostInit+0xb0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11f      	bne.n	80029ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 8002978:	f043 0310 	orr.w	r3, r3, #16
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_MOTOR_1_CH_3_Pin|PWM_MOTOR_1_CH_4_Pin;
 800298a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4619      	mov	r1, r3
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <HAL_TIM_MspPostInit+0xb8>)
 80029a8:	f000 fba6 	bl	80030f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80029ac:	e022      	b.n	80029f4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d11d      	bne.n	80029f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_TIM_MspPostInit+0xb4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOTOR_2_CH1_Pin|PWM_MOTOR_2_CH_2_Pin;
 80029d4:	2303      	movs	r3, #3
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029e4:	2302      	movs	r3, #2
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <HAL_TIM_MspPostInit+0xc0>)
 80029f0:	f000 fb82 	bl	80030f8 <HAL_GPIO_Init>
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40020000 	.word	0x40020000

08002a10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <MX_USART2_UART_Init+0x50>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_USART2_UART_Init+0x4c>)
 8002a48:	f003 fb1c 	bl	8006084 <HAL_UART_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a52:	f7ff f815 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000518 	.word	0x20000518
 8002a60:	40004400 	.word	0x40004400

08002a64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_UART_MspInit+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d151      	bne.n	8002b2a <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_UART_MspInit+0xd4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ada:	2304      	movs	r3, #4
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aea:	2307      	movs	r3, #7
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4811      	ldr	r0, [pc, #68]	; (8002b3c <HAL_UART_MspInit+0xd8>)
 8002af6:	f000 faff 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002afa:	2340      	movs	r3, #64	; 0x40
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	480a      	ldr	r0, [pc, #40]	; (8002b40 <HAL_UART_MspInit+0xdc>)
 8002b16:	f000 faef 	bl	80030f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2026      	movs	r0, #38	; 0x26
 8002b20:	f000 fa21 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b24:	2026      	movs	r0, #38	; 0x26
 8002b26:	f000 fa3a 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020c00 	.word	0x40020c00

08002b44 <ArrProcess>:
#include <stdint.h>



ArrData_t ArrProcess(char *arr)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	; 0x40
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 fc98 	bl	800848a <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	f004 fb0e 	bl	800717c <malloc>
 8002b60:	4603      	mov	r3, r0
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 8002b64:	2005      	movs	r0, #5
 8002b66:	f004 fb09 	bl	800717c <malloc>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f004 fb04 	bl	800717c <malloc>
 8002b74:	4603      	mov	r3, r0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f004 faff 	bl	800717c <malloc>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 8002b82:	2002      	movs	r0, #2
 8002b84:	f004 fafa 	bl	800717c <malloc>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2204      	movs	r2, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b96:	f005 fbde 	bl	8008356 <strncpy>
    pos1[4] = '\0';
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	3305      	adds	r3, #5
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4619      	mov	r1, r3
 8002bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bae:	f005 fbd2 	bl	8008356 <strncpy>
    vel1[4] = '\0';
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	330a      	adds	r3, #10
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc6:	f005 fbc6 	bl	8008356 <strncpy>
    acc1[4] = '\0';
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	330f      	adds	r3, #15
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bde:	f005 fbba 	bl	8008356 <strncpy>
    dir1[1] = '\0';
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	3301      	adds	r3, #1
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	3311      	adds	r3, #17
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bf6:	f005 fbae 	bl	8008356 <strncpy>
    dir2[1] = '\0';
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 8002c02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c04:	f004 fab6 	bl	8007174 <atoi>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 8002c0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c10:	f004 fab0 	bl	8007174 <atoi>
 8002c14:	4603      	mov	r3, r0
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 8002c1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c1c:	f004 faaa 	bl	8007174 <atoi>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 8002c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c28:	f004 faa4 	bl	8007174 <atoi>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 8002c32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c34:	f004 fa9e 	bl	8007174 <atoi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 8002c3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c40:	f004 faa4 	bl	800718c <free>
    free(vel1);
 8002c44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c46:	f004 faa1 	bl	800718c <free>
    free(acc1);
 8002c4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c4c:	f004 fa9e 	bl	800718c <free>
    free(dir1);
 8002c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c52:	f004 fa9b 	bl	800718c <free>
    free(dir2);
 8002c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c58:	f004 fa98 	bl	800718c <free>

    return data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f107 0320 	add.w	r3, r7, #32
 8002c64:	cb03      	ldmia	r3!, {r0, r1}
 8002c66:	6010      	str	r0, [r2, #0]
 8002c68:	6051      	str	r1, [r2, #4]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	8113      	strh	r3, [r2, #8]
}
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	3740      	adds	r7, #64	; 0x40
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c7c:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c7e:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c80:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c84:	e002      	b.n	8002c8c <LoopCopyDataInit>

08002c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8a:	3304      	adds	r3, #4

08002c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c90:	d3f9      	bcc.n	8002c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c94:	4c0b      	ldr	r4, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c98:	e001      	b.n	8002c9e <LoopFillZerobss>

08002c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c9c:	3204      	adds	r2, #4

08002c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca0:	d3fb      	bcc.n	8002c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ca2:	f7ff fb61 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f005 fbc9 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002caa:	f7fe fb4f 	bl	800134c <main>
  bx  lr    
 8002cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002cbc:	0800c010 	.word	0x0800c010
  ldr r2, =_sbss
 8002cc0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002cc4:	200006ac 	.word	0x200006ac

08002cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC_IRQHandler>
	...

08002ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_Init+0x40>)
 8002cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_Init+0x40>)
 8002ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <HAL_Init+0x40>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f000 f92b 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f808 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d00:	f7ff fa06 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x54>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_InitTick+0x58>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f943 	bl	8002fba <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00e      	b.n	8002d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d80a      	bhi.n	8002d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d44:	2200      	movs	r2, #0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f000 f90b 	bl	8002f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <HAL_InitTick+0x5c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20000010 	.word	0x20000010
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x20>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x24>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_IncTick+0x24>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000010 	.word	0x20000010
 8002d94:	2000055c 	.word	0x2000055c

08002d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2000055c 	.word	0x2000055c

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4907      	ldr	r1, [pc, #28]	; (8002e4c <__NVIC_EnableIRQ+0x38>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e100 	.word	0xe000e100

08002e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	; (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf28      	it	cs
 8002ec2:	2304      	movcs	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b03      	subs	r3, #3
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
         );
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff8e 	bl	8002e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff29 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff ff3e 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff8e 	bl	8002ea4 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5d 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff31 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ffa2 	bl	8002f0c <SysTick_Config>
 8002fc8:	4603      	mov	r3, r0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff feda 	bl	8002d98 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d008      	beq.n	8003004 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e052      	b.n	80030aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0216 	bic.w	r2, r2, #22
 8003012:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003022:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <HAL_DMA_Abort+0x62>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0208 	bic.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003054:	e013      	b.n	800307e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003056:	f7ff fe9f 	bl	8002d98 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b05      	cmp	r3, #5
 8003062:	d90c      	bls.n	800307e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e015      	b.n	80030aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e4      	bne.n	8003056 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e00c      	b.n	80030ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2205      	movs	r2, #5
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e16b      	b.n	80033ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	f040 815a 	bne.w	80033e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d005      	beq.n	800314a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003146:	2b02      	cmp	r3, #2
 8003148:	d130      	bne.n	80031ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	2203      	movs	r2, #3
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0201 	and.w	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d017      	beq.n	80031e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d123      	bne.n	800323c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80b4 	beq.w	80033e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_GPIO_Init+0x30c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_GPIO_Init+0x30c>)
 8003288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328c:	6453      	str	r3, [r2, #68]	; 0x44
 800328e:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_GPIO_Init+0x30c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329a:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_GPIO_Init+0x310>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_GPIO_Init+0x314>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x226>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_GPIO_Init+0x318>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x222>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a50      	ldr	r2, [pc, #320]	; (8003414 <HAL_GPIO_Init+0x31c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x21e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4f      	ldr	r2, [pc, #316]	; (8003418 <HAL_GPIO_Init+0x320>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x21a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4e      	ldr	r2, [pc, #312]	; (800341c <HAL_GPIO_Init+0x324>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x216>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <HAL_GPIO_Init+0x328>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x212>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4c      	ldr	r2, [pc, #304]	; (8003424 <HAL_GPIO_Init+0x32c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x20e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4b      	ldr	r2, [pc, #300]	; (8003428 <HAL_GPIO_Init+0x330>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x20a>
 80032fe:	2307      	movs	r3, #7
 8003300:	e00e      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003302:	2308      	movs	r3, #8
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003306:	2306      	movs	r3, #6
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_GPIO_Init+0x310>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_GPIO_Init+0x334>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a32      	ldr	r2, [pc, #200]	; (800342c <HAL_GPIO_Init+0x334>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_GPIO_Init+0x334>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_GPIO_Init+0x334>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_GPIO_Init+0x334>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_GPIO_Init+0x334>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_GPIO_Init+0x334>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_GPIO_Init+0x334>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae90 	bls.w	8003114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40021c00 	.word	0x40021c00
 800342c:	40013c00 	.word	0x40013c00

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800344c:	e003      	b.n	8003456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e12b      	b.n	80036ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd ff16 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c8:	f001 fbfc 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a81      	ldr	r2, [pc, #516]	; (80036d8 <HAL_I2C_Init+0x274>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d807      	bhi.n	80034e8 <HAL_I2C_Init+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a80      	ldr	r2, [pc, #512]	; (80036dc <HAL_I2C_Init+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e006      	b.n	80034f6 <HAL_I2C_Init+0x92>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_I2C_Init+0x27c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0e7      	b.n	80036ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a78      	ldr	r2, [pc, #480]	; (80036e4 <HAL_I2C_Init+0x280>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a6a      	ldr	r2, [pc, #424]	; (80036d8 <HAL_I2C_Init+0x274>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d802      	bhi.n	8003538 <HAL_I2C_Init+0xd4>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	e009      	b.n	800354c <HAL_I2C_Init+0xe8>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a69      	ldr	r2, [pc, #420]	; (80036e8 <HAL_I2C_Init+0x284>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	3301      	adds	r3, #1
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800355e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	495c      	ldr	r1, [pc, #368]	; (80036d8 <HAL_I2C_Init+0x274>)
 8003568:	428b      	cmp	r3, r1
 800356a:	d819      	bhi.n	80035a0 <HAL_I2C_Init+0x13c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e59      	subs	r1, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fbb1 f3f3 	udiv	r3, r1, r3
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003580:	400b      	ands	r3, r1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_I2C_Init+0x138>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e59      	subs	r1, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fbb1 f3f3 	udiv	r3, r1, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	e051      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 800359c:	2304      	movs	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x168>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x18e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x196>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1bc>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003706:	f7ff fb47 	bl	8002d98 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	f040 80d9 	bne.w	80038cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2319      	movs	r3, #25
 8003720:	2201      	movs	r2, #1
 8003722:	496d      	ldr	r1, [pc, #436]	; (80038d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fc7f 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	e0cc      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Mem_Write+0x56>
 800373e:	2302      	movs	r3, #2
 8003740:	e0c5      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d007      	beq.n	8003768 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2240      	movs	r2, #64	; 0x40
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <HAL_I2C_Mem_Write+0x1f0>)
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	88f8      	ldrh	r0, [r7, #6]
 80037ac:	893a      	ldrh	r2, [r7, #8]
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4603      	mov	r3, r0
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fab6 	bl	8003d2c <I2C_RequestMemoryWrite>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d052      	beq.n	800386c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e081      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fd00 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d107      	bne.n	80037f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <HAL_I2C_Mem_Write+0x180>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1aa      	bne.n	80037ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fcec 	bl	8004256 <I2C_WaitOnBTFFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b04      	cmp	r3, #4
 800388a:	d107      	bne.n	800389c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e016      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000

080038e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fa:	f7ff fa4d 	bl	8002d98 <HAL_GetTick>
 80038fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	f040 8208 	bne.w	8003d1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2319      	movs	r3, #25
 8003914:	2201      	movs	r2, #1
 8003916:	497b      	ldr	r1, [pc, #492]	; (8003b04 <HAL_I2C_Mem_Read+0x224>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fb85 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	e1fb      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Mem_Read+0x56>
 8003932:	2302      	movs	r3, #2
 8003934:	e1f4      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d007      	beq.n	800395c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2222      	movs	r2, #34	; 0x22
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a5b      	ldr	r2, [pc, #364]	; (8003b08 <HAL_I2C_Mem_Read+0x228>)
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399e:	88f8      	ldrh	r0, [r7, #6]
 80039a0:	893a      	ldrh	r2, [r7, #8]
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fa52 	bl	8003e58 <I2C_RequestMemoryRead>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1b0      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d113      	bne.n	80039ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e184      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d11b      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e164      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d11b      	bne.n	8003a6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	e144      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a84:	e138      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	f200 80f1 	bhi.w	8003c72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d123      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fc1b 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e139      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ade:	e10b      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d14e      	bne.n	8003b86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	2200      	movs	r2, #0
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <HAL_I2C_Mem_Read+0x22c>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fa98 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e10e      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
 8003b02:	bf00      	nop
 8003b04:	00100002 	.word	0x00100002
 8003b08:	ffff0000 	.word	0xffff0000
 8003b0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b84:	e0b8      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4966      	ldr	r1, [pc, #408]	; (8003d28 <HAL_I2C_Mem_Read+0x448>)
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fa49 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0bf      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2200      	movs	r2, #0
 8003bea:	494f      	ldr	r1, [pc, #316]	; (8003d28 <HAL_I2C_Mem_Read+0x448>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fa1b 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e091      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c70:	e042      	b.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fb2e 	bl	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e04c      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d118      	bne.n	8003cf8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f47f aec2 	bne.w	8003a86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	00010004 	.word	0x00010004

08003d2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	813b      	strh	r3, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f960 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d103      	bne.n	8003d86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e05f      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	492d      	ldr	r1, [pc, #180]	; (8003e54 <I2C_RequestMemoryWrite+0x128>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f998 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e04c      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa02 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02b      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df8:	893b      	ldrh	r3, [r7, #8]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	e021      	b.n	8003e48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e04:	893b      	ldrh	r3, [r7, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6a39      	ldr	r1, [r7, #32]
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f9dc 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d107      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e005      	b.n	8003e4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	813b      	strh	r3, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8c2 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d103      	bne.n	8003ec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0aa      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	4952      	ldr	r1, [pc, #328]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8fa 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e097      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f964 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e076      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	893b      	ldrh	r3, [r7, #8]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e021      	b.n	8003f84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f93e 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e050      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f923 	bl	80041d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d107      	bne.n	8003fac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e035      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f82b 	bl	8004028 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe6:	d103      	bne.n	8003ff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e013      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <I2C_RequestMemoryRead+0x1cc>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f863 	bl	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	00010002 	.word	0x00010002

08004028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004038:	e025      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d021      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fe fea9 	bl	8002d98 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d116      	bne.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e023      	b.n	80040ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10d      	bne.n	80040ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	43da      	mvns	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	e00c      	b.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d0b6      	beq.n	800403a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e4:	e051      	b.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d123      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e046      	b.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fe27 	bl	8002d98 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e020      	b.n	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10c      	bne.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	e00b      	b.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	43da      	mvns	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d18d      	bne.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e0:	e02d      	b.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f8ce 	bl	8004384 <I2C_IsAcknowledgeFailed>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e02d      	b.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fdcd 	bl	8002d98 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e007      	b.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d1ca      	bne.n	80041e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004262:	e02d      	b.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f88d 	bl	8004384 <I2C_IsAcknowledgeFailed>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e02d      	b.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d021      	beq.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fe fd8c 	bl	8002d98 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e007      	b.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d1ca      	bne.n	8004264 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042e4:	e042      	b.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d119      	bne.n	8004328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fe fd36 	bl	8002d98 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d1b5      	bne.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d11b      	bne.n	80043d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e267      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d075      	beq.n	80044ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d00c      	beq.n	8004428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440e:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004416:	2b08      	cmp	r3, #8
 8004418:	d112      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004426:	d10b      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	4b7e      	ldr	r3, [pc, #504]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05b      	beq.n	80044ec <HAL_RCC_OscConfig+0x108>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d157      	bne.n	80044ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e242      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x74>
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6f      	ldr	r2, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b6d      	ldr	r3, [pc, #436]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a6c      	ldr	r2, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 800447c:	4b69      	ldr	r3, [pc, #420]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a65      	ldr	r2, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe fc7c 	bl	8002d98 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fe fc78 	bl	8002d98 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e207      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xc0>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe fc68 	bl	8002d98 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe fc64 	bl	8002d98 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1f3      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0xe8>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450e:	2b08      	cmp	r3, #8
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1c7      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	e03a      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe fc1d 	bl	8002d98 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe fc19 	bl	8002d98 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1a8      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4925      	ldr	r1, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	e015      	b.n	80045c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x244>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fbfc 	bl	8002d98 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fe fbf8 	bl	8002d98 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e187      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d036      	beq.n	800463c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x248>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fe fbdc 	bl	8002d98 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fe fbd8 	bl	8002d98 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e167      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x240>)
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x200>
 8004602:	e01b      	b.n	800463c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x248>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460a:	f7fe fbc5 	bl	8002d98 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	e00e      	b.n	8004630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe fbc1 	bl	8002d98 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d907      	bls.n	8004630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e150      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
 800462c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ea      	bne.n	8004612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8097 	beq.w	8004778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b7d      	ldr	r3, [pc, #500]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b7a      	ldr	r3, [pc, #488]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b77      	ldr	r3, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b74      	ldr	r3, [pc, #464]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a73      	ldr	r2, [pc, #460]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fe fb81 	bl	8002d98 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fe fb7d 	bl	8002d98 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e10c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x474>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x2ea>
 80046c0:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a63      	ldr	r2, [pc, #396]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x30c>
 80046d6:	4b5f      	ldr	r3, [pc, #380]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a5e      	ldr	r2, [pc, #376]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x324>
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a57      	ldr	r2, [pc, #348]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b55      	ldr	r3, [pc, #340]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a54      	ldr	r2, [pc, #336]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fe fb42 	bl	8002d98 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe fb3e 	bl	8002d98 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0cb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b49      	ldr	r3, [pc, #292]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x334>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473c:	f7fe fb2c 	bl	8002d98 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe fb28 	bl	8002d98 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0b5      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a38      	ldr	r2, [pc, #224]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a1 	beq.w	80048c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004782:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d05c      	beq.n	8004848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d141      	bne.n	800481a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x478>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe fafc 	bl	8002d98 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe faf8 	bl	8002d98 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e087      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	491b      	ldr	r1, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x478>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe fad1 	bl	8002d98 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fe facd 	bl	8002d98 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e05c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x416>
 8004818:	e054      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x478>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fe faba 	bl	8002d98 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004828:	f7fe fab6 	bl	8002d98 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e045      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x470>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x444>
 8004846:	e03d      	b.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e038      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004860:	4b1b      	ldr	r3, [pc, #108]	; (80048d0 <HAL_RCC_OscConfig+0x4ec>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d028      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d121      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d11a      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0cc      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e8:	4b68      	ldr	r3, [pc, #416]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d90c      	bls.n	8004910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b63      	ldr	r3, [pc, #396]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0b8      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004928:	4b59      	ldr	r3, [pc, #356]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004940:	4b53      	ldr	r3, [pc, #332]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a52      	ldr	r2, [pc, #328]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	494d      	ldr	r1, [pc, #308]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d119      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d003      	beq.n	8004992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498e:	2b03      	cmp	r3, #3
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e067      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049c4:	f7fe f9e8 	bl	8002d98 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049cc:	f7fe f9e4 	bl	8002d98 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e04f      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 020c 	and.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d1eb      	bne.n	80049cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049f4:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d20c      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b22      	ldr	r3, [pc, #136]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e032      	b.n	8004a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a5a:	f000 f821 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	490a      	ldr	r1, [pc, #40]	; (8004a94 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	5ccb      	ldrb	r3, [r1, r3]
 8004a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <HAL_RCC_ClockConfig+0x1c4>)
 8004a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe f948 	bl	8002d10 <HAL_InitTick>

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023c00 	.word	0x40023c00
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800bbbc 	.word	0x0800bbbc
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa4:	b094      	sub	sp, #80	; 0x50
 8004aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004aac:	2300      	movs	r3, #0
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab8:	4b79      	ldr	r3, [pc, #484]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	f200 80e1 	bhi.w	8004c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad2:	e0db      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ad8:	e0db      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ada:	4b73      	ldr	r3, [pc, #460]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ade:	e0d8      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae0:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aea:	4b6d      	ldr	r3, [pc, #436]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	2200      	movs	r2, #0
 8004afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	f04f 0000 	mov.w	r0, #0
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	0159      	lsls	r1, r3, #5
 8004b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b24:	0150      	lsls	r0, r2, #5
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	1a51      	subs	r1, r2, r1
 8004b2e:	6139      	str	r1, [r7, #16]
 8004b30:	4629      	mov	r1, r5
 8004b32:	eb63 0301 	sbc.w	r3, r3, r1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b44:	4659      	mov	r1, fp
 8004b46:	018b      	lsls	r3, r1, #6
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b4e:	4651      	mov	r1, sl
 8004b50:	018a      	lsls	r2, r1, #6
 8004b52:	4651      	mov	r1, sl
 8004b54:	ebb2 0801 	subs.w	r8, r2, r1
 8004b58:	4659      	mov	r1, fp
 8004b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b72:	4690      	mov	r8, r2
 8004b74:	4699      	mov	r9, r3
 8004b76:	4623      	mov	r3, r4
 8004b78:	eb18 0303 	adds.w	r3, r8, r3
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	462b      	mov	r3, r5
 8004b80:	eb49 0303 	adc.w	r3, r9, r3
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b92:	4629      	mov	r1, r5
 8004b94:	024b      	lsls	r3, r1, #9
 8004b96:	4621      	mov	r1, r4
 8004b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	024a      	lsls	r2, r1, #9
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb0:	f7fc f87a 	bl	8000ca8 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4613      	mov	r3, r2
 8004bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bbc:	e058      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	4611      	mov	r1, r2
 8004bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	f04f 0000 	mov.w	r0, #0
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	0159      	lsls	r1, r3, #5
 8004be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bea:	0150      	lsls	r0, r2, #5
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c10:	ebb2 040a 	subs.w	r4, r2, sl
 8004c14:	eb63 050b 	sbc.w	r5, r3, fp
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	00eb      	lsls	r3, r5, #3
 8004c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c26:	00e2      	lsls	r2, r4, #3
 8004c28:	4614      	mov	r4, r2
 8004c2a:	461d      	mov	r5, r3
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	18e3      	adds	r3, r4, r3
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	464b      	mov	r3, r9
 8004c34:	eb45 0303 	adc.w	r3, r5, r3
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c46:	4629      	mov	r1, r5
 8004c48:	028b      	lsls	r3, r1, #10
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c50:	4621      	mov	r1, r4
 8004c52:	028a      	lsls	r2, r1, #10
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	61fa      	str	r2, [r7, #28]
 8004c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c64:	f7fc f820 	bl	8000ca8 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3750      	adds	r7, #80	; 0x50
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	007a1200 	.word	0x007a1200

08004cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000008 	.word	0x20000008

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cc8:	f7ff fff0 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0a9b      	lsrs	r3, r3, #10
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800bbcc 	.word	0x0800bbcc

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cf0:	f7ff ffdc 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0b5b      	lsrs	r3, r3, #13
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4903      	ldr	r1, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800bbcc 	.word	0x0800bbcc

08004d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e041      	b.n	8004daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd fd4c 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fda4 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e04e      	b.n	8004e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d022      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d01d      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d018      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d111      	bne.n	8004e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d010      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	e007      	b.n	8004e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e041      	b.n	8004f2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd fc6a 	bl	8002794 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fce4 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x24>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	bf14      	ite	ne
 8004f50:	2301      	movne	r3, #1
 8004f52:	2300      	moveq	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e022      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d109      	bne.n	8004f72 <HAL_TIM_PWM_Start+0x3e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	e015      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x58>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e008      	b.n	8004f9e <HAL_TIM_PWM_Start+0x6a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf14      	ite	ne
 8004f98:	2301      	movne	r3, #1
 8004f9a:	2300      	moveq	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07c      	b.n	80050a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x82>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb4:	e013      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start+0x92>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	e00b      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xa2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd4:	e003      	b.n	8004fde <HAL_TIM_PWM_Start+0xaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ff44 	bl	8005e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2d      	ldr	r2, [pc, #180]	; (80050a8 <HAL_TIM_PWM_Start+0x174>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start+0xcc>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2c      	ldr	r2, [pc, #176]	; (80050ac <HAL_TIM_PWM_Start+0x178>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d101      	bne.n	8005004 <HAL_TIM_PWM_Start+0xd0>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_TIM_PWM_Start+0xd2>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_TIM_PWM_Start+0x174>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d01d      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_TIM_PWM_Start+0x17c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_TIM_PWM_Start+0x180>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_TIM_PWM_Start+0x184>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a16      	ldr	r2, [pc, #88]	; (80050ac <HAL_TIM_PWM_Start+0x178>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_TIM_PWM_Start+0x188>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_TIM_PWM_Start+0x136>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_TIM_PWM_Start+0x18c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d111      	bne.n	800508e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b06      	cmp	r3, #6
 800507a:	d010      	beq.n	800509e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	e007      	b.n	800509e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40001800 	.word	0x40001800

080050c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e097      	b.n	8005208 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fd fbaf 	bl	8002850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fbc1 	bl	80058a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4313      	orrs	r3, r2
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005164:	f023 030c 	bic.w	r3, r3, #12
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	4313      	orrs	r3, r2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	4313      	orrs	r3, r2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4313      	orrs	r3, r2
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005220:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005228:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005230:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005238:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005246:	7b7b      	ldrb	r3, [r7, #13]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e069      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005260:	e031      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d110      	bne.n	800528a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e055      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005288:	e01d      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d108      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	7b7b      	ldrb	r3, [r7, #13]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800529c:	7b3b      	ldrb	r3, [r7, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e03e      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_Encoder_Start+0xc4>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d008      	beq.n	80052e4 <HAL_TIM_Encoder_Start+0xd4>
 80052d2:	e00f      	b.n	80052f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fdc9 	bl	8005e74 <TIM_CCxChannelCmd>
      break;
 80052e2:	e016      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	2104      	movs	r1, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fdc1 	bl	8005e74 <TIM_CCxChannelCmd>
      break;
 80052f2:	e00e      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fdb9 	bl	8005e74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	2104      	movs	r1, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fdb2 	bl	8005e74 <TIM_CCxChannelCmd>
      break;
 8005310:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa77 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa69 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa7a 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa4d 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa3f 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa50 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa23 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa15 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa26 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9f9 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9eb 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9fc 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc f8b2 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fdca 	bl	8006070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9c1 	bl	800588a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0220 	mvn.w	r2, #32
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fd94 	bl	800605c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005556:	2302      	movs	r3, #2
 8005558:	e0ae      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	f200 809f 	bhi.w	80056a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080056a9 	.word	0x080056a9
 8005578:	080056a9 	.word	0x080056a9
 800557c:	080056a9 	.word	0x080056a9
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080056a9 	.word	0x080056a9
 8005588:	080056a9 	.word	0x080056a9
 800558c:	080056a9 	.word	0x080056a9
 8005590:	08005627 	.word	0x08005627
 8005594:	080056a9 	.word	0x080056a9
 8005598:	080056a9 	.word	0x080056a9
 800559c:	080056a9 	.word	0x080056a9
 80055a0:	08005667 	.word	0x08005667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa18 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0208 	orr.w	r2, r2, #8
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
      break;
 80055e2:	e064      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa68 	bl	8005ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]
      break;
 8005624:	e043      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fabd 	bl	8005bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0208 	orr.w	r2, r2, #8
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0204 	bic.w	r2, r2, #4
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
      break;
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fb11 	bl	8005c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	021a      	lsls	r2, r3, #8
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_ConfigClockSource+0x1c>
 80056d8:	2302      	movs	r3, #2
 80056da:	e0b4      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x186>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d03e      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0xd4>
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	f200 8087 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	f000 8086 	beq.w	8005832 <HAL_TIM_ConfigClockSource+0x172>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d87f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d01a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xa6>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d87b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d050      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x11a>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d877      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b50      	cmp	r3, #80	; 0x50
 800573e:	d03c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0xfa>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d873      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d058      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x13a>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d86f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d064      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d86b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d060      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d867      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d05a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	e062      	b.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 fb5d 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e04f      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f000 fb46 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	609a      	str	r2, [r3, #8]
      break;
 80057b8:	e03c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 faba 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2150      	movs	r1, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fb13 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057d8:	e02c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 fad9 	bl	8005d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2160      	movs	r1, #96	; 0x60
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fb03 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057f8:	e01c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 fa9a 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4618      	mov	r0, r3
 8005814:	f000 faf3 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005818:	e00c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 faea 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 800582a:	e003      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e000      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d027      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d023      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d017      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <TIM_Base_SetConfig+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <TIM_Base_SetConfig+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <TIM_Base_SetConfig+0x134>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <TIM_Base_SetConfig+0x138>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <TIM_Base_SetConfig+0x13c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40001800 	.word	0x40001800
 80059d8:	40001c00 	.word	0x40001c00
 80059dc:	40002000 	.word	0x40002000

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0302 	bic.w	r3, r3, #2
 8005a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC1_SetConfig+0x64>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC1_SetConfig+0x8e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400

08005ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x68>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC2_SetConfig+0x94>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d113      	bne.n	8005b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400

08005bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10d      	bne.n	8005c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC3_SetConfig+0x92>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xa4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC4_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <TIM_OC4_SetConfig+0xa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 030a 	bic.w	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f043 0307 	orr.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2201      	movs	r2, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e05a      	b.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d01d      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10c      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e03d      	b.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e03f      	b.n	8006116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc fcda 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	; 0x24
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fddf 	bl	8006c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08a      	sub	sp, #40	; 0x28
 8006122:	af02      	add	r7, sp, #8
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b20      	cmp	r3, #32
 800613c:	d17c      	bne.n	8006238 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_UART_Transmit+0x2c>
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e075      	b.n	800623a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_UART_Transmit+0x3e>
 8006158:	2302      	movs	r3, #2
 800615a:	e06e      	b.n	800623a <HAL_UART_Transmit+0x11c>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2221      	movs	r2, #33	; 0x21
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006172:	f7fc fe11 	bl	8002d98 <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618c:	d108      	bne.n	80061a0 <HAL_UART_Transmit+0x82>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e003      	b.n	80061a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061b0:	e02a      	b.n	8006208 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fb1f 	bl	8006800 <UART_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e036      	b.n	800623a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3302      	adds	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e007      	b.n	80061fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3301      	adds	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1cf      	bne.n	80061b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2200      	movs	r2, #0
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 faef 	bl	8006800 <UART_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e006      	b.n	800623a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e000      	b.n	800623a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	4613      	mov	r3, r2
 800624e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b20      	cmp	r3, #32
 800625a:	d11d      	bne.n	8006298 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_Receive_IT+0x26>
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e016      	b.n	800629a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_UART_Receive_IT+0x38>
 8006276:	2302      	movs	r3, #2
 8006278:	e00f      	b.n	800629a <HAL_UART_Receive_IT+0x58>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	461a      	mov	r2, r3
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fb24 	bl	80068dc <UART_Start_Receive_IT>
 8006294:	4603      	mov	r3, r0
 8006296:	e000      	b.n	800629a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b0ba      	sub	sp, #232	; 0xe8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <HAL_UART_IRQHandler+0x66>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc07 	bl	8006b16 <UART_Receive_IT>
      return;
 8006308:	e256      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800630a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80de 	beq.w	80064d0 <HAL_UART_IRQHandler+0x22c>
 8006314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006324:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80d1 	beq.w	80064d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_UART_IRQHandler+0xae>
 800633a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_UART_IRQHandler+0xd2>
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f043 0202 	orr.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00b      	beq.n	800639a <HAL_UART_IRQHandler+0xf6>
 8006382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d011      	beq.n	80063ca <HAL_UART_IRQHandler+0x126>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d105      	bne.n	80063be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 81ed 	beq.w	80067ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x14e>
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb92 	bl	8006b16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <HAL_UART_IRQHandler+0x17a>
 8006416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04f      	beq.n	80064be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa9a 	bl	8006958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d141      	bne.n	80064b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800644c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3314      	adds	r3, #20
 800645a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800645e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800646a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1d9      	bne.n	8006432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	2b00      	cmp	r3, #0
 8006484:	d013      	beq.n	80064ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	4a7d      	ldr	r2, [pc, #500]	; (8006680 <HAL_UART_IRQHandler+0x3dc>)
 800648c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	4618      	mov	r0, r3
 8006494:	f7fc fe0d 	bl	80030b2 <HAL_DMA_Abort_IT>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e00e      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f990 	bl	80067d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00a      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f98c 	bl	80067d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e006      	b.n	80064cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f988 	bl	80067d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064ca:	e170      	b.n	80067ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	bf00      	nop
    return;
 80064ce:	e16e      	b.n	80067ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	f040 814a 	bne.w	800676e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8143 	beq.w	800676e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 813c 	beq.w	800676e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	f040 80b4 	bne.w	8006684 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8140 	beq.w	80067b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800653a:	429a      	cmp	r2, r3
 800653c:	f080 8139 	bcs.w	80067b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006546:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006552:	f000 8088 	beq.w	8006666 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800656c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800658e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800659a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1d9      	bne.n	8006556 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3314      	adds	r3, #20
 80065c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e1      	bne.n	80065a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3314      	adds	r3, #20
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006602:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006604:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006608:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e3      	bne.n	80065de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	330c      	adds	r3, #12
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	f023 0310 	bic.w	r3, r3, #16
 800663a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006648:	65ba      	str	r2, [r7, #88]	; 0x58
 800664a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800664e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e3      	bne.n	8006624 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	4618      	mov	r0, r3
 8006662:	f7fc fcb6 	bl	8002fd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800666e:	b29b      	uxth	r3, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8b6 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800667c:	e099      	b.n	80067b2 <HAL_UART_IRQHandler+0x50e>
 800667e:	bf00      	nop
 8006680:	08006a1f 	.word	0x08006a1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800668c:	b29b      	uxth	r3, r3
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 808b 	beq.w	80067b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8086 	beq.w	80067b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066ce:	647a      	str	r2, [r7, #68]	; 0x44
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e3      	bne.n	80066aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	623b      	str	r3, [r7, #32]
   return(result);
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006706:	633a      	str	r2, [r7, #48]	; 0x30
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800670c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	e853 3f00 	ldrex	r3, [r3]
 8006736:	60fb      	str	r3, [r7, #12]
   return(result);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0310 	bic.w	r3, r3, #16
 800673e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800674c:	61fa      	str	r2, [r7, #28]
 800674e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	617b      	str	r3, [r7, #20]
   return(result);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e3      	bne.n	8006728 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f83e 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800676c:	e023      	b.n	80067b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_UART_IRQHandler+0x4ea>
 800677a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f95d 	bl	8006a46 <UART_Transmit_IT>
    return;
 800678c:	e014      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <HAL_UART_IRQHandler+0x514>
 800679a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f99d 	bl	8006ae6 <UART_EndTransmit_IT>
    return;
 80067ac:	e004      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
    return;
 80067ae:	bf00      	nop
 80067b0:	e002      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
      return;
 80067b2:	bf00      	nop
 80067b4:	e000      	b.n	80067b8 <HAL_UART_IRQHandler+0x514>
      return;
 80067b6:	bf00      	nop
  }
}
 80067b8:	37e8      	adds	r7, #232	; 0xe8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b090      	sub	sp, #64	; 0x40
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006810:	e050      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d04c      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800681a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <UART_WaitOnFlagUntilTimeout+0x30>
 8006820:	f7fc faba 	bl	8002d98 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682c:	429a      	cmp	r2, r3
 800682e:	d241      	bcs.n	80068b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006850:	637a      	str	r2, [r7, #52]	; 0x34
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e5      	bne.n	8006830 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	63bb      	str	r3, [r7, #56]	; 0x38
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006884:	623a      	str	r2, [r7, #32]
 8006886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	61bb      	str	r3, [r7, #24]
   return(result);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e00f      	b.n	80068d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d09f      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3740      	adds	r7, #64	; 0x40
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	88fa      	ldrh	r2, [r7, #6]
 80068f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	88fa      	ldrh	r2, [r7, #6]
 80068fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2222      	movs	r2, #34	; 0x22
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006928:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0220 	orr.w	r2, r2, #32
 8006948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006958:	b480      	push	{r7}
 800695a:	b095      	sub	sp, #84	; 0x54
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006980:	643a      	str	r2, [r7, #64]	; 0x40
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d119      	bne.n	8006a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	330c      	adds	r3, #12
 80069ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f0:	61ba      	str	r2, [r7, #24]
 80069f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e5      	bne.n	80069d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a12:	bf00      	nop
 8006a14:	3754      	adds	r7, #84	; 0x54
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff fecb 	bl	80067d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b21      	cmp	r3, #33	; 0x21
 8006a58:	d13e      	bne.n	8006ad8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d114      	bne.n	8006a8e <UART_Transmit_IT+0x48>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d110      	bne.n	8006a8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	1c9a      	adds	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	621a      	str	r2, [r3, #32]
 8006a8c:	e008      	b.n	8006aa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6211      	str	r1, [r2, #32]
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4619      	mov	r1, r3
 8006aae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10f      	bne.n	8006ad4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e000      	b.n	8006ada <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006afc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fe5a 	bl	80067c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b08c      	sub	sp, #48	; 0x30
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b22      	cmp	r3, #34	; 0x22
 8006b28:	f040 80ab 	bne.w	8006c82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b34:	d117      	bne.n	8006b66 <UART_Receive_IT+0x50>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d113      	bne.n	8006b66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	1c9a      	adds	r2, r3, #2
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28
 8006b64:	e026      	b.n	8006bb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d007      	beq.n	8006b8a <UART_Receive_IT+0x74>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <UART_Receive_IT+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e008      	b.n	8006baa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d15a      	bne.n	8006c7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0220 	bic.w	r2, r2, #32
 8006bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d135      	bne.n	8006c74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f023 0310 	bic.w	r3, r3, #16
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2e:	623a      	str	r2, [r7, #32]
 8006c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e5      	bne.n	8006c0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d10a      	bne.n	8006c66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fdbb 	bl	80067e8 <HAL_UARTEx_RxEventCallback>
 8006c72:	e002      	b.n	8006c7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fa fc25 	bl	80014c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e002      	b.n	8006c84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e000      	b.n	8006c84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c82:	2302      	movs	r3, #2
  }
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3730      	adds	r7, #48	; 0x30
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c90:	b0c0      	sub	sp, #256	; 0x100
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca8:	68d9      	ldr	r1, [r3, #12]
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	ea40 0301 	orr.w	r3, r0, r1
 8006cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ce4:	f021 010c 	bic.w	r1, r1, #12
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cf2:	430b      	orrs	r3, r1
 8006cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	6999      	ldr	r1, [r3, #24]
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	ea40 0301 	orr.w	r3, r0, r1
 8006d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4b8f      	ldr	r3, [pc, #572]	; (8006f58 <UART_SetConfig+0x2cc>)
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d005      	beq.n	8006d2c <UART_SetConfig+0xa0>
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b8d      	ldr	r3, [pc, #564]	; (8006f5c <UART_SetConfig+0x2d0>)
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d104      	bne.n	8006d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d2c:	f7fd ffde 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 8006d30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d34:	e003      	b.n	8006d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d36:	f7fd ffc5 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	f040 810c 	bne.w	8006f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	1891      	adds	r1, r2, r2
 8006d64:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d66:	415b      	adcs	r3, r3
 8006d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d6e:	4621      	mov	r1, r4
 8006d70:	eb12 0801 	adds.w	r8, r2, r1
 8006d74:	4629      	mov	r1, r5
 8006d76:	eb43 0901 	adc.w	r9, r3, r1
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d8e:	4690      	mov	r8, r2
 8006d90:	4699      	mov	r9, r3
 8006d92:	4623      	mov	r3, r4
 8006d94:	eb18 0303 	adds.w	r3, r8, r3
 8006d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d9c:	462b      	mov	r3, r5
 8006d9e:	eb49 0303 	adc.w	r3, r9, r3
 8006da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006db2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dba:	460b      	mov	r3, r1
 8006dbc:	18db      	adds	r3, r3, r3
 8006dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	eb42 0303 	adc.w	r3, r2, r3
 8006dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006dd0:	f7f9 ff6a 	bl	8000ca8 <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4b61      	ldr	r3, [pc, #388]	; (8006f60 <UART_SetConfig+0x2d4>)
 8006dda:	fba3 2302 	umull	r2, r3, r3, r2
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	011c      	lsls	r4, r3, #4
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006df4:	4642      	mov	r2, r8
 8006df6:	464b      	mov	r3, r9
 8006df8:	1891      	adds	r1, r2, r2
 8006dfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8006dfc:	415b      	adcs	r3, r3
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e04:	4641      	mov	r1, r8
 8006e06:	eb12 0a01 	adds.w	sl, r2, r1
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e10:	f04f 0200 	mov.w	r2, #0
 8006e14:	f04f 0300 	mov.w	r3, #0
 8006e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e24:	4692      	mov	sl, r2
 8006e26:	469b      	mov	fp, r3
 8006e28:	4643      	mov	r3, r8
 8006e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e32:	464b      	mov	r3, r9
 8006e34:	eb4b 0303 	adc.w	r3, fp, r3
 8006e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e50:	460b      	mov	r3, r1
 8006e52:	18db      	adds	r3, r3, r3
 8006e54:	643b      	str	r3, [r7, #64]	; 0x40
 8006e56:	4613      	mov	r3, r2
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e66:	f7f9 ff1f 	bl	8000ca8 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <UART_SetConfig+0x2d4>)
 8006e72:	fba3 2301 	umull	r2, r3, r3, r1
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	2264      	movs	r2, #100	; 0x64
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	1acb      	subs	r3, r1, r3
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e86:	4b36      	ldr	r3, [pc, #216]	; (8006f60 <UART_SetConfig+0x2d4>)
 8006e88:	fba3 2302 	umull	r2, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e94:	441c      	add	r4, r3
 8006e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	1891      	adds	r1, r2, r2
 8006eae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006eb0:	415b      	adcs	r3, r3
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006eb8:	4641      	mov	r1, r8
 8006eba:	1851      	adds	r1, r2, r1
 8006ebc:	6339      	str	r1, [r7, #48]	; 0x30
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	414b      	adcs	r3, r1
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	00cb      	lsls	r3, r1, #3
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eda:	4651      	mov	r1, sl
 8006edc:	00ca      	lsls	r2, r1, #3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	189b      	adds	r3, r3, r2
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eec:	464b      	mov	r3, r9
 8006eee:	460a      	mov	r2, r1
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	18db      	adds	r3, r3, r3
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f12:	4613      	mov	r3, r2
 8006f14:	eb42 0303 	adc.w	r3, r2, r3
 8006f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f22:	f7f9 fec1 	bl	8000ca8 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	; (8006f60 <UART_SetConfig+0x2d4>)
 8006f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	2164      	movs	r1, #100	; 0x64
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	3332      	adds	r3, #50	; 0x32
 8006f3e:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <UART_SetConfig+0x2d4>)
 8006f40:	fba2 2303 	umull	r2, r3, r2, r3
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	f003 0207 	and.w	r2, r3, #7
 8006f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4422      	add	r2, r4
 8006f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f54:	e106      	b.n	8007164 <UART_SetConfig+0x4d8>
 8006f56:	bf00      	nop
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	40011400 	.word	0x40011400
 8006f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f76:	4642      	mov	r2, r8
 8006f78:	464b      	mov	r3, r9
 8006f7a:	1891      	adds	r1, r2, r2
 8006f7c:	6239      	str	r1, [r7, #32]
 8006f7e:	415b      	adcs	r3, r3
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
 8006f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f86:	4641      	mov	r1, r8
 8006f88:	1854      	adds	r4, r2, r1
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	eb43 0501 	adc.w	r5, r3, r1
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	00eb      	lsls	r3, r5, #3
 8006f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f9e:	00e2      	lsls	r2, r4, #3
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	461d      	mov	r5, r3
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	18e3      	adds	r3, r4, r3
 8006fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fac:	464b      	mov	r3, r9
 8006fae:	eb45 0303 	adc.w	r3, r5, r3
 8006fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	008b      	lsls	r3, r1, #2
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fdc:	4621      	mov	r1, r4
 8006fde:	008a      	lsls	r2, r1, #2
 8006fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006fe4:	f7f9 fe60 	bl	8000ca8 <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4b60      	ldr	r3, [pc, #384]	; (8007170 <UART_SetConfig+0x4e4>)
 8006fee:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	011c      	lsls	r4, r3, #4
 8006ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007000:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	1891      	adds	r1, r2, r2
 800700e:	61b9      	str	r1, [r7, #24]
 8007010:	415b      	adcs	r3, r3
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007018:	4641      	mov	r1, r8
 800701a:	1851      	adds	r1, r2, r1
 800701c:	6139      	str	r1, [r7, #16]
 800701e:	4649      	mov	r1, r9
 8007020:	414b      	adcs	r3, r1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007030:	4659      	mov	r1, fp
 8007032:	00cb      	lsls	r3, r1, #3
 8007034:	4651      	mov	r1, sl
 8007036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703a:	4651      	mov	r1, sl
 800703c:	00ca      	lsls	r2, r1, #3
 800703e:	4610      	mov	r0, r2
 8007040:	4619      	mov	r1, r3
 8007042:	4603      	mov	r3, r0
 8007044:	4642      	mov	r2, r8
 8007046:	189b      	adds	r3, r3, r2
 8007048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800704c:	464b      	mov	r3, r9
 800704e:	460a      	mov	r2, r1
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	67bb      	str	r3, [r7, #120]	; 0x78
 8007062:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007070:	4649      	mov	r1, r9
 8007072:	008b      	lsls	r3, r1, #2
 8007074:	4641      	mov	r1, r8
 8007076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800707a:	4641      	mov	r1, r8
 800707c:	008a      	lsls	r2, r1, #2
 800707e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007082:	f7f9 fe11 	bl	8000ca8 <__aeabi_uldivmod>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4611      	mov	r1, r2
 800708c:	4b38      	ldr	r3, [pc, #224]	; (8007170 <UART_SetConfig+0x4e4>)
 800708e:	fba3 2301 	umull	r2, r3, r3, r1
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	2264      	movs	r2, #100	; 0x64
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	1acb      	subs	r3, r1, r3
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	3332      	adds	r3, #50	; 0x32
 80070a0:	4a33      	ldr	r2, [pc, #204]	; (8007170 <UART_SetConfig+0x4e4>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070ac:	441c      	add	r4, r3
 80070ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b2:	2200      	movs	r2, #0
 80070b4:	673b      	str	r3, [r7, #112]	; 0x70
 80070b6:	677a      	str	r2, [r7, #116]	; 0x74
 80070b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070bc:	4642      	mov	r2, r8
 80070be:	464b      	mov	r3, r9
 80070c0:	1891      	adds	r1, r2, r2
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	415b      	adcs	r3, r3
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070cc:	4641      	mov	r1, r8
 80070ce:	1851      	adds	r1, r2, r1
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	4649      	mov	r1, r9
 80070d4:	414b      	adcs	r3, r1
 80070d6:	607b      	str	r3, [r7, #4]
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070e4:	4659      	mov	r1, fp
 80070e6:	00cb      	lsls	r3, r1, #3
 80070e8:	4651      	mov	r1, sl
 80070ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ee:	4651      	mov	r1, sl
 80070f0:	00ca      	lsls	r2, r1, #3
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	4642      	mov	r2, r8
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fe:	464b      	mov	r3, r9
 8007100:	460a      	mov	r2, r1
 8007102:	eb42 0303 	adc.w	r3, r2, r3
 8007106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	663b      	str	r3, [r7, #96]	; 0x60
 8007112:	667a      	str	r2, [r7, #100]	; 0x64
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007120:	4649      	mov	r1, r9
 8007122:	008b      	lsls	r3, r1, #2
 8007124:	4641      	mov	r1, r8
 8007126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800712a:	4641      	mov	r1, r8
 800712c:	008a      	lsls	r2, r1, #2
 800712e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007132:	f7f9 fdb9 	bl	8000ca8 <__aeabi_uldivmod>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <UART_SetConfig+0x4e4>)
 800713c:	fba3 1302 	umull	r1, r3, r3, r2
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	2164      	movs	r1, #100	; 0x64
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	3332      	adds	r3, #50	; 0x32
 800714e:	4a08      	ldr	r2, [pc, #32]	; (8007170 <UART_SetConfig+0x4e4>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	095b      	lsrs	r3, r3, #5
 8007156:	f003 020f 	and.w	r2, r3, #15
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4422      	add	r2, r4
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800716a:	46bd      	mov	sp, r7
 800716c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007170:	51eb851f 	.word	0x51eb851f

08007174 <atoi>:
 8007174:	220a      	movs	r2, #10
 8007176:	2100      	movs	r1, #0
 8007178:	f000 b940 	b.w	80073fc <strtol>

0800717c <malloc>:
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <malloc+0xc>)
 800717e:	4601      	mov	r1, r0
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f000 b82b 	b.w	80071dc <_malloc_r>
 8007186:	bf00      	nop
 8007188:	2000006c 	.word	0x2000006c

0800718c <free>:
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <free+0xc>)
 800718e:	4601      	mov	r1, r0
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	f002 b803 	b.w	800919c <_free_r>
 8007196:	bf00      	nop
 8007198:	2000006c 	.word	0x2000006c

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0e      	ldr	r6, [pc, #56]	; (80071d8 <sbrk_aligned+0x3c>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f001 f920 	bl	80083ec <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f001 f91b 	bl	80083ec <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d00a      	beq.n	80071d0 <sbrk_aligned+0x34>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d007      	beq.n	80071d4 <sbrk_aligned+0x38>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f001 f910 	bl	80083ec <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d101      	bne.n	80071d4 <sbrk_aligned+0x38>
 80071d0:	f04f 34ff 	mov.w	r4, #4294967295
 80071d4:	4620      	mov	r0, r4
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	20000564 	.word	0x20000564

080071dc <_malloc_r>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	f025 0503 	bic.w	r5, r5, #3
 80071e6:	3508      	adds	r5, #8
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	bf38      	it	cc
 80071ec:	250c      	movcc	r5, #12
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	4607      	mov	r7, r0
 80071f2:	db01      	blt.n	80071f8 <_malloc_r+0x1c>
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d905      	bls.n	8007204 <_malloc_r+0x28>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	2600      	movs	r6, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007204:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072d8 <_malloc_r+0xfc>
 8007208:	f000 f868 	bl	80072dc <__malloc_lock>
 800720c:	f8d8 3000 	ldr.w	r3, [r8]
 8007210:	461c      	mov	r4, r3
 8007212:	bb5c      	cbnz	r4, 800726c <_malloc_r+0x90>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ffc0 	bl	800719c <sbrk_aligned>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	4604      	mov	r4, r0
 8007220:	d155      	bne.n	80072ce <_malloc_r+0xf2>
 8007222:	f8d8 4000 	ldr.w	r4, [r8]
 8007226:	4626      	mov	r6, r4
 8007228:	2e00      	cmp	r6, #0
 800722a:	d145      	bne.n	80072b8 <_malloc_r+0xdc>
 800722c:	2c00      	cmp	r4, #0
 800722e:	d048      	beq.n	80072c2 <_malloc_r+0xe6>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	4631      	mov	r1, r6
 8007234:	4638      	mov	r0, r7
 8007236:	eb04 0903 	add.w	r9, r4, r3
 800723a:	f001 f8d7 	bl	80083ec <_sbrk_r>
 800723e:	4581      	cmp	r9, r0
 8007240:	d13f      	bne.n	80072c2 <_malloc_r+0xe6>
 8007242:	6821      	ldr	r1, [r4, #0]
 8007244:	1a6d      	subs	r5, r5, r1
 8007246:	4629      	mov	r1, r5
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ffa7 	bl	800719c <sbrk_aligned>
 800724e:	3001      	adds	r0, #1
 8007250:	d037      	beq.n	80072c2 <_malloc_r+0xe6>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	442b      	add	r3, r5
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	f8d8 3000 	ldr.w	r3, [r8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d038      	beq.n	80072d2 <_malloc_r+0xf6>
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	42a2      	cmp	r2, r4
 8007264:	d12b      	bne.n	80072be <_malloc_r+0xe2>
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e00f      	b.n	800728c <_malloc_r+0xb0>
 800726c:	6822      	ldr	r2, [r4, #0]
 800726e:	1b52      	subs	r2, r2, r5
 8007270:	d41f      	bmi.n	80072b2 <_malloc_r+0xd6>
 8007272:	2a0b      	cmp	r2, #11
 8007274:	d917      	bls.n	80072a6 <_malloc_r+0xca>
 8007276:	1961      	adds	r1, r4, r5
 8007278:	42a3      	cmp	r3, r4
 800727a:	6025      	str	r5, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	6059      	strne	r1, [r3, #4]
 8007280:	6863      	ldr	r3, [r4, #4]
 8007282:	bf08      	it	eq
 8007284:	f8c8 1000 	streq.w	r1, [r8]
 8007288:	5162      	str	r2, [r4, r5]
 800728a:	604b      	str	r3, [r1, #4]
 800728c:	4638      	mov	r0, r7
 800728e:	f104 060b 	add.w	r6, r4, #11
 8007292:	f000 f829 	bl	80072e8 <__malloc_unlock>
 8007296:	f026 0607 	bic.w	r6, r6, #7
 800729a:	1d23      	adds	r3, r4, #4
 800729c:	1af2      	subs	r2, r6, r3
 800729e:	d0ae      	beq.n	80071fe <_malloc_r+0x22>
 80072a0:	1b9b      	subs	r3, r3, r6
 80072a2:	50a3      	str	r3, [r4, r2]
 80072a4:	e7ab      	b.n	80071fe <_malloc_r+0x22>
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6862      	ldr	r2, [r4, #4]
 80072aa:	d1dd      	bne.n	8007268 <_malloc_r+0x8c>
 80072ac:	f8c8 2000 	str.w	r2, [r8]
 80072b0:	e7ec      	b.n	800728c <_malloc_r+0xb0>
 80072b2:	4623      	mov	r3, r4
 80072b4:	6864      	ldr	r4, [r4, #4]
 80072b6:	e7ac      	b.n	8007212 <_malloc_r+0x36>
 80072b8:	4634      	mov	r4, r6
 80072ba:	6876      	ldr	r6, [r6, #4]
 80072bc:	e7b4      	b.n	8007228 <_malloc_r+0x4c>
 80072be:	4613      	mov	r3, r2
 80072c0:	e7cc      	b.n	800725c <_malloc_r+0x80>
 80072c2:	230c      	movs	r3, #12
 80072c4:	603b      	str	r3, [r7, #0]
 80072c6:	4638      	mov	r0, r7
 80072c8:	f000 f80e 	bl	80072e8 <__malloc_unlock>
 80072cc:	e797      	b.n	80071fe <_malloc_r+0x22>
 80072ce:	6025      	str	r5, [r4, #0]
 80072d0:	e7dc      	b.n	800728c <_malloc_r+0xb0>
 80072d2:	605b      	str	r3, [r3, #4]
 80072d4:	deff      	udf	#255	; 0xff
 80072d6:	bf00      	nop
 80072d8:	20000560 	.word	0x20000560

080072dc <__malloc_lock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__malloc_lock+0x8>)
 80072de:	f001 b8d2 	b.w	8008486 <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	200006a8 	.word	0x200006a8

080072e8 <__malloc_unlock>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__malloc_unlock+0x8>)
 80072ea:	f001 b8cd 	b.w	8008488 <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	200006a8 	.word	0x200006a8

080072f4 <_strtol_l.constprop.0>:
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fa:	d001      	beq.n	8007300 <_strtol_l.constprop.0+0xc>
 80072fc:	2b24      	cmp	r3, #36	; 0x24
 80072fe:	d906      	bls.n	800730e <_strtol_l.constprop.0+0x1a>
 8007300:	f001 f896 	bl	8008430 <__errno>
 8007304:	2316      	movs	r3, #22
 8007306:	6003      	str	r3, [r0, #0]
 8007308:	2000      	movs	r0, #0
 800730a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80073f4 <_strtol_l.constprop.0+0x100>
 8007312:	460d      	mov	r5, r1
 8007314:	462e      	mov	r6, r5
 8007316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800731a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800731e:	f017 0708 	ands.w	r7, r7, #8
 8007322:	d1f7      	bne.n	8007314 <_strtol_l.constprop.0+0x20>
 8007324:	2c2d      	cmp	r4, #45	; 0x2d
 8007326:	d132      	bne.n	800738e <_strtol_l.constprop.0+0x9a>
 8007328:	782c      	ldrb	r4, [r5, #0]
 800732a:	2701      	movs	r7, #1
 800732c:	1cb5      	adds	r5, r6, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05b      	beq.n	80073ea <_strtol_l.constprop.0+0xf6>
 8007332:	2b10      	cmp	r3, #16
 8007334:	d109      	bne.n	800734a <_strtol_l.constprop.0+0x56>
 8007336:	2c30      	cmp	r4, #48	; 0x30
 8007338:	d107      	bne.n	800734a <_strtol_l.constprop.0+0x56>
 800733a:	782c      	ldrb	r4, [r5, #0]
 800733c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007340:	2c58      	cmp	r4, #88	; 0x58
 8007342:	d14d      	bne.n	80073e0 <_strtol_l.constprop.0+0xec>
 8007344:	786c      	ldrb	r4, [r5, #1]
 8007346:	2310      	movs	r3, #16
 8007348:	3502      	adds	r5, #2
 800734a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800734e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007352:	f04f 0e00 	mov.w	lr, #0
 8007356:	fbb8 f9f3 	udiv	r9, r8, r3
 800735a:	4676      	mov	r6, lr
 800735c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007360:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007364:	f1bc 0f09 	cmp.w	ip, #9
 8007368:	d816      	bhi.n	8007398 <_strtol_l.constprop.0+0xa4>
 800736a:	4664      	mov	r4, ip
 800736c:	42a3      	cmp	r3, r4
 800736e:	dd24      	ble.n	80073ba <_strtol_l.constprop.0+0xc6>
 8007370:	f1be 3fff 	cmp.w	lr, #4294967295
 8007374:	d008      	beq.n	8007388 <_strtol_l.constprop.0+0x94>
 8007376:	45b1      	cmp	r9, r6
 8007378:	d31c      	bcc.n	80073b4 <_strtol_l.constprop.0+0xc0>
 800737a:	d101      	bne.n	8007380 <_strtol_l.constprop.0+0x8c>
 800737c:	45a2      	cmp	sl, r4
 800737e:	db19      	blt.n	80073b4 <_strtol_l.constprop.0+0xc0>
 8007380:	fb06 4603 	mla	r6, r6, r3, r4
 8007384:	f04f 0e01 	mov.w	lr, #1
 8007388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800738c:	e7e8      	b.n	8007360 <_strtol_l.constprop.0+0x6c>
 800738e:	2c2b      	cmp	r4, #43	; 0x2b
 8007390:	bf04      	itt	eq
 8007392:	782c      	ldrbeq	r4, [r5, #0]
 8007394:	1cb5      	addeq	r5, r6, #2
 8007396:	e7ca      	b.n	800732e <_strtol_l.constprop.0+0x3a>
 8007398:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800739c:	f1bc 0f19 	cmp.w	ip, #25
 80073a0:	d801      	bhi.n	80073a6 <_strtol_l.constprop.0+0xb2>
 80073a2:	3c37      	subs	r4, #55	; 0x37
 80073a4:	e7e2      	b.n	800736c <_strtol_l.constprop.0+0x78>
 80073a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80073aa:	f1bc 0f19 	cmp.w	ip, #25
 80073ae:	d804      	bhi.n	80073ba <_strtol_l.constprop.0+0xc6>
 80073b0:	3c57      	subs	r4, #87	; 0x57
 80073b2:	e7db      	b.n	800736c <_strtol_l.constprop.0+0x78>
 80073b4:	f04f 3eff 	mov.w	lr, #4294967295
 80073b8:	e7e6      	b.n	8007388 <_strtol_l.constprop.0+0x94>
 80073ba:	f1be 3fff 	cmp.w	lr, #4294967295
 80073be:	d105      	bne.n	80073cc <_strtol_l.constprop.0+0xd8>
 80073c0:	2322      	movs	r3, #34	; 0x22
 80073c2:	6003      	str	r3, [r0, #0]
 80073c4:	4646      	mov	r6, r8
 80073c6:	b942      	cbnz	r2, 80073da <_strtol_l.constprop.0+0xe6>
 80073c8:	4630      	mov	r0, r6
 80073ca:	e79e      	b.n	800730a <_strtol_l.constprop.0+0x16>
 80073cc:	b107      	cbz	r7, 80073d0 <_strtol_l.constprop.0+0xdc>
 80073ce:	4276      	negs	r6, r6
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d0f9      	beq.n	80073c8 <_strtol_l.constprop.0+0xd4>
 80073d4:	f1be 0f00 	cmp.w	lr, #0
 80073d8:	d000      	beq.n	80073dc <_strtol_l.constprop.0+0xe8>
 80073da:	1e69      	subs	r1, r5, #1
 80073dc:	6011      	str	r1, [r2, #0]
 80073de:	e7f3      	b.n	80073c8 <_strtol_l.constprop.0+0xd4>
 80073e0:	2430      	movs	r4, #48	; 0x30
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1b1      	bne.n	800734a <_strtol_l.constprop.0+0x56>
 80073e6:	2308      	movs	r3, #8
 80073e8:	e7af      	b.n	800734a <_strtol_l.constprop.0+0x56>
 80073ea:	2c30      	cmp	r4, #48	; 0x30
 80073ec:	d0a5      	beq.n	800733a <_strtol_l.constprop.0+0x46>
 80073ee:	230a      	movs	r3, #10
 80073f0:	e7ab      	b.n	800734a <_strtol_l.constprop.0+0x56>
 80073f2:	bf00      	nop
 80073f4:	0800bbd5 	.word	0x0800bbd5

080073f8 <_strtol_r>:
 80073f8:	f7ff bf7c 	b.w	80072f4 <_strtol_l.constprop.0>

080073fc <strtol>:
 80073fc:	4613      	mov	r3, r2
 80073fe:	460a      	mov	r2, r1
 8007400:	4601      	mov	r1, r0
 8007402:	4802      	ldr	r0, [pc, #8]	; (800740c <strtol+0x10>)
 8007404:	6800      	ldr	r0, [r0, #0]
 8007406:	f7ff bf75 	b.w	80072f4 <_strtol_l.constprop.0>
 800740a:	bf00      	nop
 800740c:	2000006c 	.word	0x2000006c

08007410 <__cvt>:
 8007410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	ec55 4b10 	vmov	r4, r5, d0
 8007418:	2d00      	cmp	r5, #0
 800741a:	460e      	mov	r6, r1
 800741c:	4619      	mov	r1, r3
 800741e:	462b      	mov	r3, r5
 8007420:	bfbb      	ittet	lt
 8007422:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007426:	461d      	movlt	r5, r3
 8007428:	2300      	movge	r3, #0
 800742a:	232d      	movlt	r3, #45	; 0x2d
 800742c:	700b      	strb	r3, [r1, #0]
 800742e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007430:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007434:	4691      	mov	r9, r2
 8007436:	f023 0820 	bic.w	r8, r3, #32
 800743a:	bfbc      	itt	lt
 800743c:	4622      	movlt	r2, r4
 800743e:	4614      	movlt	r4, r2
 8007440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007444:	d005      	beq.n	8007452 <__cvt+0x42>
 8007446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800744a:	d100      	bne.n	800744e <__cvt+0x3e>
 800744c:	3601      	adds	r6, #1
 800744e:	2102      	movs	r1, #2
 8007450:	e000      	b.n	8007454 <__cvt+0x44>
 8007452:	2103      	movs	r1, #3
 8007454:	ab03      	add	r3, sp, #12
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	ab02      	add	r3, sp, #8
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	ec45 4b10 	vmov	d0, r4, r5
 8007460:	4653      	mov	r3, sl
 8007462:	4632      	mov	r2, r6
 8007464:	f001 f8a8 	bl	80085b8 <_dtoa_r>
 8007468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800746c:	4607      	mov	r7, r0
 800746e:	d102      	bne.n	8007476 <__cvt+0x66>
 8007470:	f019 0f01 	tst.w	r9, #1
 8007474:	d022      	beq.n	80074bc <__cvt+0xac>
 8007476:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800747a:	eb07 0906 	add.w	r9, r7, r6
 800747e:	d110      	bne.n	80074a2 <__cvt+0x92>
 8007480:	783b      	ldrb	r3, [r7, #0]
 8007482:	2b30      	cmp	r3, #48	; 0x30
 8007484:	d10a      	bne.n	800749c <__cvt+0x8c>
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f9 fb2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007492:	b918      	cbnz	r0, 800749c <__cvt+0x8c>
 8007494:	f1c6 0601 	rsb	r6, r6, #1
 8007498:	f8ca 6000 	str.w	r6, [sl]
 800749c:	f8da 3000 	ldr.w	r3, [sl]
 80074a0:	4499      	add	r9, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	2300      	movs	r3, #0
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f9 fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80074ae:	b108      	cbz	r0, 80074b4 <__cvt+0xa4>
 80074b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80074b4:	2230      	movs	r2, #48	; 0x30
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	454b      	cmp	r3, r9
 80074ba:	d307      	bcc.n	80074cc <__cvt+0xbc>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074c0:	1bdb      	subs	r3, r3, r7
 80074c2:	4638      	mov	r0, r7
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	b004      	add	sp, #16
 80074c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074cc:	1c59      	adds	r1, r3, #1
 80074ce:	9103      	str	r1, [sp, #12]
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e7f0      	b.n	80074b6 <__cvt+0xa6>

080074d4 <__exponent>:
 80074d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074d6:	4603      	mov	r3, r0
 80074d8:	2900      	cmp	r1, #0
 80074da:	bfb8      	it	lt
 80074dc:	4249      	neglt	r1, r1
 80074de:	f803 2b02 	strb.w	r2, [r3], #2
 80074e2:	bfb4      	ite	lt
 80074e4:	222d      	movlt	r2, #45	; 0x2d
 80074e6:	222b      	movge	r2, #43	; 0x2b
 80074e8:	2909      	cmp	r1, #9
 80074ea:	7042      	strb	r2, [r0, #1]
 80074ec:	dd2a      	ble.n	8007544 <__exponent+0x70>
 80074ee:	f10d 0207 	add.w	r2, sp, #7
 80074f2:	4617      	mov	r7, r2
 80074f4:	260a      	movs	r6, #10
 80074f6:	4694      	mov	ip, r2
 80074f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80074fc:	fb06 1415 	mls	r4, r6, r5, r1
 8007500:	3430      	adds	r4, #48	; 0x30
 8007502:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007506:	460c      	mov	r4, r1
 8007508:	2c63      	cmp	r4, #99	; 0x63
 800750a:	f102 32ff 	add.w	r2, r2, #4294967295
 800750e:	4629      	mov	r1, r5
 8007510:	dcf1      	bgt.n	80074f6 <__exponent+0x22>
 8007512:	3130      	adds	r1, #48	; 0x30
 8007514:	f1ac 0402 	sub.w	r4, ip, #2
 8007518:	f802 1c01 	strb.w	r1, [r2, #-1]
 800751c:	1c41      	adds	r1, r0, #1
 800751e:	4622      	mov	r2, r4
 8007520:	42ba      	cmp	r2, r7
 8007522:	d30a      	bcc.n	800753a <__exponent+0x66>
 8007524:	f10d 0209 	add.w	r2, sp, #9
 8007528:	eba2 020c 	sub.w	r2, r2, ip
 800752c:	42bc      	cmp	r4, r7
 800752e:	bf88      	it	hi
 8007530:	2200      	movhi	r2, #0
 8007532:	4413      	add	r3, r2
 8007534:	1a18      	subs	r0, r3, r0
 8007536:	b003      	add	sp, #12
 8007538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800753e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007542:	e7ed      	b.n	8007520 <__exponent+0x4c>
 8007544:	2330      	movs	r3, #48	; 0x30
 8007546:	3130      	adds	r1, #48	; 0x30
 8007548:	7083      	strb	r3, [r0, #2]
 800754a:	70c1      	strb	r1, [r0, #3]
 800754c:	1d03      	adds	r3, r0, #4
 800754e:	e7f1      	b.n	8007534 <__exponent+0x60>

08007550 <_printf_float>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	ed2d 8b02 	vpush	{d8}
 8007558:	b08d      	sub	sp, #52	; 0x34
 800755a:	460c      	mov	r4, r1
 800755c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007560:	4616      	mov	r6, r2
 8007562:	461f      	mov	r7, r3
 8007564:	4605      	mov	r5, r0
 8007566:	f000 ff09 	bl	800837c <_localeconv_r>
 800756a:	f8d0 a000 	ldr.w	sl, [r0]
 800756e:	4650      	mov	r0, sl
 8007570:	f7f8 fe8e 	bl	8000290 <strlen>
 8007574:	2300      	movs	r3, #0
 8007576:	930a      	str	r3, [sp, #40]	; 0x28
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	f8d8 3000 	ldr.w	r3, [r8]
 8007580:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007584:	3307      	adds	r3, #7
 8007586:	f023 0307 	bic.w	r3, r3, #7
 800758a:	f103 0208 	add.w	r2, r3, #8
 800758e:	f8c8 2000 	str.w	r2, [r8]
 8007592:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007596:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800759a:	9307      	str	r3, [sp, #28]
 800759c:	f8cd 8018 	str.w	r8, [sp, #24]
 80075a0:	ee08 0a10 	vmov	s16, r0
 80075a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80075a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ac:	4b9e      	ldr	r3, [pc, #632]	; (8007828 <_printf_float+0x2d8>)
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295
 80075b2:	f7f9 facb 	bl	8000b4c <__aeabi_dcmpun>
 80075b6:	bb88      	cbnz	r0, 800761c <_printf_float+0xcc>
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	4b9a      	ldr	r3, [pc, #616]	; (8007828 <_printf_float+0x2d8>)
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	f7f9 faa5 	bl	8000b10 <__aeabi_dcmple>
 80075c6:	bb48      	cbnz	r0, 800761c <_printf_float+0xcc>
 80075c8:	2200      	movs	r2, #0
 80075ca:	2300      	movs	r3, #0
 80075cc:	4640      	mov	r0, r8
 80075ce:	4649      	mov	r1, r9
 80075d0:	f7f9 fa94 	bl	8000afc <__aeabi_dcmplt>
 80075d4:	b110      	cbz	r0, 80075dc <_printf_float+0x8c>
 80075d6:	232d      	movs	r3, #45	; 0x2d
 80075d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075dc:	4a93      	ldr	r2, [pc, #588]	; (800782c <_printf_float+0x2dc>)
 80075de:	4b94      	ldr	r3, [pc, #592]	; (8007830 <_printf_float+0x2e0>)
 80075e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075e4:	bf94      	ite	ls
 80075e6:	4690      	movls	r8, r2
 80075e8:	4698      	movhi	r8, r3
 80075ea:	2303      	movs	r3, #3
 80075ec:	6123      	str	r3, [r4, #16]
 80075ee:	9b05      	ldr	r3, [sp, #20]
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	f04f 0900 	mov.w	r9, #0
 80075fa:	9700      	str	r7, [sp, #0]
 80075fc:	4633      	mov	r3, r6
 80075fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007600:	4621      	mov	r1, r4
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f9da 	bl	80079bc <_printf_common>
 8007608:	3001      	adds	r0, #1
 800760a:	f040 8090 	bne.w	800772e <_printf_float+0x1de>
 800760e:	f04f 30ff 	mov.w	r0, #4294967295
 8007612:	b00d      	add	sp, #52	; 0x34
 8007614:	ecbd 8b02 	vpop	{d8}
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761c:	4642      	mov	r2, r8
 800761e:	464b      	mov	r3, r9
 8007620:	4640      	mov	r0, r8
 8007622:	4649      	mov	r1, r9
 8007624:	f7f9 fa92 	bl	8000b4c <__aeabi_dcmpun>
 8007628:	b140      	cbz	r0, 800763c <_printf_float+0xec>
 800762a:	464b      	mov	r3, r9
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbc      	itt	lt
 8007630:	232d      	movlt	r3, #45	; 0x2d
 8007632:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007636:	4a7f      	ldr	r2, [pc, #508]	; (8007834 <_printf_float+0x2e4>)
 8007638:	4b7f      	ldr	r3, [pc, #508]	; (8007838 <_printf_float+0x2e8>)
 800763a:	e7d1      	b.n	80075e0 <_printf_float+0x90>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007642:	9206      	str	r2, [sp, #24]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	d13f      	bne.n	80076c8 <_printf_float+0x178>
 8007648:	2306      	movs	r3, #6
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	6861      	ldr	r1, [r4, #4]
 8007650:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007654:	2300      	movs	r3, #0
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	ab0a      	add	r3, sp, #40	; 0x28
 800765a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800765e:	ab09      	add	r3, sp, #36	; 0x24
 8007660:	ec49 8b10 	vmov	d0, r8, r9
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800766c:	4628      	mov	r0, r5
 800766e:	f7ff fecf 	bl	8007410 <__cvt>
 8007672:	9b06      	ldr	r3, [sp, #24]
 8007674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007676:	2b47      	cmp	r3, #71	; 0x47
 8007678:	4680      	mov	r8, r0
 800767a:	d108      	bne.n	800768e <_printf_float+0x13e>
 800767c:	1cc8      	adds	r0, r1, #3
 800767e:	db02      	blt.n	8007686 <_printf_float+0x136>
 8007680:	6863      	ldr	r3, [r4, #4]
 8007682:	4299      	cmp	r1, r3
 8007684:	dd41      	ble.n	800770a <_printf_float+0x1ba>
 8007686:	f1ab 0302 	sub.w	r3, fp, #2
 800768a:	fa5f fb83 	uxtb.w	fp, r3
 800768e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007692:	d820      	bhi.n	80076d6 <_printf_float+0x186>
 8007694:	3901      	subs	r1, #1
 8007696:	465a      	mov	r2, fp
 8007698:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800769c:	9109      	str	r1, [sp, #36]	; 0x24
 800769e:	f7ff ff19 	bl	80074d4 <__exponent>
 80076a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076a4:	1813      	adds	r3, r2, r0
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	4681      	mov	r9, r0
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	dc02      	bgt.n	80076b4 <_printf_float+0x164>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d2      	lsls	r2, r2, #31
 80076b2:	d501      	bpl.n	80076b8 <_printf_float+0x168>
 80076b4:	3301      	adds	r3, #1
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d09c      	beq.n	80075fa <_printf_float+0xaa>
 80076c0:	232d      	movs	r3, #45	; 0x2d
 80076c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c6:	e798      	b.n	80075fa <_printf_float+0xaa>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	2a47      	cmp	r2, #71	; 0x47
 80076cc:	d1be      	bne.n	800764c <_printf_float+0xfc>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1bc      	bne.n	800764c <_printf_float+0xfc>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7b9      	b.n	800764a <_printf_float+0xfa>
 80076d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076da:	d118      	bne.n	800770e <_printf_float+0x1be>
 80076dc:	2900      	cmp	r1, #0
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	dd0b      	ble.n	80076fa <_printf_float+0x1aa>
 80076e2:	6121      	str	r1, [r4, #16]
 80076e4:	b913      	cbnz	r3, 80076ec <_printf_float+0x19c>
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	07d0      	lsls	r0, r2, #31
 80076ea:	d502      	bpl.n	80076f2 <_printf_float+0x1a2>
 80076ec:	3301      	adds	r3, #1
 80076ee:	440b      	add	r3, r1
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80076f4:	f04f 0900 	mov.w	r9, #0
 80076f8:	e7de      	b.n	80076b8 <_printf_float+0x168>
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x1b2>
 80076fc:	6822      	ldr	r2, [r4, #0]
 80076fe:	07d2      	lsls	r2, r2, #31
 8007700:	d501      	bpl.n	8007706 <_printf_float+0x1b6>
 8007702:	3302      	adds	r3, #2
 8007704:	e7f4      	b.n	80076f0 <_printf_float+0x1a0>
 8007706:	2301      	movs	r3, #1
 8007708:	e7f2      	b.n	80076f0 <_printf_float+0x1a0>
 800770a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800770e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007710:	4299      	cmp	r1, r3
 8007712:	db05      	blt.n	8007720 <_printf_float+0x1d0>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6121      	str	r1, [r4, #16]
 8007718:	07d8      	lsls	r0, r3, #31
 800771a:	d5ea      	bpl.n	80076f2 <_printf_float+0x1a2>
 800771c:	1c4b      	adds	r3, r1, #1
 800771e:	e7e7      	b.n	80076f0 <_printf_float+0x1a0>
 8007720:	2900      	cmp	r1, #0
 8007722:	bfd4      	ite	le
 8007724:	f1c1 0202 	rsble	r2, r1, #2
 8007728:	2201      	movgt	r2, #1
 800772a:	4413      	add	r3, r2
 800772c:	e7e0      	b.n	80076f0 <_printf_float+0x1a0>
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	055a      	lsls	r2, r3, #21
 8007732:	d407      	bmi.n	8007744 <_printf_float+0x1f4>
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	4642      	mov	r2, r8
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	d12c      	bne.n	800779c <_printf_float+0x24c>
 8007742:	e764      	b.n	800760e <_printf_float+0xbe>
 8007744:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007748:	f240 80e0 	bls.w	800790c <_printf_float+0x3bc>
 800774c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	f7f9 f9c8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d034      	beq.n	80077c6 <_printf_float+0x276>
 800775c:	4a37      	ldr	r2, [pc, #220]	; (800783c <_printf_float+0x2ec>)
 800775e:	2301      	movs	r3, #1
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f af51 	beq.w	800760e <_printf_float+0xbe>
 800776c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007770:	429a      	cmp	r2, r3
 8007772:	db02      	blt.n	800777a <_printf_float+0x22a>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07d8      	lsls	r0, r3, #31
 8007778:	d510      	bpl.n	800779c <_printf_float+0x24c>
 800777a:	ee18 3a10 	vmov	r3, s16
 800777e:	4652      	mov	r2, sl
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af41 	beq.w	800760e <_printf_float+0xbe>
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	f104 091a 	add.w	r9, r4, #26
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	4543      	cmp	r3, r8
 800779a:	dc09      	bgt.n	80077b0 <_printf_float+0x260>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	079b      	lsls	r3, r3, #30
 80077a0:	f100 8107 	bmi.w	80079b2 <_printf_float+0x462>
 80077a4:	68e0      	ldr	r0, [r4, #12]
 80077a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a8:	4298      	cmp	r0, r3
 80077aa:	bfb8      	it	lt
 80077ac:	4618      	movlt	r0, r3
 80077ae:	e730      	b.n	8007612 <_printf_float+0xc2>
 80077b0:	2301      	movs	r3, #1
 80077b2:	464a      	mov	r2, r9
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af27 	beq.w	800760e <_printf_float+0xbe>
 80077c0:	f108 0801 	add.w	r8, r8, #1
 80077c4:	e7e6      	b.n	8007794 <_printf_float+0x244>
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc39      	bgt.n	8007840 <_printf_float+0x2f0>
 80077cc:	4a1b      	ldr	r2, [pc, #108]	; (800783c <_printf_float+0x2ec>)
 80077ce:	2301      	movs	r3, #1
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af19 	beq.w	800760e <_printf_float+0xbe>
 80077dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077e0:	4313      	orrs	r3, r2
 80077e2:	d102      	bne.n	80077ea <_printf_float+0x29a>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07d9      	lsls	r1, r3, #31
 80077e8:	d5d8      	bpl.n	800779c <_printf_float+0x24c>
 80077ea:	ee18 3a10 	vmov	r3, s16
 80077ee:	4652      	mov	r2, sl
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f af09 	beq.w	800760e <_printf_float+0xbe>
 80077fc:	f04f 0900 	mov.w	r9, #0
 8007800:	f104 0a1a 	add.w	sl, r4, #26
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	425b      	negs	r3, r3
 8007808:	454b      	cmp	r3, r9
 800780a:	dc01      	bgt.n	8007810 <_printf_float+0x2c0>
 800780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780e:	e792      	b.n	8007736 <_printf_float+0x1e6>
 8007810:	2301      	movs	r3, #1
 8007812:	4652      	mov	r2, sl
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	f43f aef7 	beq.w	800760e <_printf_float+0xbe>
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	e7ee      	b.n	8007804 <_printf_float+0x2b4>
 8007826:	bf00      	nop
 8007828:	7fefffff 	.word	0x7fefffff
 800782c:	0800bcd5 	.word	0x0800bcd5
 8007830:	0800bcd9 	.word	0x0800bcd9
 8007834:	0800bcdd 	.word	0x0800bcdd
 8007838:	0800bce1 	.word	0x0800bce1
 800783c:	0800bce5 	.word	0x0800bce5
 8007840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007844:	429a      	cmp	r2, r3
 8007846:	bfa8      	it	ge
 8007848:	461a      	movge	r2, r3
 800784a:	2a00      	cmp	r2, #0
 800784c:	4691      	mov	r9, r2
 800784e:	dc37      	bgt.n	80078c0 <_printf_float+0x370>
 8007850:	f04f 0b00 	mov.w	fp, #0
 8007854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007858:	f104 021a 	add.w	r2, r4, #26
 800785c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	eba3 0309 	sub.w	r3, r3, r9
 8007864:	455b      	cmp	r3, fp
 8007866:	dc33      	bgt.n	80078d0 <_printf_float+0x380>
 8007868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786c:	429a      	cmp	r2, r3
 800786e:	db3b      	blt.n	80078e8 <_printf_float+0x398>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d438      	bmi.n	80078e8 <_printf_float+0x398>
 8007876:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800787a:	eba2 0903 	sub.w	r9, r2, r3
 800787e:	9b05      	ldr	r3, [sp, #20]
 8007880:	1ad2      	subs	r2, r2, r3
 8007882:	4591      	cmp	r9, r2
 8007884:	bfa8      	it	ge
 8007886:	4691      	movge	r9, r2
 8007888:	f1b9 0f00 	cmp.w	r9, #0
 800788c:	dc35      	bgt.n	80078fa <_printf_float+0x3aa>
 800788e:	f04f 0800 	mov.w	r8, #0
 8007892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007896:	f104 0a1a 	add.w	sl, r4, #26
 800789a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	eba3 0309 	sub.w	r3, r3, r9
 80078a4:	4543      	cmp	r3, r8
 80078a6:	f77f af79 	ble.w	800779c <_printf_float+0x24c>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4652      	mov	r2, sl
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f aeaa 	beq.w	800760e <_printf_float+0xbe>
 80078ba:	f108 0801 	add.w	r8, r8, #1
 80078be:	e7ec      	b.n	800789a <_printf_float+0x34a>
 80078c0:	4613      	mov	r3, r2
 80078c2:	4631      	mov	r1, r6
 80078c4:	4642      	mov	r2, r8
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	d1c0      	bne.n	8007850 <_printf_float+0x300>
 80078ce:	e69e      	b.n	800760e <_printf_float+0xbe>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	9205      	str	r2, [sp, #20]
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f ae97 	beq.w	800760e <_printf_float+0xbe>
 80078e0:	9a05      	ldr	r2, [sp, #20]
 80078e2:	f10b 0b01 	add.w	fp, fp, #1
 80078e6:	e7b9      	b.n	800785c <_printf_float+0x30c>
 80078e8:	ee18 3a10 	vmov	r3, s16
 80078ec:	4652      	mov	r2, sl
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1be      	bne.n	8007876 <_printf_float+0x326>
 80078f8:	e689      	b.n	800760e <_printf_float+0xbe>
 80078fa:	9a05      	ldr	r2, [sp, #20]
 80078fc:	464b      	mov	r3, r9
 80078fe:	4442      	add	r2, r8
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	d1c1      	bne.n	800788e <_printf_float+0x33e>
 800790a:	e680      	b.n	800760e <_printf_float+0xbe>
 800790c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800790e:	2a01      	cmp	r2, #1
 8007910:	dc01      	bgt.n	8007916 <_printf_float+0x3c6>
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d53a      	bpl.n	800798c <_printf_float+0x43c>
 8007916:	2301      	movs	r3, #1
 8007918:	4642      	mov	r2, r8
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f ae74 	beq.w	800760e <_printf_float+0xbe>
 8007926:	ee18 3a10 	vmov	r3, s16
 800792a:	4652      	mov	r2, sl
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f ae6b 	beq.w	800760e <_printf_float+0xbe>
 8007938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800793c:	2200      	movs	r2, #0
 800793e:	2300      	movs	r3, #0
 8007940:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007944:	f7f9 f8d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007948:	b9d8      	cbnz	r0, 8007982 <_printf_float+0x432>
 800794a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800794e:	f108 0201 	add.w	r2, r8, #1
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	d10e      	bne.n	800797a <_printf_float+0x42a>
 800795c:	e657      	b.n	800760e <_printf_float+0xbe>
 800795e:	2301      	movs	r3, #1
 8007960:	4652      	mov	r2, sl
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae50 	beq.w	800760e <_printf_float+0xbe>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007974:	3b01      	subs	r3, #1
 8007976:	4543      	cmp	r3, r8
 8007978:	dcf1      	bgt.n	800795e <_printf_float+0x40e>
 800797a:	464b      	mov	r3, r9
 800797c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007980:	e6da      	b.n	8007738 <_printf_float+0x1e8>
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	f104 0a1a 	add.w	sl, r4, #26
 800798a:	e7f2      	b.n	8007972 <_printf_float+0x422>
 800798c:	2301      	movs	r3, #1
 800798e:	4642      	mov	r2, r8
 8007990:	e7df      	b.n	8007952 <_printf_float+0x402>
 8007992:	2301      	movs	r3, #1
 8007994:	464a      	mov	r2, r9
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	f43f ae36 	beq.w	800760e <_printf_float+0xbe>
 80079a2:	f108 0801 	add.w	r8, r8, #1
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079aa:	1a5b      	subs	r3, r3, r1
 80079ac:	4543      	cmp	r3, r8
 80079ae:	dcf0      	bgt.n	8007992 <_printf_float+0x442>
 80079b0:	e6f8      	b.n	80077a4 <_printf_float+0x254>
 80079b2:	f04f 0800 	mov.w	r8, #0
 80079b6:	f104 0919 	add.w	r9, r4, #25
 80079ba:	e7f4      	b.n	80079a6 <_printf_float+0x456>

080079bc <_printf_common>:
 80079bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c0:	4616      	mov	r6, r2
 80079c2:	4699      	mov	r9, r3
 80079c4:	688a      	ldr	r2, [r1, #8]
 80079c6:	690b      	ldr	r3, [r1, #16]
 80079c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	bfb8      	it	lt
 80079d0:	4613      	movlt	r3, r2
 80079d2:	6033      	str	r3, [r6, #0]
 80079d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d8:	4607      	mov	r7, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	b10a      	cbz	r2, 80079e2 <_printf_common+0x26>
 80079de:	3301      	adds	r3, #1
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0699      	lsls	r1, r3, #26
 80079e6:	bf42      	ittt	mi
 80079e8:	6833      	ldrmi	r3, [r6, #0]
 80079ea:	3302      	addmi	r3, #2
 80079ec:	6033      	strmi	r3, [r6, #0]
 80079ee:	6825      	ldr	r5, [r4, #0]
 80079f0:	f015 0506 	ands.w	r5, r5, #6
 80079f4:	d106      	bne.n	8007a04 <_printf_common+0x48>
 80079f6:	f104 0a19 	add.w	sl, r4, #25
 80079fa:	68e3      	ldr	r3, [r4, #12]
 80079fc:	6832      	ldr	r2, [r6, #0]
 80079fe:	1a9b      	subs	r3, r3, r2
 8007a00:	42ab      	cmp	r3, r5
 8007a02:	dc26      	bgt.n	8007a52 <_printf_common+0x96>
 8007a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a08:	1e13      	subs	r3, r2, #0
 8007a0a:	6822      	ldr	r2, [r4, #0]
 8007a0c:	bf18      	it	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	0692      	lsls	r2, r2, #26
 8007a12:	d42b      	bmi.n	8007a6c <_printf_common+0xb0>
 8007a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	47c0      	blx	r8
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d01e      	beq.n	8007a60 <_printf_common+0xa4>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	6922      	ldr	r2, [r4, #16]
 8007a26:	f003 0306 	and.w	r3, r3, #6
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	bf02      	ittt	eq
 8007a2e:	68e5      	ldreq	r5, [r4, #12]
 8007a30:	6833      	ldreq	r3, [r6, #0]
 8007a32:	1aed      	subeq	r5, r5, r3
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	bf0c      	ite	eq
 8007a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a3c:	2500      	movne	r5, #0
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	bfc4      	itt	gt
 8007a42:	1a9b      	subgt	r3, r3, r2
 8007a44:	18ed      	addgt	r5, r5, r3
 8007a46:	2600      	movs	r6, #0
 8007a48:	341a      	adds	r4, #26
 8007a4a:	42b5      	cmp	r5, r6
 8007a4c:	d11a      	bne.n	8007a84 <_printf_common+0xc8>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e008      	b.n	8007a64 <_printf_common+0xa8>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4652      	mov	r2, sl
 8007a56:	4649      	mov	r1, r9
 8007a58:	4638      	mov	r0, r7
 8007a5a:	47c0      	blx	r8
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d103      	bne.n	8007a68 <_printf_common+0xac>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	3501      	adds	r5, #1
 8007a6a:	e7c6      	b.n	80079fa <_printf_common+0x3e>
 8007a6c:	18e1      	adds	r1, r4, r3
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	2030      	movs	r0, #48	; 0x30
 8007a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a76:	4422      	add	r2, r4
 8007a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a80:	3302      	adds	r3, #2
 8007a82:	e7c7      	b.n	8007a14 <_printf_common+0x58>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4622      	mov	r2, r4
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c0      	blx	r8
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d0e6      	beq.n	8007a60 <_printf_common+0xa4>
 8007a92:	3601      	adds	r6, #1
 8007a94:	e7d9      	b.n	8007a4a <_printf_common+0x8e>
	...

08007a98 <_printf_i>:
 8007a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	7e0f      	ldrb	r7, [r1, #24]
 8007a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aa0:	2f78      	cmp	r7, #120	; 0x78
 8007aa2:	4691      	mov	r9, r2
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	469a      	mov	sl, r3
 8007aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aae:	d807      	bhi.n	8007ac0 <_printf_i+0x28>
 8007ab0:	2f62      	cmp	r7, #98	; 0x62
 8007ab2:	d80a      	bhi.n	8007aca <_printf_i+0x32>
 8007ab4:	2f00      	cmp	r7, #0
 8007ab6:	f000 80d4 	beq.w	8007c62 <_printf_i+0x1ca>
 8007aba:	2f58      	cmp	r7, #88	; 0x58
 8007abc:	f000 80c0 	beq.w	8007c40 <_printf_i+0x1a8>
 8007ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ac8:	e03a      	b.n	8007b40 <_printf_i+0xa8>
 8007aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ace:	2b15      	cmp	r3, #21
 8007ad0:	d8f6      	bhi.n	8007ac0 <_printf_i+0x28>
 8007ad2:	a101      	add	r1, pc, #4	; (adr r1, 8007ad8 <_printf_i+0x40>)
 8007ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad8:	08007b31 	.word	0x08007b31
 8007adc:	08007b45 	.word	0x08007b45
 8007ae0:	08007ac1 	.word	0x08007ac1
 8007ae4:	08007ac1 	.word	0x08007ac1
 8007ae8:	08007ac1 	.word	0x08007ac1
 8007aec:	08007ac1 	.word	0x08007ac1
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007ac1 	.word	0x08007ac1
 8007af8:	08007ac1 	.word	0x08007ac1
 8007afc:	08007ac1 	.word	0x08007ac1
 8007b00:	08007ac1 	.word	0x08007ac1
 8007b04:	08007c49 	.word	0x08007c49
 8007b08:	08007b71 	.word	0x08007b71
 8007b0c:	08007c03 	.word	0x08007c03
 8007b10:	08007ac1 	.word	0x08007ac1
 8007b14:	08007ac1 	.word	0x08007ac1
 8007b18:	08007c6b 	.word	0x08007c6b
 8007b1c:	08007ac1 	.word	0x08007ac1
 8007b20:	08007b71 	.word	0x08007b71
 8007b24:	08007ac1 	.word	0x08007ac1
 8007b28:	08007ac1 	.word	0x08007ac1
 8007b2c:	08007c0b 	.word	0x08007c0b
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	1d1a      	adds	r2, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	602a      	str	r2, [r5, #0]
 8007b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b40:	2301      	movs	r3, #1
 8007b42:	e09f      	b.n	8007c84 <_printf_i+0x1ec>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	0607      	lsls	r7, r0, #24
 8007b4a:	f103 0104 	add.w	r1, r3, #4
 8007b4e:	6029      	str	r1, [r5, #0]
 8007b50:	d501      	bpl.n	8007b56 <_printf_i+0xbe>
 8007b52:	681e      	ldr	r6, [r3, #0]
 8007b54:	e003      	b.n	8007b5e <_printf_i+0xc6>
 8007b56:	0646      	lsls	r6, r0, #25
 8007b58:	d5fb      	bpl.n	8007b52 <_printf_i+0xba>
 8007b5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	da03      	bge.n	8007b6a <_printf_i+0xd2>
 8007b62:	232d      	movs	r3, #45	; 0x2d
 8007b64:	4276      	negs	r6, r6
 8007b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b6a:	485a      	ldr	r0, [pc, #360]	; (8007cd4 <_printf_i+0x23c>)
 8007b6c:	230a      	movs	r3, #10
 8007b6e:	e012      	b.n	8007b96 <_printf_i+0xfe>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	1d19      	adds	r1, r3, #4
 8007b76:	6029      	str	r1, [r5, #0]
 8007b78:	0605      	lsls	r5, r0, #24
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0xe8>
 8007b7c:	681e      	ldr	r6, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <_printf_i+0xee>
 8007b80:	0641      	lsls	r1, r0, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0xe4>
 8007b84:	881e      	ldrh	r6, [r3, #0]
 8007b86:	4853      	ldr	r0, [pc, #332]	; (8007cd4 <_printf_i+0x23c>)
 8007b88:	2f6f      	cmp	r7, #111	; 0x6f
 8007b8a:	bf0c      	ite	eq
 8007b8c:	2308      	moveq	r3, #8
 8007b8e:	230a      	movne	r3, #10
 8007b90:	2100      	movs	r1, #0
 8007b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b96:	6865      	ldr	r5, [r4, #4]
 8007b98:	60a5      	str	r5, [r4, #8]
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	bfa2      	ittt	ge
 8007b9e:	6821      	ldrge	r1, [r4, #0]
 8007ba0:	f021 0104 	bicge.w	r1, r1, #4
 8007ba4:	6021      	strge	r1, [r4, #0]
 8007ba6:	b90e      	cbnz	r6, 8007bac <_printf_i+0x114>
 8007ba8:	2d00      	cmp	r5, #0
 8007baa:	d04b      	beq.n	8007c44 <_printf_i+0x1ac>
 8007bac:	4615      	mov	r5, r2
 8007bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007bb6:	5dc7      	ldrb	r7, [r0, r7]
 8007bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bbc:	4637      	mov	r7, r6
 8007bbe:	42bb      	cmp	r3, r7
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	d9f4      	bls.n	8007bae <_printf_i+0x116>
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d10b      	bne.n	8007be0 <_printf_i+0x148>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	07de      	lsls	r6, r3, #31
 8007bcc:	d508      	bpl.n	8007be0 <_printf_i+0x148>
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	6861      	ldr	r1, [r4, #4]
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	bfde      	ittt	le
 8007bd6:	2330      	movle	r3, #48	; 0x30
 8007bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007be0:	1b52      	subs	r2, r2, r5
 8007be2:	6122      	str	r2, [r4, #16]
 8007be4:	f8cd a000 	str.w	sl, [sp]
 8007be8:	464b      	mov	r3, r9
 8007bea:	aa03      	add	r2, sp, #12
 8007bec:	4621      	mov	r1, r4
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7ff fee4 	bl	80079bc <_printf_common>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d14a      	bne.n	8007c8e <_printf_i+0x1f6>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	b004      	add	sp, #16
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f043 0320 	orr.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	4833      	ldr	r0, [pc, #204]	; (8007cd8 <_printf_i+0x240>)
 8007c0c:	2778      	movs	r7, #120	; 0x78
 8007c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	6829      	ldr	r1, [r5, #0]
 8007c16:	061f      	lsls	r7, r3, #24
 8007c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c1c:	d402      	bmi.n	8007c24 <_printf_i+0x18c>
 8007c1e:	065f      	lsls	r7, r3, #25
 8007c20:	bf48      	it	mi
 8007c22:	b2b6      	uxthmi	r6, r6
 8007c24:	07df      	lsls	r7, r3, #31
 8007c26:	bf48      	it	mi
 8007c28:	f043 0320 	orrmi.w	r3, r3, #32
 8007c2c:	6029      	str	r1, [r5, #0]
 8007c2e:	bf48      	it	mi
 8007c30:	6023      	strmi	r3, [r4, #0]
 8007c32:	b91e      	cbnz	r6, 8007c3c <_printf_i+0x1a4>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	f023 0320 	bic.w	r3, r3, #32
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	e7a7      	b.n	8007b90 <_printf_i+0xf8>
 8007c40:	4824      	ldr	r0, [pc, #144]	; (8007cd4 <_printf_i+0x23c>)
 8007c42:	e7e4      	b.n	8007c0e <_printf_i+0x176>
 8007c44:	4615      	mov	r5, r2
 8007c46:	e7bd      	b.n	8007bc4 <_printf_i+0x12c>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	6826      	ldr	r6, [r4, #0]
 8007c4c:	6961      	ldr	r1, [r4, #20]
 8007c4e:	1d18      	adds	r0, r3, #4
 8007c50:	6028      	str	r0, [r5, #0]
 8007c52:	0635      	lsls	r5, r6, #24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0x1c4>
 8007c58:	6019      	str	r1, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0x1ca>
 8007c5c:	0670      	lsls	r0, r6, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0x1c0>
 8007c60:	8019      	strh	r1, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	4615      	mov	r5, r2
 8007c68:	e7bc      	b.n	8007be4 <_printf_i+0x14c>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	602a      	str	r2, [r5, #0]
 8007c70:	681d      	ldr	r5, [r3, #0]
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7f8 faba 	bl	80001f0 <memchr>
 8007c7c:	b108      	cbz	r0, 8007c82 <_printf_i+0x1ea>
 8007c7e:	1b40      	subs	r0, r0, r5
 8007c80:	6060      	str	r0, [r4, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	2300      	movs	r3, #0
 8007c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8c:	e7aa      	b.n	8007be4 <_printf_i+0x14c>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d0ad      	beq.n	8007bf8 <_printf_i+0x160>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	079b      	lsls	r3, r3, #30
 8007ca0:	d413      	bmi.n	8007cca <_printf_i+0x232>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e7a6      	b.n	8007bfc <_printf_i+0x164>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d09d      	beq.n	8007bf8 <_printf_i+0x160>
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	9903      	ldr	r1, [sp, #12]
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dcf2      	bgt.n	8007cae <_printf_i+0x216>
 8007cc8:	e7eb      	b.n	8007ca2 <_printf_i+0x20a>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	f104 0619 	add.w	r6, r4, #25
 8007cd0:	e7f5      	b.n	8007cbe <_printf_i+0x226>
 8007cd2:	bf00      	nop
 8007cd4:	0800bce7 	.word	0x0800bce7
 8007cd8:	0800bcf8 	.word	0x0800bcf8

08007cdc <_scanf_float>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	4617      	mov	r7, r2
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	688b      	ldr	r3, [r1, #8]
 8007ce8:	1e5a      	subs	r2, r3, #1
 8007cea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cee:	bf83      	ittte	hi
 8007cf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cf4:	195b      	addhi	r3, r3, r5
 8007cf6:	9302      	strhi	r3, [sp, #8]
 8007cf8:	2300      	movls	r3, #0
 8007cfa:	bf86      	itte	hi
 8007cfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d00:	608b      	strhi	r3, [r1, #8]
 8007d02:	9302      	strls	r3, [sp, #8]
 8007d04:	680b      	ldr	r3, [r1, #0]
 8007d06:	468b      	mov	fp, r1
 8007d08:	2500      	movs	r5, #0
 8007d0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d16:	4680      	mov	r8, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	465e      	mov	r6, fp
 8007d1c:	46aa      	mov	sl, r5
 8007d1e:	46a9      	mov	r9, r5
 8007d20:	9501      	str	r5, [sp, #4]
 8007d22:	68a2      	ldr	r2, [r4, #8]
 8007d24:	b152      	cbz	r2, 8007d3c <_scanf_float+0x60>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8007d2c:	d864      	bhi.n	8007df8 <_scanf_float+0x11c>
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d83c      	bhi.n	8007dac <_scanf_float+0xd0>
 8007d32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d36:	b2c8      	uxtb	r0, r1
 8007d38:	280e      	cmp	r0, #14
 8007d3a:	d93a      	bls.n	8007db2 <_scanf_float+0xd6>
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	d003      	beq.n	8007d4a <_scanf_float+0x6e>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d4e:	f1ba 0f01 	cmp.w	sl, #1
 8007d52:	f200 8113 	bhi.w	8007f7c <_scanf_float+0x2a0>
 8007d56:	455e      	cmp	r6, fp
 8007d58:	f200 8105 	bhi.w	8007f66 <_scanf_float+0x28a>
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	4628      	mov	r0, r5
 8007d60:	b007      	add	sp, #28
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d6a:	2a0d      	cmp	r2, #13
 8007d6c:	d8e6      	bhi.n	8007d3c <_scanf_float+0x60>
 8007d6e:	a101      	add	r1, pc, #4	; (adr r1, 8007d74 <_scanf_float+0x98>)
 8007d70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d74:	08007eb3 	.word	0x08007eb3
 8007d78:	08007d3d 	.word	0x08007d3d
 8007d7c:	08007d3d 	.word	0x08007d3d
 8007d80:	08007d3d 	.word	0x08007d3d
 8007d84:	08007f13 	.word	0x08007f13
 8007d88:	08007eeb 	.word	0x08007eeb
 8007d8c:	08007d3d 	.word	0x08007d3d
 8007d90:	08007d3d 	.word	0x08007d3d
 8007d94:	08007ec1 	.word	0x08007ec1
 8007d98:	08007d3d 	.word	0x08007d3d
 8007d9c:	08007d3d 	.word	0x08007d3d
 8007da0:	08007d3d 	.word	0x08007d3d
 8007da4:	08007d3d 	.word	0x08007d3d
 8007da8:	08007e79 	.word	0x08007e79
 8007dac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007db0:	e7db      	b.n	8007d6a <_scanf_float+0x8e>
 8007db2:	290e      	cmp	r1, #14
 8007db4:	d8c2      	bhi.n	8007d3c <_scanf_float+0x60>
 8007db6:	a001      	add	r0, pc, #4	; (adr r0, 8007dbc <_scanf_float+0xe0>)
 8007db8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007dbc:	08007e6b 	.word	0x08007e6b
 8007dc0:	08007d3d 	.word	0x08007d3d
 8007dc4:	08007e6b 	.word	0x08007e6b
 8007dc8:	08007eff 	.word	0x08007eff
 8007dcc:	08007d3d 	.word	0x08007d3d
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e55 	.word	0x08007e55
 8007dd8:	08007e55 	.word	0x08007e55
 8007ddc:	08007e55 	.word	0x08007e55
 8007de0:	08007e55 	.word	0x08007e55
 8007de4:	08007e55 	.word	0x08007e55
 8007de8:	08007e55 	.word	0x08007e55
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007e55 	.word	0x08007e55
 8007df8:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfa:	d809      	bhi.n	8007e10 <_scanf_float+0x134>
 8007dfc:	2b60      	cmp	r3, #96	; 0x60
 8007dfe:	d8b2      	bhi.n	8007d66 <_scanf_float+0x8a>
 8007e00:	2b54      	cmp	r3, #84	; 0x54
 8007e02:	d077      	beq.n	8007ef4 <_scanf_float+0x218>
 8007e04:	2b59      	cmp	r3, #89	; 0x59
 8007e06:	d199      	bne.n	8007d3c <_scanf_float+0x60>
 8007e08:	2d07      	cmp	r5, #7
 8007e0a:	d197      	bne.n	8007d3c <_scanf_float+0x60>
 8007e0c:	2508      	movs	r5, #8
 8007e0e:	e029      	b.n	8007e64 <_scanf_float+0x188>
 8007e10:	2b74      	cmp	r3, #116	; 0x74
 8007e12:	d06f      	beq.n	8007ef4 <_scanf_float+0x218>
 8007e14:	2b79      	cmp	r3, #121	; 0x79
 8007e16:	e7f6      	b.n	8007e06 <_scanf_float+0x12a>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	05c8      	lsls	r0, r1, #23
 8007e1c:	d51a      	bpl.n	8007e54 <_scanf_float+0x178>
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e24:	6021      	str	r1, [r4, #0]
 8007e26:	f109 0901 	add.w	r9, r9, #1
 8007e2a:	b11b      	cbz	r3, 8007e34 <_scanf_float+0x158>
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	3201      	adds	r2, #1
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	60a2      	str	r2, [r4, #8]
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	f340 8084 	ble.w	8007f54 <_scanf_float+0x278>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	e766      	b.n	8007d22 <_scanf_float+0x46>
 8007e54:	eb1a 0f05 	cmn.w	sl, r5
 8007e58:	f47f af70 	bne.w	8007d3c <_scanf_float+0x60>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	f806 3b01 	strb.w	r3, [r6], #1
 8007e68:	e7e4      	b.n	8007e34 <_scanf_float+0x158>
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	0610      	lsls	r0, r2, #24
 8007e6e:	f57f af65 	bpl.w	8007d3c <_scanf_float+0x60>
 8007e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e76:	e7f4      	b.n	8007e62 <_scanf_float+0x186>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d10e      	bne.n	8007e9c <_scanf_float+0x1c0>
 8007e7e:	f1b9 0f00 	cmp.w	r9, #0
 8007e82:	d10e      	bne.n	8007ea2 <_scanf_float+0x1c6>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e8e:	d108      	bne.n	8007ea2 <_scanf_float+0x1c6>
 8007e90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	f04f 0a01 	mov.w	sl, #1
 8007e9a:	e7e3      	b.n	8007e64 <_scanf_float+0x188>
 8007e9c:	f1ba 0f02 	cmp.w	sl, #2
 8007ea0:	d055      	beq.n	8007f4e <_scanf_float+0x272>
 8007ea2:	2d01      	cmp	r5, #1
 8007ea4:	d002      	beq.n	8007eac <_scanf_float+0x1d0>
 8007ea6:	2d04      	cmp	r5, #4
 8007ea8:	f47f af48 	bne.w	8007d3c <_scanf_float+0x60>
 8007eac:	3501      	adds	r5, #1
 8007eae:	b2ed      	uxtb	r5, r5
 8007eb0:	e7d8      	b.n	8007e64 <_scanf_float+0x188>
 8007eb2:	f1ba 0f01 	cmp.w	sl, #1
 8007eb6:	f47f af41 	bne.w	8007d3c <_scanf_float+0x60>
 8007eba:	f04f 0a02 	mov.w	sl, #2
 8007ebe:	e7d1      	b.n	8007e64 <_scanf_float+0x188>
 8007ec0:	b97d      	cbnz	r5, 8007ee2 <_scanf_float+0x206>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f47f af3c 	bne.w	8007d42 <_scanf_float+0x66>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ed0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ed4:	f47f af39 	bne.w	8007d4a <_scanf_float+0x6e>
 8007ed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	2501      	movs	r5, #1
 8007ee0:	e7c0      	b.n	8007e64 <_scanf_float+0x188>
 8007ee2:	2d03      	cmp	r5, #3
 8007ee4:	d0e2      	beq.n	8007eac <_scanf_float+0x1d0>
 8007ee6:	2d05      	cmp	r5, #5
 8007ee8:	e7de      	b.n	8007ea8 <_scanf_float+0x1cc>
 8007eea:	2d02      	cmp	r5, #2
 8007eec:	f47f af26 	bne.w	8007d3c <_scanf_float+0x60>
 8007ef0:	2503      	movs	r5, #3
 8007ef2:	e7b7      	b.n	8007e64 <_scanf_float+0x188>
 8007ef4:	2d06      	cmp	r5, #6
 8007ef6:	f47f af21 	bne.w	8007d3c <_scanf_float+0x60>
 8007efa:	2507      	movs	r5, #7
 8007efc:	e7b2      	b.n	8007e64 <_scanf_float+0x188>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	0591      	lsls	r1, r2, #22
 8007f02:	f57f af1b 	bpl.w	8007d3c <_scanf_float+0x60>
 8007f06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	e7a8      	b.n	8007e64 <_scanf_float+0x188>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f1c:	d006      	beq.n	8007f2c <_scanf_float+0x250>
 8007f1e:	0550      	lsls	r0, r2, #21
 8007f20:	f57f af0c 	bpl.w	8007d3c <_scanf_float+0x60>
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	f43f af0f 	beq.w	8007d4a <_scanf_float+0x6e>
 8007f2c:	0591      	lsls	r1, r2, #22
 8007f2e:	bf58      	it	pl
 8007f30:	9901      	ldrpl	r1, [sp, #4]
 8007f32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f36:	bf58      	it	pl
 8007f38:	eba9 0101 	subpl.w	r1, r9, r1
 8007f3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f40:	bf58      	it	pl
 8007f42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	f04f 0900 	mov.w	r9, #0
 8007f4c:	e78a      	b.n	8007e64 <_scanf_float+0x188>
 8007f4e:	f04f 0a03 	mov.w	sl, #3
 8007f52:	e787      	b.n	8007e64 <_scanf_float+0x188>
 8007f54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f58:	4639      	mov	r1, r7
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4798      	blx	r3
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aedf 	beq.w	8007d22 <_scanf_float+0x46>
 8007f64:	e6ea      	b.n	8007d3c <_scanf_float+0x60>
 8007f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f6e:	463a      	mov	r2, r7
 8007f70:	4640      	mov	r0, r8
 8007f72:	4798      	blx	r3
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	e6ec      	b.n	8007d56 <_scanf_float+0x7a>
 8007f7c:	1e6b      	subs	r3, r5, #1
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d825      	bhi.n	8007fce <_scanf_float+0x2f2>
 8007f82:	2d02      	cmp	r5, #2
 8007f84:	d836      	bhi.n	8007ff4 <_scanf_float+0x318>
 8007f86:	455e      	cmp	r6, fp
 8007f88:	f67f aee8 	bls.w	8007d5c <_scanf_float+0x80>
 8007f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f94:	463a      	mov	r2, r7
 8007f96:	4640      	mov	r0, r8
 8007f98:	4798      	blx	r3
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	e7f1      	b.n	8007f86 <_scanf_float+0x2aa>
 8007fa2:	9802      	ldr	r0, [sp, #8]
 8007fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007fac:	9002      	str	r0, [sp, #8]
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4798      	blx	r3
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc2:	f1ba 0f02 	cmp.w	sl, #2
 8007fc6:	d1ec      	bne.n	8007fa2 <_scanf_float+0x2c6>
 8007fc8:	3d03      	subs	r5, #3
 8007fca:	b2ed      	uxtb	r5, r5
 8007fcc:	1b76      	subs	r6, r6, r5
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	05da      	lsls	r2, r3, #23
 8007fd2:	d52f      	bpl.n	8008034 <_scanf_float+0x358>
 8007fd4:	055b      	lsls	r3, r3, #21
 8007fd6:	d510      	bpl.n	8007ffa <_scanf_float+0x31e>
 8007fd8:	455e      	cmp	r6, fp
 8007fda:	f67f aebf 	bls.w	8007d5c <_scanf_float+0x80>
 8007fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fe6:	463a      	mov	r2, r7
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4798      	blx	r3
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	e7f1      	b.n	8007fd8 <_scanf_float+0x2fc>
 8007ff4:	46aa      	mov	sl, r5
 8007ff6:	9602      	str	r6, [sp, #8]
 8007ff8:	e7df      	b.n	8007fba <_scanf_float+0x2de>
 8007ffa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	2965      	cmp	r1, #101	; 0x65
 8008002:	f103 33ff 	add.w	r3, r3, #4294967295
 8008006:	f106 35ff 	add.w	r5, r6, #4294967295
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	d00c      	beq.n	8008028 <_scanf_float+0x34c>
 800800e:	2945      	cmp	r1, #69	; 0x45
 8008010:	d00a      	beq.n	8008028 <_scanf_float+0x34c>
 8008012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008016:	463a      	mov	r2, r7
 8008018:	4640      	mov	r0, r8
 800801a:	4798      	blx	r3
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008022:	3b01      	subs	r3, #1
 8008024:	1eb5      	subs	r5, r6, #2
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800802c:	463a      	mov	r2, r7
 800802e:	4640      	mov	r0, r8
 8008030:	4798      	blx	r3
 8008032:	462e      	mov	r6, r5
 8008034:	6825      	ldr	r5, [r4, #0]
 8008036:	f015 0510 	ands.w	r5, r5, #16
 800803a:	d158      	bne.n	80080ee <_scanf_float+0x412>
 800803c:	7035      	strb	r5, [r6, #0]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d11c      	bne.n	8008084 <_scanf_float+0x3a8>
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	454b      	cmp	r3, r9
 800804e:	eba3 0209 	sub.w	r2, r3, r9
 8008052:	d124      	bne.n	800809e <_scanf_float+0x3c2>
 8008054:	2200      	movs	r2, #0
 8008056:	4659      	mov	r1, fp
 8008058:	4640      	mov	r0, r8
 800805a:	f002 fba5 	bl	800a7a8 <_strtod_r>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	6821      	ldr	r1, [r4, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f011 0f02 	tst.w	r1, #2
 8008068:	ec57 6b10 	vmov	r6, r7, d0
 800806c:	f103 0204 	add.w	r2, r3, #4
 8008070:	d020      	beq.n	80080b4 <_scanf_float+0x3d8>
 8008072:	9903      	ldr	r1, [sp, #12]
 8008074:	600a      	str	r2, [r1, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	e9c3 6700 	strd	r6, r7, [r3]
 800807c:	68e3      	ldr	r3, [r4, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60e3      	str	r3, [r4, #12]
 8008082:	e66c      	b.n	8007d5e <_scanf_float+0x82>
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0e4      	beq.n	8008054 <_scanf_float+0x378>
 800808a:	9905      	ldr	r1, [sp, #20]
 800808c:	230a      	movs	r3, #10
 800808e:	462a      	mov	r2, r5
 8008090:	3101      	adds	r1, #1
 8008092:	4640      	mov	r0, r8
 8008094:	f7ff f9b0 	bl	80073f8 <_strtol_r>
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	9e05      	ldr	r6, [sp, #20]
 800809c:	1ac2      	subs	r2, r0, r3
 800809e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80080a2:	429e      	cmp	r6, r3
 80080a4:	bf28      	it	cs
 80080a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80080aa:	4912      	ldr	r1, [pc, #72]	; (80080f4 <_scanf_float+0x418>)
 80080ac:	4630      	mov	r0, r6
 80080ae:	f000 f8e7 	bl	8008280 <siprintf>
 80080b2:	e7cf      	b.n	8008054 <_scanf_float+0x378>
 80080b4:	f011 0f04 	tst.w	r1, #4
 80080b8:	9903      	ldr	r1, [sp, #12]
 80080ba:	600a      	str	r2, [r1, #0]
 80080bc:	d1db      	bne.n	8008076 <_scanf_float+0x39a>
 80080be:	f8d3 8000 	ldr.w	r8, [r3]
 80080c2:	ee10 2a10 	vmov	r2, s0
 80080c6:	ee10 0a10 	vmov	r0, s0
 80080ca:	463b      	mov	r3, r7
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 fd3d 	bl	8000b4c <__aeabi_dcmpun>
 80080d2:	b128      	cbz	r0, 80080e0 <_scanf_float+0x404>
 80080d4:	4808      	ldr	r0, [pc, #32]	; (80080f8 <_scanf_float+0x41c>)
 80080d6:	f000 f9e1 	bl	800849c <nanf>
 80080da:	ed88 0a00 	vstr	s0, [r8]
 80080de:	e7cd      	b.n	800807c <_scanf_float+0x3a0>
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 fd90 	bl	8000c08 <__aeabi_d2f>
 80080e8:	f8c8 0000 	str.w	r0, [r8]
 80080ec:	e7c6      	b.n	800807c <_scanf_float+0x3a0>
 80080ee:	2500      	movs	r5, #0
 80080f0:	e635      	b.n	8007d5e <_scanf_float+0x82>
 80080f2:	bf00      	nop
 80080f4:	0800bd09 	.word	0x0800bd09
 80080f8:	0800bf9c 	.word	0x0800bf9c

080080fc <std>:
 80080fc:	2300      	movs	r3, #0
 80080fe:	b510      	push	{r4, lr}
 8008100:	4604      	mov	r4, r0
 8008102:	e9c0 3300 	strd	r3, r3, [r0]
 8008106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800810a:	6083      	str	r3, [r0, #8]
 800810c:	8181      	strh	r1, [r0, #12]
 800810e:	6643      	str	r3, [r0, #100]	; 0x64
 8008110:	81c2      	strh	r2, [r0, #14]
 8008112:	6183      	str	r3, [r0, #24]
 8008114:	4619      	mov	r1, r3
 8008116:	2208      	movs	r2, #8
 8008118:	305c      	adds	r0, #92	; 0x5c
 800811a:	f000 f914 	bl	8008346 <memset>
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <std+0x58>)
 8008120:	6263      	str	r3, [r4, #36]	; 0x24
 8008122:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <std+0x5c>)
 8008124:	62a3      	str	r3, [r4, #40]	; 0x28
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <std+0x60>)
 8008128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <std+0x64>)
 800812c:	6323      	str	r3, [r4, #48]	; 0x30
 800812e:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <std+0x68>)
 8008130:	6224      	str	r4, [r4, #32]
 8008132:	429c      	cmp	r4, r3
 8008134:	d006      	beq.n	8008144 <std+0x48>
 8008136:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800813a:	4294      	cmp	r4, r2
 800813c:	d002      	beq.n	8008144 <std+0x48>
 800813e:	33d0      	adds	r3, #208	; 0xd0
 8008140:	429c      	cmp	r4, r3
 8008142:	d105      	bne.n	8008150 <std+0x54>
 8008144:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814c:	f000 b99a 	b.w	8008484 <__retarget_lock_init_recursive>
 8008150:	bd10      	pop	{r4, pc}
 8008152:	bf00      	nop
 8008154:	080082c1 	.word	0x080082c1
 8008158:	080082e3 	.word	0x080082e3
 800815c:	0800831b 	.word	0x0800831b
 8008160:	0800833f 	.word	0x0800833f
 8008164:	20000568 	.word	0x20000568

08008168 <stdio_exit_handler>:
 8008168:	4a02      	ldr	r2, [pc, #8]	; (8008174 <stdio_exit_handler+0xc>)
 800816a:	4903      	ldr	r1, [pc, #12]	; (8008178 <stdio_exit_handler+0x10>)
 800816c:	4803      	ldr	r0, [pc, #12]	; (800817c <stdio_exit_handler+0x14>)
 800816e:	f000 b869 	b.w	8008244 <_fwalk_sglue>
 8008172:	bf00      	nop
 8008174:	20000014 	.word	0x20000014
 8008178:	0800ab71 	.word	0x0800ab71
 800817c:	20000020 	.word	0x20000020

08008180 <cleanup_stdio>:
 8008180:	6841      	ldr	r1, [r0, #4]
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <cleanup_stdio+0x34>)
 8008184:	4299      	cmp	r1, r3
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	d001      	beq.n	8008190 <cleanup_stdio+0x10>
 800818c:	f002 fcf0 	bl	800ab70 <_fflush_r>
 8008190:	68a1      	ldr	r1, [r4, #8]
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <cleanup_stdio+0x38>)
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <cleanup_stdio+0x1e>
 8008198:	4620      	mov	r0, r4
 800819a:	f002 fce9 	bl	800ab70 <_fflush_r>
 800819e:	68e1      	ldr	r1, [r4, #12]
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <cleanup_stdio+0x3c>)
 80081a2:	4299      	cmp	r1, r3
 80081a4:	d004      	beq.n	80081b0 <cleanup_stdio+0x30>
 80081a6:	4620      	mov	r0, r4
 80081a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ac:	f002 bce0 	b.w	800ab70 <_fflush_r>
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	bf00      	nop
 80081b4:	20000568 	.word	0x20000568
 80081b8:	200005d0 	.word	0x200005d0
 80081bc:	20000638 	.word	0x20000638

080081c0 <global_stdio_init.part.0>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <global_stdio_init.part.0+0x30>)
 80081c4:	4c0b      	ldr	r4, [pc, #44]	; (80081f4 <global_stdio_init.part.0+0x34>)
 80081c6:	4a0c      	ldr	r2, [pc, #48]	; (80081f8 <global_stdio_init.part.0+0x38>)
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	4620      	mov	r0, r4
 80081cc:	2200      	movs	r2, #0
 80081ce:	2104      	movs	r1, #4
 80081d0:	f7ff ff94 	bl	80080fc <std>
 80081d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081d8:	2201      	movs	r2, #1
 80081da:	2109      	movs	r1, #9
 80081dc:	f7ff ff8e 	bl	80080fc <std>
 80081e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081e4:	2202      	movs	r2, #2
 80081e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ea:	2112      	movs	r1, #18
 80081ec:	f7ff bf86 	b.w	80080fc <std>
 80081f0:	200006a0 	.word	0x200006a0
 80081f4:	20000568 	.word	0x20000568
 80081f8:	08008169 	.word	0x08008169

080081fc <__sfp_lock_acquire>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__sfp_lock_acquire+0x8>)
 80081fe:	f000 b942 	b.w	8008486 <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	200006a9 	.word	0x200006a9

08008208 <__sfp_lock_release>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__sfp_lock_release+0x8>)
 800820a:	f000 b93d 	b.w	8008488 <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	200006a9 	.word	0x200006a9

08008214 <__sinit>:
 8008214:	b510      	push	{r4, lr}
 8008216:	4604      	mov	r4, r0
 8008218:	f7ff fff0 	bl	80081fc <__sfp_lock_acquire>
 800821c:	6a23      	ldr	r3, [r4, #32]
 800821e:	b11b      	cbz	r3, 8008228 <__sinit+0x14>
 8008220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008224:	f7ff bff0 	b.w	8008208 <__sfp_lock_release>
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <__sinit+0x28>)
 800822a:	6223      	str	r3, [r4, #32]
 800822c:	4b04      	ldr	r3, [pc, #16]	; (8008240 <__sinit+0x2c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f5      	bne.n	8008220 <__sinit+0xc>
 8008234:	f7ff ffc4 	bl	80081c0 <global_stdio_init.part.0>
 8008238:	e7f2      	b.n	8008220 <__sinit+0xc>
 800823a:	bf00      	nop
 800823c:	08008181 	.word	0x08008181
 8008240:	200006a0 	.word	0x200006a0

08008244 <_fwalk_sglue>:
 8008244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4607      	mov	r7, r0
 800824a:	4688      	mov	r8, r1
 800824c:	4614      	mov	r4, r2
 800824e:	2600      	movs	r6, #0
 8008250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008254:	f1b9 0901 	subs.w	r9, r9, #1
 8008258:	d505      	bpl.n	8008266 <_fwalk_sglue+0x22>
 800825a:	6824      	ldr	r4, [r4, #0]
 800825c:	2c00      	cmp	r4, #0
 800825e:	d1f7      	bne.n	8008250 <_fwalk_sglue+0xc>
 8008260:	4630      	mov	r0, r6
 8008262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d907      	bls.n	800827c <_fwalk_sglue+0x38>
 800826c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008270:	3301      	adds	r3, #1
 8008272:	d003      	beq.n	800827c <_fwalk_sglue+0x38>
 8008274:	4629      	mov	r1, r5
 8008276:	4638      	mov	r0, r7
 8008278:	47c0      	blx	r8
 800827a:	4306      	orrs	r6, r0
 800827c:	3568      	adds	r5, #104	; 0x68
 800827e:	e7e9      	b.n	8008254 <_fwalk_sglue+0x10>

08008280 <siprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b500      	push	{lr}
 8008284:	b09c      	sub	sp, #112	; 0x70
 8008286:	ab1d      	add	r3, sp, #116	; 0x74
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008290:	4809      	ldr	r0, [pc, #36]	; (80082b8 <siprintf+0x38>)
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	9104      	str	r1, [sp, #16]
 8008296:	4909      	ldr	r1, [pc, #36]	; (80082bc <siprintf+0x3c>)
 8008298:	f853 2b04 	ldr.w	r2, [r3], #4
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	6800      	ldr	r0, [r0, #0]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	a902      	add	r1, sp, #8
 80082a4:	f002 fae0 	bl	800a868 <_svfiprintf_r>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	b01c      	add	sp, #112	; 0x70
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	2000006c 	.word	0x2000006c
 80082bc:	ffff0208 	.word	0xffff0208

080082c0 <__sread>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	f000 f87e 	bl	80083c8 <_read_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bfab      	itete	ge
 80082d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082d2:	89a3      	ldrhlt	r3, [r4, #12]
 80082d4:	181b      	addge	r3, r3, r0
 80082d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082da:	bfac      	ite	ge
 80082dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082de:	81a3      	strhlt	r3, [r4, #12]
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <__swrite>:
 80082e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	461f      	mov	r7, r3
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	05db      	lsls	r3, r3, #23
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4616      	mov	r6, r2
 80082f2:	d505      	bpl.n	8008300 <__swrite+0x1e>
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	2302      	movs	r3, #2
 80082fa:	2200      	movs	r2, #0
 80082fc:	f000 f852 	bl	80083a4 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	4632      	mov	r2, r6
 800830e:	463b      	mov	r3, r7
 8008310:	4628      	mov	r0, r5
 8008312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	f000 b879 	b.w	800840c <_write_r>

0800831a <__sseek>:
 800831a:	b510      	push	{r4, lr}
 800831c:	460c      	mov	r4, r1
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 f83f 	bl	80083a4 <_lseek_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	bf15      	itete	ne
 800832c:	6560      	strne	r0, [r4, #84]	; 0x54
 800832e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strheq	r3, [r4, #12]
 8008338:	bf18      	it	ne
 800833a:	81a3      	strhne	r3, [r4, #12]
 800833c:	bd10      	pop	{r4, pc}

0800833e <__sclose>:
 800833e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008342:	f000 b81f 	b.w	8008384 <_close_r>

08008346 <memset>:
 8008346:	4402      	add	r2, r0
 8008348:	4603      	mov	r3, r0
 800834a:	4293      	cmp	r3, r2
 800834c:	d100      	bne.n	8008350 <memset+0xa>
 800834e:	4770      	bx	lr
 8008350:	f803 1b01 	strb.w	r1, [r3], #1
 8008354:	e7f9      	b.n	800834a <memset+0x4>

08008356 <strncpy>:
 8008356:	b510      	push	{r4, lr}
 8008358:	3901      	subs	r1, #1
 800835a:	4603      	mov	r3, r0
 800835c:	b132      	cbz	r2, 800836c <strncpy+0x16>
 800835e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008362:	f803 4b01 	strb.w	r4, [r3], #1
 8008366:	3a01      	subs	r2, #1
 8008368:	2c00      	cmp	r4, #0
 800836a:	d1f7      	bne.n	800835c <strncpy+0x6>
 800836c:	441a      	add	r2, r3
 800836e:	2100      	movs	r1, #0
 8008370:	4293      	cmp	r3, r2
 8008372:	d100      	bne.n	8008376 <strncpy+0x20>
 8008374:	bd10      	pop	{r4, pc}
 8008376:	f803 1b01 	strb.w	r1, [r3], #1
 800837a:	e7f9      	b.n	8008370 <strncpy+0x1a>

0800837c <_localeconv_r>:
 800837c:	4800      	ldr	r0, [pc, #0]	; (8008380 <_localeconv_r+0x4>)
 800837e:	4770      	bx	lr
 8008380:	20000160 	.word	0x20000160

08008384 <_close_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d06      	ldr	r5, [pc, #24]	; (80083a0 <_close_r+0x1c>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7f9 ff7f 	bl	8002292 <_close>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_close_r+0x1a>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_close_r+0x1a>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	200006a4 	.word	0x200006a4

080083a4 <_lseek_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	; (80083c4 <_lseek_r+0x20>)
 80083a8:	4604      	mov	r4, r0
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f7f9 ff94 	bl	80022e0 <_lseek>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_lseek_r+0x1e>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_lseek_r+0x1e>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200006a4 	.word	0x200006a4

080083c8 <_read_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_read_r+0x20>)
 80083cc:	4604      	mov	r4, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 ff22 	bl	8002220 <_read>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_read_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_read_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200006a4 	.word	0x200006a4

080083ec <_sbrk_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d06      	ldr	r5, [pc, #24]	; (8008408 <_sbrk_r+0x1c>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 ff80 	bl	80022fc <_sbrk>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_sbrk_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_sbrk_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	200006a4 	.word	0x200006a4

0800840c <_write_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_write_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f9 ff1d 	bl	800225a <_write>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_write_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_write_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	200006a4 	.word	0x200006a4

08008430 <__errno>:
 8008430:	4b01      	ldr	r3, [pc, #4]	; (8008438 <__errno+0x8>)
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	2000006c 	.word	0x2000006c

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	; (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	; (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	; (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	; (8008480 <__libc_init_array+0x44>)
 8008450:	f003 fb9c 	bl	800bb8c <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	0800c008 	.word	0x0800c008
 8008478:	0800c008 	.word	0x0800c008
 800847c:	0800c008 	.word	0x0800c008
 8008480:	0800c00c 	.word	0x0800c00c

08008484 <__retarget_lock_init_recursive>:
 8008484:	4770      	bx	lr

08008486 <__retarget_lock_acquire_recursive>:
 8008486:	4770      	bx	lr

08008488 <__retarget_lock_release_recursive>:
 8008488:	4770      	bx	lr

0800848a <strcpy>:
 800848a:	4603      	mov	r3, r0
 800848c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008490:	f803 2b01 	strb.w	r2, [r3], #1
 8008494:	2a00      	cmp	r2, #0
 8008496:	d1f9      	bne.n	800848c <strcpy+0x2>
 8008498:	4770      	bx	lr
	...

0800849c <nanf>:
 800849c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084a4 <nanf+0x8>
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	7fc00000 	.word	0x7fc00000

080084a8 <quorem>:
 80084a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	6903      	ldr	r3, [r0, #16]
 80084ae:	690c      	ldr	r4, [r1, #16]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	4607      	mov	r7, r0
 80084b4:	db7e      	blt.n	80085b4 <quorem+0x10c>
 80084b6:	3c01      	subs	r4, #1
 80084b8:	f101 0814 	add.w	r8, r1, #20
 80084bc:	f100 0514 	add.w	r5, r0, #20
 80084c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ce:	3301      	adds	r3, #1
 80084d0:	429a      	cmp	r2, r3
 80084d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084da:	fbb2 f6f3 	udiv	r6, r2, r3
 80084de:	d331      	bcc.n	8008544 <quorem+0x9c>
 80084e0:	f04f 0e00 	mov.w	lr, #0
 80084e4:	4640      	mov	r0, r8
 80084e6:	46ac      	mov	ip, r5
 80084e8:	46f2      	mov	sl, lr
 80084ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80084ee:	b293      	uxth	r3, r2
 80084f0:	fb06 e303 	mla	r3, r6, r3, lr
 80084f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084f8:	0c1a      	lsrs	r2, r3, #16
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008500:	f8dc a000 	ldr.w	sl, [ip]
 8008504:	fa13 f38a 	uxtah	r3, r3, sl
 8008508:	fb06 220e 	mla	r2, r6, lr, r2
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	9b00      	ldr	r3, [sp, #0]
 8008510:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008514:	b292      	uxth	r2, r2
 8008516:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800851a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800851e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008522:	4581      	cmp	r9, r0
 8008524:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008528:	f84c 3b04 	str.w	r3, [ip], #4
 800852c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008530:	d2db      	bcs.n	80084ea <quorem+0x42>
 8008532:	f855 300b 	ldr.w	r3, [r5, fp]
 8008536:	b92b      	cbnz	r3, 8008544 <quorem+0x9c>
 8008538:	9b01      	ldr	r3, [sp, #4]
 800853a:	3b04      	subs	r3, #4
 800853c:	429d      	cmp	r5, r3
 800853e:	461a      	mov	r2, r3
 8008540:	d32c      	bcc.n	800859c <quorem+0xf4>
 8008542:	613c      	str	r4, [r7, #16]
 8008544:	4638      	mov	r0, r7
 8008546:	f001 f93b 	bl	80097c0 <__mcmp>
 800854a:	2800      	cmp	r0, #0
 800854c:	db22      	blt.n	8008594 <quorem+0xec>
 800854e:	3601      	adds	r6, #1
 8008550:	4629      	mov	r1, r5
 8008552:	2000      	movs	r0, #0
 8008554:	f858 2b04 	ldr.w	r2, [r8], #4
 8008558:	f8d1 c000 	ldr.w	ip, [r1]
 800855c:	b293      	uxth	r3, r2
 800855e:	1ac3      	subs	r3, r0, r3
 8008560:	0c12      	lsrs	r2, r2, #16
 8008562:	fa13 f38c 	uxtah	r3, r3, ip
 8008566:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800856a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800856e:	b29b      	uxth	r3, r3
 8008570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008574:	45c1      	cmp	r9, r8
 8008576:	f841 3b04 	str.w	r3, [r1], #4
 800857a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800857e:	d2e9      	bcs.n	8008554 <quorem+0xac>
 8008580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008584:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008588:	b922      	cbnz	r2, 8008594 <quorem+0xec>
 800858a:	3b04      	subs	r3, #4
 800858c:	429d      	cmp	r5, r3
 800858e:	461a      	mov	r2, r3
 8008590:	d30a      	bcc.n	80085a8 <quorem+0x100>
 8008592:	613c      	str	r4, [r7, #16]
 8008594:	4630      	mov	r0, r6
 8008596:	b003      	add	sp, #12
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	3b04      	subs	r3, #4
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d1ce      	bne.n	8008542 <quorem+0x9a>
 80085a4:	3c01      	subs	r4, #1
 80085a6:	e7c9      	b.n	800853c <quorem+0x94>
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	3b04      	subs	r3, #4
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d1f0      	bne.n	8008592 <quorem+0xea>
 80085b0:	3c01      	subs	r4, #1
 80085b2:	e7eb      	b.n	800858c <quorem+0xe4>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7ee      	b.n	8008596 <quorem+0xee>

080085b8 <_dtoa_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ed2d 8b04 	vpush	{d8-d9}
 80085c0:	69c5      	ldr	r5, [r0, #28]
 80085c2:	b093      	sub	sp, #76	; 0x4c
 80085c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085c8:	ec57 6b10 	vmov	r6, r7, d0
 80085cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085d0:	9107      	str	r1, [sp, #28]
 80085d2:	4604      	mov	r4, r0
 80085d4:	920a      	str	r2, [sp, #40]	; 0x28
 80085d6:	930d      	str	r3, [sp, #52]	; 0x34
 80085d8:	b975      	cbnz	r5, 80085f8 <_dtoa_r+0x40>
 80085da:	2010      	movs	r0, #16
 80085dc:	f7fe fdce 	bl	800717c <malloc>
 80085e0:	4602      	mov	r2, r0
 80085e2:	61e0      	str	r0, [r4, #28]
 80085e4:	b920      	cbnz	r0, 80085f0 <_dtoa_r+0x38>
 80085e6:	4bae      	ldr	r3, [pc, #696]	; (80088a0 <_dtoa_r+0x2e8>)
 80085e8:	21ef      	movs	r1, #239	; 0xef
 80085ea:	48ae      	ldr	r0, [pc, #696]	; (80088a4 <_dtoa_r+0x2ec>)
 80085ec:	f002 fb2c 	bl	800ac48 <__assert_func>
 80085f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085f4:	6005      	str	r5, [r0, #0]
 80085f6:	60c5      	str	r5, [r0, #12]
 80085f8:	69e3      	ldr	r3, [r4, #28]
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	b151      	cbz	r1, 8008614 <_dtoa_r+0x5c>
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	604a      	str	r2, [r1, #4]
 8008602:	2301      	movs	r3, #1
 8008604:	4093      	lsls	r3, r2
 8008606:	608b      	str	r3, [r1, #8]
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fe53 	bl	80092b4 <_Bfree>
 800860e:	69e3      	ldr	r3, [r4, #28]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	1e3b      	subs	r3, r7, #0
 8008616:	bfbb      	ittet	lt
 8008618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800861c:	9303      	strlt	r3, [sp, #12]
 800861e:	2300      	movge	r3, #0
 8008620:	2201      	movlt	r2, #1
 8008622:	bfac      	ite	ge
 8008624:	f8c8 3000 	strge.w	r3, [r8]
 8008628:	f8c8 2000 	strlt.w	r2, [r8]
 800862c:	4b9e      	ldr	r3, [pc, #632]	; (80088a8 <_dtoa_r+0x2f0>)
 800862e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008632:	ea33 0308 	bics.w	r3, r3, r8
 8008636:	d11b      	bne.n	8008670 <_dtoa_r+0xb8>
 8008638:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800863a:	f242 730f 	movw	r3, #9999	; 0x270f
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008644:	4333      	orrs	r3, r6
 8008646:	f000 8593 	beq.w	8009170 <_dtoa_r+0xbb8>
 800864a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800864c:	b963      	cbnz	r3, 8008668 <_dtoa_r+0xb0>
 800864e:	4b97      	ldr	r3, [pc, #604]	; (80088ac <_dtoa_r+0x2f4>)
 8008650:	e027      	b.n	80086a2 <_dtoa_r+0xea>
 8008652:	4b97      	ldr	r3, [pc, #604]	; (80088b0 <_dtoa_r+0x2f8>)
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	9800      	ldr	r0, [sp, #0]
 800865e:	b013      	add	sp, #76	; 0x4c
 8008660:	ecbd 8b04 	vpop	{d8-d9}
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	4b90      	ldr	r3, [pc, #576]	; (80088ac <_dtoa_r+0x2f4>)
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	3303      	adds	r3, #3
 800866e:	e7f3      	b.n	8008658 <_dtoa_r+0xa0>
 8008670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008674:	2200      	movs	r2, #0
 8008676:	ec51 0b17 	vmov	r0, r1, d7
 800867a:	eeb0 8a47 	vmov.f32	s16, s14
 800867e:	eef0 8a67 	vmov.f32	s17, s15
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa30 	bl	8000ae8 <__aeabi_dcmpeq>
 8008688:	4681      	mov	r9, r0
 800868a:	b160      	cbz	r0, 80086a6 <_dtoa_r+0xee>
 800868c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800868e:	2301      	movs	r3, #1
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8568 	beq.w	800916a <_dtoa_r+0xbb2>
 800869a:	4b86      	ldr	r3, [pc, #536]	; (80088b4 <_dtoa_r+0x2fc>)
 800869c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	e7da      	b.n	800865c <_dtoa_r+0xa4>
 80086a6:	aa10      	add	r2, sp, #64	; 0x40
 80086a8:	a911      	add	r1, sp, #68	; 0x44
 80086aa:	4620      	mov	r0, r4
 80086ac:	eeb0 0a48 	vmov.f32	s0, s16
 80086b0:	eef0 0a68 	vmov.f32	s1, s17
 80086b4:	f001 f99a 	bl	80099ec <__d2b>
 80086b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086bc:	4682      	mov	sl, r0
 80086be:	2d00      	cmp	r5, #0
 80086c0:	d07f      	beq.n	80087c2 <_dtoa_r+0x20a>
 80086c2:	ee18 3a90 	vmov	r3, s17
 80086c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086ce:	ec51 0b18 	vmov	r0, r1, d8
 80086d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086de:	4619      	mov	r1, r3
 80086e0:	2200      	movs	r2, #0
 80086e2:	4b75      	ldr	r3, [pc, #468]	; (80088b8 <_dtoa_r+0x300>)
 80086e4:	f7f7 fde0 	bl	80002a8 <__aeabi_dsub>
 80086e8:	a367      	add	r3, pc, #412	; (adr r3, 8008888 <_dtoa_r+0x2d0>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	f7f7 ff93 	bl	8000618 <__aeabi_dmul>
 80086f2:	a367      	add	r3, pc, #412	; (adr r3, 8008890 <_dtoa_r+0x2d8>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 fdd8 	bl	80002ac <__adddf3>
 80086fc:	4606      	mov	r6, r0
 80086fe:	4628      	mov	r0, r5
 8008700:	460f      	mov	r7, r1
 8008702:	f7f7 ff1f 	bl	8000544 <__aeabi_i2d>
 8008706:	a364      	add	r3, pc, #400	; (adr r3, 8008898 <_dtoa_r+0x2e0>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 ff84 	bl	8000618 <__aeabi_dmul>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f7 fdc8 	bl	80002ac <__adddf3>
 800871c:	4606      	mov	r6, r0
 800871e:	460f      	mov	r7, r1
 8008720:	f7f8 fa2a 	bl	8000b78 <__aeabi_d2iz>
 8008724:	2200      	movs	r2, #0
 8008726:	4683      	mov	fp, r0
 8008728:	2300      	movs	r3, #0
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f8 f9e5 	bl	8000afc <__aeabi_dcmplt>
 8008732:	b148      	cbz	r0, 8008748 <_dtoa_r+0x190>
 8008734:	4658      	mov	r0, fp
 8008736:	f7f7 ff05 	bl	8000544 <__aeabi_i2d>
 800873a:	4632      	mov	r2, r6
 800873c:	463b      	mov	r3, r7
 800873e:	f7f8 f9d3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008742:	b908      	cbnz	r0, 8008748 <_dtoa_r+0x190>
 8008744:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008748:	f1bb 0f16 	cmp.w	fp, #22
 800874c:	d857      	bhi.n	80087fe <_dtoa_r+0x246>
 800874e:	4b5b      	ldr	r3, [pc, #364]	; (80088bc <_dtoa_r+0x304>)
 8008750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	ec51 0b18 	vmov	r0, r1, d8
 800875c:	f7f8 f9ce 	bl	8000afc <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	d04e      	beq.n	8008802 <_dtoa_r+0x24a>
 8008764:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008768:	2300      	movs	r3, #0
 800876a:	930c      	str	r3, [sp, #48]	; 0x30
 800876c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800876e:	1b5b      	subs	r3, r3, r5
 8008770:	1e5a      	subs	r2, r3, #1
 8008772:	bf45      	ittet	mi
 8008774:	f1c3 0301 	rsbmi	r3, r3, #1
 8008778:	9305      	strmi	r3, [sp, #20]
 800877a:	2300      	movpl	r3, #0
 800877c:	2300      	movmi	r3, #0
 800877e:	9206      	str	r2, [sp, #24]
 8008780:	bf54      	ite	pl
 8008782:	9305      	strpl	r3, [sp, #20]
 8008784:	9306      	strmi	r3, [sp, #24]
 8008786:	f1bb 0f00 	cmp.w	fp, #0
 800878a:	db3c      	blt.n	8008806 <_dtoa_r+0x24e>
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008792:	445b      	add	r3, fp
 8008794:	9306      	str	r3, [sp, #24]
 8008796:	2300      	movs	r3, #0
 8008798:	9308      	str	r3, [sp, #32]
 800879a:	9b07      	ldr	r3, [sp, #28]
 800879c:	2b09      	cmp	r3, #9
 800879e:	d868      	bhi.n	8008872 <_dtoa_r+0x2ba>
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	bfc4      	itt	gt
 80087a4:	3b04      	subgt	r3, #4
 80087a6:	9307      	strgt	r3, [sp, #28]
 80087a8:	9b07      	ldr	r3, [sp, #28]
 80087aa:	f1a3 0302 	sub.w	r3, r3, #2
 80087ae:	bfcc      	ite	gt
 80087b0:	2500      	movgt	r5, #0
 80087b2:	2501      	movle	r5, #1
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	f200 8085 	bhi.w	80088c4 <_dtoa_r+0x30c>
 80087ba:	e8df f003 	tbb	[pc, r3]
 80087be:	3b2e      	.short	0x3b2e
 80087c0:	5839      	.short	0x5839
 80087c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087c6:	441d      	add	r5, r3
 80087c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	bfc1      	itttt	gt
 80087d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80087d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087e0:	bfd6      	itet	le
 80087e2:	f1c3 0320 	rsble	r3, r3, #32
 80087e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80087ea:	fa06 f003 	lslle.w	r0, r6, r3
 80087ee:	f7f7 fe99 	bl	8000524 <__aeabi_ui2d>
 80087f2:	2201      	movs	r2, #1
 80087f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087f8:	3d01      	subs	r5, #1
 80087fa:	920e      	str	r2, [sp, #56]	; 0x38
 80087fc:	e76f      	b.n	80086de <_dtoa_r+0x126>
 80087fe:	2301      	movs	r3, #1
 8008800:	e7b3      	b.n	800876a <_dtoa_r+0x1b2>
 8008802:	900c      	str	r0, [sp, #48]	; 0x30
 8008804:	e7b2      	b.n	800876c <_dtoa_r+0x1b4>
 8008806:	9b05      	ldr	r3, [sp, #20]
 8008808:	eba3 030b 	sub.w	r3, r3, fp
 800880c:	9305      	str	r3, [sp, #20]
 800880e:	f1cb 0300 	rsb	r3, fp, #0
 8008812:	9308      	str	r3, [sp, #32]
 8008814:	2300      	movs	r3, #0
 8008816:	930b      	str	r3, [sp, #44]	; 0x2c
 8008818:	e7bf      	b.n	800879a <_dtoa_r+0x1e2>
 800881a:	2300      	movs	r3, #0
 800881c:	9309      	str	r3, [sp, #36]	; 0x24
 800881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc52      	bgt.n	80088ca <_dtoa_r+0x312>
 8008824:	2301      	movs	r3, #1
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	461a      	mov	r2, r3
 800882c:	920a      	str	r2, [sp, #40]	; 0x28
 800882e:	e00b      	b.n	8008848 <_dtoa_r+0x290>
 8008830:	2301      	movs	r3, #1
 8008832:	e7f3      	b.n	800881c <_dtoa_r+0x264>
 8008834:	2300      	movs	r3, #0
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	445b      	add	r3, fp
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	3301      	adds	r3, #1
 8008840:	2b01      	cmp	r3, #1
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	bfb8      	it	lt
 8008846:	2301      	movlt	r3, #1
 8008848:	69e0      	ldr	r0, [r4, #28]
 800884a:	2100      	movs	r1, #0
 800884c:	2204      	movs	r2, #4
 800884e:	f102 0614 	add.w	r6, r2, #20
 8008852:	429e      	cmp	r6, r3
 8008854:	d93d      	bls.n	80088d2 <_dtoa_r+0x31a>
 8008856:	6041      	str	r1, [r0, #4]
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fceb 	bl	8009234 <_Balloc>
 800885e:	9000      	str	r0, [sp, #0]
 8008860:	2800      	cmp	r0, #0
 8008862:	d139      	bne.n	80088d8 <_dtoa_r+0x320>
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <_dtoa_r+0x308>)
 8008866:	4602      	mov	r2, r0
 8008868:	f240 11af 	movw	r1, #431	; 0x1af
 800886c:	e6bd      	b.n	80085ea <_dtoa_r+0x32>
 800886e:	2301      	movs	r3, #1
 8008870:	e7e1      	b.n	8008836 <_dtoa_r+0x27e>
 8008872:	2501      	movs	r5, #1
 8008874:	2300      	movs	r3, #0
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	9509      	str	r5, [sp, #36]	; 0x24
 800887a:	f04f 33ff 	mov.w	r3, #4294967295
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	2200      	movs	r2, #0
 8008884:	2312      	movs	r3, #18
 8008886:	e7d1      	b.n	800882c <_dtoa_r+0x274>
 8008888:	636f4361 	.word	0x636f4361
 800888c:	3fd287a7 	.word	0x3fd287a7
 8008890:	8b60c8b3 	.word	0x8b60c8b3
 8008894:	3fc68a28 	.word	0x3fc68a28
 8008898:	509f79fb 	.word	0x509f79fb
 800889c:	3fd34413 	.word	0x3fd34413
 80088a0:	0800bd1b 	.word	0x0800bd1b
 80088a4:	0800bd32 	.word	0x0800bd32
 80088a8:	7ff00000 	.word	0x7ff00000
 80088ac:	0800bd17 	.word	0x0800bd17
 80088b0:	0800bd0e 	.word	0x0800bd0e
 80088b4:	0800bce6 	.word	0x0800bce6
 80088b8:	3ff80000 	.word	0x3ff80000
 80088bc:	0800be20 	.word	0x0800be20
 80088c0:	0800bd8a 	.word	0x0800bd8a
 80088c4:	2301      	movs	r3, #1
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	e7d7      	b.n	800887a <_dtoa_r+0x2c2>
 80088ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	e7ba      	b.n	8008848 <_dtoa_r+0x290>
 80088d2:	3101      	adds	r1, #1
 80088d4:	0052      	lsls	r2, r2, #1
 80088d6:	e7ba      	b.n	800884e <_dtoa_r+0x296>
 80088d8:	69e3      	ldr	r3, [r4, #28]
 80088da:	9a00      	ldr	r2, [sp, #0]
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	2b0e      	cmp	r3, #14
 80088e2:	f200 80a8 	bhi.w	8008a36 <_dtoa_r+0x47e>
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	f000 80a5 	beq.w	8008a36 <_dtoa_r+0x47e>
 80088ec:	f1bb 0f00 	cmp.w	fp, #0
 80088f0:	dd38      	ble.n	8008964 <_dtoa_r+0x3ac>
 80088f2:	4bc0      	ldr	r3, [pc, #768]	; (8008bf4 <_dtoa_r+0x63c>)
 80088f4:	f00b 020f 	and.w	r2, fp, #15
 80088f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008900:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008904:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008908:	d019      	beq.n	800893e <_dtoa_r+0x386>
 800890a:	4bbb      	ldr	r3, [pc, #748]	; (8008bf8 <_dtoa_r+0x640>)
 800890c:	ec51 0b18 	vmov	r0, r1, d8
 8008910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008914:	f7f7 ffaa 	bl	800086c <__aeabi_ddiv>
 8008918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891c:	f008 080f 	and.w	r8, r8, #15
 8008920:	2503      	movs	r5, #3
 8008922:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008bf8 <_dtoa_r+0x640>
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	d10a      	bne.n	8008942 <_dtoa_r+0x38a>
 800892c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008930:	4632      	mov	r2, r6
 8008932:	463b      	mov	r3, r7
 8008934:	f7f7 ff9a 	bl	800086c <__aeabi_ddiv>
 8008938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893c:	e02b      	b.n	8008996 <_dtoa_r+0x3de>
 800893e:	2502      	movs	r5, #2
 8008940:	e7ef      	b.n	8008922 <_dtoa_r+0x36a>
 8008942:	f018 0f01 	tst.w	r8, #1
 8008946:	d008      	beq.n	800895a <_dtoa_r+0x3a2>
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008950:	f7f7 fe62 	bl	8000618 <__aeabi_dmul>
 8008954:	3501      	adds	r5, #1
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800895e:	f109 0908 	add.w	r9, r9, #8
 8008962:	e7e0      	b.n	8008926 <_dtoa_r+0x36e>
 8008964:	f000 809f 	beq.w	8008aa6 <_dtoa_r+0x4ee>
 8008968:	f1cb 0600 	rsb	r6, fp, #0
 800896c:	4ba1      	ldr	r3, [pc, #644]	; (8008bf4 <_dtoa_r+0x63c>)
 800896e:	4fa2      	ldr	r7, [pc, #648]	; (8008bf8 <_dtoa_r+0x640>)
 8008970:	f006 020f 	and.w	r2, r6, #15
 8008974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	ec51 0b18 	vmov	r0, r1, d8
 8008980:	f7f7 fe4a 	bl	8000618 <__aeabi_dmul>
 8008984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008988:	1136      	asrs	r6, r6, #4
 800898a:	2300      	movs	r3, #0
 800898c:	2502      	movs	r5, #2
 800898e:	2e00      	cmp	r6, #0
 8008990:	d17e      	bne.n	8008a90 <_dtoa_r+0x4d8>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1d0      	bne.n	8008938 <_dtoa_r+0x380>
 8008996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008998:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8084 	beq.w	8008aaa <_dtoa_r+0x4f2>
 80089a2:	4b96      	ldr	r3, [pc, #600]	; (8008bfc <_dtoa_r+0x644>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	4640      	mov	r0, r8
 80089a8:	4649      	mov	r1, r9
 80089aa:	f7f8 f8a7 	bl	8000afc <__aeabi_dcmplt>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d07b      	beq.n	8008aaa <_dtoa_r+0x4f2>
 80089b2:	9b04      	ldr	r3, [sp, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d078      	beq.n	8008aaa <_dtoa_r+0x4f2>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd39      	ble.n	8008a32 <_dtoa_r+0x47a>
 80089be:	4b90      	ldr	r3, [pc, #576]	; (8008c00 <_dtoa_r+0x648>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f7f7 fe27 	bl	8000618 <__aeabi_dmul>
 80089ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ce:	9e01      	ldr	r6, [sp, #4]
 80089d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089d4:	3501      	adds	r5, #1
 80089d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089da:	4628      	mov	r0, r5
 80089dc:	f7f7 fdb2 	bl	8000544 <__aeabi_i2d>
 80089e0:	4642      	mov	r2, r8
 80089e2:	464b      	mov	r3, r9
 80089e4:	f7f7 fe18 	bl	8000618 <__aeabi_dmul>
 80089e8:	4b86      	ldr	r3, [pc, #536]	; (8008c04 <_dtoa_r+0x64c>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	f7f7 fc5e 	bl	80002ac <__adddf3>
 80089f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d158      	bne.n	8008ab0 <_dtoa_r+0x4f8>
 80089fe:	4b82      	ldr	r3, [pc, #520]	; (8008c08 <_dtoa_r+0x650>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	4640      	mov	r0, r8
 8008a04:	4649      	mov	r1, r9
 8008a06:	f7f7 fc4f 	bl	80002a8 <__aeabi_dsub>
 8008a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a0e:	4680      	mov	r8, r0
 8008a10:	4689      	mov	r9, r1
 8008a12:	f7f8 f891 	bl	8000b38 <__aeabi_dcmpgt>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f040 8296 	bne.w	8008f48 <_dtoa_r+0x990>
 8008a1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a20:	4640      	mov	r0, r8
 8008a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a26:	4649      	mov	r1, r9
 8008a28:	f7f8 f868 	bl	8000afc <__aeabi_dcmplt>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f040 8289 	bne.w	8008f44 <_dtoa_r+0x98c>
 8008a32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f2c0 814e 	blt.w	8008cda <_dtoa_r+0x722>
 8008a3e:	f1bb 0f0e 	cmp.w	fp, #14
 8008a42:	f300 814a 	bgt.w	8008cda <_dtoa_r+0x722>
 8008a46:	4b6b      	ldr	r3, [pc, #428]	; (8008bf4 <_dtoa_r+0x63c>)
 8008a48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f280 80dc 	bge.w	8008c10 <_dtoa_r+0x658>
 8008a58:	9b04      	ldr	r3, [sp, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f300 80d8 	bgt.w	8008c10 <_dtoa_r+0x658>
 8008a60:	f040 826f 	bne.w	8008f42 <_dtoa_r+0x98a>
 8008a64:	4b68      	ldr	r3, [pc, #416]	; (8008c08 <_dtoa_r+0x650>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f7 fdd4 	bl	8000618 <__aeabi_dmul>
 8008a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a74:	f7f8 f856 	bl	8000b24 <__aeabi_dcmpge>
 8008a78:	9e04      	ldr	r6, [sp, #16]
 8008a7a:	4637      	mov	r7, r6
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f040 8245 	bne.w	8008f0c <_dtoa_r+0x954>
 8008a82:	9d00      	ldr	r5, [sp, #0]
 8008a84:	2331      	movs	r3, #49	; 0x31
 8008a86:	f805 3b01 	strb.w	r3, [r5], #1
 8008a8a:	f10b 0b01 	add.w	fp, fp, #1
 8008a8e:	e241      	b.n	8008f14 <_dtoa_r+0x95c>
 8008a90:	07f2      	lsls	r2, r6, #31
 8008a92:	d505      	bpl.n	8008aa0 <_dtoa_r+0x4e8>
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	f7f7 fdbe 	bl	8000618 <__aeabi_dmul>
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	1076      	asrs	r6, r6, #1
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	e773      	b.n	800898e <_dtoa_r+0x3d6>
 8008aa6:	2502      	movs	r5, #2
 8008aa8:	e775      	b.n	8008996 <_dtoa_r+0x3de>
 8008aaa:	9e04      	ldr	r6, [sp, #16]
 8008aac:	465f      	mov	r7, fp
 8008aae:	e792      	b.n	80089d6 <_dtoa_r+0x41e>
 8008ab0:	9900      	ldr	r1, [sp, #0]
 8008ab2:	4b50      	ldr	r3, [pc, #320]	; (8008bf4 <_dtoa_r+0x63c>)
 8008ab4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ab8:	4431      	add	r1, r6
 8008aba:	9102      	str	r1, [sp, #8]
 8008abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008abe:	eeb0 9a47 	vmov.f32	s18, s14
 8008ac2:	eef0 9a67 	vmov.f32	s19, s15
 8008ac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	d044      	beq.n	8008b5c <_dtoa_r+0x5a4>
 8008ad2:	494e      	ldr	r1, [pc, #312]	; (8008c0c <_dtoa_r+0x654>)
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7f7 fec9 	bl	800086c <__aeabi_ddiv>
 8008ada:	ec53 2b19 	vmov	r2, r3, d9
 8008ade:	f7f7 fbe3 	bl	80002a8 <__aeabi_dsub>
 8008ae2:	9d00      	ldr	r5, [sp, #0]
 8008ae4:	ec41 0b19 	vmov	d9, r0, r1
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4640      	mov	r0, r8
 8008aec:	f7f8 f844 	bl	8000b78 <__aeabi_d2iz>
 8008af0:	4606      	mov	r6, r0
 8008af2:	f7f7 fd27 	bl	8000544 <__aeabi_i2d>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fbd3 	bl	80002a8 <__aeabi_dsub>
 8008b02:	3630      	adds	r6, #48	; 0x30
 8008b04:	f805 6b01 	strb.w	r6, [r5], #1
 8008b08:	ec53 2b19 	vmov	r2, r3, d9
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4689      	mov	r9, r1
 8008b10:	f7f7 fff4 	bl	8000afc <__aeabi_dcmplt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d164      	bne.n	8008be2 <_dtoa_r+0x62a>
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	4937      	ldr	r1, [pc, #220]	; (8008bfc <_dtoa_r+0x644>)
 8008b1e:	2000      	movs	r0, #0
 8008b20:	f7f7 fbc2 	bl	80002a8 <__aeabi_dsub>
 8008b24:	ec53 2b19 	vmov	r2, r3, d9
 8008b28:	f7f7 ffe8 	bl	8000afc <__aeabi_dcmplt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f040 80b6 	bne.w	8008c9e <_dtoa_r+0x6e6>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	429d      	cmp	r5, r3
 8008b36:	f43f af7c 	beq.w	8008a32 <_dtoa_r+0x47a>
 8008b3a:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <_dtoa_r+0x648>)
 8008b3c:	ec51 0b19 	vmov	r0, r1, d9
 8008b40:	2200      	movs	r2, #0
 8008b42:	f7f7 fd69 	bl	8000618 <__aeabi_dmul>
 8008b46:	4b2e      	ldr	r3, [pc, #184]	; (8008c00 <_dtoa_r+0x648>)
 8008b48:	ec41 0b19 	vmov	d9, r0, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	f7f7 fd61 	bl	8000618 <__aeabi_dmul>
 8008b56:	4680      	mov	r8, r0
 8008b58:	4689      	mov	r9, r1
 8008b5a:	e7c5      	b.n	8008ae8 <_dtoa_r+0x530>
 8008b5c:	ec51 0b17 	vmov	r0, r1, d7
 8008b60:	f7f7 fd5a 	bl	8000618 <__aeabi_dmul>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	9d00      	ldr	r5, [sp, #0]
 8008b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b6a:	ec41 0b19 	vmov	d9, r0, r1
 8008b6e:	4649      	mov	r1, r9
 8008b70:	4640      	mov	r0, r8
 8008b72:	f7f8 f801 	bl	8000b78 <__aeabi_d2iz>
 8008b76:	4606      	mov	r6, r0
 8008b78:	f7f7 fce4 	bl	8000544 <__aeabi_i2d>
 8008b7c:	3630      	adds	r6, #48	; 0x30
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fb8f 	bl	80002a8 <__aeabi_dsub>
 8008b8a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	429d      	cmp	r5, r3
 8008b92:	4680      	mov	r8, r0
 8008b94:	4689      	mov	r9, r1
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	d124      	bne.n	8008be6 <_dtoa_r+0x62e>
 8008b9c:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <_dtoa_r+0x654>)
 8008b9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ba2:	f7f7 fb83 	bl	80002ac <__adddf3>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 ffc3 	bl	8000b38 <__aeabi_dcmpgt>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d173      	bne.n	8008c9e <_dtoa_r+0x6e6>
 8008bb6:	ec53 2b19 	vmov	r2, r3, d9
 8008bba:	4914      	ldr	r1, [pc, #80]	; (8008c0c <_dtoa_r+0x654>)
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f7f7 fb73 	bl	80002a8 <__aeabi_dsub>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 ff97 	bl	8000afc <__aeabi_dcmplt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f43f af2f 	beq.w	8008a32 <_dtoa_r+0x47a>
 8008bd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bd6:	1e6b      	subs	r3, r5, #1
 8008bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bde:	2b30      	cmp	r3, #48	; 0x30
 8008be0:	d0f8      	beq.n	8008bd4 <_dtoa_r+0x61c>
 8008be2:	46bb      	mov	fp, r7
 8008be4:	e04a      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008be6:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <_dtoa_r+0x648>)
 8008be8:	f7f7 fd16 	bl	8000618 <__aeabi_dmul>
 8008bec:	4680      	mov	r8, r0
 8008bee:	4689      	mov	r9, r1
 8008bf0:	e7bd      	b.n	8008b6e <_dtoa_r+0x5b6>
 8008bf2:	bf00      	nop
 8008bf4:	0800be20 	.word	0x0800be20
 8008bf8:	0800bdf8 	.word	0x0800bdf8
 8008bfc:	3ff00000 	.word	0x3ff00000
 8008c00:	40240000 	.word	0x40240000
 8008c04:	401c0000 	.word	0x401c0000
 8008c08:	40140000 	.word	0x40140000
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c14:	9d00      	ldr	r5, [sp, #0]
 8008c16:	4642      	mov	r2, r8
 8008c18:	464b      	mov	r3, r9
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 fe25 	bl	800086c <__aeabi_ddiv>
 8008c22:	f7f7 ffa9 	bl	8000b78 <__aeabi_d2iz>
 8008c26:	9001      	str	r0, [sp, #4]
 8008c28:	f7f7 fc8c 	bl	8000544 <__aeabi_i2d>
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	f7f7 fcf2 	bl	8000618 <__aeabi_dmul>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fb34 	bl	80002a8 <__aeabi_dsub>
 8008c40:	9e01      	ldr	r6, [sp, #4]
 8008c42:	9f04      	ldr	r7, [sp, #16]
 8008c44:	3630      	adds	r6, #48	; 0x30
 8008c46:	f805 6b01 	strb.w	r6, [r5], #1
 8008c4a:	9e00      	ldr	r6, [sp, #0]
 8008c4c:	1bae      	subs	r6, r5, r6
 8008c4e:	42b7      	cmp	r7, r6
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	d134      	bne.n	8008cc0 <_dtoa_r+0x708>
 8008c56:	f7f7 fb29 	bl	80002ac <__adddf3>
 8008c5a:	4642      	mov	r2, r8
 8008c5c:	464b      	mov	r3, r9
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f7f7 ff69 	bl	8000b38 <__aeabi_dcmpgt>
 8008c66:	b9c8      	cbnz	r0, 8008c9c <_dtoa_r+0x6e4>
 8008c68:	4642      	mov	r2, r8
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 ff3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c74:	b110      	cbz	r0, 8008c7c <_dtoa_r+0x6c4>
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	07db      	lsls	r3, r3, #31
 8008c7a:	d40f      	bmi.n	8008c9c <_dtoa_r+0x6e4>
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fb18 	bl	80092b4 <_Bfree>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c88:	702b      	strb	r3, [r5, #0]
 8008c8a:	f10b 0301 	add.w	r3, fp, #1
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f43f ace2 	beq.w	800865c <_dtoa_r+0xa4>
 8008c98:	601d      	str	r5, [r3, #0]
 8008c9a:	e4df      	b.n	800865c <_dtoa_r+0xa4>
 8008c9c:	465f      	mov	r7, fp
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	461d      	mov	r5, r3
 8008ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca6:	2a39      	cmp	r2, #57	; 0x39
 8008ca8:	d106      	bne.n	8008cb8 <_dtoa_r+0x700>
 8008caa:	9a00      	ldr	r2, [sp, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d1f7      	bne.n	8008ca0 <_dtoa_r+0x6e8>
 8008cb0:	9900      	ldr	r1, [sp, #0]
 8008cb2:	2230      	movs	r2, #48	; 0x30
 8008cb4:	3701      	adds	r7, #1
 8008cb6:	700a      	strb	r2, [r1, #0]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	3201      	adds	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e790      	b.n	8008be2 <_dtoa_r+0x62a>
 8008cc0:	4ba3      	ldr	r3, [pc, #652]	; (8008f50 <_dtoa_r+0x998>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 fca8 	bl	8000618 <__aeabi_dmul>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	f7f7 ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d09e      	beq.n	8008c16 <_dtoa_r+0x65e>
 8008cd8:	e7d0      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	f000 80ca 	beq.w	8008e76 <_dtoa_r+0x8be>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	2a01      	cmp	r2, #1
 8008ce6:	f300 80ad 	bgt.w	8008e44 <_dtoa_r+0x88c>
 8008cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	f000 80a5 	beq.w	8008e3c <_dtoa_r+0x884>
 8008cf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cf6:	9e08      	ldr	r6, [sp, #32]
 8008cf8:	9d05      	ldr	r5, [sp, #20]
 8008cfa:	9a05      	ldr	r2, [sp, #20]
 8008cfc:	441a      	add	r2, r3
 8008cfe:	9205      	str	r2, [sp, #20]
 8008d00:	9a06      	ldr	r2, [sp, #24]
 8008d02:	2101      	movs	r1, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	4620      	mov	r0, r4
 8008d08:	9206      	str	r2, [sp, #24]
 8008d0a:	f000 fbd3 	bl	80094b4 <__i2b>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	b165      	cbz	r5, 8008d2c <_dtoa_r+0x774>
 8008d12:	9b06      	ldr	r3, [sp, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd09      	ble.n	8008d2c <_dtoa_r+0x774>
 8008d18:	42ab      	cmp	r3, r5
 8008d1a:	9a05      	ldr	r2, [sp, #20]
 8008d1c:	bfa8      	it	ge
 8008d1e:	462b      	movge	r3, r5
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	9205      	str	r2, [sp, #20]
 8008d24:	9a06      	ldr	r2, [sp, #24]
 8008d26:	1aed      	subs	r5, r5, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	9306      	str	r3, [sp, #24]
 8008d2c:	9b08      	ldr	r3, [sp, #32]
 8008d2e:	b1f3      	cbz	r3, 8008d6e <_dtoa_r+0x7b6>
 8008d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80a3 	beq.w	8008e7e <_dtoa_r+0x8c6>
 8008d38:	2e00      	cmp	r6, #0
 8008d3a:	dd10      	ble.n	8008d5e <_dtoa_r+0x7a6>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4632      	mov	r2, r6
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fc77 	bl	8009634 <__pow5mult>
 8008d46:	4652      	mov	r2, sl
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 fbc7 	bl	80094e0 <__multiply>
 8008d52:	4651      	mov	r1, sl
 8008d54:	4680      	mov	r8, r0
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 faac 	bl	80092b4 <_Bfree>
 8008d5c:	46c2      	mov	sl, r8
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	1b9a      	subs	r2, r3, r6
 8008d62:	d004      	beq.n	8008d6e <_dtoa_r+0x7b6>
 8008d64:	4651      	mov	r1, sl
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fc64 	bl	8009634 <__pow5mult>
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fb9f 	bl	80094b4 <__i2b>
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	f340 8081 	ble.w	8008e82 <_dtoa_r+0x8ca>
 8008d80:	461a      	mov	r2, r3
 8008d82:	4601      	mov	r1, r0
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fc55 	bl	8009634 <__pow5mult>
 8008d8a:	9b07      	ldr	r3, [sp, #28]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	4606      	mov	r6, r0
 8008d90:	dd7a      	ble.n	8008e88 <_dtoa_r+0x8d0>
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	6933      	ldr	r3, [r6, #16]
 8008d98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d9c:	6918      	ldr	r0, [r3, #16]
 8008d9e:	f000 fb3b 	bl	8009418 <__hi0bits>
 8008da2:	f1c0 0020 	rsb	r0, r0, #32
 8008da6:	9b06      	ldr	r3, [sp, #24]
 8008da8:	4418      	add	r0, r3
 8008daa:	f010 001f 	ands.w	r0, r0, #31
 8008dae:	f000 8094 	beq.w	8008eda <_dtoa_r+0x922>
 8008db2:	f1c0 0320 	rsb	r3, r0, #32
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	f340 8085 	ble.w	8008ec6 <_dtoa_r+0x90e>
 8008dbc:	9b05      	ldr	r3, [sp, #20]
 8008dbe:	f1c0 001c 	rsb	r0, r0, #28
 8008dc2:	4403      	add	r3, r0
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	9b06      	ldr	r3, [sp, #24]
 8008dc8:	4403      	add	r3, r0
 8008dca:	4405      	add	r5, r0
 8008dcc:	9306      	str	r3, [sp, #24]
 8008dce:	9b05      	ldr	r3, [sp, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dd05      	ble.n	8008de0 <_dtoa_r+0x828>
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 fc85 	bl	80096e8 <__lshift>
 8008dde:	4682      	mov	sl, r0
 8008de0:	9b06      	ldr	r3, [sp, #24]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dd05      	ble.n	8008df2 <_dtoa_r+0x83a>
 8008de6:	4631      	mov	r1, r6
 8008de8:	461a      	mov	r2, r3
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 fc7c 	bl	80096e8 <__lshift>
 8008df0:	4606      	mov	r6, r0
 8008df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d072      	beq.n	8008ede <_dtoa_r+0x926>
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	f000 fce0 	bl	80097c0 <__mcmp>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	da6c      	bge.n	8008ede <_dtoa_r+0x926>
 8008e04:	2300      	movs	r3, #0
 8008e06:	4651      	mov	r1, sl
 8008e08:	220a      	movs	r2, #10
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fa74 	bl	80092f8 <__multadd>
 8008e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e16:	4682      	mov	sl, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 81b0 	beq.w	800917e <_dtoa_r+0xbc6>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	4639      	mov	r1, r7
 8008e22:	220a      	movs	r2, #10
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fa67 	bl	80092f8 <__multadd>
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	4607      	mov	r7, r0
 8008e30:	f300 8096 	bgt.w	8008f60 <_dtoa_r+0x9a8>
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	dc59      	bgt.n	8008eee <_dtoa_r+0x936>
 8008e3a:	e091      	b.n	8008f60 <_dtoa_r+0x9a8>
 8008e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e42:	e758      	b.n	8008cf6 <_dtoa_r+0x73e>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	1e5e      	subs	r6, r3, #1
 8008e48:	9b08      	ldr	r3, [sp, #32]
 8008e4a:	42b3      	cmp	r3, r6
 8008e4c:	bfbf      	itttt	lt
 8008e4e:	9b08      	ldrlt	r3, [sp, #32]
 8008e50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e52:	9608      	strlt	r6, [sp, #32]
 8008e54:	1af3      	sublt	r3, r6, r3
 8008e56:	bfb4      	ite	lt
 8008e58:	18d2      	addlt	r2, r2, r3
 8008e5a:	1b9e      	subge	r6, r3, r6
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	bfbc      	itt	lt
 8008e60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e62:	2600      	movlt	r6, #0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfb7      	itett	lt
 8008e68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e70:	1a9d      	sublt	r5, r3, r2
 8008e72:	2300      	movlt	r3, #0
 8008e74:	e741      	b.n	8008cfa <_dtoa_r+0x742>
 8008e76:	9e08      	ldr	r6, [sp, #32]
 8008e78:	9d05      	ldr	r5, [sp, #20]
 8008e7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e7c:	e748      	b.n	8008d10 <_dtoa_r+0x758>
 8008e7e:	9a08      	ldr	r2, [sp, #32]
 8008e80:	e770      	b.n	8008d64 <_dtoa_r+0x7ac>
 8008e82:	9b07      	ldr	r3, [sp, #28]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	dc19      	bgt.n	8008ebc <_dtoa_r+0x904>
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	b9bb      	cbnz	r3, 8008ebc <_dtoa_r+0x904>
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e92:	b99b      	cbnz	r3, 8008ebc <_dtoa_r+0x904>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e9a:	0d1b      	lsrs	r3, r3, #20
 8008e9c:	051b      	lsls	r3, r3, #20
 8008e9e:	b183      	cbz	r3, 8008ec2 <_dtoa_r+0x90a>
 8008ea0:	9b05      	ldr	r3, [sp, #20]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	9306      	str	r3, [sp, #24]
 8008eac:	f04f 0801 	mov.w	r8, #1
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f47f af6f 	bne.w	8008d96 <_dtoa_r+0x7de>
 8008eb8:	2001      	movs	r0, #1
 8008eba:	e774      	b.n	8008da6 <_dtoa_r+0x7ee>
 8008ebc:	f04f 0800 	mov.w	r8, #0
 8008ec0:	e7f6      	b.n	8008eb0 <_dtoa_r+0x8f8>
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	e7f4      	b.n	8008eb0 <_dtoa_r+0x8f8>
 8008ec6:	d082      	beq.n	8008dce <_dtoa_r+0x816>
 8008ec8:	9a05      	ldr	r2, [sp, #20]
 8008eca:	331c      	adds	r3, #28
 8008ecc:	441a      	add	r2, r3
 8008ece:	9205      	str	r2, [sp, #20]
 8008ed0:	9a06      	ldr	r2, [sp, #24]
 8008ed2:	441a      	add	r2, r3
 8008ed4:	441d      	add	r5, r3
 8008ed6:	9206      	str	r2, [sp, #24]
 8008ed8:	e779      	b.n	8008dce <_dtoa_r+0x816>
 8008eda:	4603      	mov	r3, r0
 8008edc:	e7f4      	b.n	8008ec8 <_dtoa_r+0x910>
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dc37      	bgt.n	8008f54 <_dtoa_r+0x99c>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	dd34      	ble.n	8008f54 <_dtoa_r+0x99c>
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	b963      	cbnz	r3, 8008f0c <_dtoa_r+0x954>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 f9fe 	bl	80092f8 <__multadd>
 8008efc:	4601      	mov	r1, r0
 8008efe:	4606      	mov	r6, r0
 8008f00:	4650      	mov	r0, sl
 8008f02:	f000 fc5d 	bl	80097c0 <__mcmp>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f73f adbb 	bgt.w	8008a82 <_dtoa_r+0x4ca>
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0e:	9d00      	ldr	r5, [sp, #0]
 8008f10:	ea6f 0b03 	mvn.w	fp, r3
 8008f14:	f04f 0800 	mov.w	r8, #0
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f9ca 	bl	80092b4 <_Bfree>
 8008f20:	2f00      	cmp	r7, #0
 8008f22:	f43f aeab 	beq.w	8008c7c <_dtoa_r+0x6c4>
 8008f26:	f1b8 0f00 	cmp.w	r8, #0
 8008f2a:	d005      	beq.n	8008f38 <_dtoa_r+0x980>
 8008f2c:	45b8      	cmp	r8, r7
 8008f2e:	d003      	beq.n	8008f38 <_dtoa_r+0x980>
 8008f30:	4641      	mov	r1, r8
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f9be 	bl	80092b4 <_Bfree>
 8008f38:	4639      	mov	r1, r7
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f000 f9ba 	bl	80092b4 <_Bfree>
 8008f40:	e69c      	b.n	8008c7c <_dtoa_r+0x6c4>
 8008f42:	2600      	movs	r6, #0
 8008f44:	4637      	mov	r7, r6
 8008f46:	e7e1      	b.n	8008f0c <_dtoa_r+0x954>
 8008f48:	46bb      	mov	fp, r7
 8008f4a:	4637      	mov	r7, r6
 8008f4c:	e599      	b.n	8008a82 <_dtoa_r+0x4ca>
 8008f4e:	bf00      	nop
 8008f50:	40240000 	.word	0x40240000
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80c8 	beq.w	80090ec <_dtoa_r+0xb34>
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	dd05      	ble.n	8008f70 <_dtoa_r+0x9b8>
 8008f64:	4639      	mov	r1, r7
 8008f66:	462a      	mov	r2, r5
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fbbd 	bl	80096e8 <__lshift>
 8008f6e:	4607      	mov	r7, r0
 8008f70:	f1b8 0f00 	cmp.w	r8, #0
 8008f74:	d05b      	beq.n	800902e <_dtoa_r+0xa76>
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 f95b 	bl	8009234 <_Balloc>
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b928      	cbnz	r0, 8008f8e <_dtoa_r+0x9d6>
 8008f82:	4b83      	ldr	r3, [pc, #524]	; (8009190 <_dtoa_r+0xbd8>)
 8008f84:	4602      	mov	r2, r0
 8008f86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f8a:	f7ff bb2e 	b.w	80085ea <_dtoa_r+0x32>
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	3202      	adds	r2, #2
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	f107 010c 	add.w	r1, r7, #12
 8008f98:	300c      	adds	r0, #12
 8008f9a:	f001 fe3d 	bl	800ac18 <memcpy>
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fba0 	bl	80096e8 <__lshift>
 8008fa8:	9b00      	ldr	r3, [sp, #0]
 8008faa:	3301      	adds	r3, #1
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	9308      	str	r3, [sp, #32]
 8008fb6:	9b02      	ldr	r3, [sp, #8]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	46b8      	mov	r8, r7
 8008fbe:	9306      	str	r3, [sp, #24]
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4650      	mov	r0, sl
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	f7ff fa6c 	bl	80084a8 <quorem>
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	9002      	str	r0, [sp, #8]
 8008fd4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fd8:	4650      	mov	r0, sl
 8008fda:	f000 fbf1 	bl	80097c0 <__mcmp>
 8008fde:	463a      	mov	r2, r7
 8008fe0:	9005      	str	r0, [sp, #20]
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fc07 	bl	80097f8 <__mdiff>
 8008fea:	68c2      	ldr	r2, [r0, #12]
 8008fec:	4605      	mov	r5, r0
 8008fee:	bb02      	cbnz	r2, 8009032 <_dtoa_r+0xa7a>
 8008ff0:	4601      	mov	r1, r0
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	f000 fbe4 	bl	80097c0 <__mcmp>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8009000:	f000 f958 	bl	80092b4 <_Bfree>
 8009004:	9b07      	ldr	r3, [sp, #28]
 8009006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009008:	9d04      	ldr	r5, [sp, #16]
 800900a:	ea43 0102 	orr.w	r1, r3, r2
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	4319      	orrs	r1, r3
 8009012:	d110      	bne.n	8009036 <_dtoa_r+0xa7e>
 8009014:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009018:	d029      	beq.n	800906e <_dtoa_r+0xab6>
 800901a:	9b05      	ldr	r3, [sp, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	dd02      	ble.n	8009026 <_dtoa_r+0xa6e>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	f883 9000 	strb.w	r9, [r3]
 800902c:	e774      	b.n	8008f18 <_dtoa_r+0x960>
 800902e:	4638      	mov	r0, r7
 8009030:	e7ba      	b.n	8008fa8 <_dtoa_r+0x9f0>
 8009032:	2201      	movs	r2, #1
 8009034:	e7e1      	b.n	8008ffa <_dtoa_r+0xa42>
 8009036:	9b05      	ldr	r3, [sp, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	db04      	blt.n	8009046 <_dtoa_r+0xa8e>
 800903c:	9907      	ldr	r1, [sp, #28]
 800903e:	430b      	orrs	r3, r1
 8009040:	9906      	ldr	r1, [sp, #24]
 8009042:	430b      	orrs	r3, r1
 8009044:	d120      	bne.n	8009088 <_dtoa_r+0xad0>
 8009046:	2a00      	cmp	r2, #0
 8009048:	dded      	ble.n	8009026 <_dtoa_r+0xa6e>
 800904a:	4651      	mov	r1, sl
 800904c:	2201      	movs	r2, #1
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fb4a 	bl	80096e8 <__lshift>
 8009054:	4631      	mov	r1, r6
 8009056:	4682      	mov	sl, r0
 8009058:	f000 fbb2 	bl	80097c0 <__mcmp>
 800905c:	2800      	cmp	r0, #0
 800905e:	dc03      	bgt.n	8009068 <_dtoa_r+0xab0>
 8009060:	d1e1      	bne.n	8009026 <_dtoa_r+0xa6e>
 8009062:	f019 0f01 	tst.w	r9, #1
 8009066:	d0de      	beq.n	8009026 <_dtoa_r+0xa6e>
 8009068:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800906c:	d1d8      	bne.n	8009020 <_dtoa_r+0xa68>
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	2339      	movs	r3, #57	; 0x39
 8009072:	7013      	strb	r3, [r2, #0]
 8009074:	462b      	mov	r3, r5
 8009076:	461d      	mov	r5, r3
 8009078:	3b01      	subs	r3, #1
 800907a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800907e:	2a39      	cmp	r2, #57	; 0x39
 8009080:	d06c      	beq.n	800915c <_dtoa_r+0xba4>
 8009082:	3201      	adds	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	e747      	b.n	8008f18 <_dtoa_r+0x960>
 8009088:	2a00      	cmp	r2, #0
 800908a:	dd07      	ble.n	800909c <_dtoa_r+0xae4>
 800908c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009090:	d0ed      	beq.n	800906e <_dtoa_r+0xab6>
 8009092:	9a01      	ldr	r2, [sp, #4]
 8009094:	f109 0301 	add.w	r3, r9, #1
 8009098:	7013      	strb	r3, [r2, #0]
 800909a:	e73d      	b.n	8008f18 <_dtoa_r+0x960>
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	9a08      	ldr	r2, [sp, #32]
 80090a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d043      	beq.n	8009130 <_dtoa_r+0xb78>
 80090a8:	4651      	mov	r1, sl
 80090aa:	2300      	movs	r3, #0
 80090ac:	220a      	movs	r2, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f922 	bl	80092f8 <__multadd>
 80090b4:	45b8      	cmp	r8, r7
 80090b6:	4682      	mov	sl, r0
 80090b8:	f04f 0300 	mov.w	r3, #0
 80090bc:	f04f 020a 	mov.w	r2, #10
 80090c0:	4641      	mov	r1, r8
 80090c2:	4620      	mov	r0, r4
 80090c4:	d107      	bne.n	80090d6 <_dtoa_r+0xb1e>
 80090c6:	f000 f917 	bl	80092f8 <__multadd>
 80090ca:	4680      	mov	r8, r0
 80090cc:	4607      	mov	r7, r0
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	3301      	adds	r3, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	e775      	b.n	8008fc2 <_dtoa_r+0xa0a>
 80090d6:	f000 f90f 	bl	80092f8 <__multadd>
 80090da:	4639      	mov	r1, r7
 80090dc:	4680      	mov	r8, r0
 80090de:	2300      	movs	r3, #0
 80090e0:	220a      	movs	r2, #10
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 f908 	bl	80092f8 <__multadd>
 80090e8:	4607      	mov	r7, r0
 80090ea:	e7f0      	b.n	80090ce <_dtoa_r+0xb16>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	9d00      	ldr	r5, [sp, #0]
 80090f2:	4631      	mov	r1, r6
 80090f4:	4650      	mov	r0, sl
 80090f6:	f7ff f9d7 	bl	80084a8 <quorem>
 80090fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	f805 9b01 	strb.w	r9, [r5], #1
 8009104:	1aea      	subs	r2, r5, r3
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	4293      	cmp	r3, r2
 800910a:	dd07      	ble.n	800911c <_dtoa_r+0xb64>
 800910c:	4651      	mov	r1, sl
 800910e:	2300      	movs	r3, #0
 8009110:	220a      	movs	r2, #10
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f8f0 	bl	80092f8 <__multadd>
 8009118:	4682      	mov	sl, r0
 800911a:	e7ea      	b.n	80090f2 <_dtoa_r+0xb3a>
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfc8      	it	gt
 8009122:	461d      	movgt	r5, r3
 8009124:	9b00      	ldr	r3, [sp, #0]
 8009126:	bfd8      	it	le
 8009128:	2501      	movle	r5, #1
 800912a:	441d      	add	r5, r3
 800912c:	f04f 0800 	mov.w	r8, #0
 8009130:	4651      	mov	r1, sl
 8009132:	2201      	movs	r2, #1
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fad7 	bl	80096e8 <__lshift>
 800913a:	4631      	mov	r1, r6
 800913c:	4682      	mov	sl, r0
 800913e:	f000 fb3f 	bl	80097c0 <__mcmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	dc96      	bgt.n	8009074 <_dtoa_r+0xabc>
 8009146:	d102      	bne.n	800914e <_dtoa_r+0xb96>
 8009148:	f019 0f01 	tst.w	r9, #1
 800914c:	d192      	bne.n	8009074 <_dtoa_r+0xabc>
 800914e:	462b      	mov	r3, r5
 8009150:	461d      	mov	r5, r3
 8009152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009156:	2a30      	cmp	r2, #48	; 0x30
 8009158:	d0fa      	beq.n	8009150 <_dtoa_r+0xb98>
 800915a:	e6dd      	b.n	8008f18 <_dtoa_r+0x960>
 800915c:	9a00      	ldr	r2, [sp, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d189      	bne.n	8009076 <_dtoa_r+0xabe>
 8009162:	f10b 0b01 	add.w	fp, fp, #1
 8009166:	2331      	movs	r3, #49	; 0x31
 8009168:	e796      	b.n	8009098 <_dtoa_r+0xae0>
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <_dtoa_r+0xbdc>)
 800916c:	f7ff ba99 	b.w	80086a2 <_dtoa_r+0xea>
 8009170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009172:	2b00      	cmp	r3, #0
 8009174:	f47f aa6d 	bne.w	8008652 <_dtoa_r+0x9a>
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <_dtoa_r+0xbe0>)
 800917a:	f7ff ba92 	b.w	80086a2 <_dtoa_r+0xea>
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	dcb5      	bgt.n	80090f0 <_dtoa_r+0xb38>
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	2b02      	cmp	r3, #2
 8009188:	f73f aeb1 	bgt.w	8008eee <_dtoa_r+0x936>
 800918c:	e7b0      	b.n	80090f0 <_dtoa_r+0xb38>
 800918e:	bf00      	nop
 8009190:	0800bd8a 	.word	0x0800bd8a
 8009194:	0800bce5 	.word	0x0800bce5
 8009198:	0800bd0e 	.word	0x0800bd0e

0800919c <_free_r>:
 800919c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919e:	2900      	cmp	r1, #0
 80091a0:	d044      	beq.n	800922c <_free_r+0x90>
 80091a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f1a1 0404 	sub.w	r4, r1, #4
 80091ae:	bfb8      	it	lt
 80091b0:	18e4      	addlt	r4, r4, r3
 80091b2:	f7fe f893 	bl	80072dc <__malloc_lock>
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <_free_r+0x94>)
 80091b8:	9801      	ldr	r0, [sp, #4]
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	b933      	cbnz	r3, 80091cc <_free_r+0x30>
 80091be:	6063      	str	r3, [r4, #4]
 80091c0:	6014      	str	r4, [r2, #0]
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c8:	f7fe b88e 	b.w	80072e8 <__malloc_unlock>
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d908      	bls.n	80091e2 <_free_r+0x46>
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	1961      	adds	r1, r4, r5
 80091d4:	428b      	cmp	r3, r1
 80091d6:	bf01      	itttt	eq
 80091d8:	6819      	ldreq	r1, [r3, #0]
 80091da:	685b      	ldreq	r3, [r3, #4]
 80091dc:	1949      	addeq	r1, r1, r5
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	e7ed      	b.n	80091be <_free_r+0x22>
 80091e2:	461a      	mov	r2, r3
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	b10b      	cbz	r3, 80091ec <_free_r+0x50>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d9fa      	bls.n	80091e2 <_free_r+0x46>
 80091ec:	6811      	ldr	r1, [r2, #0]
 80091ee:	1855      	adds	r5, r2, r1
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	d10b      	bne.n	800920c <_free_r+0x70>
 80091f4:	6824      	ldr	r4, [r4, #0]
 80091f6:	4421      	add	r1, r4
 80091f8:	1854      	adds	r4, r2, r1
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	d1e0      	bne.n	80091c2 <_free_r+0x26>
 8009200:	681c      	ldr	r4, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	6053      	str	r3, [r2, #4]
 8009206:	440c      	add	r4, r1
 8009208:	6014      	str	r4, [r2, #0]
 800920a:	e7da      	b.n	80091c2 <_free_r+0x26>
 800920c:	d902      	bls.n	8009214 <_free_r+0x78>
 800920e:	230c      	movs	r3, #12
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	e7d6      	b.n	80091c2 <_free_r+0x26>
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	1961      	adds	r1, r4, r5
 8009218:	428b      	cmp	r3, r1
 800921a:	bf04      	itt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	bf04      	itt	eq
 8009224:	1949      	addeq	r1, r1, r5
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	6054      	str	r4, [r2, #4]
 800922a:	e7ca      	b.n	80091c2 <_free_r+0x26>
 800922c:	b003      	add	sp, #12
 800922e:	bd30      	pop	{r4, r5, pc}
 8009230:	20000560 	.word	0x20000560

08009234 <_Balloc>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	69c6      	ldr	r6, [r0, #28]
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	b976      	cbnz	r6, 800925c <_Balloc+0x28>
 800923e:	2010      	movs	r0, #16
 8009240:	f7fd ff9c 	bl	800717c <malloc>
 8009244:	4602      	mov	r2, r0
 8009246:	61e0      	str	r0, [r4, #28]
 8009248:	b920      	cbnz	r0, 8009254 <_Balloc+0x20>
 800924a:	4b18      	ldr	r3, [pc, #96]	; (80092ac <_Balloc+0x78>)
 800924c:	4818      	ldr	r0, [pc, #96]	; (80092b0 <_Balloc+0x7c>)
 800924e:	216b      	movs	r1, #107	; 0x6b
 8009250:	f001 fcfa 	bl	800ac48 <__assert_func>
 8009254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009258:	6006      	str	r6, [r0, #0]
 800925a:	60c6      	str	r6, [r0, #12]
 800925c:	69e6      	ldr	r6, [r4, #28]
 800925e:	68f3      	ldr	r3, [r6, #12]
 8009260:	b183      	cbz	r3, 8009284 <_Balloc+0x50>
 8009262:	69e3      	ldr	r3, [r4, #28]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800926a:	b9b8      	cbnz	r0, 800929c <_Balloc+0x68>
 800926c:	2101      	movs	r1, #1
 800926e:	fa01 f605 	lsl.w	r6, r1, r5
 8009272:	1d72      	adds	r2, r6, #5
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	4620      	mov	r0, r4
 8009278:	f001 fd04 	bl	800ac84 <_calloc_r>
 800927c:	b160      	cbz	r0, 8009298 <_Balloc+0x64>
 800927e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009282:	e00e      	b.n	80092a2 <_Balloc+0x6e>
 8009284:	2221      	movs	r2, #33	; 0x21
 8009286:	2104      	movs	r1, #4
 8009288:	4620      	mov	r0, r4
 800928a:	f001 fcfb 	bl	800ac84 <_calloc_r>
 800928e:	69e3      	ldr	r3, [r4, #28]
 8009290:	60f0      	str	r0, [r6, #12]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e4      	bne.n	8009262 <_Balloc+0x2e>
 8009298:	2000      	movs	r0, #0
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	6802      	ldr	r2, [r0, #0]
 800929e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092a2:	2300      	movs	r3, #0
 80092a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092a8:	e7f7      	b.n	800929a <_Balloc+0x66>
 80092aa:	bf00      	nop
 80092ac:	0800bd1b 	.word	0x0800bd1b
 80092b0:	0800bd9b 	.word	0x0800bd9b

080092b4 <_Bfree>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	69c6      	ldr	r6, [r0, #28]
 80092b8:	4605      	mov	r5, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	b976      	cbnz	r6, 80092dc <_Bfree+0x28>
 80092be:	2010      	movs	r0, #16
 80092c0:	f7fd ff5c 	bl	800717c <malloc>
 80092c4:	4602      	mov	r2, r0
 80092c6:	61e8      	str	r0, [r5, #28]
 80092c8:	b920      	cbnz	r0, 80092d4 <_Bfree+0x20>
 80092ca:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <_Bfree+0x3c>)
 80092cc:	4809      	ldr	r0, [pc, #36]	; (80092f4 <_Bfree+0x40>)
 80092ce:	218f      	movs	r1, #143	; 0x8f
 80092d0:	f001 fcba 	bl	800ac48 <__assert_func>
 80092d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d8:	6006      	str	r6, [r0, #0]
 80092da:	60c6      	str	r6, [r0, #12]
 80092dc:	b13c      	cbz	r4, 80092ee <_Bfree+0x3a>
 80092de:	69eb      	ldr	r3, [r5, #28]
 80092e0:	6862      	ldr	r2, [r4, #4]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092e8:	6021      	str	r1, [r4, #0]
 80092ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	0800bd1b 	.word	0x0800bd1b
 80092f4:	0800bd9b 	.word	0x0800bd9b

080092f8 <__multadd>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	690d      	ldr	r5, [r1, #16]
 80092fe:	4607      	mov	r7, r0
 8009300:	460c      	mov	r4, r1
 8009302:	461e      	mov	r6, r3
 8009304:	f101 0c14 	add.w	ip, r1, #20
 8009308:	2000      	movs	r0, #0
 800930a:	f8dc 3000 	ldr.w	r3, [ip]
 800930e:	b299      	uxth	r1, r3
 8009310:	fb02 6101 	mla	r1, r2, r1, r6
 8009314:	0c1e      	lsrs	r6, r3, #16
 8009316:	0c0b      	lsrs	r3, r1, #16
 8009318:	fb02 3306 	mla	r3, r2, r6, r3
 800931c:	b289      	uxth	r1, r1
 800931e:	3001      	adds	r0, #1
 8009320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009324:	4285      	cmp	r5, r0
 8009326:	f84c 1b04 	str.w	r1, [ip], #4
 800932a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800932e:	dcec      	bgt.n	800930a <__multadd+0x12>
 8009330:	b30e      	cbz	r6, 8009376 <__multadd+0x7e>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	42ab      	cmp	r3, r5
 8009336:	dc19      	bgt.n	800936c <__multadd+0x74>
 8009338:	6861      	ldr	r1, [r4, #4]
 800933a:	4638      	mov	r0, r7
 800933c:	3101      	adds	r1, #1
 800933e:	f7ff ff79 	bl	8009234 <_Balloc>
 8009342:	4680      	mov	r8, r0
 8009344:	b928      	cbnz	r0, 8009352 <__multadd+0x5a>
 8009346:	4602      	mov	r2, r0
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <__multadd+0x84>)
 800934a:	480d      	ldr	r0, [pc, #52]	; (8009380 <__multadd+0x88>)
 800934c:	21ba      	movs	r1, #186	; 0xba
 800934e:	f001 fc7b 	bl	800ac48 <__assert_func>
 8009352:	6922      	ldr	r2, [r4, #16]
 8009354:	3202      	adds	r2, #2
 8009356:	f104 010c 	add.w	r1, r4, #12
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	300c      	adds	r0, #12
 800935e:	f001 fc5b 	bl	800ac18 <memcpy>
 8009362:	4621      	mov	r1, r4
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ffa5 	bl	80092b4 <_Bfree>
 800936a:	4644      	mov	r4, r8
 800936c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009370:	3501      	adds	r5, #1
 8009372:	615e      	str	r6, [r3, #20]
 8009374:	6125      	str	r5, [r4, #16]
 8009376:	4620      	mov	r0, r4
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	0800bd8a 	.word	0x0800bd8a
 8009380:	0800bd9b 	.word	0x0800bd9b

08009384 <__s2b>:
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	4615      	mov	r5, r2
 800938c:	461f      	mov	r7, r3
 800938e:	2209      	movs	r2, #9
 8009390:	3308      	adds	r3, #8
 8009392:	4606      	mov	r6, r0
 8009394:	fb93 f3f2 	sdiv	r3, r3, r2
 8009398:	2100      	movs	r1, #0
 800939a:	2201      	movs	r2, #1
 800939c:	429a      	cmp	r2, r3
 800939e:	db09      	blt.n	80093b4 <__s2b+0x30>
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff ff47 	bl	8009234 <_Balloc>
 80093a6:	b940      	cbnz	r0, 80093ba <__s2b+0x36>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4b19      	ldr	r3, [pc, #100]	; (8009410 <__s2b+0x8c>)
 80093ac:	4819      	ldr	r0, [pc, #100]	; (8009414 <__s2b+0x90>)
 80093ae:	21d3      	movs	r1, #211	; 0xd3
 80093b0:	f001 fc4a 	bl	800ac48 <__assert_func>
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	3101      	adds	r1, #1
 80093b8:	e7f0      	b.n	800939c <__s2b+0x18>
 80093ba:	9b08      	ldr	r3, [sp, #32]
 80093bc:	6143      	str	r3, [r0, #20]
 80093be:	2d09      	cmp	r5, #9
 80093c0:	f04f 0301 	mov.w	r3, #1
 80093c4:	6103      	str	r3, [r0, #16]
 80093c6:	dd16      	ble.n	80093f6 <__s2b+0x72>
 80093c8:	f104 0909 	add.w	r9, r4, #9
 80093cc:	46c8      	mov	r8, r9
 80093ce:	442c      	add	r4, r5
 80093d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093d4:	4601      	mov	r1, r0
 80093d6:	3b30      	subs	r3, #48	; 0x30
 80093d8:	220a      	movs	r2, #10
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff8c 	bl	80092f8 <__multadd>
 80093e0:	45a0      	cmp	r8, r4
 80093e2:	d1f5      	bne.n	80093d0 <__s2b+0x4c>
 80093e4:	f1a5 0408 	sub.w	r4, r5, #8
 80093e8:	444c      	add	r4, r9
 80093ea:	1b2d      	subs	r5, r5, r4
 80093ec:	1963      	adds	r3, r4, r5
 80093ee:	42bb      	cmp	r3, r7
 80093f0:	db04      	blt.n	80093fc <__s2b+0x78>
 80093f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f6:	340a      	adds	r4, #10
 80093f8:	2509      	movs	r5, #9
 80093fa:	e7f6      	b.n	80093ea <__s2b+0x66>
 80093fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009400:	4601      	mov	r1, r0
 8009402:	3b30      	subs	r3, #48	; 0x30
 8009404:	220a      	movs	r2, #10
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ff76 	bl	80092f8 <__multadd>
 800940c:	e7ee      	b.n	80093ec <__s2b+0x68>
 800940e:	bf00      	nop
 8009410:	0800bd8a 	.word	0x0800bd8a
 8009414:	0800bd9b 	.word	0x0800bd9b

08009418 <__hi0bits>:
 8009418:	0c03      	lsrs	r3, r0, #16
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	b9d3      	cbnz	r3, 8009454 <__hi0bits+0x3c>
 800941e:	0400      	lsls	r0, r0, #16
 8009420:	2310      	movs	r3, #16
 8009422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009426:	bf04      	itt	eq
 8009428:	0200      	lsleq	r0, r0, #8
 800942a:	3308      	addeq	r3, #8
 800942c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009430:	bf04      	itt	eq
 8009432:	0100      	lsleq	r0, r0, #4
 8009434:	3304      	addeq	r3, #4
 8009436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800943a:	bf04      	itt	eq
 800943c:	0080      	lsleq	r0, r0, #2
 800943e:	3302      	addeq	r3, #2
 8009440:	2800      	cmp	r0, #0
 8009442:	db05      	blt.n	8009450 <__hi0bits+0x38>
 8009444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009448:	f103 0301 	add.w	r3, r3, #1
 800944c:	bf08      	it	eq
 800944e:	2320      	moveq	r3, #32
 8009450:	4618      	mov	r0, r3
 8009452:	4770      	bx	lr
 8009454:	2300      	movs	r3, #0
 8009456:	e7e4      	b.n	8009422 <__hi0bits+0xa>

08009458 <__lo0bits>:
 8009458:	6803      	ldr	r3, [r0, #0]
 800945a:	f013 0207 	ands.w	r2, r3, #7
 800945e:	d00c      	beq.n	800947a <__lo0bits+0x22>
 8009460:	07d9      	lsls	r1, r3, #31
 8009462:	d422      	bmi.n	80094aa <__lo0bits+0x52>
 8009464:	079a      	lsls	r2, r3, #30
 8009466:	bf49      	itett	mi
 8009468:	085b      	lsrmi	r3, r3, #1
 800946a:	089b      	lsrpl	r3, r3, #2
 800946c:	6003      	strmi	r3, [r0, #0]
 800946e:	2201      	movmi	r2, #1
 8009470:	bf5c      	itt	pl
 8009472:	6003      	strpl	r3, [r0, #0]
 8009474:	2202      	movpl	r2, #2
 8009476:	4610      	mov	r0, r2
 8009478:	4770      	bx	lr
 800947a:	b299      	uxth	r1, r3
 800947c:	b909      	cbnz	r1, 8009482 <__lo0bits+0x2a>
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	2210      	movs	r2, #16
 8009482:	b2d9      	uxtb	r1, r3
 8009484:	b909      	cbnz	r1, 800948a <__lo0bits+0x32>
 8009486:	3208      	adds	r2, #8
 8009488:	0a1b      	lsrs	r3, r3, #8
 800948a:	0719      	lsls	r1, r3, #28
 800948c:	bf04      	itt	eq
 800948e:	091b      	lsreq	r3, r3, #4
 8009490:	3204      	addeq	r2, #4
 8009492:	0799      	lsls	r1, r3, #30
 8009494:	bf04      	itt	eq
 8009496:	089b      	lsreq	r3, r3, #2
 8009498:	3202      	addeq	r2, #2
 800949a:	07d9      	lsls	r1, r3, #31
 800949c:	d403      	bmi.n	80094a6 <__lo0bits+0x4e>
 800949e:	085b      	lsrs	r3, r3, #1
 80094a0:	f102 0201 	add.w	r2, r2, #1
 80094a4:	d003      	beq.n	80094ae <__lo0bits+0x56>
 80094a6:	6003      	str	r3, [r0, #0]
 80094a8:	e7e5      	b.n	8009476 <__lo0bits+0x1e>
 80094aa:	2200      	movs	r2, #0
 80094ac:	e7e3      	b.n	8009476 <__lo0bits+0x1e>
 80094ae:	2220      	movs	r2, #32
 80094b0:	e7e1      	b.n	8009476 <__lo0bits+0x1e>
	...

080094b4 <__i2b>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	2101      	movs	r1, #1
 80094ba:	f7ff febb 	bl	8009234 <_Balloc>
 80094be:	4602      	mov	r2, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__i2b+0x1a>
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <__i2b+0x24>)
 80094c4:	4805      	ldr	r0, [pc, #20]	; (80094dc <__i2b+0x28>)
 80094c6:	f240 1145 	movw	r1, #325	; 0x145
 80094ca:	f001 fbbd 	bl	800ac48 <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	6144      	str	r4, [r0, #20]
 80094d2:	6103      	str	r3, [r0, #16]
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0800bd8a 	.word	0x0800bd8a
 80094dc:	0800bd9b 	.word	0x0800bd9b

080094e0 <__multiply>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4691      	mov	r9, r2
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	bfb8      	it	lt
 80094f0:	460b      	movlt	r3, r1
 80094f2:	460c      	mov	r4, r1
 80094f4:	bfbc      	itt	lt
 80094f6:	464c      	movlt	r4, r9
 80094f8:	4699      	movlt	r9, r3
 80094fa:	6927      	ldr	r7, [r4, #16]
 80094fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	6861      	ldr	r1, [r4, #4]
 8009504:	eb07 060a 	add.w	r6, r7, sl
 8009508:	42b3      	cmp	r3, r6
 800950a:	b085      	sub	sp, #20
 800950c:	bfb8      	it	lt
 800950e:	3101      	addlt	r1, #1
 8009510:	f7ff fe90 	bl	8009234 <_Balloc>
 8009514:	b930      	cbnz	r0, 8009524 <__multiply+0x44>
 8009516:	4602      	mov	r2, r0
 8009518:	4b44      	ldr	r3, [pc, #272]	; (800962c <__multiply+0x14c>)
 800951a:	4845      	ldr	r0, [pc, #276]	; (8009630 <__multiply+0x150>)
 800951c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009520:	f001 fb92 	bl	800ac48 <__assert_func>
 8009524:	f100 0514 	add.w	r5, r0, #20
 8009528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800952c:	462b      	mov	r3, r5
 800952e:	2200      	movs	r2, #0
 8009530:	4543      	cmp	r3, r8
 8009532:	d321      	bcc.n	8009578 <__multiply+0x98>
 8009534:	f104 0314 	add.w	r3, r4, #20
 8009538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800953c:	f109 0314 	add.w	r3, r9, #20
 8009540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009544:	9202      	str	r2, [sp, #8]
 8009546:	1b3a      	subs	r2, r7, r4
 8009548:	3a15      	subs	r2, #21
 800954a:	f022 0203 	bic.w	r2, r2, #3
 800954e:	3204      	adds	r2, #4
 8009550:	f104 0115 	add.w	r1, r4, #21
 8009554:	428f      	cmp	r7, r1
 8009556:	bf38      	it	cc
 8009558:	2204      	movcc	r2, #4
 800955a:	9201      	str	r2, [sp, #4]
 800955c:	9a02      	ldr	r2, [sp, #8]
 800955e:	9303      	str	r3, [sp, #12]
 8009560:	429a      	cmp	r2, r3
 8009562:	d80c      	bhi.n	800957e <__multiply+0x9e>
 8009564:	2e00      	cmp	r6, #0
 8009566:	dd03      	ble.n	8009570 <__multiply+0x90>
 8009568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800956c:	2b00      	cmp	r3, #0
 800956e:	d05b      	beq.n	8009628 <__multiply+0x148>
 8009570:	6106      	str	r6, [r0, #16]
 8009572:	b005      	add	sp, #20
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	f843 2b04 	str.w	r2, [r3], #4
 800957c:	e7d8      	b.n	8009530 <__multiply+0x50>
 800957e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009582:	f1ba 0f00 	cmp.w	sl, #0
 8009586:	d024      	beq.n	80095d2 <__multiply+0xf2>
 8009588:	f104 0e14 	add.w	lr, r4, #20
 800958c:	46a9      	mov	r9, r5
 800958e:	f04f 0c00 	mov.w	ip, #0
 8009592:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009596:	f8d9 1000 	ldr.w	r1, [r9]
 800959a:	fa1f fb82 	uxth.w	fp, r2
 800959e:	b289      	uxth	r1, r1
 80095a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80095a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095a8:	f8d9 2000 	ldr.w	r2, [r9]
 80095ac:	4461      	add	r1, ip
 80095ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80095b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095ba:	b289      	uxth	r1, r1
 80095bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095c0:	4577      	cmp	r7, lr
 80095c2:	f849 1b04 	str.w	r1, [r9], #4
 80095c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ca:	d8e2      	bhi.n	8009592 <__multiply+0xb2>
 80095cc:	9a01      	ldr	r2, [sp, #4]
 80095ce:	f845 c002 	str.w	ip, [r5, r2]
 80095d2:	9a03      	ldr	r2, [sp, #12]
 80095d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095d8:	3304      	adds	r3, #4
 80095da:	f1b9 0f00 	cmp.w	r9, #0
 80095de:	d021      	beq.n	8009624 <__multiply+0x144>
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	f104 0c14 	add.w	ip, r4, #20
 80095e6:	46ae      	mov	lr, r5
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	f8bc b000 	ldrh.w	fp, [ip]
 80095f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80095f4:	fb09 220b 	mla	r2, r9, fp, r2
 80095f8:	4452      	add	r2, sl
 80095fa:	b289      	uxth	r1, r1
 80095fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009600:	f84e 1b04 	str.w	r1, [lr], #4
 8009604:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009608:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800960c:	f8be 1000 	ldrh.w	r1, [lr]
 8009610:	fb09 110a 	mla	r1, r9, sl, r1
 8009614:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009618:	4567      	cmp	r7, ip
 800961a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800961e:	d8e5      	bhi.n	80095ec <__multiply+0x10c>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	50a9      	str	r1, [r5, r2]
 8009624:	3504      	adds	r5, #4
 8009626:	e799      	b.n	800955c <__multiply+0x7c>
 8009628:	3e01      	subs	r6, #1
 800962a:	e79b      	b.n	8009564 <__multiply+0x84>
 800962c:	0800bd8a 	.word	0x0800bd8a
 8009630:	0800bd9b 	.word	0x0800bd9b

08009634 <__pow5mult>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4615      	mov	r5, r2
 800963a:	f012 0203 	ands.w	r2, r2, #3
 800963e:	4606      	mov	r6, r0
 8009640:	460f      	mov	r7, r1
 8009642:	d007      	beq.n	8009654 <__pow5mult+0x20>
 8009644:	4c25      	ldr	r4, [pc, #148]	; (80096dc <__pow5mult+0xa8>)
 8009646:	3a01      	subs	r2, #1
 8009648:	2300      	movs	r3, #0
 800964a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964e:	f7ff fe53 	bl	80092f8 <__multadd>
 8009652:	4607      	mov	r7, r0
 8009654:	10ad      	asrs	r5, r5, #2
 8009656:	d03d      	beq.n	80096d4 <__pow5mult+0xa0>
 8009658:	69f4      	ldr	r4, [r6, #28]
 800965a:	b97c      	cbnz	r4, 800967c <__pow5mult+0x48>
 800965c:	2010      	movs	r0, #16
 800965e:	f7fd fd8d 	bl	800717c <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	61f0      	str	r0, [r6, #28]
 8009666:	b928      	cbnz	r0, 8009674 <__pow5mult+0x40>
 8009668:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <__pow5mult+0xac>)
 800966a:	481e      	ldr	r0, [pc, #120]	; (80096e4 <__pow5mult+0xb0>)
 800966c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009670:	f001 faea 	bl	800ac48 <__assert_func>
 8009674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009678:	6004      	str	r4, [r0, #0]
 800967a:	60c4      	str	r4, [r0, #12]
 800967c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009684:	b94c      	cbnz	r4, 800969a <__pow5mult+0x66>
 8009686:	f240 2171 	movw	r1, #625	; 0x271
 800968a:	4630      	mov	r0, r6
 800968c:	f7ff ff12 	bl	80094b4 <__i2b>
 8009690:	2300      	movs	r3, #0
 8009692:	f8c8 0008 	str.w	r0, [r8, #8]
 8009696:	4604      	mov	r4, r0
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	07eb      	lsls	r3, r5, #31
 80096a0:	d50a      	bpl.n	80096b8 <__pow5mult+0x84>
 80096a2:	4639      	mov	r1, r7
 80096a4:	4622      	mov	r2, r4
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff1a 	bl	80094e0 <__multiply>
 80096ac:	4639      	mov	r1, r7
 80096ae:	4680      	mov	r8, r0
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff fdff 	bl	80092b4 <_Bfree>
 80096b6:	4647      	mov	r7, r8
 80096b8:	106d      	asrs	r5, r5, #1
 80096ba:	d00b      	beq.n	80096d4 <__pow5mult+0xa0>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	b938      	cbnz	r0, 80096d0 <__pow5mult+0x9c>
 80096c0:	4622      	mov	r2, r4
 80096c2:	4621      	mov	r1, r4
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ff0b 	bl	80094e0 <__multiply>
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f8c0 9000 	str.w	r9, [r0]
 80096d0:	4604      	mov	r4, r0
 80096d2:	e7e4      	b.n	800969e <__pow5mult+0x6a>
 80096d4:	4638      	mov	r0, r7
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	bf00      	nop
 80096dc:	0800bee8 	.word	0x0800bee8
 80096e0:	0800bd1b 	.word	0x0800bd1b
 80096e4:	0800bd9b 	.word	0x0800bd9b

080096e8 <__lshift>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	6849      	ldr	r1, [r1, #4]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	4607      	mov	r7, r0
 80096fa:	4691      	mov	r9, r2
 80096fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009700:	f108 0601 	add.w	r6, r8, #1
 8009704:	42b3      	cmp	r3, r6
 8009706:	db0b      	blt.n	8009720 <__lshift+0x38>
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff fd93 	bl	8009234 <_Balloc>
 800970e:	4605      	mov	r5, r0
 8009710:	b948      	cbnz	r0, 8009726 <__lshift+0x3e>
 8009712:	4602      	mov	r2, r0
 8009714:	4b28      	ldr	r3, [pc, #160]	; (80097b8 <__lshift+0xd0>)
 8009716:	4829      	ldr	r0, [pc, #164]	; (80097bc <__lshift+0xd4>)
 8009718:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800971c:	f001 fa94 	bl	800ac48 <__assert_func>
 8009720:	3101      	adds	r1, #1
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	e7ee      	b.n	8009704 <__lshift+0x1c>
 8009726:	2300      	movs	r3, #0
 8009728:	f100 0114 	add.w	r1, r0, #20
 800972c:	f100 0210 	add.w	r2, r0, #16
 8009730:	4618      	mov	r0, r3
 8009732:	4553      	cmp	r3, sl
 8009734:	db33      	blt.n	800979e <__lshift+0xb6>
 8009736:	6920      	ldr	r0, [r4, #16]
 8009738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800973c:	f104 0314 	add.w	r3, r4, #20
 8009740:	f019 091f 	ands.w	r9, r9, #31
 8009744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800974c:	d02b      	beq.n	80097a6 <__lshift+0xbe>
 800974e:	f1c9 0e20 	rsb	lr, r9, #32
 8009752:	468a      	mov	sl, r1
 8009754:	2200      	movs	r2, #0
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	fa00 f009 	lsl.w	r0, r0, r9
 800975c:	4310      	orrs	r0, r2
 800975e:	f84a 0b04 	str.w	r0, [sl], #4
 8009762:	f853 2b04 	ldr.w	r2, [r3], #4
 8009766:	459c      	cmp	ip, r3
 8009768:	fa22 f20e 	lsr.w	r2, r2, lr
 800976c:	d8f3      	bhi.n	8009756 <__lshift+0x6e>
 800976e:	ebac 0304 	sub.w	r3, ip, r4
 8009772:	3b15      	subs	r3, #21
 8009774:	f023 0303 	bic.w	r3, r3, #3
 8009778:	3304      	adds	r3, #4
 800977a:	f104 0015 	add.w	r0, r4, #21
 800977e:	4584      	cmp	ip, r0
 8009780:	bf38      	it	cc
 8009782:	2304      	movcc	r3, #4
 8009784:	50ca      	str	r2, [r1, r3]
 8009786:	b10a      	cbz	r2, 800978c <__lshift+0xa4>
 8009788:	f108 0602 	add.w	r6, r8, #2
 800978c:	3e01      	subs	r6, #1
 800978e:	4638      	mov	r0, r7
 8009790:	612e      	str	r6, [r5, #16]
 8009792:	4621      	mov	r1, r4
 8009794:	f7ff fd8e 	bl	80092b4 <_Bfree>
 8009798:	4628      	mov	r0, r5
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	f842 0f04 	str.w	r0, [r2, #4]!
 80097a2:	3301      	adds	r3, #1
 80097a4:	e7c5      	b.n	8009732 <__lshift+0x4a>
 80097a6:	3904      	subs	r1, #4
 80097a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80097b0:	459c      	cmp	ip, r3
 80097b2:	d8f9      	bhi.n	80097a8 <__lshift+0xc0>
 80097b4:	e7ea      	b.n	800978c <__lshift+0xa4>
 80097b6:	bf00      	nop
 80097b8:	0800bd8a 	.word	0x0800bd8a
 80097bc:	0800bd9b 	.word	0x0800bd9b

080097c0 <__mcmp>:
 80097c0:	b530      	push	{r4, r5, lr}
 80097c2:	6902      	ldr	r2, [r0, #16]
 80097c4:	690c      	ldr	r4, [r1, #16]
 80097c6:	1b12      	subs	r2, r2, r4
 80097c8:	d10e      	bne.n	80097e8 <__mcmp+0x28>
 80097ca:	f100 0314 	add.w	r3, r0, #20
 80097ce:	3114      	adds	r1, #20
 80097d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097e0:	42a5      	cmp	r5, r4
 80097e2:	d003      	beq.n	80097ec <__mcmp+0x2c>
 80097e4:	d305      	bcc.n	80097f2 <__mcmp+0x32>
 80097e6:	2201      	movs	r2, #1
 80097e8:	4610      	mov	r0, r2
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	4283      	cmp	r3, r0
 80097ee:	d3f3      	bcc.n	80097d8 <__mcmp+0x18>
 80097f0:	e7fa      	b.n	80097e8 <__mcmp+0x28>
 80097f2:	f04f 32ff 	mov.w	r2, #4294967295
 80097f6:	e7f7      	b.n	80097e8 <__mcmp+0x28>

080097f8 <__mdiff>:
 80097f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	460c      	mov	r4, r1
 80097fe:	4606      	mov	r6, r0
 8009800:	4611      	mov	r1, r2
 8009802:	4620      	mov	r0, r4
 8009804:	4690      	mov	r8, r2
 8009806:	f7ff ffdb 	bl	80097c0 <__mcmp>
 800980a:	1e05      	subs	r5, r0, #0
 800980c:	d110      	bne.n	8009830 <__mdiff+0x38>
 800980e:	4629      	mov	r1, r5
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff fd0f 	bl	8009234 <_Balloc>
 8009816:	b930      	cbnz	r0, 8009826 <__mdiff+0x2e>
 8009818:	4b3a      	ldr	r3, [pc, #232]	; (8009904 <__mdiff+0x10c>)
 800981a:	4602      	mov	r2, r0
 800981c:	f240 2137 	movw	r1, #567	; 0x237
 8009820:	4839      	ldr	r0, [pc, #228]	; (8009908 <__mdiff+0x110>)
 8009822:	f001 fa11 	bl	800ac48 <__assert_func>
 8009826:	2301      	movs	r3, #1
 8009828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800982c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009830:	bfa4      	itt	ge
 8009832:	4643      	movge	r3, r8
 8009834:	46a0      	movge	r8, r4
 8009836:	4630      	mov	r0, r6
 8009838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800983c:	bfa6      	itte	ge
 800983e:	461c      	movge	r4, r3
 8009840:	2500      	movge	r5, #0
 8009842:	2501      	movlt	r5, #1
 8009844:	f7ff fcf6 	bl	8009234 <_Balloc>
 8009848:	b920      	cbnz	r0, 8009854 <__mdiff+0x5c>
 800984a:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <__mdiff+0x10c>)
 800984c:	4602      	mov	r2, r0
 800984e:	f240 2145 	movw	r1, #581	; 0x245
 8009852:	e7e5      	b.n	8009820 <__mdiff+0x28>
 8009854:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009858:	6926      	ldr	r6, [r4, #16]
 800985a:	60c5      	str	r5, [r0, #12]
 800985c:	f104 0914 	add.w	r9, r4, #20
 8009860:	f108 0514 	add.w	r5, r8, #20
 8009864:	f100 0e14 	add.w	lr, r0, #20
 8009868:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800986c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009870:	f108 0210 	add.w	r2, r8, #16
 8009874:	46f2      	mov	sl, lr
 8009876:	2100      	movs	r1, #0
 8009878:	f859 3b04 	ldr.w	r3, [r9], #4
 800987c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009880:	fa11 f88b 	uxtah	r8, r1, fp
 8009884:	b299      	uxth	r1, r3
 8009886:	0c1b      	lsrs	r3, r3, #16
 8009888:	eba8 0801 	sub.w	r8, r8, r1
 800988c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009890:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009894:	fa1f f888 	uxth.w	r8, r8
 8009898:	1419      	asrs	r1, r3, #16
 800989a:	454e      	cmp	r6, r9
 800989c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098a0:	f84a 3b04 	str.w	r3, [sl], #4
 80098a4:	d8e8      	bhi.n	8009878 <__mdiff+0x80>
 80098a6:	1b33      	subs	r3, r6, r4
 80098a8:	3b15      	subs	r3, #21
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	3304      	adds	r3, #4
 80098b0:	3415      	adds	r4, #21
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	bf38      	it	cc
 80098b6:	2304      	movcc	r3, #4
 80098b8:	441d      	add	r5, r3
 80098ba:	4473      	add	r3, lr
 80098bc:	469e      	mov	lr, r3
 80098be:	462e      	mov	r6, r5
 80098c0:	4566      	cmp	r6, ip
 80098c2:	d30e      	bcc.n	80098e2 <__mdiff+0xea>
 80098c4:	f10c 0203 	add.w	r2, ip, #3
 80098c8:	1b52      	subs	r2, r2, r5
 80098ca:	f022 0203 	bic.w	r2, r2, #3
 80098ce:	3d03      	subs	r5, #3
 80098d0:	45ac      	cmp	ip, r5
 80098d2:	bf38      	it	cc
 80098d4:	2200      	movcc	r2, #0
 80098d6:	4413      	add	r3, r2
 80098d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098dc:	b17a      	cbz	r2, 80098fe <__mdiff+0x106>
 80098de:	6107      	str	r7, [r0, #16]
 80098e0:	e7a4      	b.n	800982c <__mdiff+0x34>
 80098e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80098e6:	fa11 f288 	uxtah	r2, r1, r8
 80098ea:	1414      	asrs	r4, r2, #16
 80098ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80098f0:	b292      	uxth	r2, r2
 80098f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80098f6:	f84e 2b04 	str.w	r2, [lr], #4
 80098fa:	1421      	asrs	r1, r4, #16
 80098fc:	e7e0      	b.n	80098c0 <__mdiff+0xc8>
 80098fe:	3f01      	subs	r7, #1
 8009900:	e7ea      	b.n	80098d8 <__mdiff+0xe0>
 8009902:	bf00      	nop
 8009904:	0800bd8a 	.word	0x0800bd8a
 8009908:	0800bd9b 	.word	0x0800bd9b

0800990c <__ulp>:
 800990c:	b082      	sub	sp, #8
 800990e:	ed8d 0b00 	vstr	d0, [sp]
 8009912:	9a01      	ldr	r2, [sp, #4]
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <__ulp+0x48>)
 8009916:	4013      	ands	r3, r2
 8009918:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800991c:	2b00      	cmp	r3, #0
 800991e:	dc08      	bgt.n	8009932 <__ulp+0x26>
 8009920:	425b      	negs	r3, r3
 8009922:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009926:	ea4f 5223 	mov.w	r2, r3, asr #20
 800992a:	da04      	bge.n	8009936 <__ulp+0x2a>
 800992c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009930:	4113      	asrs	r3, r2
 8009932:	2200      	movs	r2, #0
 8009934:	e008      	b.n	8009948 <__ulp+0x3c>
 8009936:	f1a2 0314 	sub.w	r3, r2, #20
 800993a:	2b1e      	cmp	r3, #30
 800993c:	bfda      	itte	le
 800993e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009942:	40da      	lsrle	r2, r3
 8009944:	2201      	movgt	r2, #1
 8009946:	2300      	movs	r3, #0
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	ec41 0b10 	vmov	d0, r0, r1
 8009950:	b002      	add	sp, #8
 8009952:	4770      	bx	lr
 8009954:	7ff00000 	.word	0x7ff00000

08009958 <__b2d>:
 8009958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995c:	6906      	ldr	r6, [r0, #16]
 800995e:	f100 0814 	add.w	r8, r0, #20
 8009962:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009966:	1f37      	subs	r7, r6, #4
 8009968:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800996c:	4610      	mov	r0, r2
 800996e:	f7ff fd53 	bl	8009418 <__hi0bits>
 8009972:	f1c0 0320 	rsb	r3, r0, #32
 8009976:	280a      	cmp	r0, #10
 8009978:	600b      	str	r3, [r1, #0]
 800997a:	491b      	ldr	r1, [pc, #108]	; (80099e8 <__b2d+0x90>)
 800997c:	dc15      	bgt.n	80099aa <__b2d+0x52>
 800997e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009982:	fa22 f30c 	lsr.w	r3, r2, ip
 8009986:	45b8      	cmp	r8, r7
 8009988:	ea43 0501 	orr.w	r5, r3, r1
 800998c:	bf34      	ite	cc
 800998e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009992:	2300      	movcs	r3, #0
 8009994:	3015      	adds	r0, #21
 8009996:	fa02 f000 	lsl.w	r0, r2, r0
 800999a:	fa23 f30c 	lsr.w	r3, r3, ip
 800999e:	4303      	orrs	r3, r0
 80099a0:	461c      	mov	r4, r3
 80099a2:	ec45 4b10 	vmov	d0, r4, r5
 80099a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099aa:	45b8      	cmp	r8, r7
 80099ac:	bf3a      	itte	cc
 80099ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80099b6:	2300      	movcs	r3, #0
 80099b8:	380b      	subs	r0, #11
 80099ba:	d012      	beq.n	80099e2 <__b2d+0x8a>
 80099bc:	f1c0 0120 	rsb	r1, r0, #32
 80099c0:	fa23 f401 	lsr.w	r4, r3, r1
 80099c4:	4082      	lsls	r2, r0
 80099c6:	4322      	orrs	r2, r4
 80099c8:	4547      	cmp	r7, r8
 80099ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80099ce:	bf8c      	ite	hi
 80099d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80099d4:	2200      	movls	r2, #0
 80099d6:	4083      	lsls	r3, r0
 80099d8:	40ca      	lsrs	r2, r1
 80099da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099de:	4313      	orrs	r3, r2
 80099e0:	e7de      	b.n	80099a0 <__b2d+0x48>
 80099e2:	ea42 0501 	orr.w	r5, r2, r1
 80099e6:	e7db      	b.n	80099a0 <__b2d+0x48>
 80099e8:	3ff00000 	.word	0x3ff00000

080099ec <__d2b>:
 80099ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	460f      	mov	r7, r1
 80099f2:	2101      	movs	r1, #1
 80099f4:	ec59 8b10 	vmov	r8, r9, d0
 80099f8:	4616      	mov	r6, r2
 80099fa:	f7ff fc1b 	bl	8009234 <_Balloc>
 80099fe:	4604      	mov	r4, r0
 8009a00:	b930      	cbnz	r0, 8009a10 <__d2b+0x24>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <__d2b+0xac>)
 8009a06:	4825      	ldr	r0, [pc, #148]	; (8009a9c <__d2b+0xb0>)
 8009a08:	f240 310f 	movw	r1, #783	; 0x30f
 8009a0c:	f001 f91c 	bl	800ac48 <__assert_func>
 8009a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a18:	bb2d      	cbnz	r5, 8009a66 <__d2b+0x7a>
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8009a20:	d026      	beq.n	8009a70 <__d2b+0x84>
 8009a22:	4668      	mov	r0, sp
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	f7ff fd17 	bl	8009458 <__lo0bits>
 8009a2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a2e:	b1e8      	cbz	r0, 8009a6c <__d2b+0x80>
 8009a30:	f1c0 0320 	rsb	r3, r0, #32
 8009a34:	fa02 f303 	lsl.w	r3, r2, r3
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	40c2      	lsrs	r2, r0
 8009a3c:	6163      	str	r3, [r4, #20]
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	61a3      	str	r3, [r4, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	bf14      	ite	ne
 8009a48:	2202      	movne	r2, #2
 8009a4a:	2201      	moveq	r2, #1
 8009a4c:	6122      	str	r2, [r4, #16]
 8009a4e:	b1bd      	cbz	r5, 8009a80 <__d2b+0x94>
 8009a50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a54:	4405      	add	r5, r0
 8009a56:	603d      	str	r5, [r7, #0]
 8009a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a5c:	6030      	str	r0, [r6, #0]
 8009a5e:	4620      	mov	r0, r4
 8009a60:	b003      	add	sp, #12
 8009a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a6a:	e7d6      	b.n	8009a1a <__d2b+0x2e>
 8009a6c:	6161      	str	r1, [r4, #20]
 8009a6e:	e7e7      	b.n	8009a40 <__d2b+0x54>
 8009a70:	a801      	add	r0, sp, #4
 8009a72:	f7ff fcf1 	bl	8009458 <__lo0bits>
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	6163      	str	r3, [r4, #20]
 8009a7a:	3020      	adds	r0, #32
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	e7e5      	b.n	8009a4c <__d2b+0x60>
 8009a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a88:	6038      	str	r0, [r7, #0]
 8009a8a:	6918      	ldr	r0, [r3, #16]
 8009a8c:	f7ff fcc4 	bl	8009418 <__hi0bits>
 8009a90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a94:	e7e2      	b.n	8009a5c <__d2b+0x70>
 8009a96:	bf00      	nop
 8009a98:	0800bd8a 	.word	0x0800bd8a
 8009a9c:	0800bd9b 	.word	0x0800bd9b

08009aa0 <__ratio>:
 8009aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4688      	mov	r8, r1
 8009aa6:	4669      	mov	r1, sp
 8009aa8:	4681      	mov	r9, r0
 8009aaa:	f7ff ff55 	bl	8009958 <__b2d>
 8009aae:	a901      	add	r1, sp, #4
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	ec55 4b10 	vmov	r4, r5, d0
 8009ab6:	f7ff ff4f 	bl	8009958 <__b2d>
 8009aba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009abe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009ac2:	eba3 0c02 	sub.w	ip, r3, r2
 8009ac6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ad0:	ec51 0b10 	vmov	r0, r1, d0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfd6      	itet	le
 8009ad8:	460a      	movle	r2, r1
 8009ada:	462a      	movgt	r2, r5
 8009adc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ae0:	468b      	mov	fp, r1
 8009ae2:	462f      	mov	r7, r5
 8009ae4:	bfd4      	ite	le
 8009ae6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009aea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009aee:	4620      	mov	r0, r4
 8009af0:	ee10 2a10 	vmov	r2, s0
 8009af4:	465b      	mov	r3, fp
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 feb8 	bl	800086c <__aeabi_ddiv>
 8009afc:	ec41 0b10 	vmov	d0, r0, r1
 8009b00:	b003      	add	sp, #12
 8009b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b06 <__copybits>:
 8009b06:	3901      	subs	r1, #1
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	1149      	asrs	r1, r1, #5
 8009b0c:	6914      	ldr	r4, [r2, #16]
 8009b0e:	3101      	adds	r1, #1
 8009b10:	f102 0314 	add.w	r3, r2, #20
 8009b14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b1c:	1f05      	subs	r5, r0, #4
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	d30c      	bcc.n	8009b3c <__copybits+0x36>
 8009b22:	1aa3      	subs	r3, r4, r2
 8009b24:	3b11      	subs	r3, #17
 8009b26:	f023 0303 	bic.w	r3, r3, #3
 8009b2a:	3211      	adds	r2, #17
 8009b2c:	42a2      	cmp	r2, r4
 8009b2e:	bf88      	it	hi
 8009b30:	2300      	movhi	r3, #0
 8009b32:	4418      	add	r0, r3
 8009b34:	2300      	movs	r3, #0
 8009b36:	4288      	cmp	r0, r1
 8009b38:	d305      	bcc.n	8009b46 <__copybits+0x40>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b40:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b44:	e7eb      	b.n	8009b1e <__copybits+0x18>
 8009b46:	f840 3b04 	str.w	r3, [r0], #4
 8009b4a:	e7f4      	b.n	8009b36 <__copybits+0x30>

08009b4c <__any_on>:
 8009b4c:	f100 0214 	add.w	r2, r0, #20
 8009b50:	6900      	ldr	r0, [r0, #16]
 8009b52:	114b      	asrs	r3, r1, #5
 8009b54:	4298      	cmp	r0, r3
 8009b56:	b510      	push	{r4, lr}
 8009b58:	db11      	blt.n	8009b7e <__any_on+0x32>
 8009b5a:	dd0a      	ble.n	8009b72 <__any_on+0x26>
 8009b5c:	f011 011f 	ands.w	r1, r1, #31
 8009b60:	d007      	beq.n	8009b72 <__any_on+0x26>
 8009b62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b66:	fa24 f001 	lsr.w	r0, r4, r1
 8009b6a:	fa00 f101 	lsl.w	r1, r0, r1
 8009b6e:	428c      	cmp	r4, r1
 8009b70:	d10b      	bne.n	8009b8a <__any_on+0x3e>
 8009b72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d803      	bhi.n	8009b82 <__any_on+0x36>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	bd10      	pop	{r4, pc}
 8009b7e:	4603      	mov	r3, r0
 8009b80:	e7f7      	b.n	8009b72 <__any_on+0x26>
 8009b82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b86:	2900      	cmp	r1, #0
 8009b88:	d0f5      	beq.n	8009b76 <__any_on+0x2a>
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7f6      	b.n	8009b7c <__any_on+0x30>

08009b8e <sulp>:
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	ec45 4b10 	vmov	d0, r4, r5
 8009b98:	4616      	mov	r6, r2
 8009b9a:	f7ff feb7 	bl	800990c <__ulp>
 8009b9e:	ec51 0b10 	vmov	r0, r1, d0
 8009ba2:	b17e      	cbz	r6, 8009bc4 <sulp+0x36>
 8009ba4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009ba8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd09      	ble.n	8009bc4 <sulp+0x36>
 8009bb0:	051b      	lsls	r3, r3, #20
 8009bb2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009bb6:	2400      	movs	r4, #0
 8009bb8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bbc:	4622      	mov	r2, r4
 8009bbe:	462b      	mov	r3, r5
 8009bc0:	f7f6 fd2a 	bl	8000618 <__aeabi_dmul>
 8009bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bc8 <_strtod_l>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	ed2d 8b02 	vpush	{d8}
 8009bd0:	b09b      	sub	sp, #108	; 0x6c
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	9216      	str	r2, [sp, #88]	; 0x58
 8009bda:	460d      	mov	r5, r1
 8009bdc:	f04f 0800 	mov.w	r8, #0
 8009be0:	f04f 0900 	mov.w	r9, #0
 8009be4:	460a      	mov	r2, r1
 8009be6:	9215      	str	r2, [sp, #84]	; 0x54
 8009be8:	7811      	ldrb	r1, [r2, #0]
 8009bea:	292b      	cmp	r1, #43	; 0x2b
 8009bec:	d04c      	beq.n	8009c88 <_strtod_l+0xc0>
 8009bee:	d83a      	bhi.n	8009c66 <_strtod_l+0x9e>
 8009bf0:	290d      	cmp	r1, #13
 8009bf2:	d834      	bhi.n	8009c5e <_strtod_l+0x96>
 8009bf4:	2908      	cmp	r1, #8
 8009bf6:	d834      	bhi.n	8009c62 <_strtod_l+0x9a>
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	d03d      	beq.n	8009c78 <_strtod_l+0xb0>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8009c00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009c02:	7832      	ldrb	r2, [r6, #0]
 8009c04:	2a30      	cmp	r2, #48	; 0x30
 8009c06:	f040 80b4 	bne.w	8009d72 <_strtod_l+0x1aa>
 8009c0a:	7872      	ldrb	r2, [r6, #1]
 8009c0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009c10:	2a58      	cmp	r2, #88	; 0x58
 8009c12:	d170      	bne.n	8009cf6 <_strtod_l+0x12e>
 8009c14:	9302      	str	r3, [sp, #8]
 8009c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	ab16      	add	r3, sp, #88	; 0x58
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4a8e      	ldr	r2, [pc, #568]	; (8009e58 <_strtod_l+0x290>)
 8009c20:	ab17      	add	r3, sp, #92	; 0x5c
 8009c22:	a915      	add	r1, sp, #84	; 0x54
 8009c24:	4620      	mov	r0, r4
 8009c26:	f001 f8ab 	bl	800ad80 <__gethex>
 8009c2a:	f010 070f 	ands.w	r7, r0, #15
 8009c2e:	4605      	mov	r5, r0
 8009c30:	d005      	beq.n	8009c3e <_strtod_l+0x76>
 8009c32:	2f06      	cmp	r7, #6
 8009c34:	d12a      	bne.n	8009c8c <_strtod_l+0xc4>
 8009c36:	3601      	adds	r6, #1
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9615      	str	r6, [sp, #84]	; 0x54
 8009c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009c3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 857f 	bne.w	800a744 <_strtod_l+0xb7c>
 8009c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c48:	b1db      	cbz	r3, 8009c82 <_strtod_l+0xba>
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c50:	ec43 2b10 	vmov	d0, r2, r3
 8009c54:	b01b      	add	sp, #108	; 0x6c
 8009c56:	ecbd 8b02 	vpop	{d8}
 8009c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5e:	2920      	cmp	r1, #32
 8009c60:	d1cc      	bne.n	8009bfc <_strtod_l+0x34>
 8009c62:	3201      	adds	r2, #1
 8009c64:	e7bf      	b.n	8009be6 <_strtod_l+0x1e>
 8009c66:	292d      	cmp	r1, #45	; 0x2d
 8009c68:	d1c8      	bne.n	8009bfc <_strtod_l+0x34>
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	910a      	str	r1, [sp, #40]	; 0x28
 8009c6e:	1c51      	adds	r1, r2, #1
 8009c70:	9115      	str	r1, [sp, #84]	; 0x54
 8009c72:	7852      	ldrb	r2, [r2, #1]
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	d1c3      	bne.n	8009c00 <_strtod_l+0x38>
 8009c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c7a:	9515      	str	r5, [sp, #84]	; 0x54
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 855f 	bne.w	800a740 <_strtod_l+0xb78>
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	e7e3      	b.n	8009c50 <_strtod_l+0x88>
 8009c88:	2100      	movs	r1, #0
 8009c8a:	e7ef      	b.n	8009c6c <_strtod_l+0xa4>
 8009c8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009c8e:	b13a      	cbz	r2, 8009ca0 <_strtod_l+0xd8>
 8009c90:	2135      	movs	r1, #53	; 0x35
 8009c92:	a818      	add	r0, sp, #96	; 0x60
 8009c94:	f7ff ff37 	bl	8009b06 <__copybits>
 8009c98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f7ff fb0a 	bl	80092b4 <_Bfree>
 8009ca0:	3f01      	subs	r7, #1
 8009ca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ca4:	2f04      	cmp	r7, #4
 8009ca6:	d806      	bhi.n	8009cb6 <_strtod_l+0xee>
 8009ca8:	e8df f007 	tbb	[pc, r7]
 8009cac:	201d0314 	.word	0x201d0314
 8009cb0:	14          	.byte	0x14
 8009cb1:	00          	.byte	0x00
 8009cb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009cb6:	05e9      	lsls	r1, r5, #23
 8009cb8:	bf48      	it	mi
 8009cba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009cbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cc2:	0d1b      	lsrs	r3, r3, #20
 8009cc4:	051b      	lsls	r3, r3, #20
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1b9      	bne.n	8009c3e <_strtod_l+0x76>
 8009cca:	f7fe fbb1 	bl	8008430 <__errno>
 8009cce:	2322      	movs	r3, #34	; 0x22
 8009cd0:	6003      	str	r3, [r0, #0]
 8009cd2:	e7b4      	b.n	8009c3e <_strtod_l+0x76>
 8009cd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009cd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ce0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009ce4:	e7e7      	b.n	8009cb6 <_strtod_l+0xee>
 8009ce6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009e60 <_strtod_l+0x298>
 8009cea:	e7e4      	b.n	8009cb6 <_strtod_l+0xee>
 8009cec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009cf0:	f04f 38ff 	mov.w	r8, #4294967295
 8009cf4:	e7df      	b.n	8009cb6 <_strtod_l+0xee>
 8009cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	9215      	str	r2, [sp, #84]	; 0x54
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b30      	cmp	r3, #48	; 0x30
 8009d00:	d0f9      	beq.n	8009cf6 <_strtod_l+0x12e>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d09b      	beq.n	8009c3e <_strtod_l+0x76>
 8009d06:	2301      	movs	r3, #1
 8009d08:	f04f 0a00 	mov.w	sl, #0
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009d16:	46d3      	mov	fp, sl
 8009d18:	220a      	movs	r2, #10
 8009d1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009d1c:	7806      	ldrb	r6, [r0, #0]
 8009d1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d22:	b2d9      	uxtb	r1, r3
 8009d24:	2909      	cmp	r1, #9
 8009d26:	d926      	bls.n	8009d76 <_strtod_l+0x1ae>
 8009d28:	494c      	ldr	r1, [pc, #304]	; (8009e5c <_strtod_l+0x294>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f000 ff62 	bl	800abf4 <strncmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d030      	beq.n	8009d96 <_strtod_l+0x1ce>
 8009d34:	2000      	movs	r0, #0
 8009d36:	4632      	mov	r2, r6
 8009d38:	9005      	str	r0, [sp, #20]
 8009d3a:	465e      	mov	r6, fp
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2a65      	cmp	r2, #101	; 0x65
 8009d40:	d001      	beq.n	8009d46 <_strtod_l+0x17e>
 8009d42:	2a45      	cmp	r2, #69	; 0x45
 8009d44:	d113      	bne.n	8009d6e <_strtod_l+0x1a6>
 8009d46:	b91e      	cbnz	r6, 8009d50 <_strtod_l+0x188>
 8009d48:	9a04      	ldr	r2, [sp, #16]
 8009d4a:	4302      	orrs	r2, r0
 8009d4c:	d094      	beq.n	8009c78 <_strtod_l+0xb0>
 8009d4e:	2600      	movs	r6, #0
 8009d50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009d52:	1c6a      	adds	r2, r5, #1
 8009d54:	9215      	str	r2, [sp, #84]	; 0x54
 8009d56:	786a      	ldrb	r2, [r5, #1]
 8009d58:	2a2b      	cmp	r2, #43	; 0x2b
 8009d5a:	d074      	beq.n	8009e46 <_strtod_l+0x27e>
 8009d5c:	2a2d      	cmp	r2, #45	; 0x2d
 8009d5e:	d078      	beq.n	8009e52 <_strtod_l+0x28a>
 8009d60:	f04f 0c00 	mov.w	ip, #0
 8009d64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009d68:	2909      	cmp	r1, #9
 8009d6a:	d97f      	bls.n	8009e6c <_strtod_l+0x2a4>
 8009d6c:	9515      	str	r5, [sp, #84]	; 0x54
 8009d6e:	2700      	movs	r7, #0
 8009d70:	e09e      	b.n	8009eb0 <_strtod_l+0x2e8>
 8009d72:	2300      	movs	r3, #0
 8009d74:	e7c8      	b.n	8009d08 <_strtod_l+0x140>
 8009d76:	f1bb 0f08 	cmp.w	fp, #8
 8009d7a:	bfd8      	it	le
 8009d7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009d7e:	f100 0001 	add.w	r0, r0, #1
 8009d82:	bfda      	itte	le
 8009d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d88:	9309      	strle	r3, [sp, #36]	; 0x24
 8009d8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009d8e:	f10b 0b01 	add.w	fp, fp, #1
 8009d92:	9015      	str	r0, [sp, #84]	; 0x54
 8009d94:	e7c1      	b.n	8009d1a <_strtod_l+0x152>
 8009d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d98:	1c5a      	adds	r2, r3, #1
 8009d9a:	9215      	str	r2, [sp, #84]	; 0x54
 8009d9c:	785a      	ldrb	r2, [r3, #1]
 8009d9e:	f1bb 0f00 	cmp.w	fp, #0
 8009da2:	d037      	beq.n	8009e14 <_strtod_l+0x24c>
 8009da4:	9005      	str	r0, [sp, #20]
 8009da6:	465e      	mov	r6, fp
 8009da8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	d912      	bls.n	8009dd6 <_strtod_l+0x20e>
 8009db0:	2301      	movs	r3, #1
 8009db2:	e7c4      	b.n	8009d3e <_strtod_l+0x176>
 8009db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	9215      	str	r2, [sp, #84]	; 0x54
 8009dba:	785a      	ldrb	r2, [r3, #1]
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	2a30      	cmp	r2, #48	; 0x30
 8009dc0:	d0f8      	beq.n	8009db4 <_strtod_l+0x1ec>
 8009dc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009dc6:	2b08      	cmp	r3, #8
 8009dc8:	f200 84c1 	bhi.w	800a74e <_strtod_l+0xb86>
 8009dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dce:	9005      	str	r0, [sp, #20]
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	3a30      	subs	r2, #48	; 0x30
 8009dd8:	f100 0301 	add.w	r3, r0, #1
 8009ddc:	d014      	beq.n	8009e08 <_strtod_l+0x240>
 8009dde:	9905      	ldr	r1, [sp, #20]
 8009de0:	4419      	add	r1, r3
 8009de2:	9105      	str	r1, [sp, #20]
 8009de4:	4633      	mov	r3, r6
 8009de6:	eb00 0c06 	add.w	ip, r0, r6
 8009dea:	210a      	movs	r1, #10
 8009dec:	4563      	cmp	r3, ip
 8009dee:	d113      	bne.n	8009e18 <_strtod_l+0x250>
 8009df0:	1833      	adds	r3, r6, r0
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	f106 0601 	add.w	r6, r6, #1
 8009df8:	4406      	add	r6, r0
 8009dfa:	dc1a      	bgt.n	8009e32 <_strtod_l+0x26a>
 8009dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfe:	230a      	movs	r3, #10
 8009e00:	fb03 2301 	mla	r3, r3, r1, r2
 8009e04:	9309      	str	r3, [sp, #36]	; 0x24
 8009e06:	2300      	movs	r3, #0
 8009e08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e0a:	1c51      	adds	r1, r2, #1
 8009e0c:	9115      	str	r1, [sp, #84]	; 0x54
 8009e0e:	7852      	ldrb	r2, [r2, #1]
 8009e10:	4618      	mov	r0, r3
 8009e12:	e7c9      	b.n	8009da8 <_strtod_l+0x1e0>
 8009e14:	4658      	mov	r0, fp
 8009e16:	e7d2      	b.n	8009dbe <_strtod_l+0x1f6>
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	f103 0301 	add.w	r3, r3, #1
 8009e1e:	dc03      	bgt.n	8009e28 <_strtod_l+0x260>
 8009e20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e22:	434f      	muls	r7, r1
 8009e24:	9709      	str	r7, [sp, #36]	; 0x24
 8009e26:	e7e1      	b.n	8009dec <_strtod_l+0x224>
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	bfd8      	it	le
 8009e2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009e30:	e7dc      	b.n	8009dec <_strtod_l+0x224>
 8009e32:	2e10      	cmp	r6, #16
 8009e34:	bfdc      	itt	le
 8009e36:	230a      	movle	r3, #10
 8009e38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009e3c:	e7e3      	b.n	8009e06 <_strtod_l+0x23e>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	2301      	movs	r3, #1
 8009e44:	e780      	b.n	8009d48 <_strtod_l+0x180>
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	1caa      	adds	r2, r5, #2
 8009e4c:	9215      	str	r2, [sp, #84]	; 0x54
 8009e4e:	78aa      	ldrb	r2, [r5, #2]
 8009e50:	e788      	b.n	8009d64 <_strtod_l+0x19c>
 8009e52:	f04f 0c01 	mov.w	ip, #1
 8009e56:	e7f8      	b.n	8009e4a <_strtod_l+0x282>
 8009e58:	0800bef8 	.word	0x0800bef8
 8009e5c:	0800bef4 	.word	0x0800bef4
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e66:	1c51      	adds	r1, r2, #1
 8009e68:	9115      	str	r1, [sp, #84]	; 0x54
 8009e6a:	7852      	ldrb	r2, [r2, #1]
 8009e6c:	2a30      	cmp	r2, #48	; 0x30
 8009e6e:	d0f9      	beq.n	8009e64 <_strtod_l+0x29c>
 8009e70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009e74:	2908      	cmp	r1, #8
 8009e76:	f63f af7a 	bhi.w	8009d6e <_strtod_l+0x1a6>
 8009e7a:	3a30      	subs	r2, #48	; 0x30
 8009e7c:	9208      	str	r2, [sp, #32]
 8009e7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e80:	920c      	str	r2, [sp, #48]	; 0x30
 8009e82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e84:	1c57      	adds	r7, r2, #1
 8009e86:	9715      	str	r7, [sp, #84]	; 0x54
 8009e88:	7852      	ldrb	r2, [r2, #1]
 8009e8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e8e:	f1be 0f09 	cmp.w	lr, #9
 8009e92:	d938      	bls.n	8009f06 <_strtod_l+0x33e>
 8009e94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e96:	1a7f      	subs	r7, r7, r1
 8009e98:	2f08      	cmp	r7, #8
 8009e9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e9e:	dc03      	bgt.n	8009ea8 <_strtod_l+0x2e0>
 8009ea0:	9908      	ldr	r1, [sp, #32]
 8009ea2:	428f      	cmp	r7, r1
 8009ea4:	bfa8      	it	ge
 8009ea6:	460f      	movge	r7, r1
 8009ea8:	f1bc 0f00 	cmp.w	ip, #0
 8009eac:	d000      	beq.n	8009eb0 <_strtod_l+0x2e8>
 8009eae:	427f      	negs	r7, r7
 8009eb0:	2e00      	cmp	r6, #0
 8009eb2:	d14f      	bne.n	8009f54 <_strtod_l+0x38c>
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	4301      	orrs	r1, r0
 8009eb8:	f47f aec1 	bne.w	8009c3e <_strtod_l+0x76>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f aedb 	bne.w	8009c78 <_strtod_l+0xb0>
 8009ec2:	2a69      	cmp	r2, #105	; 0x69
 8009ec4:	d029      	beq.n	8009f1a <_strtod_l+0x352>
 8009ec6:	dc26      	bgt.n	8009f16 <_strtod_l+0x34e>
 8009ec8:	2a49      	cmp	r2, #73	; 0x49
 8009eca:	d026      	beq.n	8009f1a <_strtod_l+0x352>
 8009ecc:	2a4e      	cmp	r2, #78	; 0x4e
 8009ece:	f47f aed3 	bne.w	8009c78 <_strtod_l+0xb0>
 8009ed2:	499b      	ldr	r1, [pc, #620]	; (800a140 <_strtod_l+0x578>)
 8009ed4:	a815      	add	r0, sp, #84	; 0x54
 8009ed6:	f001 f993 	bl	800b200 <__match>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f aecc 	beq.w	8009c78 <_strtod_l+0xb0>
 8009ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b28      	cmp	r3, #40	; 0x28
 8009ee6:	d12f      	bne.n	8009f48 <_strtod_l+0x380>
 8009ee8:	4996      	ldr	r1, [pc, #600]	; (800a144 <_strtod_l+0x57c>)
 8009eea:	aa18      	add	r2, sp, #96	; 0x60
 8009eec:	a815      	add	r0, sp, #84	; 0x54
 8009eee:	f001 f99b 	bl	800b228 <__hexnan>
 8009ef2:	2805      	cmp	r0, #5
 8009ef4:	d128      	bne.n	8009f48 <_strtod_l+0x380>
 8009ef6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ef8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009efc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009f00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009f04:	e69b      	b.n	8009c3e <_strtod_l+0x76>
 8009f06:	9f08      	ldr	r7, [sp, #32]
 8009f08:	210a      	movs	r1, #10
 8009f0a:	fb01 2107 	mla	r1, r1, r7, r2
 8009f0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009f12:	9208      	str	r2, [sp, #32]
 8009f14:	e7b5      	b.n	8009e82 <_strtod_l+0x2ba>
 8009f16:	2a6e      	cmp	r2, #110	; 0x6e
 8009f18:	e7d9      	b.n	8009ece <_strtod_l+0x306>
 8009f1a:	498b      	ldr	r1, [pc, #556]	; (800a148 <_strtod_l+0x580>)
 8009f1c:	a815      	add	r0, sp, #84	; 0x54
 8009f1e:	f001 f96f 	bl	800b200 <__match>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	f43f aea8 	beq.w	8009c78 <_strtod_l+0xb0>
 8009f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f2a:	4988      	ldr	r1, [pc, #544]	; (800a14c <_strtod_l+0x584>)
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	a815      	add	r0, sp, #84	; 0x54
 8009f30:	9315      	str	r3, [sp, #84]	; 0x54
 8009f32:	f001 f965 	bl	800b200 <__match>
 8009f36:	b910      	cbnz	r0, 8009f3e <_strtod_l+0x376>
 8009f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	9315      	str	r3, [sp, #84]	; 0x54
 8009f3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a15c <_strtod_l+0x594>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	e67a      	b.n	8009c3e <_strtod_l+0x76>
 8009f48:	4881      	ldr	r0, [pc, #516]	; (800a150 <_strtod_l+0x588>)
 8009f4a:	f000 fe75 	bl	800ac38 <nan>
 8009f4e:	ec59 8b10 	vmov	r8, r9, d0
 8009f52:	e674      	b.n	8009c3e <_strtod_l+0x76>
 8009f54:	9b05      	ldr	r3, [sp, #20]
 8009f56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f58:	1afb      	subs	r3, r7, r3
 8009f5a:	f1bb 0f00 	cmp.w	fp, #0
 8009f5e:	bf08      	it	eq
 8009f60:	46b3      	moveq	fp, r6
 8009f62:	2e10      	cmp	r6, #16
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	4635      	mov	r5, r6
 8009f68:	bfa8      	it	ge
 8009f6a:	2510      	movge	r5, #16
 8009f6c:	f7f6 fada 	bl	8000524 <__aeabi_ui2d>
 8009f70:	2e09      	cmp	r6, #9
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	dd13      	ble.n	8009fa0 <_strtod_l+0x3d8>
 8009f78:	4b76      	ldr	r3, [pc, #472]	; (800a154 <_strtod_l+0x58c>)
 8009f7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f82:	f7f6 fb49 	bl	8000618 <__aeabi_dmul>
 8009f86:	4680      	mov	r8, r0
 8009f88:	4650      	mov	r0, sl
 8009f8a:	4689      	mov	r9, r1
 8009f8c:	f7f6 faca 	bl	8000524 <__aeabi_ui2d>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4640      	mov	r0, r8
 8009f96:	4649      	mov	r1, r9
 8009f98:	f7f6 f988 	bl	80002ac <__adddf3>
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	4689      	mov	r9, r1
 8009fa0:	2e0f      	cmp	r6, #15
 8009fa2:	dc38      	bgt.n	800a016 <_strtod_l+0x44e>
 8009fa4:	9b08      	ldr	r3, [sp, #32]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f43f ae49 	beq.w	8009c3e <_strtod_l+0x76>
 8009fac:	dd24      	ble.n	8009ff8 <_strtod_l+0x430>
 8009fae:	2b16      	cmp	r3, #22
 8009fb0:	dc0b      	bgt.n	8009fca <_strtod_l+0x402>
 8009fb2:	4968      	ldr	r1, [pc, #416]	; (800a154 <_strtod_l+0x58c>)
 8009fb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	f7f6 fb2a 	bl	8000618 <__aeabi_dmul>
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4689      	mov	r9, r1
 8009fc8:	e639      	b.n	8009c3e <_strtod_l+0x76>
 8009fca:	9a08      	ldr	r2, [sp, #32]
 8009fcc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	db20      	blt.n	800a016 <_strtod_l+0x44e>
 8009fd4:	4c5f      	ldr	r4, [pc, #380]	; (800a154 <_strtod_l+0x58c>)
 8009fd6:	f1c6 060f 	rsb	r6, r6, #15
 8009fda:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009fde:	4642      	mov	r2, r8
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe6:	f7f6 fb17 	bl	8000618 <__aeabi_dmul>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	1b9e      	subs	r6, r3, r6
 8009fee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009ff2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ff6:	e7e3      	b.n	8009fc0 <_strtod_l+0x3f8>
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	3316      	adds	r3, #22
 8009ffc:	db0b      	blt.n	800a016 <_strtod_l+0x44e>
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	1bdf      	subs	r7, r3, r7
 800a002:	4b54      	ldr	r3, [pc, #336]	; (800a154 <_strtod_l+0x58c>)
 800a004:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00c:	4640      	mov	r0, r8
 800a00e:	4649      	mov	r1, r9
 800a010:	f7f6 fc2c 	bl	800086c <__aeabi_ddiv>
 800a014:	e7d6      	b.n	8009fc4 <_strtod_l+0x3fc>
 800a016:	9b08      	ldr	r3, [sp, #32]
 800a018:	1b75      	subs	r5, r6, r5
 800a01a:	441d      	add	r5, r3
 800a01c:	2d00      	cmp	r5, #0
 800a01e:	dd70      	ble.n	800a102 <_strtod_l+0x53a>
 800a020:	f015 030f 	ands.w	r3, r5, #15
 800a024:	d00a      	beq.n	800a03c <_strtod_l+0x474>
 800a026:	494b      	ldr	r1, [pc, #300]	; (800a154 <_strtod_l+0x58c>)
 800a028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a02c:	4642      	mov	r2, r8
 800a02e:	464b      	mov	r3, r9
 800a030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a034:	f7f6 faf0 	bl	8000618 <__aeabi_dmul>
 800a038:	4680      	mov	r8, r0
 800a03a:	4689      	mov	r9, r1
 800a03c:	f035 050f 	bics.w	r5, r5, #15
 800a040:	d04d      	beq.n	800a0de <_strtod_l+0x516>
 800a042:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a046:	dd22      	ble.n	800a08e <_strtod_l+0x4c6>
 800a048:	2500      	movs	r5, #0
 800a04a:	46ab      	mov	fp, r5
 800a04c:	9509      	str	r5, [sp, #36]	; 0x24
 800a04e:	9505      	str	r5, [sp, #20]
 800a050:	2322      	movs	r3, #34	; 0x22
 800a052:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a15c <_strtod_l+0x594>
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	f04f 0800 	mov.w	r8, #0
 800a05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f43f aded 	beq.w	8009c3e <_strtod_l+0x76>
 800a064:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff f924 	bl	80092b4 <_Bfree>
 800a06c:	9905      	ldr	r1, [sp, #20]
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff f920 	bl	80092b4 <_Bfree>
 800a074:	4659      	mov	r1, fp
 800a076:	4620      	mov	r0, r4
 800a078:	f7ff f91c 	bl	80092b4 <_Bfree>
 800a07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff f918 	bl	80092b4 <_Bfree>
 800a084:	4629      	mov	r1, r5
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff f914 	bl	80092b4 <_Bfree>
 800a08c:	e5d7      	b.n	8009c3e <_strtod_l+0x76>
 800a08e:	4b32      	ldr	r3, [pc, #200]	; (800a158 <_strtod_l+0x590>)
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	2300      	movs	r3, #0
 800a094:	112d      	asrs	r5, r5, #4
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	469a      	mov	sl, r3
 800a09c:	2d01      	cmp	r5, #1
 800a09e:	dc21      	bgt.n	800a0e4 <_strtod_l+0x51c>
 800a0a0:	b10b      	cbz	r3, 800a0a6 <_strtod_l+0x4de>
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	492c      	ldr	r1, [pc, #176]	; (800a158 <_strtod_l+0x590>)
 800a0a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a0ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b8:	f7f6 faae 	bl	8000618 <__aeabi_dmul>
 800a0bc:	4b27      	ldr	r3, [pc, #156]	; (800a15c <_strtod_l+0x594>)
 800a0be:	460a      	mov	r2, r1
 800a0c0:	400b      	ands	r3, r1
 800a0c2:	4927      	ldr	r1, [pc, #156]	; (800a160 <_strtod_l+0x598>)
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	d8be      	bhi.n	800a048 <_strtod_l+0x480>
 800a0ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0ce:	428b      	cmp	r3, r1
 800a0d0:	bf86      	itte	hi
 800a0d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a164 <_strtod_l+0x59c>
 800a0d6:	f04f 38ff 	movhi.w	r8, #4294967295
 800a0da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	e07b      	b.n	800a1dc <_strtod_l+0x614>
 800a0e4:	07ea      	lsls	r2, r5, #31
 800a0e6:	d505      	bpl.n	800a0f4 <_strtod_l+0x52c>
 800a0e8:	9b04      	ldr	r3, [sp, #16]
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 fa93 	bl	8000618 <__aeabi_dmul>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	3208      	adds	r2, #8
 800a0f8:	f10a 0a01 	add.w	sl, sl, #1
 800a0fc:	106d      	asrs	r5, r5, #1
 800a0fe:	9204      	str	r2, [sp, #16]
 800a100:	e7cc      	b.n	800a09c <_strtod_l+0x4d4>
 800a102:	d0ec      	beq.n	800a0de <_strtod_l+0x516>
 800a104:	426d      	negs	r5, r5
 800a106:	f015 020f 	ands.w	r2, r5, #15
 800a10a:	d00a      	beq.n	800a122 <_strtod_l+0x55a>
 800a10c:	4b11      	ldr	r3, [pc, #68]	; (800a154 <_strtod_l+0x58c>)
 800a10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f7f6 fba7 	bl	800086c <__aeabi_ddiv>
 800a11e:	4680      	mov	r8, r0
 800a120:	4689      	mov	r9, r1
 800a122:	112d      	asrs	r5, r5, #4
 800a124:	d0db      	beq.n	800a0de <_strtod_l+0x516>
 800a126:	2d1f      	cmp	r5, #31
 800a128:	dd1e      	ble.n	800a168 <_strtod_l+0x5a0>
 800a12a:	2500      	movs	r5, #0
 800a12c:	46ab      	mov	fp, r5
 800a12e:	9509      	str	r5, [sp, #36]	; 0x24
 800a130:	9505      	str	r5, [sp, #20]
 800a132:	2322      	movs	r3, #34	; 0x22
 800a134:	f04f 0800 	mov.w	r8, #0
 800a138:	f04f 0900 	mov.w	r9, #0
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	e78d      	b.n	800a05c <_strtod_l+0x494>
 800a140:	0800bce2 	.word	0x0800bce2
 800a144:	0800bf0c 	.word	0x0800bf0c
 800a148:	0800bcda 	.word	0x0800bcda
 800a14c:	0800bd11 	.word	0x0800bd11
 800a150:	0800bf9c 	.word	0x0800bf9c
 800a154:	0800be20 	.word	0x0800be20
 800a158:	0800bdf8 	.word	0x0800bdf8
 800a15c:	7ff00000 	.word	0x7ff00000
 800a160:	7ca00000 	.word	0x7ca00000
 800a164:	7fefffff 	.word	0x7fefffff
 800a168:	f015 0310 	ands.w	r3, r5, #16
 800a16c:	bf18      	it	ne
 800a16e:	236a      	movne	r3, #106	; 0x6a
 800a170:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a514 <_strtod_l+0x94c>
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	4640      	mov	r0, r8
 800a178:	4649      	mov	r1, r9
 800a17a:	2300      	movs	r3, #0
 800a17c:	07ea      	lsls	r2, r5, #31
 800a17e:	d504      	bpl.n	800a18a <_strtod_l+0x5c2>
 800a180:	e9da 2300 	ldrd	r2, r3, [sl]
 800a184:	f7f6 fa48 	bl	8000618 <__aeabi_dmul>
 800a188:	2301      	movs	r3, #1
 800a18a:	106d      	asrs	r5, r5, #1
 800a18c:	f10a 0a08 	add.w	sl, sl, #8
 800a190:	d1f4      	bne.n	800a17c <_strtod_l+0x5b4>
 800a192:	b10b      	cbz	r3, 800a198 <_strtod_l+0x5d0>
 800a194:	4680      	mov	r8, r0
 800a196:	4689      	mov	r9, r1
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	b1bb      	cbz	r3, 800a1cc <_strtod_l+0x604>
 800a19c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a1a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	dd10      	ble.n	800a1cc <_strtod_l+0x604>
 800a1aa:	2b1f      	cmp	r3, #31
 800a1ac:	f340 811e 	ble.w	800a3ec <_strtod_l+0x824>
 800a1b0:	2b34      	cmp	r3, #52	; 0x34
 800a1b2:	bfde      	ittt	le
 800a1b4:	f04f 33ff 	movle.w	r3, #4294967295
 800a1b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a1bc:	4093      	lslle	r3, r2
 800a1be:	f04f 0800 	mov.w	r8, #0
 800a1c2:	bfcc      	ite	gt
 800a1c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a1c8:	ea03 0901 	andle.w	r9, r3, r1
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fc88 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d1a6      	bne.n	800a12a <_strtod_l+0x562>
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1e2:	4633      	mov	r3, r6
 800a1e4:	465a      	mov	r2, fp
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7ff f8cc 	bl	8009384 <__s2b>
 800a1ec:	9009      	str	r0, [sp, #36]	; 0x24
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f af2a 	beq.w	800a048 <_strtod_l+0x480>
 800a1f4:	9a08      	ldr	r2, [sp, #32]
 800a1f6:	9b05      	ldr	r3, [sp, #20]
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	eba3 0307 	sub.w	r3, r3, r7
 800a1fe:	bfa8      	it	ge
 800a200:	2300      	movge	r3, #0
 800a202:	930c      	str	r3, [sp, #48]	; 0x30
 800a204:	2500      	movs	r5, #0
 800a206:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a20a:	9312      	str	r3, [sp, #72]	; 0x48
 800a20c:	46ab      	mov	fp, r5
 800a20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a210:	4620      	mov	r0, r4
 800a212:	6859      	ldr	r1, [r3, #4]
 800a214:	f7ff f80e 	bl	8009234 <_Balloc>
 800a218:	9005      	str	r0, [sp, #20]
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f43f af18 	beq.w	800a050 <_strtod_l+0x488>
 800a220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a222:	691a      	ldr	r2, [r3, #16]
 800a224:	3202      	adds	r2, #2
 800a226:	f103 010c 	add.w	r1, r3, #12
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f000 fcf3 	bl	800ac18 <memcpy>
 800a232:	ec49 8b10 	vmov	d0, r8, r9
 800a236:	aa18      	add	r2, sp, #96	; 0x60
 800a238:	a917      	add	r1, sp, #92	; 0x5c
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff fbd6 	bl	80099ec <__d2b>
 800a240:	ec49 8b18 	vmov	d8, r8, r9
 800a244:	9016      	str	r0, [sp, #88]	; 0x58
 800a246:	2800      	cmp	r0, #0
 800a248:	f43f af02 	beq.w	800a050 <_strtod_l+0x488>
 800a24c:	2101      	movs	r1, #1
 800a24e:	4620      	mov	r0, r4
 800a250:	f7ff f930 	bl	80094b4 <__i2b>
 800a254:	4683      	mov	fp, r0
 800a256:	2800      	cmp	r0, #0
 800a258:	f43f aefa 	beq.w	800a050 <_strtod_l+0x488>
 800a25c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a25e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a260:	2e00      	cmp	r6, #0
 800a262:	bfab      	itete	ge
 800a264:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a266:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a268:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a26a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a26e:	bfac      	ite	ge
 800a270:	eb06 0a03 	addge.w	sl, r6, r3
 800a274:	1b9f      	sublt	r7, r3, r6
 800a276:	9b04      	ldr	r3, [sp, #16]
 800a278:	1af6      	subs	r6, r6, r3
 800a27a:	4416      	add	r6, r2
 800a27c:	4ba0      	ldr	r3, [pc, #640]	; (800a500 <_strtod_l+0x938>)
 800a27e:	3e01      	subs	r6, #1
 800a280:	429e      	cmp	r6, r3
 800a282:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a286:	f280 80c4 	bge.w	800a412 <_strtod_l+0x84a>
 800a28a:	1b9b      	subs	r3, r3, r6
 800a28c:	2b1f      	cmp	r3, #31
 800a28e:	eba2 0203 	sub.w	r2, r2, r3
 800a292:	f04f 0101 	mov.w	r1, #1
 800a296:	f300 80b0 	bgt.w	800a3fa <_strtod_l+0x832>
 800a29a:	fa01 f303 	lsl.w	r3, r1, r3
 800a29e:	930e      	str	r3, [sp, #56]	; 0x38
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2a4:	eb0a 0602 	add.w	r6, sl, r2
 800a2a8:	9b04      	ldr	r3, [sp, #16]
 800a2aa:	45b2      	cmp	sl, r6
 800a2ac:	4417      	add	r7, r2
 800a2ae:	441f      	add	r7, r3
 800a2b0:	4653      	mov	r3, sl
 800a2b2:	bfa8      	it	ge
 800a2b4:	4633      	movge	r3, r6
 800a2b6:	42bb      	cmp	r3, r7
 800a2b8:	bfa8      	it	ge
 800a2ba:	463b      	movge	r3, r7
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfc2      	ittt	gt
 800a2c0:	1af6      	subgt	r6, r6, r3
 800a2c2:	1aff      	subgt	r7, r7, r3
 800a2c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dd17      	ble.n	800a2fe <_strtod_l+0x736>
 800a2ce:	4659      	mov	r1, fp
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f7ff f9ae 	bl	8009634 <__pow5mult>
 800a2d8:	4683      	mov	fp, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f43f aeb8 	beq.w	800a050 <_strtod_l+0x488>
 800a2e0:	4601      	mov	r1, r0
 800a2e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7ff f8fb 	bl	80094e0 <__multiply>
 800a2ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f43f aeaf 	beq.w	800a050 <_strtod_l+0x488>
 800a2f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f7fe ffdd 	bl	80092b4 <_Bfree>
 800a2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2fc:	9316      	str	r3, [sp, #88]	; 0x58
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	f300 808c 	bgt.w	800a41c <_strtod_l+0x854>
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	2b00      	cmp	r3, #0
 800a308:	dd08      	ble.n	800a31c <_strtod_l+0x754>
 800a30a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a30c:	9905      	ldr	r1, [sp, #20]
 800a30e:	4620      	mov	r0, r4
 800a310:	f7ff f990 	bl	8009634 <__pow5mult>
 800a314:	9005      	str	r0, [sp, #20]
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f ae9a 	beq.w	800a050 <_strtod_l+0x488>
 800a31c:	2f00      	cmp	r7, #0
 800a31e:	dd08      	ble.n	800a332 <_strtod_l+0x76a>
 800a320:	9905      	ldr	r1, [sp, #20]
 800a322:	463a      	mov	r2, r7
 800a324:	4620      	mov	r0, r4
 800a326:	f7ff f9df 	bl	80096e8 <__lshift>
 800a32a:	9005      	str	r0, [sp, #20]
 800a32c:	2800      	cmp	r0, #0
 800a32e:	f43f ae8f 	beq.w	800a050 <_strtod_l+0x488>
 800a332:	f1ba 0f00 	cmp.w	sl, #0
 800a336:	dd08      	ble.n	800a34a <_strtod_l+0x782>
 800a338:	4659      	mov	r1, fp
 800a33a:	4652      	mov	r2, sl
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7ff f9d3 	bl	80096e8 <__lshift>
 800a342:	4683      	mov	fp, r0
 800a344:	2800      	cmp	r0, #0
 800a346:	f43f ae83 	beq.w	800a050 <_strtod_l+0x488>
 800a34a:	9a05      	ldr	r2, [sp, #20]
 800a34c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff fa52 	bl	80097f8 <__mdiff>
 800a354:	4605      	mov	r5, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	f43f ae7a 	beq.w	800a050 <_strtod_l+0x488>
 800a35c:	68c3      	ldr	r3, [r0, #12]
 800a35e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a360:	2300      	movs	r3, #0
 800a362:	60c3      	str	r3, [r0, #12]
 800a364:	4659      	mov	r1, fp
 800a366:	f7ff fa2b 	bl	80097c0 <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	da60      	bge.n	800a430 <_strtod_l+0x868>
 800a36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a370:	ea53 0308 	orrs.w	r3, r3, r8
 800a374:	f040 8084 	bne.w	800a480 <_strtod_l+0x8b8>
 800a378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d17f      	bne.n	800a480 <_strtod_l+0x8b8>
 800a380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a384:	0d1b      	lsrs	r3, r3, #20
 800a386:	051b      	lsls	r3, r3, #20
 800a388:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a38c:	d978      	bls.n	800a480 <_strtod_l+0x8b8>
 800a38e:	696b      	ldr	r3, [r5, #20]
 800a390:	b913      	cbnz	r3, 800a398 <_strtod_l+0x7d0>
 800a392:	692b      	ldr	r3, [r5, #16]
 800a394:	2b01      	cmp	r3, #1
 800a396:	dd73      	ble.n	800a480 <_strtod_l+0x8b8>
 800a398:	4629      	mov	r1, r5
 800a39a:	2201      	movs	r2, #1
 800a39c:	4620      	mov	r0, r4
 800a39e:	f7ff f9a3 	bl	80096e8 <__lshift>
 800a3a2:	4659      	mov	r1, fp
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	f7ff fa0b 	bl	80097c0 <__mcmp>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	dd68      	ble.n	800a480 <_strtod_l+0x8b8>
 800a3ae:	9904      	ldr	r1, [sp, #16]
 800a3b0:	4a54      	ldr	r2, [pc, #336]	; (800a504 <_strtod_l+0x93c>)
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	f000 8084 	beq.w	800a4c2 <_strtod_l+0x8fa>
 800a3ba:	ea02 0109 	and.w	r1, r2, r9
 800a3be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3c2:	dc7e      	bgt.n	800a4c2 <_strtod_l+0x8fa>
 800a3c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3c8:	f77f aeb3 	ble.w	800a132 <_strtod_l+0x56a>
 800a3cc:	4b4e      	ldr	r3, [pc, #312]	; (800a508 <_strtod_l+0x940>)
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f7f6 f920 	bl	8000618 <__aeabi_dmul>
 800a3d8:	4b4a      	ldr	r3, [pc, #296]	; (800a504 <_strtod_l+0x93c>)
 800a3da:	400b      	ands	r3, r1
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4689      	mov	r9, r1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f47f ae3f 	bne.w	800a064 <_strtod_l+0x49c>
 800a3e6:	2322      	movs	r3, #34	; 0x22
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	e63b      	b.n	800a064 <_strtod_l+0x49c>
 800a3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f4:	ea03 0808 	and.w	r8, r3, r8
 800a3f8:	e6e8      	b.n	800a1cc <_strtod_l+0x604>
 800a3fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a3fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a402:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a406:	36e2      	adds	r6, #226	; 0xe2
 800a408:	fa01 f306 	lsl.w	r3, r1, r6
 800a40c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a410:	e748      	b.n	800a2a4 <_strtod_l+0x6dc>
 800a412:	2100      	movs	r1, #0
 800a414:	2301      	movs	r3, #1
 800a416:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a41a:	e743      	b.n	800a2a4 <_strtod_l+0x6dc>
 800a41c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a41e:	4632      	mov	r2, r6
 800a420:	4620      	mov	r0, r4
 800a422:	f7ff f961 	bl	80096e8 <__lshift>
 800a426:	9016      	str	r0, [sp, #88]	; 0x58
 800a428:	2800      	cmp	r0, #0
 800a42a:	f47f af6b 	bne.w	800a304 <_strtod_l+0x73c>
 800a42e:	e60f      	b.n	800a050 <_strtod_l+0x488>
 800a430:	46ca      	mov	sl, r9
 800a432:	d171      	bne.n	800a518 <_strtod_l+0x950>
 800a434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a436:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a43a:	b352      	cbz	r2, 800a492 <_strtod_l+0x8ca>
 800a43c:	4a33      	ldr	r2, [pc, #204]	; (800a50c <_strtod_l+0x944>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d12a      	bne.n	800a498 <_strtod_l+0x8d0>
 800a442:	9b04      	ldr	r3, [sp, #16]
 800a444:	4641      	mov	r1, r8
 800a446:	b1fb      	cbz	r3, 800a488 <_strtod_l+0x8c0>
 800a448:	4b2e      	ldr	r3, [pc, #184]	; (800a504 <_strtod_l+0x93c>)
 800a44a:	ea09 0303 	and.w	r3, r9, r3
 800a44e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	d81a      	bhi.n	800a48e <_strtod_l+0x8c6>
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	4299      	cmp	r1, r3
 800a464:	d118      	bne.n	800a498 <_strtod_l+0x8d0>
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <_strtod_l+0x948>)
 800a468:	459a      	cmp	sl, r3
 800a46a:	d102      	bne.n	800a472 <_strtod_l+0x8aa>
 800a46c:	3101      	adds	r1, #1
 800a46e:	f43f adef 	beq.w	800a050 <_strtod_l+0x488>
 800a472:	4b24      	ldr	r3, [pc, #144]	; (800a504 <_strtod_l+0x93c>)
 800a474:	ea0a 0303 	and.w	r3, sl, r3
 800a478:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a47c:	f04f 0800 	mov.w	r8, #0
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1a2      	bne.n	800a3cc <_strtod_l+0x804>
 800a486:	e5ed      	b.n	800a064 <_strtod_l+0x49c>
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	e7e9      	b.n	800a462 <_strtod_l+0x89a>
 800a48e:	4613      	mov	r3, r2
 800a490:	e7e7      	b.n	800a462 <_strtod_l+0x89a>
 800a492:	ea53 0308 	orrs.w	r3, r3, r8
 800a496:	d08a      	beq.n	800a3ae <_strtod_l+0x7e6>
 800a498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a49a:	b1e3      	cbz	r3, 800a4d6 <_strtod_l+0x90e>
 800a49c:	ea13 0f0a 	tst.w	r3, sl
 800a4a0:	d0ee      	beq.n	800a480 <_strtod_l+0x8b8>
 800a4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	b1c3      	cbz	r3, 800a4de <_strtod_l+0x916>
 800a4ac:	f7ff fb6f 	bl	8009b8e <sulp>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	ec51 0b18 	vmov	r0, r1, d8
 800a4b8:	f7f5 fef8 	bl	80002ac <__adddf3>
 800a4bc:	4680      	mov	r8, r0
 800a4be:	4689      	mov	r9, r1
 800a4c0:	e7de      	b.n	800a480 <_strtod_l+0x8b8>
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a4cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a4d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a4d4:	e7d4      	b.n	800a480 <_strtod_l+0x8b8>
 800a4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d8:	ea13 0f08 	tst.w	r3, r8
 800a4dc:	e7e0      	b.n	800a4a0 <_strtod_l+0x8d8>
 800a4de:	f7ff fb56 	bl	8009b8e <sulp>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	ec51 0b18 	vmov	r0, r1, d8
 800a4ea:	f7f5 fedd 	bl	80002a8 <__aeabi_dsub>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	4689      	mov	r9, r1
 800a4f6:	f7f6 faf7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d0c0      	beq.n	800a480 <_strtod_l+0x8b8>
 800a4fe:	e618      	b.n	800a132 <_strtod_l+0x56a>
 800a500:	fffffc02 	.word	0xfffffc02
 800a504:	7ff00000 	.word	0x7ff00000
 800a508:	39500000 	.word	0x39500000
 800a50c:	000fffff 	.word	0x000fffff
 800a510:	7fefffff 	.word	0x7fefffff
 800a514:	0800bf20 	.word	0x0800bf20
 800a518:	4659      	mov	r1, fp
 800a51a:	4628      	mov	r0, r5
 800a51c:	f7ff fac0 	bl	8009aa0 <__ratio>
 800a520:	ec57 6b10 	vmov	r6, r7, d0
 800a524:	ee10 0a10 	vmov	r0, s0
 800a528:	2200      	movs	r2, #0
 800a52a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 faee 	bl	8000b10 <__aeabi_dcmple>
 800a534:	2800      	cmp	r0, #0
 800a536:	d071      	beq.n	800a61c <_strtod_l+0xa54>
 800a538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d17c      	bne.n	800a638 <_strtod_l+0xa70>
 800a53e:	f1b8 0f00 	cmp.w	r8, #0
 800a542:	d15a      	bne.n	800a5fa <_strtod_l+0xa32>
 800a544:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d15d      	bne.n	800a608 <_strtod_l+0xa40>
 800a54c:	4b90      	ldr	r3, [pc, #576]	; (800a790 <_strtod_l+0xbc8>)
 800a54e:	2200      	movs	r2, #0
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f6 fad2 	bl	8000afc <__aeabi_dcmplt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d15c      	bne.n	800a616 <_strtod_l+0xa4e>
 800a55c:	4630      	mov	r0, r6
 800a55e:	4639      	mov	r1, r7
 800a560:	4b8c      	ldr	r3, [pc, #560]	; (800a794 <_strtod_l+0xbcc>)
 800a562:	2200      	movs	r2, #0
 800a564:	f7f6 f858 	bl	8000618 <__aeabi_dmul>
 800a568:	4606      	mov	r6, r0
 800a56a:	460f      	mov	r7, r1
 800a56c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a570:	9606      	str	r6, [sp, #24]
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a578:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a57c:	4b86      	ldr	r3, [pc, #536]	; (800a798 <_strtod_l+0xbd0>)
 800a57e:	ea0a 0303 	and.w	r3, sl, r3
 800a582:	930d      	str	r3, [sp, #52]	; 0x34
 800a584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a586:	4b85      	ldr	r3, [pc, #532]	; (800a79c <_strtod_l+0xbd4>)
 800a588:	429a      	cmp	r2, r3
 800a58a:	f040 8090 	bne.w	800a6ae <_strtod_l+0xae6>
 800a58e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a592:	ec49 8b10 	vmov	d0, r8, r9
 800a596:	f7ff f9b9 	bl	800990c <__ulp>
 800a59a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a59e:	ec51 0b10 	vmov	r0, r1, d0
 800a5a2:	f7f6 f839 	bl	8000618 <__aeabi_dmul>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	f7f5 fe7f 	bl	80002ac <__adddf3>
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4979      	ldr	r1, [pc, #484]	; (800a798 <_strtod_l+0xbd0>)
 800a5b2:	4a7b      	ldr	r2, [pc, #492]	; (800a7a0 <_strtod_l+0xbd8>)
 800a5b4:	4019      	ands	r1, r3
 800a5b6:	4291      	cmp	r1, r2
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	d944      	bls.n	800a646 <_strtod_l+0xa7e>
 800a5bc:	ee18 2a90 	vmov	r2, s17
 800a5c0:	4b78      	ldr	r3, [pc, #480]	; (800a7a4 <_strtod_l+0xbdc>)
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d104      	bne.n	800a5d0 <_strtod_l+0xa08>
 800a5c6:	ee18 3a10 	vmov	r3, s16
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	f43f ad40 	beq.w	800a050 <_strtod_l+0x488>
 800a5d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a7a4 <_strtod_l+0xbdc>
 800a5d4:	f04f 38ff 	mov.w	r8, #4294967295
 800a5d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f7fe fe6a 	bl	80092b4 <_Bfree>
 800a5e0:	9905      	ldr	r1, [sp, #20]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f7fe fe66 	bl	80092b4 <_Bfree>
 800a5e8:	4659      	mov	r1, fp
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7fe fe62 	bl	80092b4 <_Bfree>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7fe fe5e 	bl	80092b4 <_Bfree>
 800a5f8:	e609      	b.n	800a20e <_strtod_l+0x646>
 800a5fa:	f1b8 0f01 	cmp.w	r8, #1
 800a5fe:	d103      	bne.n	800a608 <_strtod_l+0xa40>
 800a600:	f1b9 0f00 	cmp.w	r9, #0
 800a604:	f43f ad95 	beq.w	800a132 <_strtod_l+0x56a>
 800a608:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a760 <_strtod_l+0xb98>
 800a60c:	4f60      	ldr	r7, [pc, #384]	; (800a790 <_strtod_l+0xbc8>)
 800a60e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a612:	2600      	movs	r6, #0
 800a614:	e7ae      	b.n	800a574 <_strtod_l+0x9ac>
 800a616:	4f5f      	ldr	r7, [pc, #380]	; (800a794 <_strtod_l+0xbcc>)
 800a618:	2600      	movs	r6, #0
 800a61a:	e7a7      	b.n	800a56c <_strtod_l+0x9a4>
 800a61c:	4b5d      	ldr	r3, [pc, #372]	; (800a794 <_strtod_l+0xbcc>)
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	2200      	movs	r2, #0
 800a624:	f7f5 fff8 	bl	8000618 <__aeabi_dmul>
 800a628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d09c      	beq.n	800a56c <_strtod_l+0x9a4>
 800a632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a636:	e79d      	b.n	800a574 <_strtod_l+0x9ac>
 800a638:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a768 <_strtod_l+0xba0>
 800a63c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a640:	ec57 6b17 	vmov	r6, r7, d7
 800a644:	e796      	b.n	800a574 <_strtod_l+0x9ac>
 800a646:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	46ca      	mov	sl, r9
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1c2      	bne.n	800a5d8 <_strtod_l+0xa10>
 800a652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a658:	0d1b      	lsrs	r3, r3, #20
 800a65a:	051b      	lsls	r3, r3, #20
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d1bb      	bne.n	800a5d8 <_strtod_l+0xa10>
 800a660:	4630      	mov	r0, r6
 800a662:	4639      	mov	r1, r7
 800a664:	f7f6 fb38 	bl	8000cd8 <__aeabi_d2lz>
 800a668:	f7f5 ffa8 	bl	80005bc <__aeabi_l2d>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fe18 	bl	80002a8 <__aeabi_dsub>
 800a678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a67a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a67e:	ea43 0308 	orr.w	r3, r3, r8
 800a682:	4313      	orrs	r3, r2
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	d054      	beq.n	800a734 <_strtod_l+0xb6c>
 800a68a:	a339      	add	r3, pc, #228	; (adr r3, 800a770 <_strtod_l+0xba8>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f6 fa34 	bl	8000afc <__aeabi_dcmplt>
 800a694:	2800      	cmp	r0, #0
 800a696:	f47f ace5 	bne.w	800a064 <_strtod_l+0x49c>
 800a69a:	a337      	add	r3, pc, #220	; (adr r3, 800a778 <_strtod_l+0xbb0>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f7f6 fa48 	bl	8000b38 <__aeabi_dcmpgt>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d095      	beq.n	800a5d8 <_strtod_l+0xa10>
 800a6ac:	e4da      	b.n	800a064 <_strtod_l+0x49c>
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	b333      	cbz	r3, 800a700 <_strtod_l+0xb38>
 800a6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6b8:	d822      	bhi.n	800a700 <_strtod_l+0xb38>
 800a6ba:	a331      	add	r3, pc, #196	; (adr r3, 800a780 <_strtod_l+0xbb8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	f7f6 fa24 	bl	8000b10 <__aeabi_dcmple>
 800a6c8:	b1a0      	cbz	r0, 800a6f4 <_strtod_l+0xb2c>
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7f6 fa7b 	bl	8000bc8 <__aeabi_d2uiz>
 800a6d2:	2801      	cmp	r0, #1
 800a6d4:	bf38      	it	cc
 800a6d6:	2001      	movcc	r0, #1
 800a6d8:	f7f5 ff24 	bl	8000524 <__aeabi_ui2d>
 800a6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	bb23      	cbnz	r3, 800a72e <_strtod_l+0xb66>
 800a6e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6e8:	9010      	str	r0, [sp, #64]	; 0x40
 800a6ea:	9311      	str	r3, [sp, #68]	; 0x44
 800a6ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a6f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a6fc:	1a9b      	subs	r3, r3, r2
 800a6fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a700:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a704:	eeb0 0a48 	vmov.f32	s0, s16
 800a708:	eef0 0a68 	vmov.f32	s1, s17
 800a70c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a710:	f7ff f8fc 	bl	800990c <__ulp>
 800a714:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a718:	ec53 2b10 	vmov	r2, r3, d0
 800a71c:	f7f5 ff7c 	bl	8000618 <__aeabi_dmul>
 800a720:	ec53 2b18 	vmov	r2, r3, d8
 800a724:	f7f5 fdc2 	bl	80002ac <__adddf3>
 800a728:	4680      	mov	r8, r0
 800a72a:	4689      	mov	r9, r1
 800a72c:	e78d      	b.n	800a64a <_strtod_l+0xa82>
 800a72e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a732:	e7db      	b.n	800a6ec <_strtod_l+0xb24>
 800a734:	a314      	add	r3, pc, #80	; (adr r3, 800a788 <_strtod_l+0xbc0>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	f7f6 f9df 	bl	8000afc <__aeabi_dcmplt>
 800a73e:	e7b3      	b.n	800a6a8 <_strtod_l+0xae0>
 800a740:	2300      	movs	r3, #0
 800a742:	930a      	str	r3, [sp, #40]	; 0x28
 800a744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a746:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	f7ff ba7c 	b.w	8009c46 <_strtod_l+0x7e>
 800a74e:	2a65      	cmp	r2, #101	; 0x65
 800a750:	f43f ab75 	beq.w	8009e3e <_strtod_l+0x276>
 800a754:	2a45      	cmp	r2, #69	; 0x45
 800a756:	f43f ab72 	beq.w	8009e3e <_strtod_l+0x276>
 800a75a:	2301      	movs	r3, #1
 800a75c:	f7ff bbaa 	b.w	8009eb4 <_strtod_l+0x2ec>
 800a760:	00000000 	.word	0x00000000
 800a764:	bff00000 	.word	0xbff00000
 800a768:	00000000 	.word	0x00000000
 800a76c:	3ff00000 	.word	0x3ff00000
 800a770:	94a03595 	.word	0x94a03595
 800a774:	3fdfffff 	.word	0x3fdfffff
 800a778:	35afe535 	.word	0x35afe535
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	ffc00000 	.word	0xffc00000
 800a784:	41dfffff 	.word	0x41dfffff
 800a788:	94a03595 	.word	0x94a03595
 800a78c:	3fcfffff 	.word	0x3fcfffff
 800a790:	3ff00000 	.word	0x3ff00000
 800a794:	3fe00000 	.word	0x3fe00000
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	7fe00000 	.word	0x7fe00000
 800a7a0:	7c9fffff 	.word	0x7c9fffff
 800a7a4:	7fefffff 	.word	0x7fefffff

0800a7a8 <_strtod_r>:
 800a7a8:	4b01      	ldr	r3, [pc, #4]	; (800a7b0 <_strtod_r+0x8>)
 800a7aa:	f7ff ba0d 	b.w	8009bc8 <_strtod_l>
 800a7ae:	bf00      	nop
 800a7b0:	20000070 	.word	0x20000070

0800a7b4 <__ssputs_r>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	688e      	ldr	r6, [r1, #8]
 800a7ba:	461f      	mov	r7, r3
 800a7bc:	42be      	cmp	r6, r7
 800a7be:	680b      	ldr	r3, [r1, #0]
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	4690      	mov	r8, r2
 800a7c6:	d82c      	bhi.n	800a822 <__ssputs_r+0x6e>
 800a7c8:	898a      	ldrh	r2, [r1, #12]
 800a7ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ce:	d026      	beq.n	800a81e <__ssputs_r+0x6a>
 800a7d0:	6965      	ldr	r5, [r4, #20]
 800a7d2:	6909      	ldr	r1, [r1, #16]
 800a7d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7d8:	eba3 0901 	sub.w	r9, r3, r1
 800a7dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7e0:	1c7b      	adds	r3, r7, #1
 800a7e2:	444b      	add	r3, r9
 800a7e4:	106d      	asrs	r5, r5, #1
 800a7e6:	429d      	cmp	r5, r3
 800a7e8:	bf38      	it	cc
 800a7ea:	461d      	movcc	r5, r3
 800a7ec:	0553      	lsls	r3, r2, #21
 800a7ee:	d527      	bpl.n	800a840 <__ssputs_r+0x8c>
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7fc fcf3 	bl	80071dc <_malloc_r>
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	b360      	cbz	r0, 800a854 <__ssputs_r+0xa0>
 800a7fa:	6921      	ldr	r1, [r4, #16]
 800a7fc:	464a      	mov	r2, r9
 800a7fe:	f000 fa0b 	bl	800ac18 <memcpy>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80c:	81a3      	strh	r3, [r4, #12]
 800a80e:	6126      	str	r6, [r4, #16]
 800a810:	6165      	str	r5, [r4, #20]
 800a812:	444e      	add	r6, r9
 800a814:	eba5 0509 	sub.w	r5, r5, r9
 800a818:	6026      	str	r6, [r4, #0]
 800a81a:	60a5      	str	r5, [r4, #8]
 800a81c:	463e      	mov	r6, r7
 800a81e:	42be      	cmp	r6, r7
 800a820:	d900      	bls.n	800a824 <__ssputs_r+0x70>
 800a822:	463e      	mov	r6, r7
 800a824:	6820      	ldr	r0, [r4, #0]
 800a826:	4632      	mov	r2, r6
 800a828:	4641      	mov	r1, r8
 800a82a:	f000 f9c9 	bl	800abc0 <memmove>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	4433      	add	r3, r6
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	2000      	movs	r0, #0
 800a83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a840:	462a      	mov	r2, r5
 800a842:	f000 fd9e 	bl	800b382 <_realloc_r>
 800a846:	4606      	mov	r6, r0
 800a848:	2800      	cmp	r0, #0
 800a84a:	d1e0      	bne.n	800a80e <__ssputs_r+0x5a>
 800a84c:	6921      	ldr	r1, [r4, #16]
 800a84e:	4650      	mov	r0, sl
 800a850:	f7fe fca4 	bl	800919c <_free_r>
 800a854:	230c      	movs	r3, #12
 800a856:	f8ca 3000 	str.w	r3, [sl]
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	e7e9      	b.n	800a83c <__ssputs_r+0x88>

0800a868 <_svfiprintf_r>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	4698      	mov	r8, r3
 800a86e:	898b      	ldrh	r3, [r1, #12]
 800a870:	061b      	lsls	r3, r3, #24
 800a872:	b09d      	sub	sp, #116	; 0x74
 800a874:	4607      	mov	r7, r0
 800a876:	460d      	mov	r5, r1
 800a878:	4614      	mov	r4, r2
 800a87a:	d50e      	bpl.n	800a89a <_svfiprintf_r+0x32>
 800a87c:	690b      	ldr	r3, [r1, #16]
 800a87e:	b963      	cbnz	r3, 800a89a <_svfiprintf_r+0x32>
 800a880:	2140      	movs	r1, #64	; 0x40
 800a882:	f7fc fcab 	bl	80071dc <_malloc_r>
 800a886:	6028      	str	r0, [r5, #0]
 800a888:	6128      	str	r0, [r5, #16]
 800a88a:	b920      	cbnz	r0, 800a896 <_svfiprintf_r+0x2e>
 800a88c:	230c      	movs	r3, #12
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	e0d0      	b.n	800aa38 <_svfiprintf_r+0x1d0>
 800a896:	2340      	movs	r3, #64	; 0x40
 800a898:	616b      	str	r3, [r5, #20]
 800a89a:	2300      	movs	r3, #0
 800a89c:	9309      	str	r3, [sp, #36]	; 0x24
 800a89e:	2320      	movs	r3, #32
 800a8a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8a8:	2330      	movs	r3, #48	; 0x30
 800a8aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa50 <_svfiprintf_r+0x1e8>
 800a8ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8b2:	f04f 0901 	mov.w	r9, #1
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	469a      	mov	sl, r3
 800a8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8be:	b10a      	cbz	r2, 800a8c4 <_svfiprintf_r+0x5c>
 800a8c0:	2a25      	cmp	r2, #37	; 0x25
 800a8c2:	d1f9      	bne.n	800a8b8 <_svfiprintf_r+0x50>
 800a8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8c8:	d00b      	beq.n	800a8e2 <_svfiprintf_r+0x7a>
 800a8ca:	465b      	mov	r3, fp
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff ff6f 	bl	800a7b4 <__ssputs_r>
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	f000 80a9 	beq.w	800aa2e <_svfiprintf_r+0x1c6>
 800a8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8de:	445a      	add	r2, fp
 800a8e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80a1 	beq.w	800aa2e <_svfiprintf_r+0x1c6>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8f6:	f10a 0a01 	add.w	sl, sl, #1
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	9307      	str	r3, [sp, #28]
 800a8fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a902:	931a      	str	r3, [sp, #104]	; 0x68
 800a904:	4654      	mov	r4, sl
 800a906:	2205      	movs	r2, #5
 800a908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90c:	4850      	ldr	r0, [pc, #320]	; (800aa50 <_svfiprintf_r+0x1e8>)
 800a90e:	f7f5 fc6f 	bl	80001f0 <memchr>
 800a912:	9a04      	ldr	r2, [sp, #16]
 800a914:	b9d8      	cbnz	r0, 800a94e <_svfiprintf_r+0xe6>
 800a916:	06d0      	lsls	r0, r2, #27
 800a918:	bf44      	itt	mi
 800a91a:	2320      	movmi	r3, #32
 800a91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a920:	0711      	lsls	r1, r2, #28
 800a922:	bf44      	itt	mi
 800a924:	232b      	movmi	r3, #43	; 0x2b
 800a926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a92a:	f89a 3000 	ldrb.w	r3, [sl]
 800a92e:	2b2a      	cmp	r3, #42	; 0x2a
 800a930:	d015      	beq.n	800a95e <_svfiprintf_r+0xf6>
 800a932:	9a07      	ldr	r2, [sp, #28]
 800a934:	4654      	mov	r4, sl
 800a936:	2000      	movs	r0, #0
 800a938:	f04f 0c0a 	mov.w	ip, #10
 800a93c:	4621      	mov	r1, r4
 800a93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a942:	3b30      	subs	r3, #48	; 0x30
 800a944:	2b09      	cmp	r3, #9
 800a946:	d94d      	bls.n	800a9e4 <_svfiprintf_r+0x17c>
 800a948:	b1b0      	cbz	r0, 800a978 <_svfiprintf_r+0x110>
 800a94a:	9207      	str	r2, [sp, #28]
 800a94c:	e014      	b.n	800a978 <_svfiprintf_r+0x110>
 800a94e:	eba0 0308 	sub.w	r3, r0, r8
 800a952:	fa09 f303 	lsl.w	r3, r9, r3
 800a956:	4313      	orrs	r3, r2
 800a958:	9304      	str	r3, [sp, #16]
 800a95a:	46a2      	mov	sl, r4
 800a95c:	e7d2      	b.n	800a904 <_svfiprintf_r+0x9c>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	9103      	str	r1, [sp, #12]
 800a966:	2b00      	cmp	r3, #0
 800a968:	bfbb      	ittet	lt
 800a96a:	425b      	neglt	r3, r3
 800a96c:	f042 0202 	orrlt.w	r2, r2, #2
 800a970:	9307      	strge	r3, [sp, #28]
 800a972:	9307      	strlt	r3, [sp, #28]
 800a974:	bfb8      	it	lt
 800a976:	9204      	strlt	r2, [sp, #16]
 800a978:	7823      	ldrb	r3, [r4, #0]
 800a97a:	2b2e      	cmp	r3, #46	; 0x2e
 800a97c:	d10c      	bne.n	800a998 <_svfiprintf_r+0x130>
 800a97e:	7863      	ldrb	r3, [r4, #1]
 800a980:	2b2a      	cmp	r3, #42	; 0x2a
 800a982:	d134      	bne.n	800a9ee <_svfiprintf_r+0x186>
 800a984:	9b03      	ldr	r3, [sp, #12]
 800a986:	1d1a      	adds	r2, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	9203      	str	r2, [sp, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfb8      	it	lt
 800a990:	f04f 33ff 	movlt.w	r3, #4294967295
 800a994:	3402      	adds	r4, #2
 800a996:	9305      	str	r3, [sp, #20]
 800a998:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa60 <_svfiprintf_r+0x1f8>
 800a99c:	7821      	ldrb	r1, [r4, #0]
 800a99e:	2203      	movs	r2, #3
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	f7f5 fc25 	bl	80001f0 <memchr>
 800a9a6:	b138      	cbz	r0, 800a9b8 <_svfiprintf_r+0x150>
 800a9a8:	9b04      	ldr	r3, [sp, #16]
 800a9aa:	eba0 000a 	sub.w	r0, r0, sl
 800a9ae:	2240      	movs	r2, #64	; 0x40
 800a9b0:	4082      	lsls	r2, r0
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	3401      	adds	r4, #1
 800a9b6:	9304      	str	r3, [sp, #16]
 800a9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9bc:	4825      	ldr	r0, [pc, #148]	; (800aa54 <_svfiprintf_r+0x1ec>)
 800a9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9c2:	2206      	movs	r2, #6
 800a9c4:	f7f5 fc14 	bl	80001f0 <memchr>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d038      	beq.n	800aa3e <_svfiprintf_r+0x1d6>
 800a9cc:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <_svfiprintf_r+0x1f0>)
 800a9ce:	bb1b      	cbnz	r3, 800aa18 <_svfiprintf_r+0x1b0>
 800a9d0:	9b03      	ldr	r3, [sp, #12]
 800a9d2:	3307      	adds	r3, #7
 800a9d4:	f023 0307 	bic.w	r3, r3, #7
 800a9d8:	3308      	adds	r3, #8
 800a9da:	9303      	str	r3, [sp, #12]
 800a9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9de:	4433      	add	r3, r6
 800a9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e2:	e768      	b.n	800a8b6 <_svfiprintf_r+0x4e>
 800a9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	e7a6      	b.n	800a93c <_svfiprintf_r+0xd4>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f04f 0c0a 	mov.w	ip, #10
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa00:	3a30      	subs	r2, #48	; 0x30
 800aa02:	2a09      	cmp	r2, #9
 800aa04:	d903      	bls.n	800aa0e <_svfiprintf_r+0x1a6>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0c6      	beq.n	800a998 <_svfiprintf_r+0x130>
 800aa0a:	9105      	str	r1, [sp, #20]
 800aa0c:	e7c4      	b.n	800a998 <_svfiprintf_r+0x130>
 800aa0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa12:	4604      	mov	r4, r0
 800aa14:	2301      	movs	r3, #1
 800aa16:	e7f0      	b.n	800a9fa <_svfiprintf_r+0x192>
 800aa18:	ab03      	add	r3, sp, #12
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <_svfiprintf_r+0x1f4>)
 800aa20:	a904      	add	r1, sp, #16
 800aa22:	4638      	mov	r0, r7
 800aa24:	f7fc fd94 	bl	8007550 <_printf_float>
 800aa28:	1c42      	adds	r2, r0, #1
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	d1d6      	bne.n	800a9dc <_svfiprintf_r+0x174>
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	065b      	lsls	r3, r3, #25
 800aa32:	f53f af2d 	bmi.w	800a890 <_svfiprintf_r+0x28>
 800aa36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa38:	b01d      	add	sp, #116	; 0x74
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	462a      	mov	r2, r5
 800aa44:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <_svfiprintf_r+0x1f4>)
 800aa46:	a904      	add	r1, sp, #16
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7fd f825 	bl	8007a98 <_printf_i>
 800aa4e:	e7eb      	b.n	800aa28 <_svfiprintf_r+0x1c0>
 800aa50:	0800bf48 	.word	0x0800bf48
 800aa54:	0800bf52 	.word	0x0800bf52
 800aa58:	08007551 	.word	0x08007551
 800aa5c:	0800a7b5 	.word	0x0800a7b5
 800aa60:	0800bf4e 	.word	0x0800bf4e

0800aa64 <__sflush_r>:
 800aa64:	898a      	ldrh	r2, [r1, #12]
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	0710      	lsls	r0, r2, #28
 800aa6e:	460c      	mov	r4, r1
 800aa70:	d458      	bmi.n	800ab24 <__sflush_r+0xc0>
 800aa72:	684b      	ldr	r3, [r1, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dc05      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dc02      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d0f9      	beq.n	800aa7e <__sflush_r+0x1a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa90:	682f      	ldr	r7, [r5, #0]
 800aa92:	6a21      	ldr	r1, [r4, #32]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	d032      	beq.n	800aafe <__sflush_r+0x9a>
 800aa98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	075a      	lsls	r2, r3, #29
 800aa9e:	d505      	bpl.n	800aaac <__sflush_r+0x48>
 800aaa0:	6863      	ldr	r3, [r4, #4]
 800aaa2:	1ac0      	subs	r0, r0, r3
 800aaa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaa6:	b10b      	cbz	r3, 800aaac <__sflush_r+0x48>
 800aaa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaaa:	1ac0      	subs	r0, r0, r3
 800aaac:	2300      	movs	r3, #0
 800aaae:	4602      	mov	r2, r0
 800aab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab2:	6a21      	ldr	r1, [r4, #32]
 800aab4:	4628      	mov	r0, r5
 800aab6:	47b0      	blx	r6
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	d106      	bne.n	800aacc <__sflush_r+0x68>
 800aabe:	6829      	ldr	r1, [r5, #0]
 800aac0:	291d      	cmp	r1, #29
 800aac2:	d82b      	bhi.n	800ab1c <__sflush_r+0xb8>
 800aac4:	4a29      	ldr	r2, [pc, #164]	; (800ab6c <__sflush_r+0x108>)
 800aac6:	410a      	asrs	r2, r1
 800aac8:	07d6      	lsls	r6, r2, #31
 800aaca:	d427      	bmi.n	800ab1c <__sflush_r+0xb8>
 800aacc:	2200      	movs	r2, #0
 800aace:	6062      	str	r2, [r4, #4]
 800aad0:	04d9      	lsls	r1, r3, #19
 800aad2:	6922      	ldr	r2, [r4, #16]
 800aad4:	6022      	str	r2, [r4, #0]
 800aad6:	d504      	bpl.n	800aae2 <__sflush_r+0x7e>
 800aad8:	1c42      	adds	r2, r0, #1
 800aada:	d101      	bne.n	800aae0 <__sflush_r+0x7c>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b903      	cbnz	r3, 800aae2 <__sflush_r+0x7e>
 800aae0:	6560      	str	r0, [r4, #84]	; 0x54
 800aae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aae4:	602f      	str	r7, [r5, #0]
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d0c9      	beq.n	800aa7e <__sflush_r+0x1a>
 800aaea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaee:	4299      	cmp	r1, r3
 800aaf0:	d002      	beq.n	800aaf8 <__sflush_r+0x94>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7fe fb52 	bl	800919c <_free_r>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	6360      	str	r0, [r4, #52]	; 0x34
 800aafc:	e7c0      	b.n	800aa80 <__sflush_r+0x1c>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b0      	blx	r6
 800ab04:	1c41      	adds	r1, r0, #1
 800ab06:	d1c8      	bne.n	800aa9a <__sflush_r+0x36>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c5      	beq.n	800aa9a <__sflush_r+0x36>
 800ab0e:	2b1d      	cmp	r3, #29
 800ab10:	d001      	beq.n	800ab16 <__sflush_r+0xb2>
 800ab12:	2b16      	cmp	r3, #22
 800ab14:	d101      	bne.n	800ab1a <__sflush_r+0xb6>
 800ab16:	602f      	str	r7, [r5, #0]
 800ab18:	e7b1      	b.n	800aa7e <__sflush_r+0x1a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	e7ad      	b.n	800aa80 <__sflush_r+0x1c>
 800ab24:	690f      	ldr	r7, [r1, #16]
 800ab26:	2f00      	cmp	r7, #0
 800ab28:	d0a9      	beq.n	800aa7e <__sflush_r+0x1a>
 800ab2a:	0793      	lsls	r3, r2, #30
 800ab2c:	680e      	ldr	r6, [r1, #0]
 800ab2e:	bf08      	it	eq
 800ab30:	694b      	ldreq	r3, [r1, #20]
 800ab32:	600f      	str	r7, [r1, #0]
 800ab34:	bf18      	it	ne
 800ab36:	2300      	movne	r3, #0
 800ab38:	eba6 0807 	sub.w	r8, r6, r7
 800ab3c:	608b      	str	r3, [r1, #8]
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	dd9c      	ble.n	800aa7e <__sflush_r+0x1a>
 800ab44:	6a21      	ldr	r1, [r4, #32]
 800ab46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab48:	4643      	mov	r3, r8
 800ab4a:	463a      	mov	r2, r7
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	47b0      	blx	r6
 800ab50:	2800      	cmp	r0, #0
 800ab52:	dc06      	bgt.n	800ab62 <__sflush_r+0xfe>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	e78e      	b.n	800aa80 <__sflush_r+0x1c>
 800ab62:	4407      	add	r7, r0
 800ab64:	eba8 0800 	sub.w	r8, r8, r0
 800ab68:	e7e9      	b.n	800ab3e <__sflush_r+0xda>
 800ab6a:	bf00      	nop
 800ab6c:	dfbffffe 	.word	0xdfbffffe

0800ab70 <_fflush_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b913      	cbnz	r3, 800ab80 <_fflush_r+0x10>
 800ab7a:	2500      	movs	r5, #0
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	b118      	cbz	r0, 800ab8a <_fflush_r+0x1a>
 800ab82:	6a03      	ldr	r3, [r0, #32]
 800ab84:	b90b      	cbnz	r3, 800ab8a <_fflush_r+0x1a>
 800ab86:	f7fd fb45 	bl	8008214 <__sinit>
 800ab8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0f3      	beq.n	800ab7a <_fflush_r+0xa>
 800ab92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab94:	07d0      	lsls	r0, r2, #31
 800ab96:	d404      	bmi.n	800aba2 <_fflush_r+0x32>
 800ab98:	0599      	lsls	r1, r3, #22
 800ab9a:	d402      	bmi.n	800aba2 <_fflush_r+0x32>
 800ab9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9e:	f7fd fc72 	bl	8008486 <__retarget_lock_acquire_recursive>
 800aba2:	4628      	mov	r0, r5
 800aba4:	4621      	mov	r1, r4
 800aba6:	f7ff ff5d 	bl	800aa64 <__sflush_r>
 800abaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abac:	07da      	lsls	r2, r3, #31
 800abae:	4605      	mov	r5, r0
 800abb0:	d4e4      	bmi.n	800ab7c <_fflush_r+0xc>
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	059b      	lsls	r3, r3, #22
 800abb6:	d4e1      	bmi.n	800ab7c <_fflush_r+0xc>
 800abb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abba:	f7fd fc65 	bl	8008488 <__retarget_lock_release_recursive>
 800abbe:	e7dd      	b.n	800ab7c <_fflush_r+0xc>

0800abc0 <memmove>:
 800abc0:	4288      	cmp	r0, r1
 800abc2:	b510      	push	{r4, lr}
 800abc4:	eb01 0402 	add.w	r4, r1, r2
 800abc8:	d902      	bls.n	800abd0 <memmove+0x10>
 800abca:	4284      	cmp	r4, r0
 800abcc:	4623      	mov	r3, r4
 800abce:	d807      	bhi.n	800abe0 <memmove+0x20>
 800abd0:	1e43      	subs	r3, r0, #1
 800abd2:	42a1      	cmp	r1, r4
 800abd4:	d008      	beq.n	800abe8 <memmove+0x28>
 800abd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abde:	e7f8      	b.n	800abd2 <memmove+0x12>
 800abe0:	4402      	add	r2, r0
 800abe2:	4601      	mov	r1, r0
 800abe4:	428a      	cmp	r2, r1
 800abe6:	d100      	bne.n	800abea <memmove+0x2a>
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abf2:	e7f7      	b.n	800abe4 <memmove+0x24>

0800abf4 <strncmp>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	b16a      	cbz	r2, 800ac14 <strncmp+0x20>
 800abf8:	3901      	subs	r1, #1
 800abfa:	1884      	adds	r4, r0, r2
 800abfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d103      	bne.n	800ac10 <strncmp+0x1c>
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d001      	beq.n	800ac10 <strncmp+0x1c>
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	d1f5      	bne.n	800abfc <strncmp+0x8>
 800ac10:	1ad0      	subs	r0, r2, r3
 800ac12:	bd10      	pop	{r4, pc}
 800ac14:	4610      	mov	r0, r2
 800ac16:	e7fc      	b.n	800ac12 <strncmp+0x1e>

0800ac18 <memcpy>:
 800ac18:	440a      	add	r2, r1
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac20:	d100      	bne.n	800ac24 <memcpy+0xc>
 800ac22:	4770      	bx	lr
 800ac24:	b510      	push	{r4, lr}
 800ac26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	d1f9      	bne.n	800ac26 <memcpy+0xe>
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	0000      	movs	r0, r0
	...

0800ac38 <nan>:
 800ac38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac40 <nan+0x8>
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	00000000 	.word	0x00000000
 800ac44:	7ff80000 	.word	0x7ff80000

0800ac48 <__assert_func>:
 800ac48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac4a:	4614      	mov	r4, r2
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <__assert_func+0x2c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4605      	mov	r5, r0
 800ac54:	68d8      	ldr	r0, [r3, #12]
 800ac56:	b14c      	cbz	r4, 800ac6c <__assert_func+0x24>
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <__assert_func+0x30>)
 800ac5a:	9100      	str	r1, [sp, #0]
 800ac5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac60:	4906      	ldr	r1, [pc, #24]	; (800ac7c <__assert_func+0x34>)
 800ac62:	462b      	mov	r3, r5
 800ac64:	f000 fbca 	bl	800b3fc <fiprintf>
 800ac68:	f000 fbda 	bl	800b420 <abort>
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <__assert_func+0x38>)
 800ac6e:	461c      	mov	r4, r3
 800ac70:	e7f3      	b.n	800ac5a <__assert_func+0x12>
 800ac72:	bf00      	nop
 800ac74:	2000006c 	.word	0x2000006c
 800ac78:	0800bf61 	.word	0x0800bf61
 800ac7c:	0800bf6e 	.word	0x0800bf6e
 800ac80:	0800bf9c 	.word	0x0800bf9c

0800ac84 <_calloc_r>:
 800ac84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac86:	fba1 2402 	umull	r2, r4, r1, r2
 800ac8a:	b94c      	cbnz	r4, 800aca0 <_calloc_r+0x1c>
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	f7fc faa4 	bl	80071dc <_malloc_r>
 800ac94:	9a01      	ldr	r2, [sp, #4]
 800ac96:	4605      	mov	r5, r0
 800ac98:	b930      	cbnz	r0, 800aca8 <_calloc_r+0x24>
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	b003      	add	sp, #12
 800ac9e:	bd30      	pop	{r4, r5, pc}
 800aca0:	220c      	movs	r2, #12
 800aca2:	6002      	str	r2, [r0, #0]
 800aca4:	2500      	movs	r5, #0
 800aca6:	e7f8      	b.n	800ac9a <_calloc_r+0x16>
 800aca8:	4621      	mov	r1, r4
 800acaa:	f7fd fb4c 	bl	8008346 <memset>
 800acae:	e7f4      	b.n	800ac9a <_calloc_r+0x16>

0800acb0 <rshift>:
 800acb0:	6903      	ldr	r3, [r0, #16]
 800acb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800acb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800acbe:	f100 0414 	add.w	r4, r0, #20
 800acc2:	dd45      	ble.n	800ad50 <rshift+0xa0>
 800acc4:	f011 011f 	ands.w	r1, r1, #31
 800acc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800accc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800acd0:	d10c      	bne.n	800acec <rshift+0x3c>
 800acd2:	f100 0710 	add.w	r7, r0, #16
 800acd6:	4629      	mov	r1, r5
 800acd8:	42b1      	cmp	r1, r6
 800acda:	d334      	bcc.n	800ad46 <rshift+0x96>
 800acdc:	1a9b      	subs	r3, r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	1eea      	subs	r2, r5, #3
 800ace2:	4296      	cmp	r6, r2
 800ace4:	bf38      	it	cc
 800ace6:	2300      	movcc	r3, #0
 800ace8:	4423      	add	r3, r4
 800acea:	e015      	b.n	800ad18 <rshift+0x68>
 800acec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800acf0:	f1c1 0820 	rsb	r8, r1, #32
 800acf4:	40cf      	lsrs	r7, r1
 800acf6:	f105 0e04 	add.w	lr, r5, #4
 800acfa:	46a1      	mov	r9, r4
 800acfc:	4576      	cmp	r6, lr
 800acfe:	46f4      	mov	ip, lr
 800ad00:	d815      	bhi.n	800ad2e <rshift+0x7e>
 800ad02:	1a9a      	subs	r2, r3, r2
 800ad04:	0092      	lsls	r2, r2, #2
 800ad06:	3a04      	subs	r2, #4
 800ad08:	3501      	adds	r5, #1
 800ad0a:	42ae      	cmp	r6, r5
 800ad0c:	bf38      	it	cc
 800ad0e:	2200      	movcc	r2, #0
 800ad10:	18a3      	adds	r3, r4, r2
 800ad12:	50a7      	str	r7, [r4, r2]
 800ad14:	b107      	cbz	r7, 800ad18 <rshift+0x68>
 800ad16:	3304      	adds	r3, #4
 800ad18:	1b1a      	subs	r2, r3, r4
 800ad1a:	42a3      	cmp	r3, r4
 800ad1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad20:	bf08      	it	eq
 800ad22:	2300      	moveq	r3, #0
 800ad24:	6102      	str	r2, [r0, #16]
 800ad26:	bf08      	it	eq
 800ad28:	6143      	streq	r3, [r0, #20]
 800ad2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad2e:	f8dc c000 	ldr.w	ip, [ip]
 800ad32:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad36:	ea4c 0707 	orr.w	r7, ip, r7
 800ad3a:	f849 7b04 	str.w	r7, [r9], #4
 800ad3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad42:	40cf      	lsrs	r7, r1
 800ad44:	e7da      	b.n	800acfc <rshift+0x4c>
 800ad46:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad4a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad4e:	e7c3      	b.n	800acd8 <rshift+0x28>
 800ad50:	4623      	mov	r3, r4
 800ad52:	e7e1      	b.n	800ad18 <rshift+0x68>

0800ad54 <__hexdig_fun>:
 800ad54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	d802      	bhi.n	800ad62 <__hexdig_fun+0xe>
 800ad5c:	3820      	subs	r0, #32
 800ad5e:	b2c0      	uxtb	r0, r0
 800ad60:	4770      	bx	lr
 800ad62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d801      	bhi.n	800ad6e <__hexdig_fun+0x1a>
 800ad6a:	3847      	subs	r0, #71	; 0x47
 800ad6c:	e7f7      	b.n	800ad5e <__hexdig_fun+0xa>
 800ad6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad72:	2b05      	cmp	r3, #5
 800ad74:	d801      	bhi.n	800ad7a <__hexdig_fun+0x26>
 800ad76:	3827      	subs	r0, #39	; 0x27
 800ad78:	e7f1      	b.n	800ad5e <__hexdig_fun+0xa>
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	4770      	bx	lr
	...

0800ad80 <__gethex>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	4617      	mov	r7, r2
 800ad86:	680a      	ldr	r2, [r1, #0]
 800ad88:	b085      	sub	sp, #20
 800ad8a:	f102 0b02 	add.w	fp, r2, #2
 800ad8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ad92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ad96:	4681      	mov	r9, r0
 800ad98:	468a      	mov	sl, r1
 800ad9a:	9302      	str	r3, [sp, #8]
 800ad9c:	32fe      	adds	r2, #254	; 0xfe
 800ad9e:	eb02 030b 	add.w	r3, r2, fp
 800ada2:	46d8      	mov	r8, fp
 800ada4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	2830      	cmp	r0, #48	; 0x30
 800adac:	d0f7      	beq.n	800ad9e <__gethex+0x1e>
 800adae:	f7ff ffd1 	bl	800ad54 <__hexdig_fun>
 800adb2:	4604      	mov	r4, r0
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d138      	bne.n	800ae2a <__gethex+0xaa>
 800adb8:	49a7      	ldr	r1, [pc, #668]	; (800b058 <__gethex+0x2d8>)
 800adba:	2201      	movs	r2, #1
 800adbc:	4640      	mov	r0, r8
 800adbe:	f7ff ff19 	bl	800abf4 <strncmp>
 800adc2:	4606      	mov	r6, r0
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d169      	bne.n	800ae9c <__gethex+0x11c>
 800adc8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800adcc:	465d      	mov	r5, fp
 800adce:	f7ff ffc1 	bl	800ad54 <__hexdig_fun>
 800add2:	2800      	cmp	r0, #0
 800add4:	d064      	beq.n	800aea0 <__gethex+0x120>
 800add6:	465a      	mov	r2, fp
 800add8:	7810      	ldrb	r0, [r2, #0]
 800adda:	2830      	cmp	r0, #48	; 0x30
 800addc:	4690      	mov	r8, r2
 800adde:	f102 0201 	add.w	r2, r2, #1
 800ade2:	d0f9      	beq.n	800add8 <__gethex+0x58>
 800ade4:	f7ff ffb6 	bl	800ad54 <__hexdig_fun>
 800ade8:	2301      	movs	r3, #1
 800adea:	fab0 f480 	clz	r4, r0
 800adee:	0964      	lsrs	r4, r4, #5
 800adf0:	465e      	mov	r6, fp
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	4642      	mov	r2, r8
 800adf6:	4615      	mov	r5, r2
 800adf8:	3201      	adds	r2, #1
 800adfa:	7828      	ldrb	r0, [r5, #0]
 800adfc:	f7ff ffaa 	bl	800ad54 <__hexdig_fun>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1f8      	bne.n	800adf6 <__gethex+0x76>
 800ae04:	4994      	ldr	r1, [pc, #592]	; (800b058 <__gethex+0x2d8>)
 800ae06:	2201      	movs	r2, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f7ff fef3 	bl	800abf4 <strncmp>
 800ae0e:	b978      	cbnz	r0, 800ae30 <__gethex+0xb0>
 800ae10:	b946      	cbnz	r6, 800ae24 <__gethex+0xa4>
 800ae12:	1c6e      	adds	r6, r5, #1
 800ae14:	4632      	mov	r2, r6
 800ae16:	4615      	mov	r5, r2
 800ae18:	3201      	adds	r2, #1
 800ae1a:	7828      	ldrb	r0, [r5, #0]
 800ae1c:	f7ff ff9a 	bl	800ad54 <__hexdig_fun>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d1f8      	bne.n	800ae16 <__gethex+0x96>
 800ae24:	1b73      	subs	r3, r6, r5
 800ae26:	009e      	lsls	r6, r3, #2
 800ae28:	e004      	b.n	800ae34 <__gethex+0xb4>
 800ae2a:	2400      	movs	r4, #0
 800ae2c:	4626      	mov	r6, r4
 800ae2e:	e7e1      	b.n	800adf4 <__gethex+0x74>
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	d1f7      	bne.n	800ae24 <__gethex+0xa4>
 800ae34:	782b      	ldrb	r3, [r5, #0]
 800ae36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae3a:	2b50      	cmp	r3, #80	; 0x50
 800ae3c:	d13d      	bne.n	800aeba <__gethex+0x13a>
 800ae3e:	786b      	ldrb	r3, [r5, #1]
 800ae40:	2b2b      	cmp	r3, #43	; 0x2b
 800ae42:	d02f      	beq.n	800aea4 <__gethex+0x124>
 800ae44:	2b2d      	cmp	r3, #45	; 0x2d
 800ae46:	d031      	beq.n	800aeac <__gethex+0x12c>
 800ae48:	1c69      	adds	r1, r5, #1
 800ae4a:	f04f 0b00 	mov.w	fp, #0
 800ae4e:	7808      	ldrb	r0, [r1, #0]
 800ae50:	f7ff ff80 	bl	800ad54 <__hexdig_fun>
 800ae54:	1e42      	subs	r2, r0, #1
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	2a18      	cmp	r2, #24
 800ae5a:	d82e      	bhi.n	800aeba <__gethex+0x13a>
 800ae5c:	f1a0 0210 	sub.w	r2, r0, #16
 800ae60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae64:	f7ff ff76 	bl	800ad54 <__hexdig_fun>
 800ae68:	f100 3cff 	add.w	ip, r0, #4294967295
 800ae6c:	fa5f fc8c 	uxtb.w	ip, ip
 800ae70:	f1bc 0f18 	cmp.w	ip, #24
 800ae74:	d91d      	bls.n	800aeb2 <__gethex+0x132>
 800ae76:	f1bb 0f00 	cmp.w	fp, #0
 800ae7a:	d000      	beq.n	800ae7e <__gethex+0xfe>
 800ae7c:	4252      	negs	r2, r2
 800ae7e:	4416      	add	r6, r2
 800ae80:	f8ca 1000 	str.w	r1, [sl]
 800ae84:	b1dc      	cbz	r4, 800aebe <__gethex+0x13e>
 800ae86:	9b01      	ldr	r3, [sp, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	bf14      	ite	ne
 800ae8c:	f04f 0800 	movne.w	r8, #0
 800ae90:	f04f 0806 	moveq.w	r8, #6
 800ae94:	4640      	mov	r0, r8
 800ae96:	b005      	add	sp, #20
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	4645      	mov	r5, r8
 800ae9e:	4626      	mov	r6, r4
 800aea0:	2401      	movs	r4, #1
 800aea2:	e7c7      	b.n	800ae34 <__gethex+0xb4>
 800aea4:	f04f 0b00 	mov.w	fp, #0
 800aea8:	1ca9      	adds	r1, r5, #2
 800aeaa:	e7d0      	b.n	800ae4e <__gethex+0xce>
 800aeac:	f04f 0b01 	mov.w	fp, #1
 800aeb0:	e7fa      	b.n	800aea8 <__gethex+0x128>
 800aeb2:	230a      	movs	r3, #10
 800aeb4:	fb03 0002 	mla	r0, r3, r2, r0
 800aeb8:	e7d0      	b.n	800ae5c <__gethex+0xdc>
 800aeba:	4629      	mov	r1, r5
 800aebc:	e7e0      	b.n	800ae80 <__gethex+0x100>
 800aebe:	eba5 0308 	sub.w	r3, r5, r8
 800aec2:	3b01      	subs	r3, #1
 800aec4:	4621      	mov	r1, r4
 800aec6:	2b07      	cmp	r3, #7
 800aec8:	dc0a      	bgt.n	800aee0 <__gethex+0x160>
 800aeca:	4648      	mov	r0, r9
 800aecc:	f7fe f9b2 	bl	8009234 <_Balloc>
 800aed0:	4604      	mov	r4, r0
 800aed2:	b940      	cbnz	r0, 800aee6 <__gethex+0x166>
 800aed4:	4b61      	ldr	r3, [pc, #388]	; (800b05c <__gethex+0x2dc>)
 800aed6:	4602      	mov	r2, r0
 800aed8:	21e4      	movs	r1, #228	; 0xe4
 800aeda:	4861      	ldr	r0, [pc, #388]	; (800b060 <__gethex+0x2e0>)
 800aedc:	f7ff feb4 	bl	800ac48 <__assert_func>
 800aee0:	3101      	adds	r1, #1
 800aee2:	105b      	asrs	r3, r3, #1
 800aee4:	e7ef      	b.n	800aec6 <__gethex+0x146>
 800aee6:	f100 0a14 	add.w	sl, r0, #20
 800aeea:	2300      	movs	r3, #0
 800aeec:	495a      	ldr	r1, [pc, #360]	; (800b058 <__gethex+0x2d8>)
 800aeee:	f8cd a004 	str.w	sl, [sp, #4]
 800aef2:	469b      	mov	fp, r3
 800aef4:	45a8      	cmp	r8, r5
 800aef6:	d342      	bcc.n	800af7e <__gethex+0x1fe>
 800aef8:	9801      	ldr	r0, [sp, #4]
 800aefa:	f840 bb04 	str.w	fp, [r0], #4
 800aefe:	eba0 000a 	sub.w	r0, r0, sl
 800af02:	1080      	asrs	r0, r0, #2
 800af04:	6120      	str	r0, [r4, #16]
 800af06:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800af0a:	4658      	mov	r0, fp
 800af0c:	f7fe fa84 	bl	8009418 <__hi0bits>
 800af10:	683d      	ldr	r5, [r7, #0]
 800af12:	eba8 0000 	sub.w	r0, r8, r0
 800af16:	42a8      	cmp	r0, r5
 800af18:	dd59      	ble.n	800afce <__gethex+0x24e>
 800af1a:	eba0 0805 	sub.w	r8, r0, r5
 800af1e:	4641      	mov	r1, r8
 800af20:	4620      	mov	r0, r4
 800af22:	f7fe fe13 	bl	8009b4c <__any_on>
 800af26:	4683      	mov	fp, r0
 800af28:	b1b8      	cbz	r0, 800af5a <__gethex+0x1da>
 800af2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800af2e:	1159      	asrs	r1, r3, #5
 800af30:	f003 021f 	and.w	r2, r3, #31
 800af34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800af38:	f04f 0b01 	mov.w	fp, #1
 800af3c:	fa0b f202 	lsl.w	r2, fp, r2
 800af40:	420a      	tst	r2, r1
 800af42:	d00a      	beq.n	800af5a <__gethex+0x1da>
 800af44:	455b      	cmp	r3, fp
 800af46:	dd06      	ble.n	800af56 <__gethex+0x1d6>
 800af48:	f1a8 0102 	sub.w	r1, r8, #2
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7fe fdfd 	bl	8009b4c <__any_on>
 800af52:	2800      	cmp	r0, #0
 800af54:	d138      	bne.n	800afc8 <__gethex+0x248>
 800af56:	f04f 0b02 	mov.w	fp, #2
 800af5a:	4641      	mov	r1, r8
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7ff fea7 	bl	800acb0 <rshift>
 800af62:	4446      	add	r6, r8
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	42b3      	cmp	r3, r6
 800af68:	da41      	bge.n	800afee <__gethex+0x26e>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4648      	mov	r0, r9
 800af6e:	f7fe f9a1 	bl	80092b4 <_Bfree>
 800af72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af74:	2300      	movs	r3, #0
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800af7c:	e78a      	b.n	800ae94 <__gethex+0x114>
 800af7e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800af82:	2a2e      	cmp	r2, #46	; 0x2e
 800af84:	d014      	beq.n	800afb0 <__gethex+0x230>
 800af86:	2b20      	cmp	r3, #32
 800af88:	d106      	bne.n	800af98 <__gethex+0x218>
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	f843 bb04 	str.w	fp, [r3], #4
 800af90:	f04f 0b00 	mov.w	fp, #0
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	465b      	mov	r3, fp
 800af98:	7828      	ldrb	r0, [r5, #0]
 800af9a:	9303      	str	r3, [sp, #12]
 800af9c:	f7ff feda 	bl	800ad54 <__hexdig_fun>
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	f000 000f 	and.w	r0, r0, #15
 800afa6:	4098      	lsls	r0, r3
 800afa8:	ea4b 0b00 	orr.w	fp, fp, r0
 800afac:	3304      	adds	r3, #4
 800afae:	e7a1      	b.n	800aef4 <__gethex+0x174>
 800afb0:	45a8      	cmp	r8, r5
 800afb2:	d8e8      	bhi.n	800af86 <__gethex+0x206>
 800afb4:	2201      	movs	r2, #1
 800afb6:	4628      	mov	r0, r5
 800afb8:	9303      	str	r3, [sp, #12]
 800afba:	f7ff fe1b 	bl	800abf4 <strncmp>
 800afbe:	4926      	ldr	r1, [pc, #152]	; (800b058 <__gethex+0x2d8>)
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d1df      	bne.n	800af86 <__gethex+0x206>
 800afc6:	e795      	b.n	800aef4 <__gethex+0x174>
 800afc8:	f04f 0b03 	mov.w	fp, #3
 800afcc:	e7c5      	b.n	800af5a <__gethex+0x1da>
 800afce:	da0b      	bge.n	800afe8 <__gethex+0x268>
 800afd0:	eba5 0800 	sub.w	r8, r5, r0
 800afd4:	4621      	mov	r1, r4
 800afd6:	4642      	mov	r2, r8
 800afd8:	4648      	mov	r0, r9
 800afda:	f7fe fb85 	bl	80096e8 <__lshift>
 800afde:	eba6 0608 	sub.w	r6, r6, r8
 800afe2:	4604      	mov	r4, r0
 800afe4:	f100 0a14 	add.w	sl, r0, #20
 800afe8:	f04f 0b00 	mov.w	fp, #0
 800afec:	e7ba      	b.n	800af64 <__gethex+0x1e4>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	42b3      	cmp	r3, r6
 800aff2:	dd73      	ble.n	800b0dc <__gethex+0x35c>
 800aff4:	1b9e      	subs	r6, r3, r6
 800aff6:	42b5      	cmp	r5, r6
 800aff8:	dc34      	bgt.n	800b064 <__gethex+0x2e4>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d023      	beq.n	800b048 <__gethex+0x2c8>
 800b000:	2b03      	cmp	r3, #3
 800b002:	d025      	beq.n	800b050 <__gethex+0x2d0>
 800b004:	2b01      	cmp	r3, #1
 800b006:	d115      	bne.n	800b034 <__gethex+0x2b4>
 800b008:	42b5      	cmp	r5, r6
 800b00a:	d113      	bne.n	800b034 <__gethex+0x2b4>
 800b00c:	2d01      	cmp	r5, #1
 800b00e:	d10b      	bne.n	800b028 <__gethex+0x2a8>
 800b010:	9a02      	ldr	r2, [sp, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	2301      	movs	r3, #1
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	f8ca 3000 	str.w	r3, [sl]
 800b01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b020:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b024:	601c      	str	r4, [r3, #0]
 800b026:	e735      	b.n	800ae94 <__gethex+0x114>
 800b028:	1e69      	subs	r1, r5, #1
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7fe fd8e 	bl	8009b4c <__any_on>
 800b030:	2800      	cmp	r0, #0
 800b032:	d1ed      	bne.n	800b010 <__gethex+0x290>
 800b034:	4621      	mov	r1, r4
 800b036:	4648      	mov	r0, r9
 800b038:	f7fe f93c 	bl	80092b4 <_Bfree>
 800b03c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b03e:	2300      	movs	r3, #0
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b046:	e725      	b.n	800ae94 <__gethex+0x114>
 800b048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1f2      	bne.n	800b034 <__gethex+0x2b4>
 800b04e:	e7df      	b.n	800b010 <__gethex+0x290>
 800b050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1dc      	bne.n	800b010 <__gethex+0x290>
 800b056:	e7ed      	b.n	800b034 <__gethex+0x2b4>
 800b058:	0800bef4 	.word	0x0800bef4
 800b05c:	0800bd8a 	.word	0x0800bd8a
 800b060:	0800bf9d 	.word	0x0800bf9d
 800b064:	f106 38ff 	add.w	r8, r6, #4294967295
 800b068:	f1bb 0f00 	cmp.w	fp, #0
 800b06c:	d133      	bne.n	800b0d6 <__gethex+0x356>
 800b06e:	f1b8 0f00 	cmp.w	r8, #0
 800b072:	d004      	beq.n	800b07e <__gethex+0x2fe>
 800b074:	4641      	mov	r1, r8
 800b076:	4620      	mov	r0, r4
 800b078:	f7fe fd68 	bl	8009b4c <__any_on>
 800b07c:	4683      	mov	fp, r0
 800b07e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b082:	2301      	movs	r3, #1
 800b084:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b088:	f008 081f 	and.w	r8, r8, #31
 800b08c:	fa03 f308 	lsl.w	r3, r3, r8
 800b090:	4213      	tst	r3, r2
 800b092:	4631      	mov	r1, r6
 800b094:	4620      	mov	r0, r4
 800b096:	bf18      	it	ne
 800b098:	f04b 0b02 	orrne.w	fp, fp, #2
 800b09c:	1bad      	subs	r5, r5, r6
 800b09e:	f7ff fe07 	bl	800acb0 <rshift>
 800b0a2:	687e      	ldr	r6, [r7, #4]
 800b0a4:	f04f 0802 	mov.w	r8, #2
 800b0a8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ac:	d04a      	beq.n	800b144 <__gethex+0x3c4>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d016      	beq.n	800b0e2 <__gethex+0x362>
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d018      	beq.n	800b0ea <__gethex+0x36a>
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d109      	bne.n	800b0d0 <__gethex+0x350>
 800b0bc:	f01b 0f02 	tst.w	fp, #2
 800b0c0:	d006      	beq.n	800b0d0 <__gethex+0x350>
 800b0c2:	f8da 3000 	ldr.w	r3, [sl]
 800b0c6:	ea4b 0b03 	orr.w	fp, fp, r3
 800b0ca:	f01b 0f01 	tst.w	fp, #1
 800b0ce:	d10f      	bne.n	800b0f0 <__gethex+0x370>
 800b0d0:	f048 0810 	orr.w	r8, r8, #16
 800b0d4:	e036      	b.n	800b144 <__gethex+0x3c4>
 800b0d6:	f04f 0b01 	mov.w	fp, #1
 800b0da:	e7d0      	b.n	800b07e <__gethex+0x2fe>
 800b0dc:	f04f 0801 	mov.w	r8, #1
 800b0e0:	e7e2      	b.n	800b0a8 <__gethex+0x328>
 800b0e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0e4:	f1c3 0301 	rsb	r3, r3, #1
 800b0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0ef      	beq.n	800b0d0 <__gethex+0x350>
 800b0f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b0f4:	f104 0214 	add.w	r2, r4, #20
 800b0f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b102:	2300      	movs	r3, #0
 800b104:	4694      	mov	ip, r2
 800b106:	f852 1b04 	ldr.w	r1, [r2], #4
 800b10a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b10e:	d01e      	beq.n	800b14e <__gethex+0x3ce>
 800b110:	3101      	adds	r1, #1
 800b112:	f8cc 1000 	str.w	r1, [ip]
 800b116:	f1b8 0f02 	cmp.w	r8, #2
 800b11a:	f104 0214 	add.w	r2, r4, #20
 800b11e:	d13d      	bne.n	800b19c <__gethex+0x41c>
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3b01      	subs	r3, #1
 800b124:	42ab      	cmp	r3, r5
 800b126:	d10b      	bne.n	800b140 <__gethex+0x3c0>
 800b128:	1169      	asrs	r1, r5, #5
 800b12a:	2301      	movs	r3, #1
 800b12c:	f005 051f 	and.w	r5, r5, #31
 800b130:	fa03 f505 	lsl.w	r5, r3, r5
 800b134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b138:	421d      	tst	r5, r3
 800b13a:	bf18      	it	ne
 800b13c:	f04f 0801 	movne.w	r8, #1
 800b140:	f048 0820 	orr.w	r8, r8, #32
 800b144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b146:	601c      	str	r4, [r3, #0]
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	601e      	str	r6, [r3, #0]
 800b14c:	e6a2      	b.n	800ae94 <__gethex+0x114>
 800b14e:	4290      	cmp	r0, r2
 800b150:	f842 3c04 	str.w	r3, [r2, #-4]
 800b154:	d8d6      	bhi.n	800b104 <__gethex+0x384>
 800b156:	68a2      	ldr	r2, [r4, #8]
 800b158:	4593      	cmp	fp, r2
 800b15a:	db17      	blt.n	800b18c <__gethex+0x40c>
 800b15c:	6861      	ldr	r1, [r4, #4]
 800b15e:	4648      	mov	r0, r9
 800b160:	3101      	adds	r1, #1
 800b162:	f7fe f867 	bl	8009234 <_Balloc>
 800b166:	4682      	mov	sl, r0
 800b168:	b918      	cbnz	r0, 800b172 <__gethex+0x3f2>
 800b16a:	4b1b      	ldr	r3, [pc, #108]	; (800b1d8 <__gethex+0x458>)
 800b16c:	4602      	mov	r2, r0
 800b16e:	2184      	movs	r1, #132	; 0x84
 800b170:	e6b3      	b.n	800aeda <__gethex+0x15a>
 800b172:	6922      	ldr	r2, [r4, #16]
 800b174:	3202      	adds	r2, #2
 800b176:	f104 010c 	add.w	r1, r4, #12
 800b17a:	0092      	lsls	r2, r2, #2
 800b17c:	300c      	adds	r0, #12
 800b17e:	f7ff fd4b 	bl	800ac18 <memcpy>
 800b182:	4621      	mov	r1, r4
 800b184:	4648      	mov	r0, r9
 800b186:	f7fe f895 	bl	80092b4 <_Bfree>
 800b18a:	4654      	mov	r4, sl
 800b18c:	6922      	ldr	r2, [r4, #16]
 800b18e:	1c51      	adds	r1, r2, #1
 800b190:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b194:	6121      	str	r1, [r4, #16]
 800b196:	2101      	movs	r1, #1
 800b198:	6151      	str	r1, [r2, #20]
 800b19a:	e7bc      	b.n	800b116 <__gethex+0x396>
 800b19c:	6921      	ldr	r1, [r4, #16]
 800b19e:	4559      	cmp	r1, fp
 800b1a0:	dd0b      	ble.n	800b1ba <__gethex+0x43a>
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7ff fd83 	bl	800acb0 <rshift>
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	42b3      	cmp	r3, r6
 800b1b0:	f6ff aedb 	blt.w	800af6a <__gethex+0x1ea>
 800b1b4:	f04f 0801 	mov.w	r8, #1
 800b1b8:	e7c2      	b.n	800b140 <__gethex+0x3c0>
 800b1ba:	f015 051f 	ands.w	r5, r5, #31
 800b1be:	d0f9      	beq.n	800b1b4 <__gethex+0x434>
 800b1c0:	9b01      	ldr	r3, [sp, #4]
 800b1c2:	441a      	add	r2, r3
 800b1c4:	f1c5 0520 	rsb	r5, r5, #32
 800b1c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b1cc:	f7fe f924 	bl	8009418 <__hi0bits>
 800b1d0:	42a8      	cmp	r0, r5
 800b1d2:	dbe6      	blt.n	800b1a2 <__gethex+0x422>
 800b1d4:	e7ee      	b.n	800b1b4 <__gethex+0x434>
 800b1d6:	bf00      	nop
 800b1d8:	0800bd8a 	.word	0x0800bd8a

0800b1dc <L_shift>:
 800b1dc:	f1c2 0208 	rsb	r2, r2, #8
 800b1e0:	0092      	lsls	r2, r2, #2
 800b1e2:	b570      	push	{r4, r5, r6, lr}
 800b1e4:	f1c2 0620 	rsb	r6, r2, #32
 800b1e8:	6843      	ldr	r3, [r0, #4]
 800b1ea:	6804      	ldr	r4, [r0, #0]
 800b1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800b1f0:	432c      	orrs	r4, r5
 800b1f2:	40d3      	lsrs	r3, r2
 800b1f4:	6004      	str	r4, [r0, #0]
 800b1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b1fa:	4288      	cmp	r0, r1
 800b1fc:	d3f4      	bcc.n	800b1e8 <L_shift+0xc>
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}

0800b200 <__match>:
 800b200:	b530      	push	{r4, r5, lr}
 800b202:	6803      	ldr	r3, [r0, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20a:	b914      	cbnz	r4, 800b212 <__match+0x12>
 800b20c:	6003      	str	r3, [r0, #0]
 800b20e:	2001      	movs	r0, #1
 800b210:	bd30      	pop	{r4, r5, pc}
 800b212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b216:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b21a:	2d19      	cmp	r5, #25
 800b21c:	bf98      	it	ls
 800b21e:	3220      	addls	r2, #32
 800b220:	42a2      	cmp	r2, r4
 800b222:	d0f0      	beq.n	800b206 <__match+0x6>
 800b224:	2000      	movs	r0, #0
 800b226:	e7f3      	b.n	800b210 <__match+0x10>

0800b228 <__hexnan>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	680b      	ldr	r3, [r1, #0]
 800b22e:	6801      	ldr	r1, [r0, #0]
 800b230:	115e      	asrs	r6, r3, #5
 800b232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b236:	f013 031f 	ands.w	r3, r3, #31
 800b23a:	b087      	sub	sp, #28
 800b23c:	bf18      	it	ne
 800b23e:	3604      	addne	r6, #4
 800b240:	2500      	movs	r5, #0
 800b242:	1f37      	subs	r7, r6, #4
 800b244:	4682      	mov	sl, r0
 800b246:	4690      	mov	r8, r2
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b24e:	46b9      	mov	r9, r7
 800b250:	463c      	mov	r4, r7
 800b252:	9502      	str	r5, [sp, #8]
 800b254:	46ab      	mov	fp, r5
 800b256:	784a      	ldrb	r2, [r1, #1]
 800b258:	1c4b      	adds	r3, r1, #1
 800b25a:	9303      	str	r3, [sp, #12]
 800b25c:	b342      	cbz	r2, 800b2b0 <__hexnan+0x88>
 800b25e:	4610      	mov	r0, r2
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	9204      	str	r2, [sp, #16]
 800b264:	f7ff fd76 	bl	800ad54 <__hexdig_fun>
 800b268:	2800      	cmp	r0, #0
 800b26a:	d14f      	bne.n	800b30c <__hexnan+0xe4>
 800b26c:	9a04      	ldr	r2, [sp, #16]
 800b26e:	9905      	ldr	r1, [sp, #20]
 800b270:	2a20      	cmp	r2, #32
 800b272:	d818      	bhi.n	800b2a6 <__hexnan+0x7e>
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	459b      	cmp	fp, r3
 800b278:	dd13      	ble.n	800b2a2 <__hexnan+0x7a>
 800b27a:	454c      	cmp	r4, r9
 800b27c:	d206      	bcs.n	800b28c <__hexnan+0x64>
 800b27e:	2d07      	cmp	r5, #7
 800b280:	dc04      	bgt.n	800b28c <__hexnan+0x64>
 800b282:	462a      	mov	r2, r5
 800b284:	4649      	mov	r1, r9
 800b286:	4620      	mov	r0, r4
 800b288:	f7ff ffa8 	bl	800b1dc <L_shift>
 800b28c:	4544      	cmp	r4, r8
 800b28e:	d950      	bls.n	800b332 <__hexnan+0x10a>
 800b290:	2300      	movs	r3, #0
 800b292:	f1a4 0904 	sub.w	r9, r4, #4
 800b296:	f844 3c04 	str.w	r3, [r4, #-4]
 800b29a:	f8cd b008 	str.w	fp, [sp, #8]
 800b29e:	464c      	mov	r4, r9
 800b2a0:	461d      	mov	r5, r3
 800b2a2:	9903      	ldr	r1, [sp, #12]
 800b2a4:	e7d7      	b.n	800b256 <__hexnan+0x2e>
 800b2a6:	2a29      	cmp	r2, #41	; 0x29
 800b2a8:	d155      	bne.n	800b356 <__hexnan+0x12e>
 800b2aa:	3102      	adds	r1, #2
 800b2ac:	f8ca 1000 	str.w	r1, [sl]
 800b2b0:	f1bb 0f00 	cmp.w	fp, #0
 800b2b4:	d04f      	beq.n	800b356 <__hexnan+0x12e>
 800b2b6:	454c      	cmp	r4, r9
 800b2b8:	d206      	bcs.n	800b2c8 <__hexnan+0xa0>
 800b2ba:	2d07      	cmp	r5, #7
 800b2bc:	dc04      	bgt.n	800b2c8 <__hexnan+0xa0>
 800b2be:	462a      	mov	r2, r5
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff ff8a 	bl	800b1dc <L_shift>
 800b2c8:	4544      	cmp	r4, r8
 800b2ca:	d934      	bls.n	800b336 <__hexnan+0x10e>
 800b2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b2da:	429f      	cmp	r7, r3
 800b2dc:	d2f9      	bcs.n	800b2d2 <__hexnan+0xaa>
 800b2de:	1b3b      	subs	r3, r7, r4
 800b2e0:	f023 0303 	bic.w	r3, r3, #3
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	3e03      	subs	r6, #3
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	42a6      	cmp	r6, r4
 800b2ec:	bf38      	it	cc
 800b2ee:	2304      	movcc	r3, #4
 800b2f0:	4443      	add	r3, r8
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f843 2b04 	str.w	r2, [r3], #4
 800b2f8:	429f      	cmp	r7, r3
 800b2fa:	d2fb      	bcs.n	800b2f4 <__hexnan+0xcc>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	b91b      	cbnz	r3, 800b308 <__hexnan+0xe0>
 800b300:	4547      	cmp	r7, r8
 800b302:	d126      	bne.n	800b352 <__hexnan+0x12a>
 800b304:	2301      	movs	r3, #1
 800b306:	603b      	str	r3, [r7, #0]
 800b308:	2005      	movs	r0, #5
 800b30a:	e025      	b.n	800b358 <__hexnan+0x130>
 800b30c:	3501      	adds	r5, #1
 800b30e:	2d08      	cmp	r5, #8
 800b310:	f10b 0b01 	add.w	fp, fp, #1
 800b314:	dd06      	ble.n	800b324 <__hexnan+0xfc>
 800b316:	4544      	cmp	r4, r8
 800b318:	d9c3      	bls.n	800b2a2 <__hexnan+0x7a>
 800b31a:	2300      	movs	r3, #0
 800b31c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b320:	2501      	movs	r5, #1
 800b322:	3c04      	subs	r4, #4
 800b324:	6822      	ldr	r2, [r4, #0]
 800b326:	f000 000f 	and.w	r0, r0, #15
 800b32a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b32e:	6020      	str	r0, [r4, #0]
 800b330:	e7b7      	b.n	800b2a2 <__hexnan+0x7a>
 800b332:	2508      	movs	r5, #8
 800b334:	e7b5      	b.n	800b2a2 <__hexnan+0x7a>
 800b336:	9b01      	ldr	r3, [sp, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0df      	beq.n	800b2fc <__hexnan+0xd4>
 800b33c:	f1c3 0320 	rsb	r3, r3, #32
 800b340:	f04f 32ff 	mov.w	r2, #4294967295
 800b344:	40da      	lsrs	r2, r3
 800b346:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b34a:	4013      	ands	r3, r2
 800b34c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b350:	e7d4      	b.n	800b2fc <__hexnan+0xd4>
 800b352:	3f04      	subs	r7, #4
 800b354:	e7d2      	b.n	800b2fc <__hexnan+0xd4>
 800b356:	2004      	movs	r0, #4
 800b358:	b007      	add	sp, #28
 800b35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b35e <__ascii_mbtowc>:
 800b35e:	b082      	sub	sp, #8
 800b360:	b901      	cbnz	r1, 800b364 <__ascii_mbtowc+0x6>
 800b362:	a901      	add	r1, sp, #4
 800b364:	b142      	cbz	r2, 800b378 <__ascii_mbtowc+0x1a>
 800b366:	b14b      	cbz	r3, 800b37c <__ascii_mbtowc+0x1e>
 800b368:	7813      	ldrb	r3, [r2, #0]
 800b36a:	600b      	str	r3, [r1, #0]
 800b36c:	7812      	ldrb	r2, [r2, #0]
 800b36e:	1e10      	subs	r0, r2, #0
 800b370:	bf18      	it	ne
 800b372:	2001      	movne	r0, #1
 800b374:	b002      	add	sp, #8
 800b376:	4770      	bx	lr
 800b378:	4610      	mov	r0, r2
 800b37a:	e7fb      	b.n	800b374 <__ascii_mbtowc+0x16>
 800b37c:	f06f 0001 	mvn.w	r0, #1
 800b380:	e7f8      	b.n	800b374 <__ascii_mbtowc+0x16>

0800b382 <_realloc_r>:
 800b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	4680      	mov	r8, r0
 800b388:	4614      	mov	r4, r2
 800b38a:	460e      	mov	r6, r1
 800b38c:	b921      	cbnz	r1, 800b398 <_realloc_r+0x16>
 800b38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	4611      	mov	r1, r2
 800b394:	f7fb bf22 	b.w	80071dc <_malloc_r>
 800b398:	b92a      	cbnz	r2, 800b3a6 <_realloc_r+0x24>
 800b39a:	f7fd feff 	bl	800919c <_free_r>
 800b39e:	4625      	mov	r5, r4
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a6:	f000 f842 	bl	800b42e <_malloc_usable_size_r>
 800b3aa:	4284      	cmp	r4, r0
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	d802      	bhi.n	800b3b6 <_realloc_r+0x34>
 800b3b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3b4:	d812      	bhi.n	800b3dc <_realloc_r+0x5a>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	f7fb ff0f 	bl	80071dc <_malloc_r>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d0ed      	beq.n	800b3a0 <_realloc_r+0x1e>
 800b3c4:	42bc      	cmp	r4, r7
 800b3c6:	4622      	mov	r2, r4
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	bf28      	it	cs
 800b3cc:	463a      	movcs	r2, r7
 800b3ce:	f7ff fc23 	bl	800ac18 <memcpy>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	f7fd fee1 	bl	800919c <_free_r>
 800b3da:	e7e1      	b.n	800b3a0 <_realloc_r+0x1e>
 800b3dc:	4635      	mov	r5, r6
 800b3de:	e7df      	b.n	800b3a0 <_realloc_r+0x1e>

0800b3e0 <__ascii_wctomb>:
 800b3e0:	b149      	cbz	r1, 800b3f6 <__ascii_wctomb+0x16>
 800b3e2:	2aff      	cmp	r2, #255	; 0xff
 800b3e4:	bf85      	ittet	hi
 800b3e6:	238a      	movhi	r3, #138	; 0x8a
 800b3e8:	6003      	strhi	r3, [r0, #0]
 800b3ea:	700a      	strbls	r2, [r1, #0]
 800b3ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3f0:	bf98      	it	ls
 800b3f2:	2001      	movls	r0, #1
 800b3f4:	4770      	bx	lr
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4770      	bx	lr
	...

0800b3fc <fiprintf>:
 800b3fc:	b40e      	push	{r1, r2, r3}
 800b3fe:	b503      	push	{r0, r1, lr}
 800b400:	4601      	mov	r1, r0
 800b402:	ab03      	add	r3, sp, #12
 800b404:	4805      	ldr	r0, [pc, #20]	; (800b41c <fiprintf+0x20>)
 800b406:	f853 2b04 	ldr.w	r2, [r3], #4
 800b40a:	6800      	ldr	r0, [r0, #0]
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	f000 f83f 	bl	800b490 <_vfiprintf_r>
 800b412:	b002      	add	sp, #8
 800b414:	f85d eb04 	ldr.w	lr, [sp], #4
 800b418:	b003      	add	sp, #12
 800b41a:	4770      	bx	lr
 800b41c:	2000006c 	.word	0x2000006c

0800b420 <abort>:
 800b420:	b508      	push	{r3, lr}
 800b422:	2006      	movs	r0, #6
 800b424:	f000 fa0c 	bl	800b840 <raise>
 800b428:	2001      	movs	r0, #1
 800b42a:	f7f6 feef 	bl	800220c <_exit>

0800b42e <_malloc_usable_size_r>:
 800b42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b432:	1f18      	subs	r0, r3, #4
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfbc      	itt	lt
 800b438:	580b      	ldrlt	r3, [r1, r0]
 800b43a:	18c0      	addlt	r0, r0, r3
 800b43c:	4770      	bx	lr

0800b43e <__sfputc_r>:
 800b43e:	6893      	ldr	r3, [r2, #8]
 800b440:	3b01      	subs	r3, #1
 800b442:	2b00      	cmp	r3, #0
 800b444:	b410      	push	{r4}
 800b446:	6093      	str	r3, [r2, #8]
 800b448:	da08      	bge.n	800b45c <__sfputc_r+0x1e>
 800b44a:	6994      	ldr	r4, [r2, #24]
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	db01      	blt.n	800b454 <__sfputc_r+0x16>
 800b450:	290a      	cmp	r1, #10
 800b452:	d103      	bne.n	800b45c <__sfputc_r+0x1e>
 800b454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b458:	f000 b934 	b.w	800b6c4 <__swbuf_r>
 800b45c:	6813      	ldr	r3, [r2, #0]
 800b45e:	1c58      	adds	r0, r3, #1
 800b460:	6010      	str	r0, [r2, #0]
 800b462:	7019      	strb	r1, [r3, #0]
 800b464:	4608      	mov	r0, r1
 800b466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <__sfputs_r>:
 800b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46e:	4606      	mov	r6, r0
 800b470:	460f      	mov	r7, r1
 800b472:	4614      	mov	r4, r2
 800b474:	18d5      	adds	r5, r2, r3
 800b476:	42ac      	cmp	r4, r5
 800b478:	d101      	bne.n	800b47e <__sfputs_r+0x12>
 800b47a:	2000      	movs	r0, #0
 800b47c:	e007      	b.n	800b48e <__sfputs_r+0x22>
 800b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b482:	463a      	mov	r2, r7
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff ffda 	bl	800b43e <__sfputc_r>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	d1f3      	bne.n	800b476 <__sfputs_r+0xa>
 800b48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b490 <_vfiprintf_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	460d      	mov	r5, r1
 800b496:	b09d      	sub	sp, #116	; 0x74
 800b498:	4614      	mov	r4, r2
 800b49a:	4698      	mov	r8, r3
 800b49c:	4606      	mov	r6, r0
 800b49e:	b118      	cbz	r0, 800b4a8 <_vfiprintf_r+0x18>
 800b4a0:	6a03      	ldr	r3, [r0, #32]
 800b4a2:	b90b      	cbnz	r3, 800b4a8 <_vfiprintf_r+0x18>
 800b4a4:	f7fc feb6 	bl	8008214 <__sinit>
 800b4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_vfiprintf_r+0x2a>
 800b4ae:	89ab      	ldrh	r3, [r5, #12]
 800b4b0:	059a      	lsls	r2, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_vfiprintf_r+0x2a>
 800b4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b6:	f7fc ffe6 	bl	8008486 <__retarget_lock_acquire_recursive>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	071b      	lsls	r3, r3, #28
 800b4be:	d501      	bpl.n	800b4c4 <_vfiprintf_r+0x34>
 800b4c0:	692b      	ldr	r3, [r5, #16]
 800b4c2:	b99b      	cbnz	r3, 800b4ec <_vfiprintf_r+0x5c>
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 f93a 	bl	800b740 <__swsetup_r>
 800b4cc:	b170      	cbz	r0, 800b4ec <_vfiprintf_r+0x5c>
 800b4ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d0:	07dc      	lsls	r4, r3, #31
 800b4d2:	d504      	bpl.n	800b4de <_vfiprintf_r+0x4e>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	b01d      	add	sp, #116	; 0x74
 800b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4de:	89ab      	ldrh	r3, [r5, #12]
 800b4e0:	0598      	lsls	r0, r3, #22
 800b4e2:	d4f7      	bmi.n	800b4d4 <_vfiprintf_r+0x44>
 800b4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4e6:	f7fc ffcf 	bl	8008488 <__retarget_lock_release_recursive>
 800b4ea:	e7f3      	b.n	800b4d4 <_vfiprintf_r+0x44>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f0:	2320      	movs	r3, #32
 800b4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4fa:	2330      	movs	r3, #48	; 0x30
 800b4fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6b0 <_vfiprintf_r+0x220>
 800b500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b504:	f04f 0901 	mov.w	r9, #1
 800b508:	4623      	mov	r3, r4
 800b50a:	469a      	mov	sl, r3
 800b50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b510:	b10a      	cbz	r2, 800b516 <_vfiprintf_r+0x86>
 800b512:	2a25      	cmp	r2, #37	; 0x25
 800b514:	d1f9      	bne.n	800b50a <_vfiprintf_r+0x7a>
 800b516:	ebba 0b04 	subs.w	fp, sl, r4
 800b51a:	d00b      	beq.n	800b534 <_vfiprintf_r+0xa4>
 800b51c:	465b      	mov	r3, fp
 800b51e:	4622      	mov	r2, r4
 800b520:	4629      	mov	r1, r5
 800b522:	4630      	mov	r0, r6
 800b524:	f7ff ffa2 	bl	800b46c <__sfputs_r>
 800b528:	3001      	adds	r0, #1
 800b52a:	f000 80a9 	beq.w	800b680 <_vfiprintf_r+0x1f0>
 800b52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b530:	445a      	add	r2, fp
 800b532:	9209      	str	r2, [sp, #36]	; 0x24
 800b534:	f89a 3000 	ldrb.w	r3, [sl]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 80a1 	beq.w	800b680 <_vfiprintf_r+0x1f0>
 800b53e:	2300      	movs	r3, #0
 800b540:	f04f 32ff 	mov.w	r2, #4294967295
 800b544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b548:	f10a 0a01 	add.w	sl, sl, #1
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	9307      	str	r3, [sp, #28]
 800b550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b554:	931a      	str	r3, [sp, #104]	; 0x68
 800b556:	4654      	mov	r4, sl
 800b558:	2205      	movs	r2, #5
 800b55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55e:	4854      	ldr	r0, [pc, #336]	; (800b6b0 <_vfiprintf_r+0x220>)
 800b560:	f7f4 fe46 	bl	80001f0 <memchr>
 800b564:	9a04      	ldr	r2, [sp, #16]
 800b566:	b9d8      	cbnz	r0, 800b5a0 <_vfiprintf_r+0x110>
 800b568:	06d1      	lsls	r1, r2, #27
 800b56a:	bf44      	itt	mi
 800b56c:	2320      	movmi	r3, #32
 800b56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b572:	0713      	lsls	r3, r2, #28
 800b574:	bf44      	itt	mi
 800b576:	232b      	movmi	r3, #43	; 0x2b
 800b578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b57c:	f89a 3000 	ldrb.w	r3, [sl]
 800b580:	2b2a      	cmp	r3, #42	; 0x2a
 800b582:	d015      	beq.n	800b5b0 <_vfiprintf_r+0x120>
 800b584:	9a07      	ldr	r2, [sp, #28]
 800b586:	4654      	mov	r4, sl
 800b588:	2000      	movs	r0, #0
 800b58a:	f04f 0c0a 	mov.w	ip, #10
 800b58e:	4621      	mov	r1, r4
 800b590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b594:	3b30      	subs	r3, #48	; 0x30
 800b596:	2b09      	cmp	r3, #9
 800b598:	d94d      	bls.n	800b636 <_vfiprintf_r+0x1a6>
 800b59a:	b1b0      	cbz	r0, 800b5ca <_vfiprintf_r+0x13a>
 800b59c:	9207      	str	r2, [sp, #28]
 800b59e:	e014      	b.n	800b5ca <_vfiprintf_r+0x13a>
 800b5a0:	eba0 0308 	sub.w	r3, r0, r8
 800b5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	46a2      	mov	sl, r4
 800b5ae:	e7d2      	b.n	800b556 <_vfiprintf_r+0xc6>
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	1d19      	adds	r1, r3, #4
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	9103      	str	r1, [sp, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bfbb      	ittet	lt
 800b5bc:	425b      	neglt	r3, r3
 800b5be:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c2:	9307      	strge	r3, [sp, #28]
 800b5c4:	9307      	strlt	r3, [sp, #28]
 800b5c6:	bfb8      	it	lt
 800b5c8:	9204      	strlt	r2, [sp, #16]
 800b5ca:	7823      	ldrb	r3, [r4, #0]
 800b5cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ce:	d10c      	bne.n	800b5ea <_vfiprintf_r+0x15a>
 800b5d0:	7863      	ldrb	r3, [r4, #1]
 800b5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d4:	d134      	bne.n	800b640 <_vfiprintf_r+0x1b0>
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	1d1a      	adds	r2, r3, #4
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	9203      	str	r2, [sp, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	bfb8      	it	lt
 800b5e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5e6:	3402      	adds	r4, #2
 800b5e8:	9305      	str	r3, [sp, #20]
 800b5ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6c0 <_vfiprintf_r+0x230>
 800b5ee:	7821      	ldrb	r1, [r4, #0]
 800b5f0:	2203      	movs	r2, #3
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	f7f4 fdfc 	bl	80001f0 <memchr>
 800b5f8:	b138      	cbz	r0, 800b60a <_vfiprintf_r+0x17a>
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	eba0 000a 	sub.w	r0, r0, sl
 800b600:	2240      	movs	r2, #64	; 0x40
 800b602:	4082      	lsls	r2, r0
 800b604:	4313      	orrs	r3, r2
 800b606:	3401      	adds	r4, #1
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60e:	4829      	ldr	r0, [pc, #164]	; (800b6b4 <_vfiprintf_r+0x224>)
 800b610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b614:	2206      	movs	r2, #6
 800b616:	f7f4 fdeb 	bl	80001f0 <memchr>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d03f      	beq.n	800b69e <_vfiprintf_r+0x20e>
 800b61e:	4b26      	ldr	r3, [pc, #152]	; (800b6b8 <_vfiprintf_r+0x228>)
 800b620:	bb1b      	cbnz	r3, 800b66a <_vfiprintf_r+0x1da>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	3307      	adds	r3, #7
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	3308      	adds	r3, #8
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b630:	443b      	add	r3, r7
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	e768      	b.n	800b508 <_vfiprintf_r+0x78>
 800b636:	fb0c 3202 	mla	r2, ip, r2, r3
 800b63a:	460c      	mov	r4, r1
 800b63c:	2001      	movs	r0, #1
 800b63e:	e7a6      	b.n	800b58e <_vfiprintf_r+0xfe>
 800b640:	2300      	movs	r3, #0
 800b642:	3401      	adds	r4, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4619      	mov	r1, r3
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4620      	mov	r0, r4
 800b64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b652:	3a30      	subs	r2, #48	; 0x30
 800b654:	2a09      	cmp	r2, #9
 800b656:	d903      	bls.n	800b660 <_vfiprintf_r+0x1d0>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0c6      	beq.n	800b5ea <_vfiprintf_r+0x15a>
 800b65c:	9105      	str	r1, [sp, #20]
 800b65e:	e7c4      	b.n	800b5ea <_vfiprintf_r+0x15a>
 800b660:	fb0c 2101 	mla	r1, ip, r1, r2
 800b664:	4604      	mov	r4, r0
 800b666:	2301      	movs	r3, #1
 800b668:	e7f0      	b.n	800b64c <_vfiprintf_r+0x1bc>
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	462a      	mov	r2, r5
 800b670:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <_vfiprintf_r+0x22c>)
 800b672:	a904      	add	r1, sp, #16
 800b674:	4630      	mov	r0, r6
 800b676:	f7fb ff6b 	bl	8007550 <_printf_float>
 800b67a:	4607      	mov	r7, r0
 800b67c:	1c78      	adds	r0, r7, #1
 800b67e:	d1d6      	bne.n	800b62e <_vfiprintf_r+0x19e>
 800b680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b682:	07d9      	lsls	r1, r3, #31
 800b684:	d405      	bmi.n	800b692 <_vfiprintf_r+0x202>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	059a      	lsls	r2, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_vfiprintf_r+0x202>
 800b68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68e:	f7fc fefb 	bl	8008488 <__retarget_lock_release_recursive>
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	065b      	lsls	r3, r3, #25
 800b696:	f53f af1d 	bmi.w	800b4d4 <_vfiprintf_r+0x44>
 800b69a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b69c:	e71c      	b.n	800b4d8 <_vfiprintf_r+0x48>
 800b69e:	ab03      	add	r3, sp, #12
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <_vfiprintf_r+0x22c>)
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7fc f9f5 	bl	8007a98 <_printf_i>
 800b6ae:	e7e4      	b.n	800b67a <_vfiprintf_r+0x1ea>
 800b6b0:	0800bf48 	.word	0x0800bf48
 800b6b4:	0800bf52 	.word	0x0800bf52
 800b6b8:	08007551 	.word	0x08007551
 800b6bc:	0800b46d 	.word	0x0800b46d
 800b6c0:	0800bf4e 	.word	0x0800bf4e

0800b6c4 <__swbuf_r>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b118      	cbz	r0, 800b6d6 <__swbuf_r+0x12>
 800b6ce:	6a03      	ldr	r3, [r0, #32]
 800b6d0:	b90b      	cbnz	r3, 800b6d6 <__swbuf_r+0x12>
 800b6d2:	f7fc fd9f 	bl	8008214 <__sinit>
 800b6d6:	69a3      	ldr	r3, [r4, #24]
 800b6d8:	60a3      	str	r3, [r4, #8]
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	071a      	lsls	r2, r3, #28
 800b6de:	d525      	bpl.n	800b72c <__swbuf_r+0x68>
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	b31b      	cbz	r3, 800b72c <__swbuf_r+0x68>
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	1a98      	subs	r0, r3, r2
 800b6ea:	6963      	ldr	r3, [r4, #20]
 800b6ec:	b2f6      	uxtb	r6, r6
 800b6ee:	4283      	cmp	r3, r0
 800b6f0:	4637      	mov	r7, r6
 800b6f2:	dc04      	bgt.n	800b6fe <__swbuf_r+0x3a>
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f7ff fa3a 	bl	800ab70 <_fflush_r>
 800b6fc:	b9e0      	cbnz	r0, 800b738 <__swbuf_r+0x74>
 800b6fe:	68a3      	ldr	r3, [r4, #8]
 800b700:	3b01      	subs	r3, #1
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	701e      	strb	r6, [r3, #0]
 800b70c:	6962      	ldr	r2, [r4, #20]
 800b70e:	1c43      	adds	r3, r0, #1
 800b710:	429a      	cmp	r2, r3
 800b712:	d004      	beq.n	800b71e <__swbuf_r+0x5a>
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	07db      	lsls	r3, r3, #31
 800b718:	d506      	bpl.n	800b728 <__swbuf_r+0x64>
 800b71a:	2e0a      	cmp	r6, #10
 800b71c:	d104      	bne.n	800b728 <__swbuf_r+0x64>
 800b71e:	4621      	mov	r1, r4
 800b720:	4628      	mov	r0, r5
 800b722:	f7ff fa25 	bl	800ab70 <_fflush_r>
 800b726:	b938      	cbnz	r0, 800b738 <__swbuf_r+0x74>
 800b728:	4638      	mov	r0, r7
 800b72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b72c:	4621      	mov	r1, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f806 	bl	800b740 <__swsetup_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	d0d5      	beq.n	800b6e4 <__swbuf_r+0x20>
 800b738:	f04f 37ff 	mov.w	r7, #4294967295
 800b73c:	e7f4      	b.n	800b728 <__swbuf_r+0x64>
	...

0800b740 <__swsetup_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4b2a      	ldr	r3, [pc, #168]	; (800b7ec <__swsetup_r+0xac>)
 800b744:	4605      	mov	r5, r0
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	460c      	mov	r4, r1
 800b74a:	b118      	cbz	r0, 800b754 <__swsetup_r+0x14>
 800b74c:	6a03      	ldr	r3, [r0, #32]
 800b74e:	b90b      	cbnz	r3, 800b754 <__swsetup_r+0x14>
 800b750:	f7fc fd60 	bl	8008214 <__sinit>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b75a:	0718      	lsls	r0, r3, #28
 800b75c:	d422      	bmi.n	800b7a4 <__swsetup_r+0x64>
 800b75e:	06d9      	lsls	r1, r3, #27
 800b760:	d407      	bmi.n	800b772 <__swsetup_r+0x32>
 800b762:	2309      	movs	r3, #9
 800b764:	602b      	str	r3, [r5, #0]
 800b766:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e034      	b.n	800b7dc <__swsetup_r+0x9c>
 800b772:	0758      	lsls	r0, r3, #29
 800b774:	d512      	bpl.n	800b79c <__swsetup_r+0x5c>
 800b776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b778:	b141      	cbz	r1, 800b78c <__swsetup_r+0x4c>
 800b77a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b77e:	4299      	cmp	r1, r3
 800b780:	d002      	beq.n	800b788 <__swsetup_r+0x48>
 800b782:	4628      	mov	r0, r5
 800b784:	f7fd fd0a 	bl	800919c <_free_r>
 800b788:	2300      	movs	r3, #0
 800b78a:	6363      	str	r3, [r4, #52]	; 0x34
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	2300      	movs	r3, #0
 800b796:	6063      	str	r3, [r4, #4]
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	6023      	str	r3, [r4, #0]
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f043 0308 	orr.w	r3, r3, #8
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	b94b      	cbnz	r3, 800b7bc <__swsetup_r+0x7c>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b2:	d003      	beq.n	800b7bc <__swsetup_r+0x7c>
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f000 f884 	bl	800b8c4 <__smakebuf_r>
 800b7bc:	89a0      	ldrh	r0, [r4, #12]
 800b7be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c2:	f010 0301 	ands.w	r3, r0, #1
 800b7c6:	d00a      	beq.n	800b7de <__swsetup_r+0x9e>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	60a3      	str	r3, [r4, #8]
 800b7cc:	6963      	ldr	r3, [r4, #20]
 800b7ce:	425b      	negs	r3, r3
 800b7d0:	61a3      	str	r3, [r4, #24]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	b943      	cbnz	r3, 800b7e8 <__swsetup_r+0xa8>
 800b7d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7da:	d1c4      	bne.n	800b766 <__swsetup_r+0x26>
 800b7dc:	bd38      	pop	{r3, r4, r5, pc}
 800b7de:	0781      	lsls	r1, r0, #30
 800b7e0:	bf58      	it	pl
 800b7e2:	6963      	ldrpl	r3, [r4, #20]
 800b7e4:	60a3      	str	r3, [r4, #8]
 800b7e6:	e7f4      	b.n	800b7d2 <__swsetup_r+0x92>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e7f7      	b.n	800b7dc <__swsetup_r+0x9c>
 800b7ec:	2000006c 	.word	0x2000006c

0800b7f0 <_raise_r>:
 800b7f0:	291f      	cmp	r1, #31
 800b7f2:	b538      	push	{r3, r4, r5, lr}
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	d904      	bls.n	800b804 <_raise_r+0x14>
 800b7fa:	2316      	movs	r3, #22
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b802:	bd38      	pop	{r3, r4, r5, pc}
 800b804:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b806:	b112      	cbz	r2, 800b80e <_raise_r+0x1e>
 800b808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b80c:	b94b      	cbnz	r3, 800b822 <_raise_r+0x32>
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f830 	bl	800b874 <_getpid_r>
 800b814:	462a      	mov	r2, r5
 800b816:	4601      	mov	r1, r0
 800b818:	4620      	mov	r0, r4
 800b81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b81e:	f000 b817 	b.w	800b850 <_kill_r>
 800b822:	2b01      	cmp	r3, #1
 800b824:	d00a      	beq.n	800b83c <_raise_r+0x4c>
 800b826:	1c59      	adds	r1, r3, #1
 800b828:	d103      	bne.n	800b832 <_raise_r+0x42>
 800b82a:	2316      	movs	r3, #22
 800b82c:	6003      	str	r3, [r0, #0]
 800b82e:	2001      	movs	r0, #1
 800b830:	e7e7      	b.n	800b802 <_raise_r+0x12>
 800b832:	2400      	movs	r4, #0
 800b834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b838:	4628      	mov	r0, r5
 800b83a:	4798      	blx	r3
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7e0      	b.n	800b802 <_raise_r+0x12>

0800b840 <raise>:
 800b840:	4b02      	ldr	r3, [pc, #8]	; (800b84c <raise+0xc>)
 800b842:	4601      	mov	r1, r0
 800b844:	6818      	ldr	r0, [r3, #0]
 800b846:	f7ff bfd3 	b.w	800b7f0 <_raise_r>
 800b84a:	bf00      	nop
 800b84c:	2000006c 	.word	0x2000006c

0800b850 <_kill_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_kill_r+0x20>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	4611      	mov	r1, r2
 800b85c:	602b      	str	r3, [r5, #0]
 800b85e:	f7f6 fcc5 	bl	80021ec <_kill>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d102      	bne.n	800b86c <_kill_r+0x1c>
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	b103      	cbz	r3, 800b86c <_kill_r+0x1c>
 800b86a:	6023      	str	r3, [r4, #0]
 800b86c:	bd38      	pop	{r3, r4, r5, pc}
 800b86e:	bf00      	nop
 800b870:	200006a4 	.word	0x200006a4

0800b874 <_getpid_r>:
 800b874:	f7f6 bcb2 	b.w	80021dc <_getpid>

0800b878 <__swhatbuf_r>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	460c      	mov	r4, r1
 800b87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b880:	2900      	cmp	r1, #0
 800b882:	b096      	sub	sp, #88	; 0x58
 800b884:	4615      	mov	r5, r2
 800b886:	461e      	mov	r6, r3
 800b888:	da0d      	bge.n	800b8a6 <__swhatbuf_r+0x2e>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b890:	f04f 0100 	mov.w	r1, #0
 800b894:	bf0c      	ite	eq
 800b896:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b89a:	2340      	movne	r3, #64	; 0x40
 800b89c:	2000      	movs	r0, #0
 800b89e:	6031      	str	r1, [r6, #0]
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	b016      	add	sp, #88	; 0x58
 800b8a4:	bd70      	pop	{r4, r5, r6, pc}
 800b8a6:	466a      	mov	r2, sp
 800b8a8:	f000 f848 	bl	800b93c <_fstat_r>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	dbec      	blt.n	800b88a <__swhatbuf_r+0x12>
 800b8b0:	9901      	ldr	r1, [sp, #4]
 800b8b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8ba:	4259      	negs	r1, r3
 800b8bc:	4159      	adcs	r1, r3
 800b8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c2:	e7eb      	b.n	800b89c <__swhatbuf_r+0x24>

0800b8c4 <__smakebuf_r>:
 800b8c4:	898b      	ldrh	r3, [r1, #12]
 800b8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8c8:	079d      	lsls	r5, r3, #30
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	d507      	bpl.n	800b8e0 <__smakebuf_r+0x1c>
 800b8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	6123      	str	r3, [r4, #16]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	6163      	str	r3, [r4, #20]
 800b8dc:	b002      	add	sp, #8
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	ab01      	add	r3, sp, #4
 800b8e2:	466a      	mov	r2, sp
 800b8e4:	f7ff ffc8 	bl	800b878 <__swhatbuf_r>
 800b8e8:	9900      	ldr	r1, [sp, #0]
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	f7fb fc75 	bl	80071dc <_malloc_r>
 800b8f2:	b948      	cbnz	r0, 800b908 <__smakebuf_r+0x44>
 800b8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f8:	059a      	lsls	r2, r3, #22
 800b8fa:	d4ef      	bmi.n	800b8dc <__smakebuf_r+0x18>
 800b8fc:	f023 0303 	bic.w	r3, r3, #3
 800b900:	f043 0302 	orr.w	r3, r3, #2
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	e7e3      	b.n	800b8d0 <__smakebuf_r+0xc>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	6020      	str	r0, [r4, #0]
 800b90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	6163      	str	r3, [r4, #20]
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	6120      	str	r0, [r4, #16]
 800b91a:	b15b      	cbz	r3, 800b934 <__smakebuf_r+0x70>
 800b91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b920:	4630      	mov	r0, r6
 800b922:	f000 f81d 	bl	800b960 <_isatty_r>
 800b926:	b128      	cbz	r0, 800b934 <__smakebuf_r+0x70>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f023 0303 	bic.w	r3, r3, #3
 800b92e:	f043 0301 	orr.w	r3, r3, #1
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	431d      	orrs	r5, r3
 800b938:	81a5      	strh	r5, [r4, #12]
 800b93a:	e7cf      	b.n	800b8dc <__smakebuf_r+0x18>

0800b93c <_fstat_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	; (800b95c <_fstat_r+0x20>)
 800b940:	2300      	movs	r3, #0
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	4611      	mov	r1, r2
 800b948:	602b      	str	r3, [r5, #0]
 800b94a:	f7f6 fcae 	bl	80022aa <_fstat>
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	d102      	bne.n	800b958 <_fstat_r+0x1c>
 800b952:	682b      	ldr	r3, [r5, #0]
 800b954:	b103      	cbz	r3, 800b958 <_fstat_r+0x1c>
 800b956:	6023      	str	r3, [r4, #0]
 800b958:	bd38      	pop	{r3, r4, r5, pc}
 800b95a:	bf00      	nop
 800b95c:	200006a4 	.word	0x200006a4

0800b960 <_isatty_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d06      	ldr	r5, [pc, #24]	; (800b97c <_isatty_r+0x1c>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	f7f6 fcad 	bl	80022ca <_isatty>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_isatty_r+0x1a>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_isatty_r+0x1a>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	200006a4 	.word	0x200006a4

0800b980 <sqrt>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	ed2d 8b02 	vpush	{d8}
 800b986:	ec55 4b10 	vmov	r4, r5, d0
 800b98a:	f000 f825 	bl	800b9d8 <__ieee754_sqrt>
 800b98e:	4622      	mov	r2, r4
 800b990:	462b      	mov	r3, r5
 800b992:	4620      	mov	r0, r4
 800b994:	4629      	mov	r1, r5
 800b996:	eeb0 8a40 	vmov.f32	s16, s0
 800b99a:	eef0 8a60 	vmov.f32	s17, s1
 800b99e:	f7f5 f8d5 	bl	8000b4c <__aeabi_dcmpun>
 800b9a2:	b990      	cbnz	r0, 800b9ca <sqrt+0x4a>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f5 f8a6 	bl	8000afc <__aeabi_dcmplt>
 800b9b0:	b158      	cbz	r0, 800b9ca <sqrt+0x4a>
 800b9b2:	f7fc fd3d 	bl	8008430 <__errno>
 800b9b6:	2321      	movs	r3, #33	; 0x21
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f7f4 ff53 	bl	800086c <__aeabi_ddiv>
 800b9c6:	ec41 0b18 	vmov	d8, r0, r1
 800b9ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ce:	eef0 0a68 	vmov.f32	s1, s17
 800b9d2:	ecbd 8b02 	vpop	{d8}
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}

0800b9d8 <__ieee754_sqrt>:
 800b9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	ec55 4b10 	vmov	r4, r5, d0
 800b9e0:	4e67      	ldr	r6, [pc, #412]	; (800bb80 <__ieee754_sqrt+0x1a8>)
 800b9e2:	43ae      	bics	r6, r5
 800b9e4:	ee10 0a10 	vmov	r0, s0
 800b9e8:	ee10 2a10 	vmov	r2, s0
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	d10d      	bne.n	800ba0e <__ieee754_sqrt+0x36>
 800b9f2:	f7f4 fe11 	bl	8000618 <__aeabi_dmul>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7f4 fc55 	bl	80002ac <__adddf3>
 800ba02:	4604      	mov	r4, r0
 800ba04:	460d      	mov	r5, r1
 800ba06:	ec45 4b10 	vmov	d0, r4, r5
 800ba0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	2d00      	cmp	r5, #0
 800ba10:	dc0b      	bgt.n	800ba2a <__ieee754_sqrt+0x52>
 800ba12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba16:	4326      	orrs	r6, r4
 800ba18:	d0f5      	beq.n	800ba06 <__ieee754_sqrt+0x2e>
 800ba1a:	b135      	cbz	r5, 800ba2a <__ieee754_sqrt+0x52>
 800ba1c:	f7f4 fc44 	bl	80002a8 <__aeabi_dsub>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	f7f4 ff22 	bl	800086c <__aeabi_ddiv>
 800ba28:	e7eb      	b.n	800ba02 <__ieee754_sqrt+0x2a>
 800ba2a:	1509      	asrs	r1, r1, #20
 800ba2c:	f000 808d 	beq.w	800bb4a <__ieee754_sqrt+0x172>
 800ba30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba34:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ba38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba3c:	07c9      	lsls	r1, r1, #31
 800ba3e:	bf5c      	itt	pl
 800ba40:	005b      	lslpl	r3, r3, #1
 800ba42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ba46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba4a:	bf58      	it	pl
 800ba4c:	0052      	lslpl	r2, r2, #1
 800ba4e:	2500      	movs	r5, #0
 800ba50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ba54:	1076      	asrs	r6, r6, #1
 800ba56:	0052      	lsls	r2, r2, #1
 800ba58:	f04f 0e16 	mov.w	lr, #22
 800ba5c:	46ac      	mov	ip, r5
 800ba5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba62:	eb0c 0001 	add.w	r0, ip, r1
 800ba66:	4298      	cmp	r0, r3
 800ba68:	bfde      	ittt	le
 800ba6a:	1a1b      	suble	r3, r3, r0
 800ba6c:	eb00 0c01 	addle.w	ip, r0, r1
 800ba70:	186d      	addle	r5, r5, r1
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	f1be 0e01 	subs.w	lr, lr, #1
 800ba78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ba7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ba80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ba84:	d1ed      	bne.n	800ba62 <__ieee754_sqrt+0x8a>
 800ba86:	4674      	mov	r4, lr
 800ba88:	2720      	movs	r7, #32
 800ba8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ba8e:	4563      	cmp	r3, ip
 800ba90:	eb01 000e 	add.w	r0, r1, lr
 800ba94:	dc02      	bgt.n	800ba9c <__ieee754_sqrt+0xc4>
 800ba96:	d113      	bne.n	800bac0 <__ieee754_sqrt+0xe8>
 800ba98:	4290      	cmp	r0, r2
 800ba9a:	d811      	bhi.n	800bac0 <__ieee754_sqrt+0xe8>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	eb00 0e01 	add.w	lr, r0, r1
 800baa2:	da57      	bge.n	800bb54 <__ieee754_sqrt+0x17c>
 800baa4:	f1be 0f00 	cmp.w	lr, #0
 800baa8:	db54      	blt.n	800bb54 <__ieee754_sqrt+0x17c>
 800baaa:	f10c 0801 	add.w	r8, ip, #1
 800baae:	eba3 030c 	sub.w	r3, r3, ip
 800bab2:	4290      	cmp	r0, r2
 800bab4:	bf88      	it	hi
 800bab6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800baba:	1a12      	subs	r2, r2, r0
 800babc:	440c      	add	r4, r1
 800babe:	46c4      	mov	ip, r8
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	3f01      	subs	r7, #1
 800bac4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bac8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bacc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bad0:	d1dd      	bne.n	800ba8e <__ieee754_sqrt+0xb6>
 800bad2:	4313      	orrs	r3, r2
 800bad4:	d01b      	beq.n	800bb0e <__ieee754_sqrt+0x136>
 800bad6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800bb84 <__ieee754_sqrt+0x1ac>
 800bada:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800bb88 <__ieee754_sqrt+0x1b0>
 800bade:	e9da 0100 	ldrd	r0, r1, [sl]
 800bae2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bae6:	f7f4 fbdf 	bl	80002a8 <__aeabi_dsub>
 800baea:	e9da 8900 	ldrd	r8, r9, [sl]
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4640      	mov	r0, r8
 800baf4:	4649      	mov	r1, r9
 800baf6:	f7f5 f80b 	bl	8000b10 <__aeabi_dcmple>
 800bafa:	b140      	cbz	r0, 800bb0e <__ieee754_sqrt+0x136>
 800bafc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bb00:	e9da 0100 	ldrd	r0, r1, [sl]
 800bb04:	e9db 2300 	ldrd	r2, r3, [fp]
 800bb08:	d126      	bne.n	800bb58 <__ieee754_sqrt+0x180>
 800bb0a:	3501      	adds	r5, #1
 800bb0c:	463c      	mov	r4, r7
 800bb0e:	106a      	asrs	r2, r5, #1
 800bb10:	0863      	lsrs	r3, r4, #1
 800bb12:	07e9      	lsls	r1, r5, #31
 800bb14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bb18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bb1c:	bf48      	it	mi
 800bb1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bb22:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800bb26:	461c      	mov	r4, r3
 800bb28:	e76d      	b.n	800ba06 <__ieee754_sqrt+0x2e>
 800bb2a:	0ad3      	lsrs	r3, r2, #11
 800bb2c:	3815      	subs	r0, #21
 800bb2e:	0552      	lsls	r2, r2, #21
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0fa      	beq.n	800bb2a <__ieee754_sqrt+0x152>
 800bb34:	02dc      	lsls	r4, r3, #11
 800bb36:	d50a      	bpl.n	800bb4e <__ieee754_sqrt+0x176>
 800bb38:	f1c1 0420 	rsb	r4, r1, #32
 800bb3c:	fa22 f404 	lsr.w	r4, r2, r4
 800bb40:	1e4d      	subs	r5, r1, #1
 800bb42:	408a      	lsls	r2, r1
 800bb44:	4323      	orrs	r3, r4
 800bb46:	1b41      	subs	r1, r0, r5
 800bb48:	e772      	b.n	800ba30 <__ieee754_sqrt+0x58>
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	e7f0      	b.n	800bb30 <__ieee754_sqrt+0x158>
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	3101      	adds	r1, #1
 800bb52:	e7ef      	b.n	800bb34 <__ieee754_sqrt+0x15c>
 800bb54:	46e0      	mov	r8, ip
 800bb56:	e7aa      	b.n	800baae <__ieee754_sqrt+0xd6>
 800bb58:	f7f4 fba8 	bl	80002ac <__adddf3>
 800bb5c:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4640      	mov	r0, r8
 800bb66:	4649      	mov	r1, r9
 800bb68:	f7f4 ffc8 	bl	8000afc <__aeabi_dcmplt>
 800bb6c:	b120      	cbz	r0, 800bb78 <__ieee754_sqrt+0x1a0>
 800bb6e:	1ca0      	adds	r0, r4, #2
 800bb70:	bf08      	it	eq
 800bb72:	3501      	addeq	r5, #1
 800bb74:	3402      	adds	r4, #2
 800bb76:	e7ca      	b.n	800bb0e <__ieee754_sqrt+0x136>
 800bb78:	3401      	adds	r4, #1
 800bb7a:	f024 0401 	bic.w	r4, r4, #1
 800bb7e:	e7c6      	b.n	800bb0e <__ieee754_sqrt+0x136>
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	200001e0 	.word	0x200001e0
 800bb88:	200001e8 	.word	0x200001e8

0800bb8c <_init>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	bf00      	nop
 800bb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb92:	bc08      	pop	{r3}
 800bb94:	469e      	mov	lr, r3
 800bb96:	4770      	bx	lr

0800bb98 <_fini>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	bf00      	nop
 800bb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9e:	bc08      	pop	{r3}
 800bba0:	469e      	mov	lr, r3
 800bba2:	4770      	bx	lr
