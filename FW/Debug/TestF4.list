
TestF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c02c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c620  0800c620  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c620  0800c620  0001c620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c628  0800c628  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c628  0800c628  0001c628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c62c  0800c62c  0001c62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000004e8  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006d8  200006d8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013a00  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f90  00000000  00000000  00033c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001168  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d95  00000000  00000000  00037d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c1d  00000000  00000000  00038af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017c85  00000000  00000000  0005c712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cffe2  00000000  00000000  00074397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dfc  00000000  00000000  0014437c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0014a178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a4 	.word	0x0800c1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800c1a4 	.word	0x0800c1a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MPU6050_Init>:

    return dfiltered_value;
}

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	2275      	movs	r2, #117	; 0x75
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f002 ffb3 	bl	8003f98 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b68      	cmp	r3, #104	; 0x68
 8001036:	d13d      	bne.n	80010b4 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030e 	add.w	r3, r7, #14
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	226b      	movs	r2, #107	; 0x6b
 800104e:	21d0      	movs	r1, #208	; 0xd0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fea7 	bl	8003da4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001056:	2307      	movs	r3, #7
 8001058:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030e 	add.w	r3, r7, #14
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2219      	movs	r2, #25
 800106c:	21d0      	movs	r1, #208	; 0xd0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f002 fe98 	bl	8003da4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 030e 	add.w	r3, r7, #14
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	221c      	movs	r2, #28
 800108a:	21d0      	movs	r1, #208	; 0xd0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f002 fe89 	bl	8003da4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 030e 	add.w	r3, r7, #14
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	221b      	movs	r2, #27
 80010a8:	21d0      	movs	r1, #208	; 0xd0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 fe7a 	bl	8003da4 <HAL_I2C_Mem_Write>
        return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <MPU6050_Init+0xa6>
    }
    return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_DMA_Init+0x3c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2046      	movs	r0, #70	; 0x46
 80010e8:	f001 ffaf 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010ec:	2046      	movs	r0, #70	; 0x46
 80010ee:	f001 ffc8 	bl	8003082 <HAL_NVIC_EnableIRQ>

}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <MX_GPIO_Init+0x11c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a3f      	ldr	r2, [pc, #252]	; (800121c <MX_GPIO_Init+0x11c>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <MX_GPIO_Init+0x11c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <MX_GPIO_Init+0x11c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a38      	ldr	r2, [pc, #224]	; (800121c <MX_GPIO_Init+0x11c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <MX_GPIO_Init+0x11c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <MX_GPIO_Init+0x11c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <MX_GPIO_Init+0x11c>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <MX_GPIO_Init+0x11c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <MX_GPIO_Init+0x11c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2a      	ldr	r2, [pc, #168]	; (800121c <MX_GPIO_Init+0x11c>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_GPIO_Init+0x11c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_GPIO_Init+0x11c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <MX_GPIO_Init+0x11c>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_GPIO_Init+0x11c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_GPIO_Init+0x11c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <MX_GPIO_Init+0x11c>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_GPIO_Init+0x11c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011c4:	4816      	ldr	r0, [pc, #88]	; (8001220 <MX_GPIO_Init+0x120>)
 80011c6:	f002 fc8f 	bl	8003ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x124>)
 80011d2:	f002 fc89 	bl	8003ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <MX_GPIO_Init+0x120>)
 80011f0:	f002 fade 	bl	80037b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_GPIO_Init+0x124>)
 800120e:	f002 facf 	bl	80037b0 <HAL_GPIO_Init>

}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	; 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40020800 	.word	0x40020800

08001228 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f002 fc59 	bl	8003b1c <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 fcca 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000020c 	.word	0x2000020c
 800127c:	40005400 	.word	0x40005400
 8001280:	00061a80 	.word	0x00061a80

08001284 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_I2C_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a17      	ldr	r2, [pc, #92]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c2:	23c0      	movs	r3, #192	; 0xc0
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c6:	2312      	movs	r3, #18
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d2:	2304      	movs	r3, #4
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <HAL_I2C_MspInit+0x8c>)
 80012de:	f002 fa67 	bl	80037b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_I2C_MspInit+0x88>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40005400 	.word	0x40005400
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f001 fd4a 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f844 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f7ff feee 	bl	8001100 <MX_GPIO_Init>
  MX_DMA_Init();
 8001324:	f7ff fecc 	bl	80010c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001328:	f7ff ff7e 	bl	8001228 <MX_I2C1_Init>
  MX_TIM1_Init();
 800132c:	f001 f906 	bl	800253c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001330:	f001 f95c 	bl	80025ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001334:	f001 f9ae 	bl	8002694 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001338:	f001 fb8a 	bl	8002a50 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800133c:	f001 fa0e 	bl	800275c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001340:	f001 fb5c 	bl	80029fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  while (MPU6050_Init(&hi2c1) == 1);
 8001344:	bf00      	nop
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <main+0x70>)
 8001348:	f7ff fe62 	bl	8001010 <MPU6050_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d0f9      	beq.n	8001346 <main+0x32>
  SerialInit();
 8001352:	f000 f893 	bl	800147c <SerialInit>
  MotorInit();
 8001356:	f000 fd61 	bl	8001e1c <MotorInit>
  MotorSetRun();
 800135a:	f000 fc5b 	bl	8001c14 <MotorSetRun>
  PIDInit(&tPID_3, 5, 0, 0.001);
 800135e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001388 <main+0x74>
 8001362:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800138c <main+0x78>
 8001366:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <main+0x7c>)
 800136c:	f000 fee6 	bl	800213c <PIDInit>
  tProcess = NONE;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <main+0x80>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]

  tMotor1.ptd = 0.091; //2700
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <main+0x84>)
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <main+0x88>)
 800137a:	61da      	str	r2, [r3, #28]
  tMotor2.ptd = 0.096; //2580
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <main+0x8c>)
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <main+0x90>)
 8001380:	61da      	str	r2, [r3, #28]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001382:	e7fe      	b.n	8001382 <main+0x6e>
 8001384:	2000020c 	.word	0x2000020c
 8001388:	3a83126f 	.word	0x3a83126f
 800138c:	00000000 	.word	0x00000000
 8001390:	20000360 	.word	0x20000360
 8001394:	200002ac 	.word	0x200002ac
 8001398:	200002f0 	.word	0x200002f0
 800139c:	3dba5e35 	.word	0x3dba5e35
 80013a0:	20000310 	.word	0x20000310
 80013a4:	3dc49ba6 	.word	0x3dc49ba6

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 facf 	bl	800895a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140e:	2302      	movs	r3, #2
 8001410:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001418:	2304      	movs	r3, #4
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 75;
 800141c:	234b      	movs	r3, #75	; 0x4b
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fb35 	bl	8004a9c <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001438:	f000 fbe6 	bl	8001c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2102      	movs	r1, #2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fd96 	bl	8004f8c <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001466:	f000 fbcf 	bl	8001c08 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <SerialInit>:

/* USER CODE BEGIN 4 */
void SerialInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 8001480:	2212      	movs	r2, #18
 8001482:	4903      	ldr	r1, [pc, #12]	; (8001490 <SerialInit+0x14>)
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <SerialInit+0x18>)
 8001486:	f005 f9e6 	bl	8006856 <HAL_UART_Receive_IT>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000260 	.word	0x20000260
 8001494:	200004a0 	.word	0x200004a0

08001498 <SerialAcceptReceive>:

// receive data
void SerialAcceptReceive(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(&huart1, (uint8_t *)dataBuffer, MAX_LEN_DATA);
 800149c:	2212      	movs	r2, #18
 800149e:	4903      	ldr	r1, [pc, #12]	; (80014ac <SerialAcceptReceive+0x14>)
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <SerialAcceptReceive+0x18>)
 80014a2:	f005 f9d8 	bl	8006856 <HAL_UART_Receive_IT>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000260 	.word	0x20000260
 80014b0:	200004a0 	.word	0x200004a0

080014b4 <HAL_UART_RxCpltCallback>:

// interupt uart RX
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6178      	str	r0, [r7, #20]
  if (huart->Instance == huart1.Instance)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_UART_RxCpltCallback+0x118>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d17d      	bne.n	80015c4 <HAL_UART_RxCpltCallback+0x110>
  {

    	__HAL_TIM_SetCounter(&htim3, 0);
 80014c8:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_UART_RxCpltCallback+0x11c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
	    __HAL_TIM_SetCounter(&htim4, 0);
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_UART_RxCpltCallback+0x120>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
	    tProcess = NONE;
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_UART_RxCpltCallback+0x124>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	    PIDReset(&tPID_1);
 80014de:	483f      	ldr	r0, [pc, #252]	; (80015dc <HAL_UART_RxCpltCallback+0x128>)
 80014e0:	f000 fe10 	bl	8002104 <PIDReset>
	    PIDReset(&tPID_2);
 80014e4:	483e      	ldr	r0, [pc, #248]	; (80015e0 <HAL_UART_RxCpltCallback+0x12c>)
 80014e6:	f000 fe0d 	bl	8002104 <PIDReset>
	    PIDReset(&tPID_3);
 80014ea:	483e      	ldr	r0, [pc, #248]	; (80015e4 <HAL_UART_RxCpltCallback+0x130>)
 80014ec:	f000 fe0a 	bl	8002104 <PIDReset>
	    MPU6050.yaw = 0.0f;
 80014f0:	493d      	ldr	r1, [pc, #244]	; (80015e8 <HAL_UART_RxCpltCallback+0x134>)
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	    if(!strcmp(dataBuffer, ARRAY_CHECKER)){
 80014fe:	493b      	ldr	r1, [pc, #236]	; (80015ec <HAL_UART_RxCpltCallback+0x138>)
 8001500:	483b      	ldr	r0, [pc, #236]	; (80015f0 <HAL_UART_RxCpltCallback+0x13c>)
 8001502:	f7fe fe65 	bl	80001d0 <strcmp>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_UART_RxCpltCallback+0x68>
	    	HAL_UART_Transmit(&huart1, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 800150c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001510:	2205      	movs	r2, #5
 8001512:	4938      	ldr	r1, [pc, #224]	; (80015f4 <HAL_UART_RxCpltCallback+0x140>)
 8001514:	482d      	ldr	r0, [pc, #180]	; (80015cc <HAL_UART_RxCpltCallback+0x118>)
 8001516:	f005 f90c 	bl	8006732 <HAL_UART_Transmit>
 800151a:	e051      	b.n	80015c0 <HAL_UART_RxCpltCallback+0x10c>
	    }
	    else {
	        HAL_UART_Transmit(&huart1, (uint8_t *)dataBuffer, MAX_LEN_DATA, 1000);
 800151c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001520:	2212      	movs	r2, #18
 8001522:	4933      	ldr	r1, [pc, #204]	; (80015f0 <HAL_UART_RxCpltCallback+0x13c>)
 8001524:	4829      	ldr	r0, [pc, #164]	; (80015cc <HAL_UART_RxCpltCallback+0x118>)
 8001526:	f005 f904 	bl	8006732 <HAL_UART_Transmit>
	    	    arrData1 = ArrProcess(dataBuffer);
 800152a:	4c33      	ldr	r4, [pc, #204]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 800152c:	463b      	mov	r3, r7
 800152e:	4930      	ldr	r1, [pc, #192]	; (80015f0 <HAL_UART_RxCpltCallback+0x13c>)
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fb79 	bl	8002c28 <ArrProcess>
 8001536:	4623      	mov	r3, r4
 8001538:	463a      	mov	r2, r7
 800153a:	6810      	ldr	r0, [r2, #0]
 800153c:	6851      	ldr	r1, [r2, #4]
 800153e:	c303      	stmia	r3!, {r0, r1}
 8001540:	8912      	ldrh	r2, [r2, #8]
 8001542:	801a      	strh	r2, [r3, #0]
	    	    MotorTrapzoidalInit(&tProfile, arrData1.pos1, arrData1.vel1, arrData1.acc1);
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 8001552:	885b      	ldrh	r3, [r3, #2]
 8001554:	ee07 3a10 	vmov	s14, r3
 8001558:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 800155e:	889b      	ldrh	r3, [r3, #4]
 8001560:	ee06 3a90 	vmov	s13, r3
 8001564:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001568:	eeb0 1a66 	vmov.f32	s2, s13
 800156c:	eef0 0a47 	vmov.f32	s1, s14
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	4821      	ldr	r0, [pc, #132]	; (80015fc <HAL_UART_RxCpltCallback+0x148>)
 8001576:	f000 fcab 	bl	8001ed0 <MotorTrapzoidalInit>
	    	    dir1 = arrData1.dir1;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 800157c:	88db      	ldrh	r3, [r3, #6]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_UART_RxCpltCallback+0x14c>)
 8001582:	701a      	strb	r2, [r3, #0]
	    	    dir2 = arrData1.dir2;
 8001584:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_UART_RxCpltCallback+0x144>)
 8001586:	891b      	ldrh	r3, [r3, #8]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_UART_RxCpltCallback+0x150>)
 800158c:	701a      	strb	r2, [r3, #0]

	    	    tProcess = RUN_TEST;
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_UART_RxCpltCallback+0x124>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]

	    	        if (dir1 == HEAD)
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_UART_RxCpltCallback+0x14c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d103      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0xf0>
	    	        {
	    	        	//Motor1Forward();
	    	        	tMotor1.dir = HEAD;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_UART_RxCpltCallback+0x154>)
 800159e:	2201      	movs	r2, #1
 80015a0:	761a      	strb	r2, [r3, #24]
 80015a2:	e002      	b.n	80015aa <HAL_UART_RxCpltCallback+0xf6>
	    	        }
	    	        else
	    	        {
	    	        	//Motor1Backward();
	    	        	tMotor1.dir = BACK;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_UART_RxCpltCallback+0x154>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	761a      	strb	r2, [r3, #24]
	    	        }
	    	        if (dir2 == HEAD)
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_UART_RxCpltCallback+0x150>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d103      	bne.n	80015ba <HAL_UART_RxCpltCallback+0x106>
	    	        {
	    	        	//Motor2Forward();
	    	        	tMotor2.dir = HEAD;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_UART_RxCpltCallback+0x158>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	761a      	strb	r2, [r3, #24]
 80015b8:	e002      	b.n	80015c0 <HAL_UART_RxCpltCallback+0x10c>
	    	        }
	    	        else
	    	        {
	    	        	//Motor2Backward();
	    	        	tMotor2.dir = BACK;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_UART_RxCpltCallback+0x158>)
 80015bc:	2200      	movs	r2, #0
 80015be:	761a      	strb	r2, [r3, #24]
	    	        }
	    }
	    SerialAcceptReceive();
 80015c0:	f7ff ff6a 	bl	8001498 <SerialAcceptReceive>
  }
}
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	200004a0 	.word	0x200004a0
 80015d0:	200003c8 	.word	0x200003c8
 80015d4:	20000410 	.word	0x20000410
 80015d8:	200002ac 	.word	0x200002ac
 80015dc:	20000330 	.word	0x20000330
 80015e0:	20000348 	.word	0x20000348
 80015e4:	20000360 	.word	0x20000360
 80015e8:	20000278 	.word	0x20000278
 80015ec:	0800c1c0 	.word	0x0800c1c0
 80015f0:	20000260 	.word	0x20000260
 80015f4:	20000000 	.word	0x20000000
 80015f8:	200002b0 	.word	0x200002b0
 80015fc:	200002bc 	.word	0x200002bc
 8001600:	200002ba 	.word	0x200002ba
 8001604:	200002bb 	.word	0x200002bb
 8001608:	200002f0 	.word	0x200002f0
 800160c:	20000310 	.word	0x20000310

08001610 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]

  if (htim->Instance == htim5.Instance)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d122      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
    switch (tProcess)
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01d      	beq.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x58>
 800162c:	2b01      	cmp	r3, #1
 800162e:	d000      	beq.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x22>
    	ReadEncoder(&tMotor2, &htim3);
    	//MPU6050_Read_Yaw(&hi2c1, &MPU6050);
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tPID_3, &tMotor1, &tMotor2, dir1, dir2);
    }
  }
}
 8001630:	e01b      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0x5a>
    	MotorSetRun();
 8001632:	f000 faef 	bl	8001c14 <MotorSetRun>
    	ReadEncoder(&tMotor1, &htim1);
 8001636:	4911      	ldr	r1, [pc, #68]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800163a:	f000 fb37 	bl	8001cac <ReadEncoder>
    	ReadEncoder(&tMotor2, &htim3);
 800163e:	4911      	ldr	r1, [pc, #68]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001640:	4811      	ldr	r0, [pc, #68]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001642:	f000 fb33 	bl	8001cac <ReadEncoder>
    	MotorMovePos(&tProfile, &tPID_1, &tPID_2, &tPID_3, &tMotor1, &tMotor2, dir1, dir2);
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	9203      	str	r2, [sp, #12]
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001662:	f000 f821 	bl	80016a8 <MotorMovePos>
}
 8001666:	e000      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0x5a>
    	break;
 8001668:	bf00      	nop
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000458 	.word	0x20000458
 8001678:	200002ac 	.word	0x200002ac
 800167c:	20000380 	.word	0x20000380
 8001680:	200002f0 	.word	0x200002f0
 8001684:	200003c8 	.word	0x200003c8
 8001688:	20000310 	.word	0x20000310
 800168c:	200002ba 	.word	0x200002ba
 8001690:	200002bb 	.word	0x200002bb
 8001694:	20000360 	.word	0x20000360
 8001698:	20000348 	.word	0x20000348
 800169c:	20000330 	.word	0x20000330
 80016a0:	200002bc 	.word	0x200002bc
 80016a4:	00000000 	.word	0x00000000

080016a8 <MotorMovePos>:

void MotorMovePos(PROFILE_t *tProfile, PID_CONTROL_t *tPIDControl1, PID_CONTROL_t *tPIDControl2, PID_CONTROL_t *tPIDControl3,Motor_t *tmotor1, Motor_t *tmotor2, uint8_t dir1, uint8_t dir2)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b092      	sub	sp, #72	; 0x48
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  int32_t g_nDutyCycle_1, g_nDutyCycle_2, g_nDutyCycle_yaw;

  float dPosTemp = 0;
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]

  // Profile trapezoidal Speed
  if (tProfile->nTime <= tProfile->dMidStep1)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d820      	bhi.n	8001714 <MotorMovePos+0x6c>
  {
    dPosTemp = (int32_t)(tProfile->dA1 * tProfile->nTime * tProfile->nTime);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f4:	edc7 7a04 	vstr	s15, [r7, #16]
    g_dCmdVel = 2 * tProfile->dA1 * tProfile->nTime;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	4bad      	ldr	r3, [pc, #692]	; (80019c4 <MotorMovePos+0x31c>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
 8001712:	e065      	b.n	80017e0 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep2)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d817      	bhi.n	800175a <MotorMovePos+0xb2>
  {
    dPosTemp = (int32_t)(tProfile->dA2 * tProfile->nTime + tProfile->dB2);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174c:	edc7 7a04 	vstr	s15, [r7, #16]
    g_dCmdVel = tProfile->dA2;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4a9b      	ldr	r2, [pc, #620]	; (80019c4 <MotorMovePos+0x31c>)
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e042      	b.n	80017e0 <MotorMovePos+0x138>
  }
  else if (tProfile->nTime <= tProfile->dMidStep3)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d834      	bhi.n	80017da <MotorMovePos+0x132>
  {
    dPosTemp = (int32_t)(tProfile->dA3 * tProfile->nTime * tProfile->nTime + tProfile->dB3 * tProfile->nTime + tProfile->dC3);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	ed93 7a06 	vldr	s14, [r3, #24]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800177c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b0:	edc7 7a04 	vstr	s15, [r7, #16]
    g_dCmdVel = 2 * tProfile->dA3 * tProfile->nTime + tProfile->dB3;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <MotorMovePos+0x31c>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
 80017d8:	e002      	b.n	80017e0 <MotorMovePos+0x138>
  }
  else
  {
    dPosTemp = tProfile->dPosMax;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	613b      	str	r3, [r7, #16]
  }

  // Control PID
  if(tMotor1.dir == tMotor2.dir)
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <MotorMovePos+0x320>)
 80017e2:	f993 2018 	ldrsb.w	r2, [r3, #24]
 80017e6:	4b79      	ldr	r3, [pc, #484]	; (80019cc <MotorMovePos+0x324>)
 80017e8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d152      	bne.n	8001896 <MotorMovePos+0x1ee>
  	{
//	  g_nDutyCycle_yaw = (int16_t)PIDCompute(tPIDControl3, 0.0, MPU6050.yaw, SAMPLING_TIME);
	  g_nDutyCycle_yaw = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel, tMotor1.velocity, SAMPLING_TIME);
 80017f4:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <MotorMovePos+0x31c>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <MotorMovePos+0x320>)
 80017fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001800:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80019d0 <MotorMovePos+0x328>
 8001804:	eef0 0a47 	vmov.f32	s1, s14
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	68b8      	ldr	r0, [r7, #8]
 800180e:	f000 fcaf 	bl	8002170 <PIDCompute>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181a:	ee17 3a90 	vmov	r3, s15
 800181e:	b21b      	sxth	r3, r3
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
	  g_nDutyCycle_2 = (int16_t)PIDCompute(tPIDControl2, g_dCmdVel, tMotor2.velocity, SAMPLING_TIME);
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <MotorMovePos+0x31c>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <MotorMovePos+0x324>)
 800182a:	ed93 7a01 	vldr	s14, [r3, #4]
 800182e:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80019d0 <MotorMovePos+0x328>
 8001832:	eef0 0a47 	vmov.f32	s1, s14
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fc98 	bl	8002170 <PIDCompute>
 8001840:	eef0 7a40 	vmov.f32	s15, s0
 8001844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001848:	ee17 3a90 	vmov	r3, s15
 800184c:	b21b      	sxth	r3, r3
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
	  if (tProfile->dPosMax < 100)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	edd3 7a02 	vldr	s15, [r3, #8]
 8001856:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80019d4 <MotorMovePos+0x32c>
 800185a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d501      	bpl.n	8001868 <MotorMovePos+0x1c0>
	  {
		  g_nDutyCycle_yaw = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  }
	  if(tMotor1.dir == 1)
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <MotorMovePos+0x320>)
 800186a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <MotorMovePos+0x1dc>
	  {
		  g_nDutyCycle_1 = g_nDutyCycle_1 - g_nDutyCycle_yaw;
 8001872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	647b      	str	r3, [r7, #68]	; 0x44
		  g_nDutyCycle_2 = g_nDutyCycle_2 + g_nDutyCycle_yaw;
 800187a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800187c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187e:	4413      	add	r3, r2
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
 8001882:	e036      	b.n	80018f2 <MotorMovePos+0x24a>
	  }
	  else
	  {
		  g_nDutyCycle_1 = g_nDutyCycle_1 + g_nDutyCycle_yaw;
 8001884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	4413      	add	r3, r2
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
		  g_nDutyCycle_2 = g_nDutyCycle_2 - g_nDutyCycle_yaw;
 800188c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	643b      	str	r3, [r7, #64]	; 0x40
 8001894:	e02d      	b.n	80018f2 <MotorMovePos+0x24a>
	  }
	}
  else
  {
  g_nDutyCycle_1 = (int16_t)PIDCompute(tPIDControl1, g_dCmdVel, tMotor1.velocity, SAMPLING_TIME);
 8001896:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <MotorMovePos+0x31c>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <MotorMovePos+0x320>)
 800189e:	ed93 7a01 	vldr	s14, [r3, #4]
 80018a2:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80019d0 <MotorMovePos+0x328>
 80018a6:	eef0 0a47 	vmov.f32	s1, s14
 80018aa:	eeb0 0a67 	vmov.f32	s0, s15
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f000 fc5e 	bl	8002170 <PIDCompute>
 80018b4:	eef0 7a40 	vmov.f32	s15, s0
 80018b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018bc:	ee17 3a90 	vmov	r3, s15
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  g_nDutyCycle_2 = (int16_t)(PIDCompute(tPIDControl2, g_dCmdVel, tMotor2.velocity, SAMPLING_TIME));
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <MotorMovePos+0x31c>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	4b40      	ldr	r3, [pc, #256]	; (80019cc <MotorMovePos+0x324>)
 80018cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80018d0:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80019d0 <MotorMovePos+0x328>
 80018d4:	eef0 0a47 	vmov.f32	s1, s14
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fc47 	bl	8002170 <PIDCompute>
 80018e2:	eef0 7a40 	vmov.f32	s15, s0
 80018e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ea:	ee17 3a90 	vmov	r3, s15
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if(tMotor1.dir == 1)
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <MotorMovePos+0x320>)
 80018f4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11a      	bne.n	8001932 <MotorMovePos+0x28a>
  {
	  if (g_nDutyCycle_1 > 0)
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dd0b      	ble.n	800191a <MotorMovePos+0x272>
	  {
		Motor1Forward();
 8001902:	f000 f9a3 	bl	8001c4c <Motor1Forward>
		MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 8001906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001908:	2b00      	cmp	r3, #0
 800190a:	bfb8      	it	lt
 800190c:	425b      	neglt	r3, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fa62 	bl	8001ddc <MotorSetDuty>
 8001918:	e025      	b.n	8001966 <MotorMovePos+0x2be>
	  }
	  else
	  {
		Motor1Backward();
 800191a:	f000 f9a3 	bl	8001c64 <Motor1Backward>
		MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 800191e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001920:	2b00      	cmp	r3, #0
 8001922:	bfb8      	it	lt
 8001924:	425b      	neglt	r3, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fa56 	bl	8001ddc <MotorSetDuty>
 8001930:	e019      	b.n	8001966 <MotorMovePos+0x2be>
	  }
  }
   else{
	   if (g_nDutyCycle_1 > 0)
 8001932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001934:	2b00      	cmp	r3, #0
 8001936:	dd0b      	ble.n	8001950 <MotorMovePos+0x2a8>
	   {
		Motor1Backward();
 8001938:	f000 f994 	bl	8001c64 <Motor1Backward>
		MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 800193c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800193e:	2b00      	cmp	r3, #0
 8001940:	bfb8      	it	lt
 8001942:	425b      	neglt	r3, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fa47 	bl	8001ddc <MotorSetDuty>
 800194e:	e00a      	b.n	8001966 <MotorMovePos+0x2be>
	    }
	 else
		 {
		 Motor1Forward();
 8001950:	f000 f97c 	bl	8001c4c <Motor1Forward>
		 MotorSetDuty(abs(g_nDutyCycle_1), MOTOR_1);
 8001954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fa3b 	bl	8001ddc <MotorSetDuty>
		 }
	  }
  if(tMotor2.dir == 1)
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MotorMovePos+0x324>)
 8001968:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d11a      	bne.n	80019a6 <MotorMovePos+0x2fe>
   {
	  if (g_nDutyCycle_2 > 0)
 8001970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	dd0b      	ble.n	800198e <MotorMovePos+0x2e6>
	  {
		Motor2Forward();
 8001976:	f000 f981 	bl	8001c7c <Motor2Forward>
		MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 800197a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	425b      	neglt	r3, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	2102      	movs	r1, #2
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fa28 	bl	8001ddc <MotorSetDuty>
 800198c:	e02f      	b.n	80019ee <MotorMovePos+0x346>
	  }
	  else
	  {
		Motor2Backward();
 800198e:	f000 f981 	bl	8001c94 <Motor2Backward>
		MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);;
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	bfb8      	it	lt
 8001998:	425b      	neglt	r3, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fa1c 	bl	8001ddc <MotorSetDuty>
 80019a4:	e023      	b.n	80019ee <MotorMovePos+0x346>
	  }
   }
  else{
	  if (g_nDutyCycle_2 > 0)
 80019a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	dd15      	ble.n	80019d8 <MotorMovePos+0x330>
	  {
	  	Motor2Backward();
 80019ac:	f000 f972 	bl	8001c94 <Motor2Backward>
	  	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 80019b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfb8      	it	lt
 80019b6:	425b      	neglt	r3, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2102      	movs	r1, #2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fa0d 	bl	8001ddc <MotorSetDuty>
 80019c2:	e014      	b.n	80019ee <MotorMovePos+0x346>
 80019c4:	200002a8 	.word	0x200002a8
 80019c8:	200002f0 	.word	0x200002f0
 80019cc:	20000310 	.word	0x20000310
 80019d0:	3ba3d70a 	.word	0x3ba3d70a
 80019d4:	42c80000 	.word	0x42c80000
	  }
	  else
	  {
	  	Motor2Forward();
 80019d8:	f000 f950 	bl	8001c7c <Motor2Forward>
	  	MotorSetDuty(abs(g_nDutyCycle_2), MOTOR_2);
 80019dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bfb8      	it	lt
 80019e2:	425b      	neglt	r3, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2102      	movs	r1, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f9f7 	bl	8001ddc <MotorSetDuty>
//        }
//    }
//  strcat(result, "!");
//  HAL_UART_Transmit(&huart1, (uint8_t *)result, sizeof(result),1000);

  if (tProfile->nTime > tProfile->dMidStep3)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	f340 80d1 	ble.w	8001ba8 <MotorMovePos+0x500>
  {
    __HAL_TIM_SetCounter(&htim4, 0);
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <MotorMovePos+0x538>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SetCounter(&htim3, 0);
 8001a0e:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <MotorMovePos+0x53c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
    dPosTemp = 0;
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
    g_nDutyCycle_1 = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
    g_nDutyCycle_2 = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
    g_dCmdVel = 0;
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <MotorMovePos+0x540>)
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    tProfile->nTime = 0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	631a      	str	r2, [r3, #48]	; 0x30
    tProcess = NONE;
 8001a34:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <MotorMovePos+0x544>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
    MotorSetDuty(0, MOTOR_1);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f9cd 	bl	8001ddc <MotorSetDuty>
    MotorSetDuty(0, MOTOR_2);
 8001a42:	2102      	movs	r1, #2
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 f9c9 	bl	8001ddc <MotorSetDuty>
    tmotor1->velocity = 0;
 8001a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
    tmotor2->velocity = 0;
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    tmotor1->position = 0;
 8001a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    tmotor2->position = 0;
 8001a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    tmotor1->counter = 0;
 8001a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
    tmotor2->counter = 0;
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    PIDReset(&tPID_2);
 8001a76:	485e      	ldr	r0, [pc, #376]	; (8001bf0 <MotorMovePos+0x548>)
 8001a78:	f000 fb44 	bl	8002104 <PIDReset>
    PIDReset(&tPID_1);
 8001a7c:	485d      	ldr	r0, [pc, #372]	; (8001bf4 <MotorMovePos+0x54c>)
 8001a7e:	f000 fb41 	bl	8002104 <PIDReset>
    PIDReset(&tPID_3);
 8001a82:	485d      	ldr	r0, [pc, #372]	; (8001bf8 <MotorMovePos+0x550>)
 8001a84:	f000 fb3e 	bl	8002104 <PIDReset>
    MPU6050.yaw = 0.0f;
 8001a88:	495c      	ldr	r1, [pc, #368]	; (8001bfc <MotorMovePos+0x554>)
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    if(tProfile->dMidStep3 < 1.0f)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d56d      	bpl.n	8001b86 <MotorMovePos+0x4de>
    {
    	for(int i = 0; i < 30000; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aae:	e002      	b.n	8001ab6 <MotorMovePos+0x40e>
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f247 522f 	movw	r2, #29999	; 0x752f
 8001abc:	4293      	cmp	r3, r2
 8001abe:	ddf7      	ble.n	8001ab0 <MotorMovePos+0x408>
    	{
    	}
    	for(int i = 0; i < 30000; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	e002      	b.n	8001acc <MotorMovePos+0x424>
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3301      	adds	r3, #1
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	ddf7      	ble.n	8001ac6 <MotorMovePos+0x41e>
    	    	{
    	    	}
    	for(int i = 0; i < 30000; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8001ada:	e002      	b.n	8001ae2 <MotorMovePos+0x43a>
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	3301      	adds	r3, #1
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	f247 522f 	movw	r2, #29999	; 0x752f
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	ddf7      	ble.n	8001adc <MotorMovePos+0x434>
    	    	{
    	    	}
    	for(int i = 0; i < 30000; i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	e002      	b.n	8001af8 <MotorMovePos+0x450>
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	3301      	adds	r3, #1
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	f247 522f 	movw	r2, #29999	; 0x752f
 8001afe:	4293      	cmp	r3, r2
 8001b00:	ddf7      	ble.n	8001af2 <MotorMovePos+0x44a>
    	    	{
    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	e002      	b.n	8001b0e <MotorMovePos+0x466>
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b14:	4293      	cmp	r3, r2
 8001b16:	ddf7      	ble.n	8001b08 <MotorMovePos+0x460>
    	    	    	{
    	    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e002      	b.n	8001b24 <MotorMovePos+0x47c>
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	ddf7      	ble.n	8001b1e <MotorMovePos+0x476>
    	    	    	{
    	    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	e002      	b.n	8001b3a <MotorMovePos+0x492>
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	3301      	adds	r3, #1
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b40:	4293      	cmp	r3, r2
 8001b42:	ddf7      	ble.n	8001b34 <MotorMovePos+0x48c>
    	    	    	{
    	    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e002      	b.n	8001b50 <MotorMovePos+0x4a8>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b56:	4293      	cmp	r3, r2
 8001b58:	ddf7      	ble.n	8001b4a <MotorMovePos+0x4a2>
    	    	    	{
    	    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	e002      	b.n	8001b66 <MotorMovePos+0x4be>
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	3301      	adds	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	ddf7      	ble.n	8001b60 <MotorMovePos+0x4b8>
    	    	    	{
    	    	    	}
    	for(int i = 0; i < 30000; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e002      	b.n	8001b7c <MotorMovePos+0x4d4>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b82:	4293      	cmp	r3, r2
 8001b84:	ddf7      	ble.n	8001b76 <MotorMovePos+0x4ce>
    	    	    	{
    	    	    	}
    }
    HAL_UART_Transmit(&huart1, (uint8_t *)statusOK, sizeof(statusOK), 1000);
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	491c      	ldr	r1, [pc, #112]	; (8001c00 <MotorMovePos+0x558>)
 8001b8e:	481d      	ldr	r0, [pc, #116]	; (8001c04 <MotorMovePos+0x55c>)
 8001b90:	f004 fdcf 	bl	8006732 <HAL_UART_Transmit>
    MPU6050.yaw = 0.0f;
 8001b94:	4919      	ldr	r1, [pc, #100]	; (8001bfc <MotorMovePos+0x554>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    tProcess = NONE;
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MotorMovePos+0x544>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  }
  tProfile->nTime += SAMPLING_TIME;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcdb 	bl	8000568 <__aeabi_f2d>
 8001bb2:	a309      	add	r3, pc, #36	; (adr r3, 8001bd8 <MotorMovePos+0x530>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fb78 	bl	80002ac <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7ff f820 	bl	8000c08 <__aeabi_d2f>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001bce:	bf00      	nop
 8001bd0:	3748      	adds	r7, #72	; 0x48
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	47ae147b 	.word	0x47ae147b
 8001bdc:	3f747ae1 	.word	0x3f747ae1
 8001be0:	20000410 	.word	0x20000410
 8001be4:	200003c8 	.word	0x200003c8
 8001be8:	200002a8 	.word	0x200002a8
 8001bec:	200002ac 	.word	0x200002ac
 8001bf0:	20000348 	.word	0x20000348
 8001bf4:	20000330 	.word	0x20000330
 8001bf8:	20000360 	.word	0x20000360
 8001bfc:	20000278 	.word	0x20000278
 8001c00:	20000000 	.word	0x20000000
 8001c04:	200004a0 	.word	0x200004a0

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <Error_Handler+0x8>
	...

08001c14 <MotorSetRun>:

PROFILE_t tProfile;
Motor_t tMotor1, tMotor2;

void MotorSetRun()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <MotorSetRun+0x34>)
 8001c1e:	f001 ff63 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MotorSetRun+0x34>)
 8001c28:	f001 ff5e 	bl	8003ae8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MotorSetRun+0x34>)
 8001c34:	f001 ff58 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c3e:	4802      	ldr	r0, [pc, #8]	; (8001c48 <MotorSetRun+0x34>)
 8001c40:	f001 ff52 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020800 	.word	0x40020800

08001c4c <Motor1Forward>:

void Motor1Forward()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <Motor1Forward+0x14>)
 8001c58:	f001 ff46 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020800 	.word	0x40020800

08001c64 <Motor1Backward>:

void Motor1Backward()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6e:	4802      	ldr	r0, [pc, #8]	; (8001c78 <Motor1Backward+0x14>)
 8001c70:	f001 ff3a 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40020800 	.word	0x40020800

08001c7c <Motor2Forward>:

void Motor2Forward()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <Motor2Forward+0x14>)
 8001c86:	f001 ff2f 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020800 	.word	0x40020800

08001c94 <Motor2Backward>:

void Motor2Backward()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <Motor2Backward+0x14>)
 8001c9e:	f001 ff23 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020800 	.word	0x40020800

08001cac <ReadEncoder>:

void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim) {
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]

  tmotor->counter = htim->Instance->CNT;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
  htim->Instance->CNT = 0;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
  if(tmotor->dir == 1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d141      	bne.n	8001d56 <ReadEncoder+0xaa>
  {
	    int16_t temp_data = tmotor->counter;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	81bb      	strh	r3, [r7, #12]
	    temp_data = - temp_data;
 8001cd8:	89bb      	ldrh	r3, [r7, #12]
 8001cda:	425b      	negs	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	81bb      	strh	r3, [r7, #12]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	ee17 0a90 	vmov	r0, s15
 8001cf0:	f7fe fc3a 	bl	8000568 <__aeabi_f2d>
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <ReadEncoder+0x12c>)
 8001cfa:	f7fe fc8d 	bl	8000618 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	461d      	mov	r5, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc2c 	bl	8000568 <__aeabi_f2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fc7e 	bl	8000618 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe ff70 	bl	8000c08 <__aeabi_d2f>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	edc3 7a02 	vstr	s15, [r3, #8]
  else{
	    int16_t temp_data =  tmotor->counter;
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
  }
}
 8001d54:	e03c      	b.n	8001dd0 <ReadEncoder+0x124>
	    int16_t temp_data =  tmotor->counter;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	81fb      	strh	r3, [r7, #14]
	    tmotor->velocity = (float)temp_data * (SECOND/ SAMPLING_TIME) * tmotor->ptd; // DPS
 8001d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	ee17 0a90 	vmov	r0, s15
 8001d6c:	f7fe fbfc 	bl	8000568 <__aeabi_f2d>
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <ReadEncoder+0x12c>)
 8001d76:	f7fe fc4f 	bl	8000618 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4614      	mov	r4, r2
 8001d80:	461d      	mov	r5, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbee 	bl	8000568 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fc40 	bl	8000618 <__aeabi_dmul>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff32 	bl	8000c08 <__aeabi_d2f>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	605a      	str	r2, [r3, #4]
	    tmotor->position += (float)temp_data * tmotor->ptd; // Degree
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd8:	40690000 	.word	0x40690000

08001ddc <MotorSetDuty>:

void MotorSetDuty(uint16_t nDuty, uint8_t channel)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	80fb      	strh	r3, [r7, #6]
 8001de8:	4613      	mov	r3, r2
 8001dea:	717b      	strb	r3, [r7, #5]
  if (channel == MOTOR_1)
 8001dec:	797b      	ldrb	r3, [r7, #5]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d104      	bne.n	8001dfc <MotorSetDuty+0x20>
  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, nDuty);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MotorSetDuty+0x3c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	88fa      	ldrh	r2, [r7, #6]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else if (channel == MOTOR_2)
  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, nDuty);
  }
}
 8001dfa:	e006      	b.n	8001e0a <MotorSetDuty+0x2e>
  else if (channel == MOTOR_2)
 8001dfc:	797b      	ldrb	r3, [r7, #5]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d103      	bne.n	8001e0a <MotorSetDuty+0x2e>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, nDuty);
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <MotorSetDuty+0x3c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000410 	.word	0x20000410

08001e1c <MotorInit>:

// init params for timer interrupt...
void MotorInit(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e26:	4820      	ldr	r0, [pc, #128]	; (8001ea8 <MotorInit+0x8c>)
 8001e28:	f001 fe5e 	bl	8003ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e32:	481d      	ldr	r0, [pc, #116]	; (8001ea8 <MotorInit+0x8c>)
 8001e34:	f001 fe58 	bl	8003ae8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	481c      	ldr	r0, [pc, #112]	; (8001eac <MotorInit+0x90>)
 8001e3c:	f003 fbd6 	bl	80055ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e40:	210c      	movs	r1, #12
 8001e42:	481a      	ldr	r0, [pc, #104]	; (8001eac <MotorInit+0x90>)
 8001e44:	f003 fbd2 	bl	80055ec <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4819      	ldr	r0, [pc, #100]	; (8001eb0 <MotorInit+0x94>)
 8001e4c:	f003 fd3c 	bl	80058c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8001e50:	2104      	movs	r1, #4
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <MotorInit+0x94>)
 8001e54:	f003 fd38 	bl	80058c8 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <MotorInit+0x98>)
 8001e5c:	f003 fd34 	bl	80058c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001e60:	2104      	movs	r1, #4
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <MotorInit+0x98>)
 8001e64:	f003 fd30 	bl	80058c8 <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim5);
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <MotorInit+0x9c>)
 8001e6a:	f003 faff 	bl	800546c <HAL_TIM_Base_Start_IT>

  PIDInit(&tPID_1, 0.15, 5, 0.001);
 8001e6e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001ebc <MotorInit+0xa0>
 8001e72:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001e76:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001ec0 <MotorInit+0xa4>
 8001e7a:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <MotorInit+0xa8>)
 8001e7c:	f000 f95e 	bl	800213c <PIDInit>
  PIDInit(&tPID_2, 0.15, 5, 0.001);
 8001e80:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001ebc <MotorInit+0xa0>
 8001e84:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001e88:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001ec0 <MotorInit+0xa4>
 8001e8c:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <MotorInit+0xac>)
 8001e8e:	f000 f955 	bl	800213c <PIDInit>
  MotorSetDuty(0, MOTOR_1);
 8001e92:	2101      	movs	r1, #1
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ffa1 	bl	8001ddc <MotorSetDuty>
  MotorSetDuty(0, MOTOR_2);
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff ff9d 	bl	8001ddc <MotorSetDuty>

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	20000410 	.word	0x20000410
 8001eb0:	20000380 	.word	0x20000380
 8001eb4:	200003c8 	.word	0x200003c8
 8001eb8:	20000458 	.word	0x20000458
 8001ebc:	3a83126f 	.word	0x3a83126f
 8001ec0:	3e19999a 	.word	0x3e19999a
 8001ec4:	20000330 	.word	0x20000330
 8001ec8:	20000348 	.word	0x20000348
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <MotorTrapzoidalInit>:
    *nPulse = __HAL_TIM_GetCounter(&htim3);
  }
}

void MotorTrapzoidalInit(PROFILE_t *tProfile, float maxPos, float maxVel, float maxAcc)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001edc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ee0:	ed87 1a00 	vstr	s2, [r7]
	if (maxPos <= 0 || maxVel <= 0 || maxAcc <= 0) {
 8001ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	f240 80fc 	bls.w	80020ec <MotorTrapzoidalInit+0x21c>
 8001ef4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	f240 80f4 	bls.w	80020ec <MotorTrapzoidalInit+0x21c>
 8001f04:	edd7 7a00 	vldr	s15, [r7]
 8001f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	f240 80ec 	bls.w	80020ec <MotorTrapzoidalInit+0x21c>

	        return;
	    }
	if (maxVel > sqrt(maxAcc * maxPos)) maxVel = sqrt(maxAcc * maxPos) - 1.0f;
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe fb27 	bl	8000568 <__aeabi_f2d>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	460d      	mov	r5, r1
 8001f1e:	ed97 7a00 	vldr	s14, [r7]
 8001f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	ee17 0a90 	vmov	r0, s15
 8001f2e:	f7fe fb1b 	bl	8000568 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	ec43 2b10 	vmov	d0, r2, r3
 8001f3a:	f00a f82d 	bl	800bf98 <sqrt>
 8001f3e:	ec53 2b10 	vmov	r2, r3, d0
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fdf7 	bl	8000b38 <__aeabi_dcmpgt>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01e      	beq.n	8001f8e <MotorTrapzoidalInit+0xbe>
 8001f50:	ed97 7a00 	vldr	s14, [r7]
 8001f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5c:	ee17 0a90 	vmov	r0, s15
 8001f60:	f7fe fb02 	bl	8000568 <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ec43 2b10 	vmov	d0, r2, r3
 8001f6c:	f00a f814 	bl	800bf98 <sqrt>
 8001f70:	ec51 0b10 	vmov	r0, r1, d0
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <MotorTrapzoidalInit+0x230>)
 8001f7a:	f7fe f995 	bl	80002a8 <__aeabi_dsub>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fe3f 	bl	8000c08 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	607b      	str	r3, [r7, #4]
	tProfile->dAccelMax = maxAcc;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	601a      	str	r2, [r3, #0]
	tProfile->dVelMax = maxVel;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	605a      	str	r2, [r3, #4]
	tProfile->dPosMax = maxPos * 0.88083; //Must Increase
 8001f9a:	68b8      	ldr	r0, [r7, #8]
 8001f9c:	f7fe fae4 	bl	8000568 <__aeabi_f2d>
 8001fa0:	a355      	add	r3, pc, #340	; (adr r3, 80020f8 <MotorTrapzoidalInit+0x228>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fb37 	bl	8000618 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fe29 	bl	8000c08 <__aeabi_d2f>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]

	tProfile->dA1 = 0.5f * tProfile->dAccelMax;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	edc3 7a03 	vstr	s15, [r3, #12]
	tProfile->dA2 = tProfile->dVelMax;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
	tProfile->dB2 = -0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fde:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fec:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	edc3 7a05 	vstr	s15, [r3, #20]
	tProfile->dA3 = -0.5f * tProfile->dAccelMax;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800200a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edc3 7a06 	vstr	s15, [r3, #24]
	tProfile->dB3 = tProfile->dPosMax * tProfile->dAccelMax / tProfile->dVelMax + tProfile->dVelMax;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	ed93 7a02 	vldr	s14, [r3, #8]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	edd3 7a01 	vldr	s15, [r3, #4]
 800202a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	edd3 7a01 	vldr	s15, [r3, #4]
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	edc3 7a07 	vstr	s15, [r3, #28]
	tProfile->dC3 = -0.5f * tProfile->dPosMax * tProfile->dPosMax * tProfile->dAccelMax / (tProfile->dVelMax * tProfile->dVelMax) - 0.5f * tProfile->dVelMax * tProfile->dVelMax / tProfile->dAccelMax;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	edd3 7a02 	vldr	s15, [r3, #8]
 8002044:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	ed93 7a01 	vldr	s14, [r3, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	edd3 7a01 	vldr	s15, [r3, #4]
 800206c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	edd3 7a01 	vldr	s15, [r3, #4]
 800207a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800207e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	edd3 7a01 	vldr	s15, [r3, #4]
 8002088:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 6a00 	vldr	s13, [r3]
 8002092:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	edc3 7a08 	vstr	s15, [r3, #32]

	tProfile->dMidStep1 = tProfile->dVelMax / tProfile->dAccelMax;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	tProfile->dMidStep2 = tProfile->dPosMax / tProfile->dVelMax;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	tProfile->dMidStep3 = tProfile->dMidStep1 + tProfile->dMidStep2;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	tProfile->nTime = 0;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
 80020ea:	e000      	b.n	80020ee <MotorTrapzoidalInit+0x21e>
	        return;
 80020ec:	bf00      	nop
}
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdb0      	pop	{r4, r5, r7, pc}
 80020f4:	f3af 8000 	nop.w
 80020f8:	656abde4 	.word	0x656abde4
 80020fc:	3fec2fc2 	.word	0x3fec2fc2
 8002100:	3ff00000 	.word	0x3ff00000

08002104 <PIDReset>:

float g_dPIDError = 0;

// reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result = 0.0f;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
    g_dPIDError = 0;
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <PIDReset+0x34>)
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000378 	.word	0x20000378

0800213c <PIDInit>:

// init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	ed87 0a02 	vstr	s0, [r7, #8]
 8002148:	edc7 0a01 	vstr	s1, [r7, #4]
 800214c:	ed87 1a00 	vstr	s2, [r7]
    PIDReset(PID_Ctrl);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ffd7 	bl	8002104 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	609a      	str	r2, [r3, #8]

}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <PIDCompute>:
    PID_Ctrl->dKd = dKd;
}

// Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float dCmdValue, float dActValue, float dTs)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	ed87 0a02 	vstr	s0, [r7, #8]
 800217c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002180:	ed87 1a00 	vstr	s2, [r7]
    float dPIDResult;
    g_dPIDError = dCmdValue - dActValue;
 8002184:	ed97 7a02 	vldr	s14, [r7, #8]
 8002188:	edd7 7a01 	vldr	s15, [r7, #4]
 800218c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <PIDCompute+0x114>)
 8002192:	edc3 7a00 	vstr	s15, [r3]
    float dP = 0, dI = 0, dD = 0;
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]

    dP = PID_Ctrl->dKp * g_dPIDError;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <PIDCompute+0x114>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	edc7 7a06 	vstr	s15, [r7, #24]
    PID_Ctrl->dIntergral += g_dPIDError;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	ed93 7a04 	vldr	s14, [r3, #16]
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <PIDCompute+0x114>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	edc3 7a04 	vstr	s15, [r3, #16]
    dI = PID_Ctrl->dKi * dTs / 2 * PID_Ctrl->dIntergral;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80021d8:	edd7 7a00 	vldr	s15, [r7]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f2:	edc7 7a05 	vstr	s15, [r7, #20]

    dD = PID_Ctrl->dKd * (g_dPIDError - PID_Ctrl->dErrorTerm) / dTs;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <PIDCompute+0x114>)
 80021fe:	edd3 6a00 	vldr	s13, [r3]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	edd3 7a03 	vldr	s15, [r3, #12]
 8002208:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002210:	ed97 7a00 	vldr	s14, [r7]
 8002214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002218:	edc7 7a04 	vstr	s15, [r7, #16]

    dPIDResult = dP + dI + dD;
 800221c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002220:	edd7 7a05 	vldr	s15, [r7, #20]
 8002224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002228:	ed97 7a04 	vldr	s14, [r7, #16]
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002230:	edc7 7a07 	vstr	s15, [r7, #28]
    if(dPIDResult > 99) dPIDResult = 99;
 8002234:	edd7 7a07 	vldr	s15, [r7, #28]
 8002238:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002288 <PIDCompute+0x118>
 800223c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	dd01      	ble.n	800224a <PIDCompute+0xda>
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <PIDCompute+0x11c>)
 8002248:	61fb      	str	r3, [r7, #28]
    if(dPIDResult < -99) dPIDResult = - 99;
 800224a:	edd7 7a07 	vldr	s15, [r7, #28]
 800224e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002290 <PIDCompute+0x120>
 8002252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d501      	bpl.n	8002260 <PIDCompute+0xf0>
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <PIDCompute+0x124>)
 800225e:	61fb      	str	r3, [r7, #28]
    PID_Ctrl->result = dPIDResult;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	615a      	str	r2, [r3, #20]
    PID_Ctrl->dErrorTerm = g_dPIDError;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <PIDCompute+0x114>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	60da      	str	r2, [r3, #12]

    return dPIDResult;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	ee07 3a90 	vmov	s15, r3
}
 8002274:	eeb0 0a67 	vmov.f32	s0, s15
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000378 	.word	0x20000378
 8002288:	42c60000 	.word	0x42c60000
 800228c:	42c60000 	.word	0x42c60000
 8002290:	c2c60000 	.word	0xc2c60000
 8002294:	c2c60000 	.word	0xc2c60000

08002298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_MspInit+0x4c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_MspInit+0x4c>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_MspInit+0x4c>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_MspInit+0x4c>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <NMI_Handler+0x4>

080022ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <MemManage_Handler+0x4>

080022fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <BusFault_Handler+0x4>

08002300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <UsageFault_Handler+0x4>

08002306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002334:	f000 fd8e 	bl	8002e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <USART1_IRQHandler+0x10>)
 8002342:	f004 fab9 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004a0 	.word	0x200004a0

08002350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <USART2_IRQHandler+0x10>)
 8002356:	f004 faaf 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004e4 	.word	0x200004e4

08002364 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM5_IRQHandler+0x10>)
 800236a:	f003 fb3b 	bl	80059e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000458 	.word	0x20000458

08002378 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DMA2_Stream7_IRQHandler+0x10>)
 800237e:	f000 ffdb 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000528 	.word	0x20000528

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a6:	f006 fb4d 	bl	8008a44 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ce:	e7fe      	b.n	80023ce <_exit+0x12>

080023d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e2:	f3af 8000 	nop.w
 80023e6:	4601      	mov	r1, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	60ba      	str	r2, [r7, #8]
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf0      	blt.n	80023e2 <_read+0x12>
  }

  return len;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e009      	b.n	8002430 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf1      	blt.n	800241c <_write+0x12>
  }
  return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f006 fab2 	bl	8008a44 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20020000 	.word	0x20020000
 800250c:	00000400 	.word	0x00000400
 8002510:	2000037c 	.word	0x2000037c
 8002514:	200006d8 	.word	0x200006d8

08002518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f006 fa05 	bl	800895a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <MX_TIM1_Init+0xa8>)
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <MX_TIM1_Init+0xac>)
 800255c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <MX_TIM1_Init+0xa8>)
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_TIM1_Init+0xa8>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_TIM1_Init+0xa8>)
 800256c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_TIM1_Init+0xa8>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_TIM1_Init+0xa8>)
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <MX_TIM1_Init+0xa8>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002584:	2303      	movs	r3, #3
 8002586:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002594:	230a      	movs	r3, #10
 8002596:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002598:	2300      	movs	r3, #0
 800259a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800259c:	2301      	movs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80025a4:	230a      	movs	r3, #10
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_TIM1_Init+0xa8>)
 80025b0:	f003 f8e4 	bl	800577c <HAL_TIM_Encoder_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80025ba:	f7ff fb25 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_TIM1_Init+0xa8>)
 80025cc:	f003 ffd4 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80025d6:	f7ff fb17 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	3730      	adds	r7, #48	; 0x30
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000380 	.word	0x20000380
 80025e8:	40010000 	.word	0x40010000

080025ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f006 f9ad 	bl	800895a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <MX_TIM3_Init+0xa0>)
 800260a:	4a21      	ldr	r2, [pc, #132]	; (8002690 <MX_TIM3_Init+0xa4>)
 800260c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800260e:	4b1f      	ldr	r3, [pc, #124]	; (800268c <MX_TIM3_Init+0xa0>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <MX_TIM3_Init+0xa0>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <MX_TIM3_Init+0xa0>)
 800261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002620:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_TIM3_Init+0xa0>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_TIM3_Init+0xa0>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800262e:	2303      	movs	r3, #3
 8002630:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002636:	2301      	movs	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800263e:	230a      	movs	r3, #10
 8002640:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002646:	2301      	movs	r3, #1
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800264e:	230a      	movs	r3, #10
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002652:	f107 030c 	add.w	r3, r7, #12
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_TIM3_Init+0xa0>)
 800265a:	f003 f88f 	bl	800577c <HAL_TIM_Encoder_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002664:	f7ff fad0 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_TIM3_Init+0xa0>)
 8002676:	f003 ff7f 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002680:	f7ff fac2 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3730      	adds	r7, #48	; 0x30
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200003c8 	.word	0x200003c8
 8002690:	40000400 	.word	0x40000400

08002694 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269a:	f107 0320 	add.w	r3, r7, #32
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <MX_TIM4_Init+0xc4>)
 80026ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 74;
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026be:	224a      	movs	r2, #74	; 0x4a
 80026c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026ca:	2263      	movs	r2, #99	; 0x63
 80026cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80026da:	481e      	ldr	r0, [pc, #120]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026dc:	f002 ff36 	bl	800554c <HAL_TIM_PWM_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80026e6:	f7ff fa8f 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	4619      	mov	r1, r3
 80026f8:	4816      	ldr	r0, [pc, #88]	; (8002754 <MX_TIM4_Init+0xc0>)
 80026fa:	f003 ff3d 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002704:	f7ff fa80 	bl	8001c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002708:	2360      	movs	r3, #96	; 0x60
 800270a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	480d      	ldr	r0, [pc, #52]	; (8002754 <MX_TIM4_Init+0xc0>)
 8002720:	f003 fa68 	bl	8005bf4 <HAL_TIM_PWM_ConfigChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800272a:	f7ff fa6d 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	220c      	movs	r2, #12
 8002732:	4619      	mov	r1, r3
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <MX_TIM4_Init+0xc0>)
 8002736:	f003 fa5d 	bl	8005bf4 <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002740:	f7ff fa62 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <MX_TIM4_Init+0xc0>)
 8002746:	f000 f91f 	bl	8002988 <HAL_TIM_MspPostInit>

}
 800274a:	bf00      	nop
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000410 	.word	0x20000410
 8002758:	40000800 	.word	0x40000800

0800275c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002770:	463b      	mov	r3, r7
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <MX_TIM5_Init+0x94>)
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <MX_TIM5_Init+0x98>)
 800277c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 749;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <MX_TIM5_Init+0x94>)
 8002780:	f240 22ed 	movw	r2, #749	; 0x2ed
 8002784:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <MX_TIM5_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 499;
 800278c:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <MX_TIM5_Init+0x94>)
 800278e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002792:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <MX_TIM5_Init+0x94>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <MX_TIM5_Init+0x94>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027a0:	4813      	ldr	r0, [pc, #76]	; (80027f0 <MX_TIM5_Init+0x94>)
 80027a2:	f002 fe13 	bl	80053cc <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027ac:	f7ff fa2c 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	4619      	mov	r1, r3
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_TIM5_Init+0x94>)
 80027be:	f003 fadb 	bl	8005d78 <HAL_TIM_ConfigClockSource>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027c8:	f7ff fa1e 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027d4:	463b      	mov	r3, r7
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_TIM5_Init+0x94>)
 80027da:	f003 fecd 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027e4:	f7ff fa10 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000458 	.word	0x20000458
 80027f4:	40000c00 	.word	0x40000c00

080027f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a32      	ldr	r2, [pc, #200]	; (80028e0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12d      	bne.n	8002876 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002840:	f043 0310 	orr.w	r3, r3, #16
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1A_Pin|ENCODER_1B_Pin;
 8002852:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002864:	2301      	movs	r3, #1
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	481e      	ldr	r0, [pc, #120]	; (80028e8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002870:	f000 ff9e 	bl	80037b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002874:	e030      	b.n	80028d8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_TIM_Encoder_MspInit+0xf4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d12b      	bne.n	80028d8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_TIM_Encoder_MspInit+0xec>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2A_Pin|ENCODER_2B_Pin;
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c8:	2302      	movs	r3, #2
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80028d4:	f000 ff6c 	bl	80037b0 <HAL_GPIO_Init>
}
 80028d8:	bf00      	nop
 80028da:	3730      	adds	r7, #48	; 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40020000 	.word	0x40020000

080028f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_TIM_PWM_MspInit+0x3c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10d      	bne.n	8002922 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_TIM_PWM_MspInit+0x40>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40000800 	.word	0x40000800
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <HAL_TIM_Base_MspInit+0x48>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d115      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_TIM_Base_MspInit+0x4c>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <HAL_TIM_Base_MspInit+0x4c>)
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_TIM_Base_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	2032      	movs	r0, #50	; 0x32
 800296c:	f000 fb6d 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002970:	2032      	movs	r0, #50	; 0x32
 8002972:	f000 fb86 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_TIM_MspPostInit+0x68>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11e      	bne.n	80029e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_TIM_MspPostInit+0x6c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM4_Pin;
 80029c6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80029ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d8:	2302      	movs	r3, #2
 80029da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4619      	mov	r1, r3
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_TIM_MspPostInit+0x70>)
 80029e4:	f000 fee4 	bl	80037b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020c00 	.word	0x40020c00

080029fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <MX_USART1_UART_Init+0x50>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a34:	f003 fe30 	bl	8006698 <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a3e:	f7ff f8e3 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200004a0 	.word	0x200004a0
 8002a4c:	40011000 	.word	0x40011000

08002a50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <MX_USART2_UART_Init+0x50>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_USART2_UART_Init+0x4c>)
 8002a88:	f003 fe06 	bl	8006698 <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a92:	f7ff f8b9 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200004e4 	.word	0x200004e4
 8002aa0:	40004400 	.word	0x40004400

08002aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_UART_MspInit+0x168>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d164      	bne.n	8002b90 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a50      	ldr	r2, [pc, #320]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b10:	2307      	movs	r3, #7
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	483e      	ldr	r0, [pc, #248]	; (8002c14 <HAL_UART_MspInit+0x170>)
 8002b1c:	f000 fe48 	bl	80037b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002b20:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b22:	4a3e      	ldr	r2, [pc, #248]	; (8002c1c <HAL_UART_MspInit+0x178>)
 8002b24:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2e:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b40:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b56:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b62:	482d      	ldr	r0, [pc, #180]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b64:	f000 faa8 	bl	80030b8 <HAL_DMA_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b6e:	f7ff f84b 	bl	8001c08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
 8002b78:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_UART_MspInit+0x174>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2025      	movs	r0, #37	; 0x25
 8002b84:	f000 fa61 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b88:	2025      	movs	r0, #37	; 0x25
 8002b8a:	f000 fa7a 	bl	8003082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b8e:	e038      	b.n	8002c02 <HAL_UART_MspInit+0x15e>
  else if(uartHandle->Instance==USART2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_UART_MspInit+0x17c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d133      	bne.n	8002c02 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_UART_MspInit+0x16c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bd2:	2360      	movs	r3, #96	; 0x60
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be2:	2307      	movs	r3, #7
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4619      	mov	r1, r3
 8002bec:	480d      	ldr	r0, [pc, #52]	; (8002c24 <HAL_UART_MspInit+0x180>)
 8002bee:	f000 fddf 	bl	80037b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2026      	movs	r0, #38	; 0x26
 8002bf8:	f000 fa27 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bfc:	2026      	movs	r0, #38	; 0x26
 8002bfe:	f000 fa40 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3730      	adds	r7, #48	; 0x30
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	20000528 	.word	0x20000528
 8002c1c:	400264b8 	.word	0x400264b8
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40020c00 	.word	0x40020c00

08002c28 <ArrProcess>:
#include <stdint.h>



ArrData_t ArrProcess(char *arr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b090      	sub	sp, #64	; 0x40
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
    ArrData_t data;
    char sampleString[19];
    strcpy(sampleString, arr);
 8002c32:	f107 030c 	add.w	r3, r7, #12
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f005 ff30 	bl	8008a9e <strcpy>

    char *pos1 = (char *)malloc(sizeof(char) * 5);
 8002c3e:	2005      	movs	r0, #5
 8002c40:	f004 fda6 	bl	8007790 <malloc>
 8002c44:	4603      	mov	r3, r0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *vel1 = (char *)malloc(sizeof(char) * 5);
 8002c48:	2005      	movs	r0, #5
 8002c4a:	f004 fda1 	bl	8007790 <malloc>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
    char *acc1 = (char *)malloc(sizeof(char) * 5);
 8002c52:	2005      	movs	r0, #5
 8002c54:	f004 fd9c 	bl	8007790 <malloc>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
    char *dir1 = (char *)malloc(sizeof(char) * 2);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f004 fd97 	bl	8007790 <malloc>
 8002c62:	4603      	mov	r3, r0
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
    char *dir2 = (char *)malloc(sizeof(char) * 2);
 8002c66:	2002      	movs	r0, #2
 8002c68:	f004 fd92 	bl	8007790 <malloc>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    strncpy(pos1, sampleString, 4);
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	2204      	movs	r2, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c7a:	f005 fe76 	bl	800896a <strncpy>
    pos1[4] = '\0';
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	3304      	adds	r3, #4
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
    strncpy(vel1, &sampleString[5], 4);
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	3305      	adds	r3, #5
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c92:	f005 fe6a 	bl	800896a <strncpy>
    vel1[4] = '\0';
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
    strncpy(acc1, &sampleString[10], 4);
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	330a      	adds	r3, #10
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002caa:	f005 fe5e 	bl	800896a <strncpy>
    acc1[4] = '\0';
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
    strncpy(dir1, &sampleString[15], 1);
 8002cb6:	f107 030c 	add.w	r3, r7, #12
 8002cba:	330f      	adds	r3, #15
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc2:	f005 fe52 	bl	800896a <strncpy>
    dir1[1] = '\0';
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	3301      	adds	r3, #1
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
    strncpy(dir2, &sampleString[17], 1);
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	3311      	adds	r3, #17
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cda:	f005 fe46 	bl	800896a <strncpy>
    dir2[1] = '\0';
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

    data.pos1 = atoi(pos1);
 8002ce6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ce8:	f004 fd4e 	bl	8007788 <atoi>
 8002cec:	4603      	mov	r3, r0
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	843b      	strh	r3, [r7, #32]
    data.vel1 = atoi(vel1);
 8002cf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cf4:	f004 fd48 	bl	8007788 <atoi>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	847b      	strh	r3, [r7, #34]	; 0x22
    data.acc1 = atoi(acc1);
 8002cfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d00:	f004 fd42 	bl	8007788 <atoi>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	84bb      	strh	r3, [r7, #36]	; 0x24
    data.dir1 = atoi(dir1);
 8002d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0c:	f004 fd3c 	bl	8007788 <atoi>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	84fb      	strh	r3, [r7, #38]	; 0x26
    data.dir2 = atoi(dir2);
 8002d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d18:	f004 fd36 	bl	8007788 <atoi>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	853b      	strh	r3, [r7, #40]	; 0x28

    free(pos1);
 8002d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d24:	f004 fd3c 	bl	80077a0 <free>
    free(vel1);
 8002d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d2a:	f004 fd39 	bl	80077a0 <free>
    free(acc1);
 8002d2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d30:	f004 fd36 	bl	80077a0 <free>
    free(dir1);
 8002d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d36:	f004 fd33 	bl	80077a0 <free>
    free(dir2);
 8002d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3c:	f004 fd30 	bl	80077a0 <free>

    return data;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f107 0320 	add.w	r3, r7, #32
 8002d48:	cb03      	ldmia	r3!, {r0, r1}
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	6051      	str	r1, [r2, #4]
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	8113      	strh	r3, [r2, #8]
}
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	3740      	adds	r7, #64	; 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d60:	480d      	ldr	r0, [pc, #52]	; (8002d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d62:	490e      	ldr	r1, [pc, #56]	; (8002d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d64:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d68:	e002      	b.n	8002d70 <LoopCopyDataInit>

08002d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6e:	3304      	adds	r3, #4

08002d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d74:	d3f9      	bcc.n	8002d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d78:	4c0b      	ldr	r4, [pc, #44]	; (8002da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d7c:	e001      	b.n	8002d82 <LoopFillZerobss>

08002d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d80:	3204      	adds	r2, #4

08002d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d84:	d3fb      	bcc.n	8002d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d86:	f7ff fbc7 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8a:	f005 fe61 	bl	8008a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8e:	f7fe fac1 	bl	8001314 <main>
  bx  lr    
 8002d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d9c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002da0:	0800c630 	.word	0x0800c630
  ldr r2, =_sbss
 8002da4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002da8:	200006d8 	.word	0x200006d8

08002dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC_IRQHandler>
	...

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f92b 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	200f      	movs	r0, #15
 8002de0:	f000 f808 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7ff fa58 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_InitTick+0x54>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x58>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f943 	bl	800309e <HAL_SYSTICK_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00e      	b.n	8002e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b0f      	cmp	r3, #15
 8002e26:	d80a      	bhi.n	8002e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f000 f90b 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <HAL_InitTick+0x5c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e000      	b.n	8002e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000008 	.word	0x20000008
 8002e4c:	20000010 	.word	0x20000010
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_IncTick+0x20>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_IncTick+0x24>)
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000010 	.word	0x20000010
 8002e78:	20000588 	.word	0x20000588

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000588 	.word	0x20000588

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	; (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	; (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	; 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff feda 	bl	8002e7c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e099      	b.n	8003208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f4:	e00f      	b.n	8003116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f6:	f7ff fec1 	bl	8002e7c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b05      	cmp	r3, #5
 8003102:	d908      	bls.n	8003116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e078      	b.n	8003208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e8      	bne.n	80030f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_DMA_Init+0x158>)
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4313      	orrs	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d117      	bne.n	80031da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fa7b 	bl	80036b8 <DMA_CheckFifoParam>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d6:	2301      	movs	r3, #1
 80031d8:	e016      	b.n	8003208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa32 	bl	800364c <DMA_CalcBaseAndBitshift>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	f010803f 	.word	0xf010803f

08003214 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003222:	f7ff fe2b 	bl	8002e7c <HAL_GetTick>
 8003226:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d008      	beq.n	8003246 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e052      	b.n	80032ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0216 	bic.w	r2, r2, #22
 8003254:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003264:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_DMA_Abort+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0208 	bic.w	r2, r2, #8
 8003284:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003296:	e013      	b.n	80032c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003298:	f7ff fdf0 	bl	8002e7c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d90c      	bls.n	80032c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2203      	movs	r2, #3
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e015      	b.n	80032ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e4      	bne.n	8003298 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	223f      	movs	r2, #63	; 0x3f
 80032d4:	409a      	lsls	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00c      	b.n	800332c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2205      	movs	r2, #5
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003344:	4b8e      	ldr	r3, [pc, #568]	; (8003580 <HAL_DMA_IRQHandler+0x248>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a8e      	ldr	r2, [pc, #568]	; (8003584 <HAL_DMA_IRQHandler+0x24c>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	2208      	movs	r2, #8
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d01a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2208      	movs	r2, #8
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	2204      	movs	r2, #4
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2204      	movs	r2, #4
 80033fe:	409a      	lsls	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	2210      	movs	r2, #16
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d043      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d03c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2210      	movs	r2, #16
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d024      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
 8003466:	e01f      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e016      	b.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0208 	bic.w	r2, r2, #8
 8003496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	2220      	movs	r2, #32
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 808f 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8087 	beq.w	80035d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	2220      	movs	r2, #32
 80034d0:	409a      	lsls	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d136      	bne.n	8003550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0216 	bic.w	r2, r2, #22
 80034f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_DMA_IRQHandler+0x1da>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0208 	bic.w	r2, r2, #8
 8003520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	223f      	movs	r2, #63	; 0x3f
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	2b00      	cmp	r3, #0
 8003544:	d07e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
        }
        return;
 800354e:	e079      	b.n	8003644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01d      	beq.n	800359a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e02c      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
 800357e:	bf00      	nop
 8003580:	20000008 	.word	0x20000008
 8003584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d023      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e01e      	b.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0210 	bic.w	r2, r2, #16
 80035b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d032      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2205      	movs	r2, #5
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d307      	bcc.n	8003620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f2      	bne.n	8003604 <HAL_DMA_IRQHandler+0x2cc>
 800361e:	e000      	b.n	8003622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
 8003642:	e000      	b.n	8003646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003644:	bf00      	nop
    }
  }
}
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3b10      	subs	r3, #16
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <DMA_CalcBaseAndBitshift+0x64>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d909      	bls.n	800368e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	659a      	str	r2, [r3, #88]	; 0x58
 800368c:	e007      	b.n	800369e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	aaaaaaab 	.word	0xaaaaaaab
 80036b4:	0800c1ec 	.word	0x0800c1ec

080036b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11f      	bne.n	8003712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d856      	bhi.n	8003786 <DMA_CheckFifoParam+0xce>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <DMA_CheckFifoParam+0x28>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003703 	.word	0x08003703
 80036e8:	080036f1 	.word	0x080036f1
 80036ec:	08003787 	.word	0x08003787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d046      	beq.n	800378a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e043      	b.n	800378a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800370a:	d140      	bne.n	800378e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e03d      	b.n	800378e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d121      	bne.n	8003760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d837      	bhi.n	8003792 <DMA_CheckFifoParam+0xda>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <DMA_CheckFifoParam+0x70>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	0800373f 	.word	0x0800373f
 8003730:	08003739 	.word	0x08003739
 8003734:	08003751 	.word	0x08003751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e030      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d025      	beq.n	8003796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374e:	e022      	b.n	8003796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003758:	d11f      	bne.n	800379a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800375e:	e01c      	b.n	800379a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d903      	bls.n	800376e <DMA_CheckFifoParam+0xb6>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d003      	beq.n	8003774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800376c:	e018      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      break;
 8003772:	e015      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      break;
 8003784:	e00b      	b.n	800379e <DMA_CheckFifoParam+0xe6>
      break;
 8003786:	bf00      	nop
 8003788:	e00a      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378a:	bf00      	nop
 800378c:	e008      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
 8003790:	e006      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e004      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003796:	bf00      	nop
 8003798:	e002      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
    }
  } 
  
  return status; 
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop

080037b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e16b      	b.n	8003aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037cc:	2201      	movs	r2, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 815a 	bne.w	8003a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d130      	bne.n	8003864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	2203      	movs	r2, #3
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80b4 	beq.w	8003a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b60      	ldr	r3, [pc, #384]	; (8003abc <HAL_GPIO_Init+0x30c>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a5f      	ldr	r2, [pc, #380]	; (8003abc <HAL_GPIO_Init+0x30c>)
 8003940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b5d      	ldr	r3, [pc, #372]	; (8003abc <HAL_GPIO_Init+0x30c>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003952:	4a5b      	ldr	r2, [pc, #364]	; (8003ac0 <HAL_GPIO_Init+0x310>)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	220f      	movs	r2, #15
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_GPIO_Init+0x314>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02b      	beq.n	80039d6 <HAL_GPIO_Init+0x226>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a51      	ldr	r2, [pc, #324]	; (8003ac8 <HAL_GPIO_Init+0x318>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d025      	beq.n	80039d2 <HAL_GPIO_Init+0x222>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a50      	ldr	r2, [pc, #320]	; (8003acc <HAL_GPIO_Init+0x31c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <HAL_GPIO_Init+0x21e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4f      	ldr	r2, [pc, #316]	; (8003ad0 <HAL_GPIO_Init+0x320>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d019      	beq.n	80039ca <HAL_GPIO_Init+0x21a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4e      	ldr	r2, [pc, #312]	; (8003ad4 <HAL_GPIO_Init+0x324>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0x216>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4d      	ldr	r2, [pc, #308]	; (8003ad8 <HAL_GPIO_Init+0x328>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00d      	beq.n	80039c2 <HAL_GPIO_Init+0x212>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4c      	ldr	r2, [pc, #304]	; (8003adc <HAL_GPIO_Init+0x32c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <HAL_GPIO_Init+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4b      	ldr	r2, [pc, #300]	; (8003ae0 <HAL_GPIO_Init+0x330>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_GPIO_Init+0x20a>
 80039b6:	2307      	movs	r3, #7
 80039b8:	e00e      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039ba:	2308      	movs	r3, #8
 80039bc:	e00c      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039be:	2306      	movs	r3, #6
 80039c0:	e00a      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039c2:	2305      	movs	r3, #5
 80039c4:	e008      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039c6:	2304      	movs	r3, #4
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e004      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_GPIO_Init+0x228>
 80039d6:	2300      	movs	r3, #0
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	4093      	lsls	r3, r2
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e8:	4935      	ldr	r1, [pc, #212]	; (8003ac0 <HAL_GPIO_Init+0x310>)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039f6:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a1a:	4a32      	ldr	r2, [pc, #200]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a20:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a44:	4a27      	ldr	r2, [pc, #156]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <HAL_GPIO_Init+0x334>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	f67f ae90 	bls.w	80037cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3724      	adds	r7, #36	; 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	40020400 	.word	0x40020400
 8003acc:	40020800 	.word	0x40020800
 8003ad0:	40020c00 	.word	0x40020c00
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40021400 	.word	0x40021400
 8003adc:	40021800 	.word	0x40021800
 8003ae0:	40021c00 	.word	0x40021c00
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
 8003af4:	4613      	mov	r3, r2
 8003af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af8:	787b      	ldrb	r3, [r7, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b04:	e003      	b.n	8003b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	041a      	lsls	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e12b      	b.n	8003d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fb9e 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	; 0x24
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b80:	f001 fbfc 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a81      	ldr	r2, [pc, #516]	; (8003d90 <HAL_I2C_Init+0x274>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d807      	bhi.n	8003ba0 <HAL_I2C_Init+0x84>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_I2C_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bf94      	ite	ls
 8003b98:	2301      	movls	r3, #1
 8003b9a:	2300      	movhi	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e006      	b.n	8003bae <HAL_I2C_Init+0x92>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a7d      	ldr	r2, [pc, #500]	; (8003d98 <HAL_I2C_Init+0x27c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0e7      	b.n	8003d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a78      	ldr	r2, [pc, #480]	; (8003d9c <HAL_I2C_Init+0x280>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0c9b      	lsrs	r3, r3, #18
 8003bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a6a      	ldr	r2, [pc, #424]	; (8003d90 <HAL_I2C_Init+0x274>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d802      	bhi.n	8003bf0 <HAL_I2C_Init+0xd4>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3301      	adds	r3, #1
 8003bee:	e009      	b.n	8003c04 <HAL_I2C_Init+0xe8>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a69      	ldr	r2, [pc, #420]	; (8003da0 <HAL_I2C_Init+0x284>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	3301      	adds	r3, #1
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	495c      	ldr	r1, [pc, #368]	; (8003d90 <HAL_I2C_Init+0x274>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d819      	bhi.n	8003c58 <HAL_I2C_Init+0x13c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e59      	subs	r1, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c32:	1c59      	adds	r1, r3, #1
 8003c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c38:	400b      	ands	r3, r1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_I2C_Init+0x138>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e59      	subs	r1, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	e051      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003c54:	2304      	movs	r3, #4
 8003c56:	e04f      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <HAL_I2C_Init+0x168>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	e012      	b.n	8003caa <HAL_I2C_Init+0x18e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	0099      	lsls	r1, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Init+0x196>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e022      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <HAL_I2C_Init+0x1bc>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e58      	subs	r0, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	440b      	add	r3, r1
 8003cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Init+0x1dc>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	0099      	lsls	r1, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	6809      	ldr	r1, [r1, #0]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6911      	ldr	r1, [r2, #16]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68d2      	ldr	r2, [r2, #12]
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	000186a0 	.word	0x000186a0
 8003d94:	001e847f 	.word	0x001e847f
 8003d98:	003d08ff 	.word	0x003d08ff
 8003d9c:	431bde83 	.word	0x431bde83
 8003da0:	10624dd3 	.word	0x10624dd3

08003da4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dbe:	f7ff f85d 	bl	8002e7c <HAL_GetTick>
 8003dc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	f040 80d9 	bne.w	8003f84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2319      	movs	r3, #25
 8003dd8:	2201      	movs	r2, #1
 8003dda:	496d      	ldr	r1, [pc, #436]	; (8003f90 <HAL_I2C_Mem_Write+0x1ec>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fc7f 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0cc      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2C_Mem_Write+0x56>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0c5      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d007      	beq.n	8003e20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2221      	movs	r2, #33	; 0x21
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2240      	movs	r2, #64	; 0x40
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_I2C_Mem_Write+0x1f0>)
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e62:	88f8      	ldrh	r0, [r7, #6]
 8003e64:	893a      	ldrh	r2, [r7, #8]
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4603      	mov	r3, r0
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fab6 	bl	80043e4 <I2C_RequestMemoryWrite>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d052      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e081      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fd00 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_I2C_Mem_Write+0x180>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1aa      	bne.n	8003e82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fcec 	bl	800490e <I2C_WaitOnBTFFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d107      	bne.n	8003f54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e016      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	00100002 	.word	0x00100002
 8003f94:	ffff0000 	.word	0xffff0000

08003f98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	460b      	mov	r3, r1
 8003fac:	813b      	strh	r3, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb2:	f7fe ff63 	bl	8002e7c <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	f040 8208 	bne.w	80043d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2319      	movs	r3, #25
 8003fcc:	2201      	movs	r2, #1
 8003fce:	497b      	ldr	r1, [pc, #492]	; (80041bc <HAL_I2C_Mem_Read+0x224>)
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb85 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e1fb      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2C_Mem_Read+0x56>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e1f4      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d007      	beq.n	8004014 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	; 0x40
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a5b      	ldr	r2, [pc, #364]	; (80041c0 <HAL_I2C_Mem_Read+0x228>)
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004056:	88f8      	ldrh	r0, [r7, #6]
 8004058:	893a      	ldrh	r2, [r7, #8]
 800405a:	8979      	ldrh	r1, [r7, #10]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	4603      	mov	r3, r0
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa52 	bl	8004510 <I2C_RequestMemoryRead>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1b0      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e184      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11b      	bne.n	80040e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e164      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11b      	bne.n	8004126 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	e144      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800413c:	e138      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	2b03      	cmp	r3, #3
 8004144:	f200 80f1 	bhi.w	800432a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	2b01      	cmp	r3, #1
 800414e:	d123      	bne.n	8004198 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fc1b 	bl	8004990 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e139      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004196:	e10b      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b02      	cmp	r3, #2
 800419e:	d14e      	bne.n	800423e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	2200      	movs	r2, #0
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <HAL_I2C_Mem_Read+0x22c>)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa98 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e10e      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000
 80041c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800423c:	e0b8      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	4966      	ldr	r1, [pc, #408]	; (80043e0 <HAL_I2C_Mem_Read+0x448>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fa49 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0bf      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2200      	movs	r2, #0
 80042a2:	494f      	ldr	r1, [pc, #316]	; (80043e0 <HAL_I2C_Mem_Read+0x448>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fa1b 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e091      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004328:	e042      	b.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fb2e 	bl	8004990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04c      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d118      	bne.n	80043b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f aec2 	bne.w	800413e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	00010004 	.word	0x00010004

080043e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	460b      	mov	r3, r1
 80043f8:	813b      	strh	r3, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2200      	movs	r2, #0
 8004416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f960 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004434:	d103      	bne.n	800443e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e05f      	b.n	8004502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	492d      	ldr	r1, [pc, #180]	; (800450c <I2C_RequestMemoryWrite+0x128>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f998 	bl	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e04c      	b.n	8004502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	6a39      	ldr	r1, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa02 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b04      	cmp	r3, #4
 8004494:	d107      	bne.n	80044a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e02b      	b.n	8004502 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]
 80044ba:	e021      	b.n	8004500 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f9dc 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e005      	b.n	8004502 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	00010002 	.word	0x00010002

08004510 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4603      	mov	r3, r0
 8004520:	817b      	strh	r3, [r7, #10]
 8004522:	460b      	mov	r3, r1
 8004524:	813b      	strh	r3, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2200      	movs	r2, #0
 8004552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8c2 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004570:	d103      	bne.n	800457a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e0aa      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	4952      	ldr	r1, [pc, #328]	; (80046dc <I2C_RequestMemoryRead+0x1cc>)
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f8fa 	bl	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e097      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f964 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e076      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e021      	b.n	800463c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f93e 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b04      	cmp	r3, #4
 800461c:	d107      	bne.n	800462e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e050      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	6a39      	ldr	r1, [r7, #32]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f923 	bl	800488c <I2C_WaitOnTXEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b04      	cmp	r3, #4
 8004652:	d107      	bne.n	8004664 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e035      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004676:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2200      	movs	r2, #0
 8004680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f82b 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469e:	d103      	bne.n	80046a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e013      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	4906      	ldr	r1, [pc, #24]	; (80046dc <I2C_RequestMemoryRead+0x1cc>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f863 	bl	800478e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	00010002 	.word	0x00010002

080046e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f0:	e025      	b.n	800473e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d021      	beq.n	800473e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fe fbbf 	bl	8002e7c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d116      	bne.n	800473e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e023      	b.n	8004786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10d      	bne.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	e00c      	b.n	800477e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	43da      	mvns	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d0b6      	beq.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800479c:	e051      	b.n	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ac:	d123      	bne.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e046      	b.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d021      	beq.n	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fe fb3d 	bl	8002e7c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e020      	b.n	8004884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10c      	bne.n	8004866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	43da      	mvns	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	bf14      	ite	ne
 800485e:	2301      	movne	r3, #1
 8004860:	2300      	moveq	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e00b      	b.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d18d      	bne.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004898:	e02d      	b.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f8ce 	bl	8004a3c <I2C_IsAcknowledgeFailed>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e02d      	b.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d021      	beq.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fe fae3 	bl	8002e7c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d116      	bne.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e007      	b.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d1ca      	bne.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491a:	e02d      	b.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f88d 	bl	8004a3c <I2C_IsAcknowledgeFailed>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e02d      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d021      	beq.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004934:	f7fe faa2 	bl	8002e7c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d302      	bcc.n	800494a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d116      	bne.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	f043 0220 	orr.w	r2, r3, #32
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e007      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b04      	cmp	r3, #4
 8004984:	d1ca      	bne.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800499c:	e042      	b.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d119      	bne.n	80049e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e029      	b.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe fa4c 	bl	8002e7c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e007      	b.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d1b5      	bne.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d11b      	bne.n	8004a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f043 0204 	orr.w	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e267      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aba:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b85      	ldr	r3, [pc, #532]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b82      	ldr	r3, [pc, #520]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b7e      	ldr	r3, [pc, #504]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e242      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b76      	ldr	r3, [pc, #472]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b70      	ldr	r3, [pc, #448]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b6d      	ldr	r3, [pc, #436]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b69      	ldr	r3, [pc, #420]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a68      	ldr	r2, [pc, #416]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b66      	ldr	r3, [pc, #408]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe f992 	bl	8002e7c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe f98e 	bl	8002e7c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e207      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe f97e 	bl	8002e7c <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe f97a 	bl	8002e7c <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1f3      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b47      	ldr	r3, [pc, #284]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c7      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4937      	ldr	r1, [pc, #220]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe f933 	bl	8002e7c <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fe f92f 	bl	8002e7c <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1a8      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4925      	ldr	r1, [pc, #148]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fe f912 	bl	8002e7c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fe f90e 	bl	8002e7c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e187      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d036      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fe f8f2 	bl	8002e7c <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fe f8ee 	bl	8002e7c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e167      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
 8004cba:	e01b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe f8db 	bl	8002e7c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe f8d7 	bl	8002e7c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d907      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e150      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ea      	bne.n	8004cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8097 	beq.w	8004e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b7d      	ldr	r3, [pc, #500]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a7c      	ldr	r2, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b7a      	ldr	r3, [pc, #488]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b77      	ldr	r3, [pc, #476]	; (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b74      	ldr	r3, [pc, #464]	; (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a73      	ldr	r2, [pc, #460]	; (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fe f897 	bl	8002e7c <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fe f893 	bl	8002e7c <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e10c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2ea>
 8004d78:	4b64      	ldr	r3, [pc, #400]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a63      	ldr	r2, [pc, #396]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x30c>
 8004d8e:	4b5f      	ldr	r3, [pc, #380]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4a5e      	ldr	r2, [pc, #376]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9a:	4b5c      	ldr	r3, [pc, #368]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	4a5b      	ldr	r2, [pc, #364]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	; 0x70
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004da8:	4b58      	ldr	r3, [pc, #352]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a57      	ldr	r2, [pc, #348]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	4b55      	ldr	r3, [pc, #340]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fe f858 	bl	8002e7c <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fe f854 	bl	8002e7c <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0cb      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df4:	f7fe f842 	bl	8002e7c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fe f83e 	bl	8002e7c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0b5      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	4b3e      	ldr	r3, [pc, #248]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a38      	ldr	r2, [pc, #224]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a1 	beq.w	8004f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3a:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d05c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d141      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fe f812 	bl	8002e7c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fe f80e 	bl	8002e7c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e087      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	491b      	ldr	r1, [pc, #108]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd ffe7 	bl	8002e7c <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd ffe3 	bl	8002e7c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e05c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x416>
 8004ed0:	e054      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd ffd0 	bl	8002e7c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd ffcc 	bl	8002e7c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x444>
 8004efe:	e03d      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e038      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d028      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d121      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fd fefe 	bl	8002e7c <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fd fefa 	bl	8002e7c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fe5e 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	0800c1d4 	.word	0x0800c1d4
 8005150:	20000008 	.word	0x20000008
 8005154:	2000000c 	.word	0x2000000c

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b094      	sub	sp, #80	; 0x50
 800515e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	647b      	str	r3, [r7, #68]	; 0x44
 8005164:	2300      	movs	r3, #0
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	2300      	movs	r3, #0
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005170:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d00d      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x40>
 800517c:	2b08      	cmp	r3, #8
 800517e:	f200 80e1 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005186:	2b04      	cmp	r3, #4
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x3a>
 800518a:	e0db      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800518c:	4b73      	ldr	r3, [pc, #460]	; (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005190:	e0db      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005192:	4b73      	ldr	r3, [pc, #460]	; (8005360 <HAL_RCC_GetSysClockFreq+0x208>)
 8005194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005196:	e0d8      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005198:	4b6f      	ldr	r3, [pc, #444]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a2:	4b6d      	ldr	r3, [pc, #436]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d063      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	2200      	movs	r2, #0
 80051b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
 80051c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	f04f 0000 	mov.w	r0, #0
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	0159      	lsls	r1, r3, #5
 80051d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051dc:	0150      	lsls	r0, r2, #5
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4621      	mov	r1, r4
 80051e4:	1a51      	subs	r1, r2, r1
 80051e6:	6139      	str	r1, [r7, #16]
 80051e8:	4629      	mov	r1, r5
 80051ea:	eb63 0301 	sbc.w	r3, r3, r1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051fc:	4659      	mov	r1, fp
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005206:	4651      	mov	r1, sl
 8005208:	018a      	lsls	r2, r1, #6
 800520a:	4651      	mov	r1, sl
 800520c:	ebb2 0801 	subs.w	r8, r2, r1
 8005210:	4659      	mov	r1, fp
 8005212:	eb63 0901 	sbc.w	r9, r3, r1
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522a:	4690      	mov	r8, r2
 800522c:	4699      	mov	r9, r3
 800522e:	4623      	mov	r3, r4
 8005230:	eb18 0303 	adds.w	r3, r8, r3
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	462b      	mov	r3, r5
 8005238:	eb49 0303 	adc.w	r3, r9, r3
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524a:	4629      	mov	r1, r5
 800524c:	024b      	lsls	r3, r1, #9
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005254:	4621      	mov	r1, r4
 8005256:	024a      	lsls	r2, r1, #9
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525e:	2200      	movs	r2, #0
 8005260:	62bb      	str	r3, [r7, #40]	; 0x28
 8005262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005268:	f7fb fd1e 	bl	8000ca8 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005274:	e058      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b38      	ldr	r3, [pc, #224]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	4618      	mov	r0, r3
 8005280:	4611      	mov	r1, r2
 8005282:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
 800528c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	0159      	lsls	r1, r3, #5
 800529e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a2:	0150      	lsls	r0, r2, #5
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4641      	mov	r1, r8
 80052aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c8:	ebb2 040a 	subs.w	r4, r2, sl
 80052cc:	eb63 050b 	sbc.w	r5, r3, fp
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	00eb      	lsls	r3, r5, #3
 80052da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052de:	00e2      	lsls	r2, r4, #3
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	18e3      	adds	r3, r4, r3
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	464b      	mov	r3, r9
 80052ec:	eb45 0303 	adc.w	r3, r5, r3
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fe:	4629      	mov	r1, r5
 8005300:	028b      	lsls	r3, r1, #10
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005308:	4621      	mov	r1, r4
 800530a:	028a      	lsls	r2, r1, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	2200      	movs	r2, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	61fa      	str	r2, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	f7fb fcc4 	bl	8000ca8 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800534c:	4618      	mov	r0, r3
 800534e:	3750      	adds	r7, #80	; 0x50
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	; (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000008 	.word	0x20000008

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800c1e4 	.word	0x0800c1e4

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	0800c1e4 	.word	0x0800c1e4

080053cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e041      	b.n	8005462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd faa0 	bl	8002938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f000 fda4 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d001      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04e      	b.n	8005522 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a23      	ldr	r2, [pc, #140]	; (8005530 <HAL_TIM_Base_Start_IT+0xc4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d01d      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <HAL_TIM_Base_Start_IT+0xc8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_TIM_Base_Start_IT+0xcc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <HAL_TIM_Base_Start_IT+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1b      	ldr	r2, [pc, #108]	; (8005540 <HAL_TIM_Base_Start_IT+0xd4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a19      	ldr	r2, [pc, #100]	; (8005544 <HAL_TIM_Base_Start_IT+0xd8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d111      	bne.n	8005510 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d010      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	e007      	b.n	8005520 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40001800 	.word	0x40001800

0800554c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e041      	b.n	80055e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd f9be 	bl	80028f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fce4 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_TIM_PWM_Start+0x24>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	bf14      	ite	ne
 8005608:	2301      	movne	r3, #1
 800560a:	2300      	moveq	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	e022      	b.n	8005656 <HAL_TIM_PWM_Start+0x6a>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b04      	cmp	r3, #4
 8005614:	d109      	bne.n	800562a <HAL_TIM_PWM_Start+0x3e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	bf14      	ite	ne
 8005622:	2301      	movne	r3, #1
 8005624:	2300      	moveq	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	e015      	b.n	8005656 <HAL_TIM_PWM_Start+0x6a>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d109      	bne.n	8005644 <HAL_TIM_PWM_Start+0x58>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e008      	b.n	8005656 <HAL_TIM_PWM_Start+0x6a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e07c      	b.n	8005758 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0x82>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566c:	e013      	b.n	8005696 <HAL_TIM_PWM_Start+0xaa>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b04      	cmp	r3, #4
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0x92>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567c:	e00b      	b.n	8005696 <HAL_TIM_PWM_Start+0xaa>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568c:	e003      	b.n	8005696 <HAL_TIM_PWM_Start+0xaa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 ff44 	bl	800652c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <HAL_TIM_PWM_Start+0x174>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_PWM_Start+0xcc>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2c      	ldr	r2, [pc, #176]	; (8005764 <HAL_TIM_PWM_Start+0x178>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_TIM_PWM_Start+0xd0>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_TIM_PWM_Start+0xd2>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_TIM_PWM_Start+0x174>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d01d      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1f      	ldr	r2, [pc, #124]	; (8005768 <HAL_TIM_PWM_Start+0x17c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1d      	ldr	r2, [pc, #116]	; (800576c <HAL_TIM_PWM_Start+0x180>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <HAL_TIM_PWM_Start+0x184>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_TIM_PWM_Start+0x178>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <HAL_TIM_PWM_Start+0x188>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIM_PWM_Start+0x136>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	; (8005778 <HAL_TIM_PWM_Start+0x18c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d111      	bne.n	8005746 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d010      	beq.n	8005756 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	e007      	b.n	8005756 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40010000 	.word	0x40010000
 8005764:	40010400 	.word	0x40010400
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40014000 	.word	0x40014000
 8005778:	40001800 	.word	0x40001800

0800577c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e097      	b.n	80058c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7fd f827 	bl	80027f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f000 fbc1 	bl	8005f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	4313      	orrs	r3, r2
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800581c:	f023 030c 	bic.w	r3, r3, #12
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	4313      	orrs	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	031b      	lsls	r3, r3, #12
 800584c:	4313      	orrs	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4313      	orrs	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d110      	bne.n	800591a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d102      	bne.n	8005904 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058fe:	7b7b      	ldrb	r3, [r7, #13]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e069      	b.n	80059dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005918:	e031      	b.n	800597e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d110      	bne.n	8005942 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d102      	bne.n	800592c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005926:	7b3b      	ldrb	r3, [r7, #12]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e055      	b.n	80059dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005940:	e01d      	b.n	800597e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d108      	bne.n	800595a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	7b7b      	ldrb	r3, [r7, #13]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005954:	7b3b      	ldrb	r3, [r7, #12]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d001      	beq.n	800595e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e03e      	b.n	80059dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_Encoder_Start+0xc4>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d008      	beq.n	800599c <HAL_TIM_Encoder_Start+0xd4>
 800598a:	e00f      	b.n	80059ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fdc9 	bl	800652c <TIM_CCxChannelCmd>
      break;
 800599a:	e016      	b.n	80059ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	2104      	movs	r1, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fdc1 	bl	800652c <TIM_CCxChannelCmd>
      break;
 80059aa:	e00e      	b.n	80059ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fdb9 	bl	800652c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	2104      	movs	r1, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fdb2 	bl	800652c <TIM_CCxChannelCmd>
      break;
 80059c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0202 	mvn.w	r2, #2
 8005a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa77 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa69 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa7a 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0204 	mvn.w	r2, #4
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa4d 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa3f 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa50 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d122      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d11b      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0208 	mvn.w	r2, #8
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fa23 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa15 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fa26 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d122      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d11b      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0210 	mvn.w	r2, #16
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2208      	movs	r2, #8
 8005b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9f9 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f9eb 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f9fc 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0201 	mvn.w	r2, #1
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb fd54 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd78 	bl	8006684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9c1 	bl	8005f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0220 	mvn.w	r2, #32
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fd42 	bl	8006670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e0ae      	b.n	8005d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	f200 809f 	bhi.w	8005d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c5d 	.word	0x08005c5d
 8005c2c:	08005d61 	.word	0x08005d61
 8005c30:	08005d61 	.word	0x08005d61
 8005c34:	08005d61 	.word	0x08005d61
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005d61 	.word	0x08005d61
 8005c40:	08005d61 	.word	0x08005d61
 8005c44:	08005d61 	.word	0x08005d61
 8005c48:	08005cdf 	.word	0x08005cdf
 8005c4c:	08005d61 	.word	0x08005d61
 8005c50:	08005d61 	.word	0x08005d61
 8005c54:	08005d61 	.word	0x08005d61
 8005c58:	08005d1f 	.word	0x08005d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fa18 	bl	8006098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0208 	orr.w	r2, r2, #8
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0204 	bic.w	r2, r2, #4
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
      break;
 8005c9a:	e064      	b.n	8005d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa68 	bl	8006178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	021a      	lsls	r2, r3, #8
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
      break;
 8005cdc:	e043      	b.n	8005d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fabd 	bl	8006264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0208 	orr.w	r2, r2, #8
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0204 	bic.w	r2, r2, #4
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	61da      	str	r2, [r3, #28]
      break;
 8005d1c:	e023      	b.n	8005d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb11 	bl	800634c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	61da      	str	r2, [r3, #28]
      break;
 8005d5e:	e002      	b.n	8005d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
      break;
 8005d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_ConfigClockSource+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0b4      	b.n	8005efe <HAL_TIM_ConfigClockSource+0x186>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dcc:	d03e      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0xd4>
 8005dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd2:	f200 8087 	bhi.w	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dda:	f000 8086 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x172>
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d87f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de4:	2b70      	cmp	r3, #112	; 0x70
 8005de6:	d01a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0xa6>
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d87b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dec:	2b60      	cmp	r3, #96	; 0x60
 8005dee:	d050      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x11a>
 8005df0:	2b60      	cmp	r3, #96	; 0x60
 8005df2:	d877      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b50      	cmp	r3, #80	; 0x50
 8005df6:	d03c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0xfa>
 8005df8:	2b50      	cmp	r3, #80	; 0x50
 8005dfa:	d873      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d058      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d86f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b30      	cmp	r3, #48	; 0x30
 8005e06:	d064      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d86b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d060      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d867      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05c      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d05a      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	e062      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f000 fb5d 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]
      break;
 8005e4a:	e04f      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6899      	ldr	r1, [r3, #8]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f000 fb46 	bl	80064ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e6e:	609a      	str	r2, [r3, #8]
      break;
 8005e70:	e03c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 faba 	bl	80063f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2150      	movs	r1, #80	; 0x50
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fb13 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005e90:	e02c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 fad9 	bl	8006456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2160      	movs	r1, #96	; 0x60
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fb03 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e01c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 fa9a 	bl	80063f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2140      	movs	r1, #64	; 0x40
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 faf3 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e00c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f000 faea 	bl	80064b6 <TIM_ITRx_SetConfig>
      break;
 8005ee2:	e003      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e000      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d02b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d027      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d023      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a25      	ldr	r2, [pc, #148]	; (800608c <TIM_Base_SetConfig+0x134>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a24      	ldr	r2, [pc, #144]	; (8006090 <TIM_Base_SetConfig+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a23      	ldr	r2, [pc, #140]	; (8006094 <TIM_Base_SetConfig+0x13c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800
 800608c:	40001800 	.word	0x40001800
 8006090:	40001c00 	.word	0x40001c00
 8006094:	40002000 	.word	0x40002000

08006098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f023 0201 	bic.w	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 0302 	bic.w	r3, r3, #2
 80060e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a20      	ldr	r2, [pc, #128]	; (8006170 <TIM_OC1_SetConfig+0xd8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC1_SetConfig+0x64>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <TIM_OC1_SetConfig+0xdc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d10c      	bne.n	8006116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f023 0308 	bic.w	r3, r3, #8
 8006102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 0304 	bic.w	r3, r3, #4
 8006114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a15      	ldr	r2, [pc, #84]	; (8006170 <TIM_OC1_SetConfig+0xd8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC1_SetConfig+0x8e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a14      	ldr	r2, [pc, #80]	; (8006174 <TIM_OC1_SetConfig+0xdc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d111      	bne.n	800614a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40010000 	.word	0x40010000
 8006174:	40010400 	.word	0x40010400

08006178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f023 0210 	bic.w	r2, r3, #16
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0320 	bic.w	r3, r3, #32
 80061c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a22      	ldr	r2, [pc, #136]	; (800625c <TIM_OC2_SetConfig+0xe4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC2_SetConfig+0x68>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a21      	ldr	r2, [pc, #132]	; (8006260 <TIM_OC2_SetConfig+0xe8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10d      	bne.n	80061fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <TIM_OC2_SetConfig+0xe4>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d003      	beq.n	800620c <TIM_OC2_SetConfig+0x94>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <TIM_OC2_SetConfig+0xe8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d113      	bne.n	8006234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40010400 	.word	0x40010400

08006264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a21      	ldr	r2, [pc, #132]	; (8006344 <TIM_OC3_SetConfig+0xe0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_OC3_SetConfig+0x66>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a20      	ldr	r2, [pc, #128]	; (8006348 <TIM_OC3_SetConfig+0xe4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d10d      	bne.n	80062e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a16      	ldr	r2, [pc, #88]	; (8006344 <TIM_OC3_SetConfig+0xe0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC3_SetConfig+0x92>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a15      	ldr	r2, [pc, #84]	; (8006348 <TIM_OC3_SetConfig+0xe4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d113      	bne.n	800631e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a12      	ldr	r2, [pc, #72]	; (80063f0 <TIM_OC4_SetConfig+0xa4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC4_SetConfig+0x68>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a11      	ldr	r2, [pc, #68]	; (80063f4 <TIM_OC4_SetConfig+0xa8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d109      	bne.n	80063c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40010400 	.word	0x40010400

080063f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	f023 0201 	bic.w	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f023 030a 	bic.w	r3, r3, #10
 8006434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006456:	b480      	push	{r7}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0210 	bic.w	r2, r3, #16
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f043 0307 	orr.w	r3, r3, #7
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	431a      	orrs	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4313      	orrs	r3, r2
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2201      	movs	r2, #1
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1a      	ldr	r2, [r3, #32]
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	43db      	mvns	r3, r3
 800654e:	401a      	ands	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	fa01 f303 	lsl.w	r3, r1, r3
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800658c:	2302      	movs	r3, #2
 800658e:	e05a      	b.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a21      	ldr	r2, [pc, #132]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d022      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065dc:	d01d      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d018      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1b      	ldr	r2, [pc, #108]	; (800665c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a18      	ldr	r2, [pc, #96]	; (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10c      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4313      	orrs	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40010400 	.word	0x40010400
 8006668:	40014000 	.word	0x40014000
 800666c:	40001800 	.word	0x40001800

08006670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e03f      	b.n	800672a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fc f9f0 	bl	8002aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2224      	movs	r2, #36	; 0x24
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fddf 	bl	80072a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b08a      	sub	sp, #40	; 0x28
 8006736:	af02      	add	r7, sp, #8
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b20      	cmp	r3, #32
 8006750:	d17c      	bne.n	800684c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_UART_Transmit+0x2c>
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e075      	b.n	800684e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_UART_Transmit+0x3e>
 800676c:	2302      	movs	r3, #2
 800676e:	e06e      	b.n	800684e <HAL_UART_Transmit+0x11c>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2221      	movs	r2, #33	; 0x21
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006786:	f7fc fb79 	bl	8002e7c <HAL_GetTick>
 800678a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a0:	d108      	bne.n	80067b4 <HAL_UART_Transmit+0x82>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	e003      	b.n	80067bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067c4:	e02a      	b.n	800681c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fb1f 	bl	8006e14 <UART_WaitOnFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e036      	b.n	800684e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	3302      	adds	r3, #2
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	e007      	b.n	800680e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1cf      	bne.n	80067c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2140      	movs	r1, #64	; 0x40
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 faef 	bl	8006e14 <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e006      	b.n	800684e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	4613      	mov	r3, r2
 8006862:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b20      	cmp	r3, #32
 800686e:	d11d      	bne.n	80068ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_UART_Receive_IT+0x26>
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e016      	b.n	80068ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Receive_IT+0x38>
 800688a:	2302      	movs	r3, #2
 800688c:	e00f      	b.n	80068ae <HAL_UART_Receive_IT+0x58>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	461a      	mov	r2, r3
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fb24 	bl	8006ef0 <UART_Start_Receive_IT>
 80068a8:	4603      	mov	r3, r0
 80068aa:	e000      	b.n	80068ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0ba      	sub	sp, #232	; 0xe8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068de:	2300      	movs	r3, #0
 80068e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_UART_IRQHandler+0x66>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fc07 	bl	800712a <UART_Receive_IT>
      return;
 800691c:	e256      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80de 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x22c>
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80d1 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <HAL_UART_IRQHandler+0xae>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_UART_IRQHandler+0xd2>
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f043 0202 	orr.w	r2, r3, #2
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <HAL_UART_IRQHandler+0xf6>
 8006996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <HAL_UART_IRQHandler+0x126>
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d105      	bne.n	80069d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 81ed 	beq.w	8006dc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_UART_IRQHandler+0x14e>
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb92 	bl	800712a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <HAL_UART_IRQHandler+0x17a>
 8006a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04f      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa9a 	bl	8006f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d141      	bne.n	8006aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1d9      	bne.n	8006a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d013      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	4a7d      	ldr	r2, [pc, #500]	; (8006c94 <HAL_UART_IRQHandler+0x3dc>)
 8006aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fc fc24 	bl	80032f4 <HAL_DMA_Abort_IT>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e00e      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f990 	bl	8006de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	e00a      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f98c 	bl	8006de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e006      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f988 	bl	8006de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ade:	e170      	b.n	8006dc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	bf00      	nop
    return;
 8006ae2:	e16e      	b.n	8006dc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	f040 814a 	bne.w	8006d82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8143 	beq.w	8006d82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 813c 	beq.w	8006d82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	f040 80b4 	bne.w	8006c98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8140 	beq.w	8006dc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	f080 8139 	bcs.w	8006dc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b66:	f000 8088 	beq.w	8006c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1d9      	bne.n	8006b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e1      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e3      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e3      	bne.n	8006c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fc facd 	bl	8003214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f8b6 	bl	8006dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c90:	e099      	b.n	8006dc6 <HAL_UART_IRQHandler+0x50e>
 8006c92:	bf00      	nop
 8006c94:	08007033 	.word	0x08007033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 808b 	beq.w	8006dca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8086 	beq.w	8006dca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e3      	bne.n	8006cbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	623b      	str	r3, [r7, #32]
   return(result);
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e3      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0310 	bic.w	r3, r3, #16
 8006d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	69b9      	ldr	r1, [r7, #24]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e3      	bne.n	8006d3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f83e 	bl	8006dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d80:	e023      	b.n	8006dca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_UART_IRQHandler+0x4ea>
 8006d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f95d 	bl	800705a <UART_Transmit_IT>
    return;
 8006da0:	e014      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00e      	beq.n	8006dcc <HAL_UART_IRQHandler+0x514>
 8006dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f99d 	bl	80070fa <UART_EndTransmit_IT>
    return;
 8006dc0:	e004      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
    return;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
      return;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
      return;
 8006dca:	bf00      	nop
  }
}
 8006dcc:	37e8      	adds	r7, #232	; 0xe8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop

08006dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b090      	sub	sp, #64	; 0x40
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e24:	e050      	b.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d04c      	beq.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e34:	f7fc f822 	bl	8002e7c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d241      	bcs.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e64:	637a      	str	r2, [r7, #52]	; 0x34
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e00f      	b.n	8006ee8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d09f      	beq.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3740      	adds	r7, #64	; 0x40
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	88fa      	ldrh	r2, [r7, #6]
 8006f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2222      	movs	r2, #34	; 0x22
 8006f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0220 	orr.w	r2, r2, #32
 8006f5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b095      	sub	sp, #84	; 0x54
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f94:	643a      	str	r2, [r7, #64]	; 0x40
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e5      	bne.n	8006fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d119      	bne.n	8007018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007004:	61ba      	str	r2, [r7, #24]
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007026:	bf00      	nop
 8007028:	3754      	adds	r7, #84	; 0x54
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fecb 	bl	8006de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b21      	cmp	r3, #33	; 0x21
 800706c:	d13e      	bne.n	80070ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	d114      	bne.n	80070a2 <UART_Transmit_IT+0x48>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d110      	bne.n	80070a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	621a      	str	r2, [r3, #32]
 80070a0:	e008      	b.n	80070b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6211      	str	r1, [r2, #32]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29b      	uxth	r3, r3
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4619      	mov	r1, r3
 80070c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10f      	bne.n	80070e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fe5a 	bl	8006dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b22      	cmp	r3, #34	; 0x22
 800713c:	f040 80ab 	bne.w	8007296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d117      	bne.n	800717a <UART_Receive_IT+0x50>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d113      	bne.n	800717a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	b29a      	uxth	r2, r3
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
 8007178:	e026      	b.n	80071c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718c:	d007      	beq.n	800719e <UART_Receive_IT+0x74>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <UART_Receive_IT+0x82>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e008      	b.n	80071be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4619      	mov	r1, r3
 80071d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d15a      	bne.n	8007292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0220 	bic.w	r2, r2, #32
 80071ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0201 	bic.w	r2, r2, #1
 800720a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	2b01      	cmp	r3, #1
 800721a:	d135      	bne.n	8007288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	613b      	str	r3, [r7, #16]
   return(result);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 0310 	bic.w	r3, r3, #16
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007242:	623a      	str	r2, [r7, #32]
 8007244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	69f9      	ldr	r1, [r7, #28]
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b10      	cmp	r3, #16
 8007262:	d10a      	bne.n	800727a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fdbb 	bl	8006dfc <HAL_UARTEx_RxEventCallback>
 8007286:	e002      	b.n	800728e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fa f913 	bl	80014b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e002      	b.n	8007298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a4:	b0c0      	sub	sp, #256	; 0x100
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072bc:	68d9      	ldr	r1, [r3, #12]
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	ea40 0301 	orr.w	r3, r0, r1
 80072c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	431a      	orrs	r2, r3
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072f8:	f021 010c 	bic.w	r1, r1, #12
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007306:	430b      	orrs	r3, r1
 8007308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	6999      	ldr	r1, [r3, #24]
 800731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	ea40 0301 	orr.w	r3, r0, r1
 8007326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4b8f      	ldr	r3, [pc, #572]	; (800756c <UART_SetConfig+0x2cc>)
 8007330:	429a      	cmp	r2, r3
 8007332:	d005      	beq.n	8007340 <UART_SetConfig+0xa0>
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b8d      	ldr	r3, [pc, #564]	; (8007570 <UART_SetConfig+0x2d0>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d104      	bne.n	800734a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007340:	f7fe f830 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 8007344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007348:	e003      	b.n	8007352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800734a:	f7fe f817 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 800734e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735c:	f040 810c 	bne.w	8007578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007364:	2200      	movs	r2, #0
 8007366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800736a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800736e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	1891      	adds	r1, r2, r2
 8007378:	65b9      	str	r1, [r7, #88]	; 0x58
 800737a:	415b      	adcs	r3, r3
 800737c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800737e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007382:	4621      	mov	r1, r4
 8007384:	eb12 0801 	adds.w	r8, r2, r1
 8007388:	4629      	mov	r1, r5
 800738a:	eb43 0901 	adc.w	r9, r3, r1
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800739a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800739e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073a2:	4690      	mov	r8, r2
 80073a4:	4699      	mov	r9, r3
 80073a6:	4623      	mov	r3, r4
 80073a8:	eb18 0303 	adds.w	r3, r8, r3
 80073ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073b0:	462b      	mov	r3, r5
 80073b2:	eb49 0303 	adc.w	r3, r9, r3
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073ce:	460b      	mov	r3, r1
 80073d0:	18db      	adds	r3, r3, r3
 80073d2:	653b      	str	r3, [r7, #80]	; 0x50
 80073d4:	4613      	mov	r3, r2
 80073d6:	eb42 0303 	adc.w	r3, r2, r3
 80073da:	657b      	str	r3, [r7, #84]	; 0x54
 80073dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073e4:	f7f9 fc60 	bl	8000ca8 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4b61      	ldr	r3, [pc, #388]	; (8007574 <UART_SetConfig+0x2d4>)
 80073ee:	fba3 2302 	umull	r2, r3, r3, r2
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	011c      	lsls	r4, r3, #4
 80073f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	1891      	adds	r1, r2, r2
 800740e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007410:	415b      	adcs	r3, r3
 8007412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007418:	4641      	mov	r1, r8
 800741a:	eb12 0a01 	adds.w	sl, r2, r1
 800741e:	4649      	mov	r1, r9
 8007420:	eb43 0b01 	adc.w	fp, r3, r1
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007438:	4692      	mov	sl, r2
 800743a:	469b      	mov	fp, r3
 800743c:	4643      	mov	r3, r8
 800743e:	eb1a 0303 	adds.w	r3, sl, r3
 8007442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007446:	464b      	mov	r3, r9
 8007448:	eb4b 0303 	adc.w	r3, fp, r3
 800744c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800745c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007464:	460b      	mov	r3, r1
 8007466:	18db      	adds	r3, r3, r3
 8007468:	643b      	str	r3, [r7, #64]	; 0x40
 800746a:	4613      	mov	r3, r2
 800746c:	eb42 0303 	adc.w	r3, r2, r3
 8007470:	647b      	str	r3, [r7, #68]	; 0x44
 8007472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800747a:	f7f9 fc15 	bl	8000ca8 <__aeabi_uldivmod>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4611      	mov	r1, r2
 8007484:	4b3b      	ldr	r3, [pc, #236]	; (8007574 <UART_SetConfig+0x2d4>)
 8007486:	fba3 2301 	umull	r2, r3, r3, r1
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	2264      	movs	r2, #100	; 0x64
 800748e:	fb02 f303 	mul.w	r3, r2, r3
 8007492:	1acb      	subs	r3, r1, r3
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800749a:	4b36      	ldr	r3, [pc, #216]	; (8007574 <UART_SetConfig+0x2d4>)
 800749c:	fba3 2302 	umull	r2, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074a8:	441c      	add	r4, r3
 80074aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	1891      	adds	r1, r2, r2
 80074c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074c4:	415b      	adcs	r3, r3
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074cc:	4641      	mov	r1, r8
 80074ce:	1851      	adds	r1, r2, r1
 80074d0:	6339      	str	r1, [r7, #48]	; 0x30
 80074d2:	4649      	mov	r1, r9
 80074d4:	414b      	adcs	r3, r1
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074e4:	4659      	mov	r1, fp
 80074e6:	00cb      	lsls	r3, r1, #3
 80074e8:	4651      	mov	r1, sl
 80074ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ee:	4651      	mov	r1, sl
 80074f0:	00ca      	lsls	r2, r1, #3
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	4642      	mov	r2, r8
 80074fa:	189b      	adds	r3, r3, r2
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007500:	464b      	mov	r3, r9
 8007502:	460a      	mov	r2, r1
 8007504:	eb42 0303 	adc.w	r3, r2, r3
 8007508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800751c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007520:	460b      	mov	r3, r1
 8007522:	18db      	adds	r3, r3, r3
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
 8007526:	4613      	mov	r3, r2
 8007528:	eb42 0303 	adc.w	r3, r2, r3
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007536:	f7f9 fbb7 	bl	8000ca8 <__aeabi_uldivmod>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <UART_SetConfig+0x2d4>)
 8007540:	fba3 1302 	umull	r1, r3, r3, r2
 8007544:	095b      	lsrs	r3, r3, #5
 8007546:	2164      	movs	r1, #100	; 0x64
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3332      	adds	r3, #50	; 0x32
 8007552:	4a08      	ldr	r2, [pc, #32]	; (8007574 <UART_SetConfig+0x2d4>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	f003 0207 	and.w	r2, r3, #7
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4422      	add	r2, r4
 8007566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007568:	e106      	b.n	8007778 <UART_SetConfig+0x4d8>
 800756a:	bf00      	nop
 800756c:	40011000 	.word	0x40011000
 8007570:	40011400 	.word	0x40011400
 8007574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757c:	2200      	movs	r2, #0
 800757e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800758a:	4642      	mov	r2, r8
 800758c:	464b      	mov	r3, r9
 800758e:	1891      	adds	r1, r2, r2
 8007590:	6239      	str	r1, [r7, #32]
 8007592:	415b      	adcs	r3, r3
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
 8007596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800759a:	4641      	mov	r1, r8
 800759c:	1854      	adds	r4, r2, r1
 800759e:	4649      	mov	r1, r9
 80075a0:	eb43 0501 	adc.w	r5, r3, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	00eb      	lsls	r3, r5, #3
 80075ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075b2:	00e2      	lsls	r2, r4, #3
 80075b4:	4614      	mov	r4, r2
 80075b6:	461d      	mov	r5, r3
 80075b8:	4643      	mov	r3, r8
 80075ba:	18e3      	adds	r3, r4, r3
 80075bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075c0:	464b      	mov	r3, r9
 80075c2:	eb45 0303 	adc.w	r3, r5, r3
 80075c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	f04f 0300 	mov.w	r3, #0
 80075e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075e6:	4629      	mov	r1, r5
 80075e8:	008b      	lsls	r3, r1, #2
 80075ea:	4621      	mov	r1, r4
 80075ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f0:	4621      	mov	r1, r4
 80075f2:	008a      	lsls	r2, r1, #2
 80075f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075f8:	f7f9 fb56 	bl	8000ca8 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4b60      	ldr	r3, [pc, #384]	; (8007784 <UART_SetConfig+0x4e4>)
 8007602:	fba3 2302 	umull	r2, r3, r3, r2
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	011c      	lsls	r4, r3, #4
 800760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760e:	2200      	movs	r2, #0
 8007610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800761c:	4642      	mov	r2, r8
 800761e:	464b      	mov	r3, r9
 8007620:	1891      	adds	r1, r2, r2
 8007622:	61b9      	str	r1, [r7, #24]
 8007624:	415b      	adcs	r3, r3
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800762c:	4641      	mov	r1, r8
 800762e:	1851      	adds	r1, r2, r1
 8007630:	6139      	str	r1, [r7, #16]
 8007632:	4649      	mov	r1, r9
 8007634:	414b      	adcs	r3, r1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007644:	4659      	mov	r1, fp
 8007646:	00cb      	lsls	r3, r1, #3
 8007648:	4651      	mov	r1, sl
 800764a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800764e:	4651      	mov	r1, sl
 8007650:	00ca      	lsls	r2, r1, #3
 8007652:	4610      	mov	r0, r2
 8007654:	4619      	mov	r1, r3
 8007656:	4603      	mov	r3, r0
 8007658:	4642      	mov	r2, r8
 800765a:	189b      	adds	r3, r3, r2
 800765c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007660:	464b      	mov	r3, r9
 8007662:	460a      	mov	r2, r1
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	67bb      	str	r3, [r7, #120]	; 0x78
 8007676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007684:	4649      	mov	r1, r9
 8007686:	008b      	lsls	r3, r1, #2
 8007688:	4641      	mov	r1, r8
 800768a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800768e:	4641      	mov	r1, r8
 8007690:	008a      	lsls	r2, r1, #2
 8007692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007696:	f7f9 fb07 	bl	8000ca8 <__aeabi_uldivmod>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	4b38      	ldr	r3, [pc, #224]	; (8007784 <UART_SetConfig+0x4e4>)
 80076a2:	fba3 2301 	umull	r2, r3, r3, r1
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	2264      	movs	r2, #100	; 0x64
 80076aa:	fb02 f303 	mul.w	r3, r2, r3
 80076ae:	1acb      	subs	r3, r1, r3
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	3332      	adds	r3, #50	; 0x32
 80076b4:	4a33      	ldr	r2, [pc, #204]	; (8007784 <UART_SetConfig+0x4e4>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076c0:	441c      	add	r4, r3
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c6:	2200      	movs	r2, #0
 80076c8:	673b      	str	r3, [r7, #112]	; 0x70
 80076ca:	677a      	str	r2, [r7, #116]	; 0x74
 80076cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	1891      	adds	r1, r2, r2
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	415b      	adcs	r3, r3
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076e0:	4641      	mov	r1, r8
 80076e2:	1851      	adds	r1, r2, r1
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	4649      	mov	r1, r9
 80076e8:	414b      	adcs	r3, r1
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	f04f 0200 	mov.w	r2, #0
 80076f0:	f04f 0300 	mov.w	r3, #0
 80076f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076f8:	4659      	mov	r1, fp
 80076fa:	00cb      	lsls	r3, r1, #3
 80076fc:	4651      	mov	r1, sl
 80076fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007702:	4651      	mov	r1, sl
 8007704:	00ca      	lsls	r2, r1, #3
 8007706:	4610      	mov	r0, r2
 8007708:	4619      	mov	r1, r3
 800770a:	4603      	mov	r3, r0
 800770c:	4642      	mov	r2, r8
 800770e:	189b      	adds	r3, r3, r2
 8007710:	66bb      	str	r3, [r7, #104]	; 0x68
 8007712:	464b      	mov	r3, r9
 8007714:	460a      	mov	r2, r1
 8007716:	eb42 0303 	adc.w	r3, r2, r3
 800771a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	663b      	str	r3, [r7, #96]	; 0x60
 8007726:	667a      	str	r2, [r7, #100]	; 0x64
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007734:	4649      	mov	r1, r9
 8007736:	008b      	lsls	r3, r1, #2
 8007738:	4641      	mov	r1, r8
 800773a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800773e:	4641      	mov	r1, r8
 8007740:	008a      	lsls	r2, r1, #2
 8007742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007746:	f7f9 faaf 	bl	8000ca8 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <UART_SetConfig+0x4e4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a08      	ldr	r2, [pc, #32]	; (8007784 <UART_SetConfig+0x4e4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 020f 	and.w	r2, r3, #15
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4422      	add	r2, r4
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800777e:	46bd      	mov	sp, r7
 8007780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007784:	51eb851f 	.word	0x51eb851f

08007788 <atoi>:
 8007788:	220a      	movs	r2, #10
 800778a:	2100      	movs	r1, #0
 800778c:	f000 b940 	b.w	8007a10 <strtol>

08007790 <malloc>:
 8007790:	4b02      	ldr	r3, [pc, #8]	; (800779c <malloc+0xc>)
 8007792:	4601      	mov	r1, r0
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	f000 b82b 	b.w	80077f0 <_malloc_r>
 800779a:	bf00      	nop
 800779c:	2000006c 	.word	0x2000006c

080077a0 <free>:
 80077a0:	4b02      	ldr	r3, [pc, #8]	; (80077ac <free+0xc>)
 80077a2:	4601      	mov	r1, r0
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f002 b805 	b.w	80097b4 <_free_r>
 80077aa:	bf00      	nop
 80077ac:	2000006c 	.word	0x2000006c

080077b0 <sbrk_aligned>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4e0e      	ldr	r6, [pc, #56]	; (80077ec <sbrk_aligned+0x3c>)
 80077b4:	460c      	mov	r4, r1
 80077b6:	6831      	ldr	r1, [r6, #0]
 80077b8:	4605      	mov	r5, r0
 80077ba:	b911      	cbnz	r1, 80077c2 <sbrk_aligned+0x12>
 80077bc:	f001 f920 	bl	8008a00 <_sbrk_r>
 80077c0:	6030      	str	r0, [r6, #0]
 80077c2:	4621      	mov	r1, r4
 80077c4:	4628      	mov	r0, r5
 80077c6:	f001 f91b 	bl	8008a00 <_sbrk_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d00a      	beq.n	80077e4 <sbrk_aligned+0x34>
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d007      	beq.n	80077e8 <sbrk_aligned+0x38>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4628      	mov	r0, r5
 80077dc:	f001 f910 	bl	8008a00 <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d101      	bne.n	80077e8 <sbrk_aligned+0x38>
 80077e4:	f04f 34ff 	mov.w	r4, #4294967295
 80077e8:	4620      	mov	r0, r4
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	20000590 	.word	0x20000590

080077f0 <_malloc_r>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4607      	mov	r7, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d905      	bls.n	8007818 <_malloc_r+0x28>
 800780c:	230c      	movs	r3, #12
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	2600      	movs	r6, #0
 8007812:	4630      	mov	r0, r6
 8007814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007818:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078ec <_malloc_r+0xfc>
 800781c:	f000 f868 	bl	80078f0 <__malloc_lock>
 8007820:	f8d8 3000 	ldr.w	r3, [r8]
 8007824:	461c      	mov	r4, r3
 8007826:	bb5c      	cbnz	r4, 8007880 <_malloc_r+0x90>
 8007828:	4629      	mov	r1, r5
 800782a:	4638      	mov	r0, r7
 800782c:	f7ff ffc0 	bl	80077b0 <sbrk_aligned>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	4604      	mov	r4, r0
 8007834:	d155      	bne.n	80078e2 <_malloc_r+0xf2>
 8007836:	f8d8 4000 	ldr.w	r4, [r8]
 800783a:	4626      	mov	r6, r4
 800783c:	2e00      	cmp	r6, #0
 800783e:	d145      	bne.n	80078cc <_malloc_r+0xdc>
 8007840:	2c00      	cmp	r4, #0
 8007842:	d048      	beq.n	80078d6 <_malloc_r+0xe6>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	4631      	mov	r1, r6
 8007848:	4638      	mov	r0, r7
 800784a:	eb04 0903 	add.w	r9, r4, r3
 800784e:	f001 f8d7 	bl	8008a00 <_sbrk_r>
 8007852:	4581      	cmp	r9, r0
 8007854:	d13f      	bne.n	80078d6 <_malloc_r+0xe6>
 8007856:	6821      	ldr	r1, [r4, #0]
 8007858:	1a6d      	subs	r5, r5, r1
 800785a:	4629      	mov	r1, r5
 800785c:	4638      	mov	r0, r7
 800785e:	f7ff ffa7 	bl	80077b0 <sbrk_aligned>
 8007862:	3001      	adds	r0, #1
 8007864:	d037      	beq.n	80078d6 <_malloc_r+0xe6>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	442b      	add	r3, r5
 800786a:	6023      	str	r3, [r4, #0]
 800786c:	f8d8 3000 	ldr.w	r3, [r8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d038      	beq.n	80078e6 <_malloc_r+0xf6>
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	42a2      	cmp	r2, r4
 8007878:	d12b      	bne.n	80078d2 <_malloc_r+0xe2>
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	e00f      	b.n	80078a0 <_malloc_r+0xb0>
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	1b52      	subs	r2, r2, r5
 8007884:	d41f      	bmi.n	80078c6 <_malloc_r+0xd6>
 8007886:	2a0b      	cmp	r2, #11
 8007888:	d917      	bls.n	80078ba <_malloc_r+0xca>
 800788a:	1961      	adds	r1, r4, r5
 800788c:	42a3      	cmp	r3, r4
 800788e:	6025      	str	r5, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	6059      	strne	r1, [r3, #4]
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	bf08      	it	eq
 8007898:	f8c8 1000 	streq.w	r1, [r8]
 800789c:	5162      	str	r2, [r4, r5]
 800789e:	604b      	str	r3, [r1, #4]
 80078a0:	4638      	mov	r0, r7
 80078a2:	f104 060b 	add.w	r6, r4, #11
 80078a6:	f000 f829 	bl	80078fc <__malloc_unlock>
 80078aa:	f026 0607 	bic.w	r6, r6, #7
 80078ae:	1d23      	adds	r3, r4, #4
 80078b0:	1af2      	subs	r2, r6, r3
 80078b2:	d0ae      	beq.n	8007812 <_malloc_r+0x22>
 80078b4:	1b9b      	subs	r3, r3, r6
 80078b6:	50a3      	str	r3, [r4, r2]
 80078b8:	e7ab      	b.n	8007812 <_malloc_r+0x22>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	6862      	ldr	r2, [r4, #4]
 80078be:	d1dd      	bne.n	800787c <_malloc_r+0x8c>
 80078c0:	f8c8 2000 	str.w	r2, [r8]
 80078c4:	e7ec      	b.n	80078a0 <_malloc_r+0xb0>
 80078c6:	4623      	mov	r3, r4
 80078c8:	6864      	ldr	r4, [r4, #4]
 80078ca:	e7ac      	b.n	8007826 <_malloc_r+0x36>
 80078cc:	4634      	mov	r4, r6
 80078ce:	6876      	ldr	r6, [r6, #4]
 80078d0:	e7b4      	b.n	800783c <_malloc_r+0x4c>
 80078d2:	4613      	mov	r3, r2
 80078d4:	e7cc      	b.n	8007870 <_malloc_r+0x80>
 80078d6:	230c      	movs	r3, #12
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	4638      	mov	r0, r7
 80078dc:	f000 f80e 	bl	80078fc <__malloc_unlock>
 80078e0:	e797      	b.n	8007812 <_malloc_r+0x22>
 80078e2:	6025      	str	r5, [r4, #0]
 80078e4:	e7dc      	b.n	80078a0 <_malloc_r+0xb0>
 80078e6:	605b      	str	r3, [r3, #4]
 80078e8:	deff      	udf	#255	; 0xff
 80078ea:	bf00      	nop
 80078ec:	2000058c 	.word	0x2000058c

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__malloc_lock+0x8>)
 80078f2:	f001 b8d2 	b.w	8008a9a <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	200006d4 	.word	0x200006d4

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__malloc_unlock+0x8>)
 80078fe:	f001 b8cd 	b.w	8008a9c <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	200006d4 	.word	0x200006d4

08007908 <_strtol_l.constprop.0>:
 8007908:	2b01      	cmp	r3, #1
 800790a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790e:	d001      	beq.n	8007914 <_strtol_l.constprop.0+0xc>
 8007910:	2b24      	cmp	r3, #36	; 0x24
 8007912:	d906      	bls.n	8007922 <_strtol_l.constprop.0+0x1a>
 8007914:	f001 f896 	bl	8008a44 <__errno>
 8007918:	2316      	movs	r3, #22
 800791a:	6003      	str	r3, [r0, #0]
 800791c:	2000      	movs	r0, #0
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a08 <_strtol_l.constprop.0+0x100>
 8007926:	460d      	mov	r5, r1
 8007928:	462e      	mov	r6, r5
 800792a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007932:	f017 0708 	ands.w	r7, r7, #8
 8007936:	d1f7      	bne.n	8007928 <_strtol_l.constprop.0+0x20>
 8007938:	2c2d      	cmp	r4, #45	; 0x2d
 800793a:	d132      	bne.n	80079a2 <_strtol_l.constprop.0+0x9a>
 800793c:	782c      	ldrb	r4, [r5, #0]
 800793e:	2701      	movs	r7, #1
 8007940:	1cb5      	adds	r5, r6, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d05b      	beq.n	80079fe <_strtol_l.constprop.0+0xf6>
 8007946:	2b10      	cmp	r3, #16
 8007948:	d109      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 800794a:	2c30      	cmp	r4, #48	; 0x30
 800794c:	d107      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 800794e:	782c      	ldrb	r4, [r5, #0]
 8007950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007954:	2c58      	cmp	r4, #88	; 0x58
 8007956:	d14d      	bne.n	80079f4 <_strtol_l.constprop.0+0xec>
 8007958:	786c      	ldrb	r4, [r5, #1]
 800795a:	2310      	movs	r3, #16
 800795c:	3502      	adds	r5, #2
 800795e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007962:	f108 38ff 	add.w	r8, r8, #4294967295
 8007966:	f04f 0e00 	mov.w	lr, #0
 800796a:	fbb8 f9f3 	udiv	r9, r8, r3
 800796e:	4676      	mov	r6, lr
 8007970:	fb03 8a19 	mls	sl, r3, r9, r8
 8007974:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007978:	f1bc 0f09 	cmp.w	ip, #9
 800797c:	d816      	bhi.n	80079ac <_strtol_l.constprop.0+0xa4>
 800797e:	4664      	mov	r4, ip
 8007980:	42a3      	cmp	r3, r4
 8007982:	dd24      	ble.n	80079ce <_strtol_l.constprop.0+0xc6>
 8007984:	f1be 3fff 	cmp.w	lr, #4294967295
 8007988:	d008      	beq.n	800799c <_strtol_l.constprop.0+0x94>
 800798a:	45b1      	cmp	r9, r6
 800798c:	d31c      	bcc.n	80079c8 <_strtol_l.constprop.0+0xc0>
 800798e:	d101      	bne.n	8007994 <_strtol_l.constprop.0+0x8c>
 8007990:	45a2      	cmp	sl, r4
 8007992:	db19      	blt.n	80079c8 <_strtol_l.constprop.0+0xc0>
 8007994:	fb06 4603 	mla	r6, r6, r3, r4
 8007998:	f04f 0e01 	mov.w	lr, #1
 800799c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079a0:	e7e8      	b.n	8007974 <_strtol_l.constprop.0+0x6c>
 80079a2:	2c2b      	cmp	r4, #43	; 0x2b
 80079a4:	bf04      	itt	eq
 80079a6:	782c      	ldrbeq	r4, [r5, #0]
 80079a8:	1cb5      	addeq	r5, r6, #2
 80079aa:	e7ca      	b.n	8007942 <_strtol_l.constprop.0+0x3a>
 80079ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80079b0:	f1bc 0f19 	cmp.w	ip, #25
 80079b4:	d801      	bhi.n	80079ba <_strtol_l.constprop.0+0xb2>
 80079b6:	3c37      	subs	r4, #55	; 0x37
 80079b8:	e7e2      	b.n	8007980 <_strtol_l.constprop.0+0x78>
 80079ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80079be:	f1bc 0f19 	cmp.w	ip, #25
 80079c2:	d804      	bhi.n	80079ce <_strtol_l.constprop.0+0xc6>
 80079c4:	3c57      	subs	r4, #87	; 0x57
 80079c6:	e7db      	b.n	8007980 <_strtol_l.constprop.0+0x78>
 80079c8:	f04f 3eff 	mov.w	lr, #4294967295
 80079cc:	e7e6      	b.n	800799c <_strtol_l.constprop.0+0x94>
 80079ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80079d2:	d105      	bne.n	80079e0 <_strtol_l.constprop.0+0xd8>
 80079d4:	2322      	movs	r3, #34	; 0x22
 80079d6:	6003      	str	r3, [r0, #0]
 80079d8:	4646      	mov	r6, r8
 80079da:	b942      	cbnz	r2, 80079ee <_strtol_l.constprop.0+0xe6>
 80079dc:	4630      	mov	r0, r6
 80079de:	e79e      	b.n	800791e <_strtol_l.constprop.0+0x16>
 80079e0:	b107      	cbz	r7, 80079e4 <_strtol_l.constprop.0+0xdc>
 80079e2:	4276      	negs	r6, r6
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d0f9      	beq.n	80079dc <_strtol_l.constprop.0+0xd4>
 80079e8:	f1be 0f00 	cmp.w	lr, #0
 80079ec:	d000      	beq.n	80079f0 <_strtol_l.constprop.0+0xe8>
 80079ee:	1e69      	subs	r1, r5, #1
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e7f3      	b.n	80079dc <_strtol_l.constprop.0+0xd4>
 80079f4:	2430      	movs	r4, #48	; 0x30
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1b1      	bne.n	800795e <_strtol_l.constprop.0+0x56>
 80079fa:	2308      	movs	r3, #8
 80079fc:	e7af      	b.n	800795e <_strtol_l.constprop.0+0x56>
 80079fe:	2c30      	cmp	r4, #48	; 0x30
 8007a00:	d0a5      	beq.n	800794e <_strtol_l.constprop.0+0x46>
 8007a02:	230a      	movs	r3, #10
 8007a04:	e7ab      	b.n	800795e <_strtol_l.constprop.0+0x56>
 8007a06:	bf00      	nop
 8007a08:	0800c1f5 	.word	0x0800c1f5

08007a0c <_strtol_r>:
 8007a0c:	f7ff bf7c 	b.w	8007908 <_strtol_l.constprop.0>

08007a10 <strtol>:
 8007a10:	4613      	mov	r3, r2
 8007a12:	460a      	mov	r2, r1
 8007a14:	4601      	mov	r1, r0
 8007a16:	4802      	ldr	r0, [pc, #8]	; (8007a20 <strtol+0x10>)
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	f7ff bf75 	b.w	8007908 <_strtol_l.constprop.0>
 8007a1e:	bf00      	nop
 8007a20:	2000006c 	.word	0x2000006c

08007a24 <__cvt>:
 8007a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	ec55 4b10 	vmov	r4, r5, d0
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4619      	mov	r1, r3
 8007a32:	462b      	mov	r3, r5
 8007a34:	bfbb      	ittet	lt
 8007a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a3a:	461d      	movlt	r5, r3
 8007a3c:	2300      	movge	r3, #0
 8007a3e:	232d      	movlt	r3, #45	; 0x2d
 8007a40:	700b      	strb	r3, [r1, #0]
 8007a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a48:	4691      	mov	r9, r2
 8007a4a:	f023 0820 	bic.w	r8, r3, #32
 8007a4e:	bfbc      	itt	lt
 8007a50:	4622      	movlt	r2, r4
 8007a52:	4614      	movlt	r4, r2
 8007a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a58:	d005      	beq.n	8007a66 <__cvt+0x42>
 8007a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a5e:	d100      	bne.n	8007a62 <__cvt+0x3e>
 8007a60:	3601      	adds	r6, #1
 8007a62:	2102      	movs	r1, #2
 8007a64:	e000      	b.n	8007a68 <__cvt+0x44>
 8007a66:	2103      	movs	r1, #3
 8007a68:	ab03      	add	r3, sp, #12
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	ab02      	add	r3, sp, #8
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	ec45 4b10 	vmov	d0, r4, r5
 8007a74:	4653      	mov	r3, sl
 8007a76:	4632      	mov	r2, r6
 8007a78:	f001 f8aa 	bl	8008bd0 <_dtoa_r>
 8007a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a80:	4607      	mov	r7, r0
 8007a82:	d102      	bne.n	8007a8a <__cvt+0x66>
 8007a84:	f019 0f01 	tst.w	r9, #1
 8007a88:	d022      	beq.n	8007ad0 <__cvt+0xac>
 8007a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a8e:	eb07 0906 	add.w	r9, r7, r6
 8007a92:	d110      	bne.n	8007ab6 <__cvt+0x92>
 8007a94:	783b      	ldrb	r3, [r7, #0]
 8007a96:	2b30      	cmp	r3, #48	; 0x30
 8007a98:	d10a      	bne.n	8007ab0 <__cvt+0x8c>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7f9 f821 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa6:	b918      	cbnz	r0, 8007ab0 <__cvt+0x8c>
 8007aa8:	f1c6 0601 	rsb	r6, r6, #1
 8007aac:	f8ca 6000 	str.w	r6, [sl]
 8007ab0:	f8da 3000 	ldr.w	r3, [sl]
 8007ab4:	4499      	add	r9, r3
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4620      	mov	r0, r4
 8007abc:	4629      	mov	r1, r5
 8007abe:	f7f9 f813 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ac2:	b108      	cbz	r0, 8007ac8 <__cvt+0xa4>
 8007ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ac8:	2230      	movs	r2, #48	; 0x30
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	454b      	cmp	r3, r9
 8007ace:	d307      	bcc.n	8007ae0 <__cvt+0xbc>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ad4:	1bdb      	subs	r3, r3, r7
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	b004      	add	sp, #16
 8007adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae0:	1c59      	adds	r1, r3, #1
 8007ae2:	9103      	str	r1, [sp, #12]
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e7f0      	b.n	8007aca <__cvt+0xa6>

08007ae8 <__exponent>:
 8007ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aea:	4603      	mov	r3, r0
 8007aec:	2900      	cmp	r1, #0
 8007aee:	bfb8      	it	lt
 8007af0:	4249      	neglt	r1, r1
 8007af2:	f803 2b02 	strb.w	r2, [r3], #2
 8007af6:	bfb4      	ite	lt
 8007af8:	222d      	movlt	r2, #45	; 0x2d
 8007afa:	222b      	movge	r2, #43	; 0x2b
 8007afc:	2909      	cmp	r1, #9
 8007afe:	7042      	strb	r2, [r0, #1]
 8007b00:	dd2a      	ble.n	8007b58 <__exponent+0x70>
 8007b02:	f10d 0207 	add.w	r2, sp, #7
 8007b06:	4617      	mov	r7, r2
 8007b08:	260a      	movs	r6, #10
 8007b0a:	4694      	mov	ip, r2
 8007b0c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b10:	fb06 1415 	mls	r4, r6, r5, r1
 8007b14:	3430      	adds	r4, #48	; 0x30
 8007b16:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	2c63      	cmp	r4, #99	; 0x63
 8007b1e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b22:	4629      	mov	r1, r5
 8007b24:	dcf1      	bgt.n	8007b0a <__exponent+0x22>
 8007b26:	3130      	adds	r1, #48	; 0x30
 8007b28:	f1ac 0402 	sub.w	r4, ip, #2
 8007b2c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b30:	1c41      	adds	r1, r0, #1
 8007b32:	4622      	mov	r2, r4
 8007b34:	42ba      	cmp	r2, r7
 8007b36:	d30a      	bcc.n	8007b4e <__exponent+0x66>
 8007b38:	f10d 0209 	add.w	r2, sp, #9
 8007b3c:	eba2 020c 	sub.w	r2, r2, ip
 8007b40:	42bc      	cmp	r4, r7
 8007b42:	bf88      	it	hi
 8007b44:	2200      	movhi	r2, #0
 8007b46:	4413      	add	r3, r2
 8007b48:	1a18      	subs	r0, r3, r0
 8007b4a:	b003      	add	sp, #12
 8007b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b52:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007b56:	e7ed      	b.n	8007b34 <__exponent+0x4c>
 8007b58:	2330      	movs	r3, #48	; 0x30
 8007b5a:	3130      	adds	r1, #48	; 0x30
 8007b5c:	7083      	strb	r3, [r0, #2]
 8007b5e:	70c1      	strb	r1, [r0, #3]
 8007b60:	1d03      	adds	r3, r0, #4
 8007b62:	e7f1      	b.n	8007b48 <__exponent+0x60>

08007b64 <_printf_float>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	ed2d 8b02 	vpush	{d8}
 8007b6c:	b08d      	sub	sp, #52	; 0x34
 8007b6e:	460c      	mov	r4, r1
 8007b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b74:	4616      	mov	r6, r2
 8007b76:	461f      	mov	r7, r3
 8007b78:	4605      	mov	r5, r0
 8007b7a:	f000 ff09 	bl	8008990 <_localeconv_r>
 8007b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8007b82:	4650      	mov	r0, sl
 8007b84:	f7f8 fb84 	bl	8000290 <strlen>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	f8d8 3000 	ldr.w	r3, [r8]
 8007b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b98:	3307      	adds	r3, #7
 8007b9a:	f023 0307 	bic.w	r3, r3, #7
 8007b9e:	f103 0208 	add.w	r2, r3, #8
 8007ba2:	f8c8 2000 	str.w	r2, [r8]
 8007ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007baa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bae:	9307      	str	r3, [sp, #28]
 8007bb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bb4:	ee08 0a10 	vmov	s16, r0
 8007bb8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bc0:	4b9e      	ldr	r3, [pc, #632]	; (8007e3c <_printf_float+0x2d8>)
 8007bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc6:	f7f8 ffc1 	bl	8000b4c <__aeabi_dcmpun>
 8007bca:	bb88      	cbnz	r0, 8007c30 <_printf_float+0xcc>
 8007bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bd0:	4b9a      	ldr	r3, [pc, #616]	; (8007e3c <_printf_float+0x2d8>)
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	f7f8 ff9b 	bl	8000b10 <__aeabi_dcmple>
 8007bda:	bb48      	cbnz	r0, 8007c30 <_printf_float+0xcc>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	f7f8 ff8a 	bl	8000afc <__aeabi_dcmplt>
 8007be8:	b110      	cbz	r0, 8007bf0 <_printf_float+0x8c>
 8007bea:	232d      	movs	r3, #45	; 0x2d
 8007bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf0:	4a93      	ldr	r2, [pc, #588]	; (8007e40 <_printf_float+0x2dc>)
 8007bf2:	4b94      	ldr	r3, [pc, #592]	; (8007e44 <_printf_float+0x2e0>)
 8007bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007bf8:	bf94      	ite	ls
 8007bfa:	4690      	movls	r8, r2
 8007bfc:	4698      	movhi	r8, r3
 8007bfe:	2303      	movs	r3, #3
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	f023 0304 	bic.w	r3, r3, #4
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	f04f 0900 	mov.w	r9, #0
 8007c0e:	9700      	str	r7, [sp, #0]
 8007c10:	4633      	mov	r3, r6
 8007c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c14:	4621      	mov	r1, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 f9da 	bl	8007fd0 <_printf_common>
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f040 8090 	bne.w	8007d42 <_printf_float+0x1de>
 8007c22:	f04f 30ff 	mov.w	r0, #4294967295
 8007c26:	b00d      	add	sp, #52	; 0x34
 8007c28:	ecbd 8b02 	vpop	{d8}
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 ff88 	bl	8000b4c <__aeabi_dcmpun>
 8007c3c:	b140      	cbz	r0, 8007c50 <_printf_float+0xec>
 8007c3e:	464b      	mov	r3, r9
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bfbc      	itt	lt
 8007c44:	232d      	movlt	r3, #45	; 0x2d
 8007c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c4a:	4a7f      	ldr	r2, [pc, #508]	; (8007e48 <_printf_float+0x2e4>)
 8007c4c:	4b7f      	ldr	r3, [pc, #508]	; (8007e4c <_printf_float+0x2e8>)
 8007c4e:	e7d1      	b.n	8007bf4 <_printf_float+0x90>
 8007c50:	6863      	ldr	r3, [r4, #4]
 8007c52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c56:	9206      	str	r2, [sp, #24]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	d13f      	bne.n	8007cdc <_printf_float+0x178>
 8007c5c:	2306      	movs	r3, #6
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	9b05      	ldr	r3, [sp, #20]
 8007c62:	6861      	ldr	r1, [r4, #4]
 8007c64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8007c6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c72:	ab09      	add	r3, sp, #36	; 0x24
 8007c74:	ec49 8b10 	vmov	d0, r8, r9
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	6022      	str	r2, [r4, #0]
 8007c7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7ff fecf 	bl	8007a24 <__cvt>
 8007c86:	9b06      	ldr	r3, [sp, #24]
 8007c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8a:	2b47      	cmp	r3, #71	; 0x47
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	d108      	bne.n	8007ca2 <_printf_float+0x13e>
 8007c90:	1cc8      	adds	r0, r1, #3
 8007c92:	db02      	blt.n	8007c9a <_printf_float+0x136>
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	4299      	cmp	r1, r3
 8007c98:	dd41      	ble.n	8007d1e <_printf_float+0x1ba>
 8007c9a:	f1ab 0302 	sub.w	r3, fp, #2
 8007c9e:	fa5f fb83 	uxtb.w	fp, r3
 8007ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ca6:	d820      	bhi.n	8007cea <_printf_float+0x186>
 8007ca8:	3901      	subs	r1, #1
 8007caa:	465a      	mov	r2, fp
 8007cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8007cb2:	f7ff ff19 	bl	8007ae8 <__exponent>
 8007cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb8:	1813      	adds	r3, r2, r0
 8007cba:	2a01      	cmp	r2, #1
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	6123      	str	r3, [r4, #16]
 8007cc0:	dc02      	bgt.n	8007cc8 <_printf_float+0x164>
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	07d2      	lsls	r2, r2, #31
 8007cc6:	d501      	bpl.n	8007ccc <_printf_float+0x168>
 8007cc8:	3301      	adds	r3, #1
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d09c      	beq.n	8007c0e <_printf_float+0xaa>
 8007cd4:	232d      	movs	r3, #45	; 0x2d
 8007cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cda:	e798      	b.n	8007c0e <_printf_float+0xaa>
 8007cdc:	9a06      	ldr	r2, [sp, #24]
 8007cde:	2a47      	cmp	r2, #71	; 0x47
 8007ce0:	d1be      	bne.n	8007c60 <_printf_float+0xfc>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1bc      	bne.n	8007c60 <_printf_float+0xfc>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e7b9      	b.n	8007c5e <_printf_float+0xfa>
 8007cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007cee:	d118      	bne.n	8007d22 <_printf_float+0x1be>
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	dd0b      	ble.n	8007d0e <_printf_float+0x1aa>
 8007cf6:	6121      	str	r1, [r4, #16]
 8007cf8:	b913      	cbnz	r3, 8007d00 <_printf_float+0x19c>
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	07d0      	lsls	r0, r2, #31
 8007cfe:	d502      	bpl.n	8007d06 <_printf_float+0x1a2>
 8007d00:	3301      	adds	r3, #1
 8007d02:	440b      	add	r3, r1
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d08:	f04f 0900 	mov.w	r9, #0
 8007d0c:	e7de      	b.n	8007ccc <_printf_float+0x168>
 8007d0e:	b913      	cbnz	r3, 8007d16 <_printf_float+0x1b2>
 8007d10:	6822      	ldr	r2, [r4, #0]
 8007d12:	07d2      	lsls	r2, r2, #31
 8007d14:	d501      	bpl.n	8007d1a <_printf_float+0x1b6>
 8007d16:	3302      	adds	r3, #2
 8007d18:	e7f4      	b.n	8007d04 <_printf_float+0x1a0>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e7f2      	b.n	8007d04 <_printf_float+0x1a0>
 8007d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d24:	4299      	cmp	r1, r3
 8007d26:	db05      	blt.n	8007d34 <_printf_float+0x1d0>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	6121      	str	r1, [r4, #16]
 8007d2c:	07d8      	lsls	r0, r3, #31
 8007d2e:	d5ea      	bpl.n	8007d06 <_printf_float+0x1a2>
 8007d30:	1c4b      	adds	r3, r1, #1
 8007d32:	e7e7      	b.n	8007d04 <_printf_float+0x1a0>
 8007d34:	2900      	cmp	r1, #0
 8007d36:	bfd4      	ite	le
 8007d38:	f1c1 0202 	rsble	r2, r1, #2
 8007d3c:	2201      	movgt	r2, #1
 8007d3e:	4413      	add	r3, r2
 8007d40:	e7e0      	b.n	8007d04 <_printf_float+0x1a0>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	055a      	lsls	r2, r3, #21
 8007d46:	d407      	bmi.n	8007d58 <_printf_float+0x1f4>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	d12c      	bne.n	8007db0 <_printf_float+0x24c>
 8007d56:	e764      	b.n	8007c22 <_printf_float+0xbe>
 8007d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d5c:	f240 80e0 	bls.w	8007f20 <_printf_float+0x3bc>
 8007d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	f7f8 febe 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d034      	beq.n	8007dda <_printf_float+0x276>
 8007d70:	4a37      	ldr	r2, [pc, #220]	; (8007e50 <_printf_float+0x2ec>)
 8007d72:	2301      	movs	r3, #1
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f af51 	beq.w	8007c22 <_printf_float+0xbe>
 8007d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d84:	429a      	cmp	r2, r3
 8007d86:	db02      	blt.n	8007d8e <_printf_float+0x22a>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	07d8      	lsls	r0, r3, #31
 8007d8c:	d510      	bpl.n	8007db0 <_printf_float+0x24c>
 8007d8e:	ee18 3a10 	vmov	r3, s16
 8007d92:	4652      	mov	r2, sl
 8007d94:	4631      	mov	r1, r6
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	f43f af41 	beq.w	8007c22 <_printf_float+0xbe>
 8007da0:	f04f 0800 	mov.w	r8, #0
 8007da4:	f104 091a 	add.w	r9, r4, #26
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	3b01      	subs	r3, #1
 8007dac:	4543      	cmp	r3, r8
 8007dae:	dc09      	bgt.n	8007dc4 <_printf_float+0x260>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	079b      	lsls	r3, r3, #30
 8007db4:	f100 8107 	bmi.w	8007fc6 <_printf_float+0x462>
 8007db8:	68e0      	ldr	r0, [r4, #12]
 8007dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	bfb8      	it	lt
 8007dc0:	4618      	movlt	r0, r3
 8007dc2:	e730      	b.n	8007c26 <_printf_float+0xc2>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f af27 	beq.w	8007c22 <_printf_float+0xbe>
 8007dd4:	f108 0801 	add.w	r8, r8, #1
 8007dd8:	e7e6      	b.n	8007da8 <_printf_float+0x244>
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc39      	bgt.n	8007e54 <_printf_float+0x2f0>
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <_printf_float+0x2ec>)
 8007de2:	2301      	movs	r3, #1
 8007de4:	4631      	mov	r1, r6
 8007de6:	4628      	mov	r0, r5
 8007de8:	47b8      	blx	r7
 8007dea:	3001      	adds	r0, #1
 8007dec:	f43f af19 	beq.w	8007c22 <_printf_float+0xbe>
 8007df0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007df4:	4313      	orrs	r3, r2
 8007df6:	d102      	bne.n	8007dfe <_printf_float+0x29a>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d5d8      	bpl.n	8007db0 <_printf_float+0x24c>
 8007dfe:	ee18 3a10 	vmov	r3, s16
 8007e02:	4652      	mov	r2, sl
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	f43f af09 	beq.w	8007c22 <_printf_float+0xbe>
 8007e10:	f04f 0900 	mov.w	r9, #0
 8007e14:	f104 0a1a 	add.w	sl, r4, #26
 8007e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1a:	425b      	negs	r3, r3
 8007e1c:	454b      	cmp	r3, r9
 8007e1e:	dc01      	bgt.n	8007e24 <_printf_float+0x2c0>
 8007e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e22:	e792      	b.n	8007d4a <_printf_float+0x1e6>
 8007e24:	2301      	movs	r3, #1
 8007e26:	4652      	mov	r2, sl
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f aef7 	beq.w	8007c22 <_printf_float+0xbe>
 8007e34:	f109 0901 	add.w	r9, r9, #1
 8007e38:	e7ee      	b.n	8007e18 <_printf_float+0x2b4>
 8007e3a:	bf00      	nop
 8007e3c:	7fefffff 	.word	0x7fefffff
 8007e40:	0800c2f5 	.word	0x0800c2f5
 8007e44:	0800c2f9 	.word	0x0800c2f9
 8007e48:	0800c2fd 	.word	0x0800c2fd
 8007e4c:	0800c301 	.word	0x0800c301
 8007e50:	0800c305 	.word	0x0800c305
 8007e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bfa8      	it	ge
 8007e5c:	461a      	movge	r2, r3
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	4691      	mov	r9, r2
 8007e62:	dc37      	bgt.n	8007ed4 <_printf_float+0x370>
 8007e64:	f04f 0b00 	mov.w	fp, #0
 8007e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e6c:	f104 021a 	add.w	r2, r4, #26
 8007e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	eba3 0309 	sub.w	r3, r3, r9
 8007e78:	455b      	cmp	r3, fp
 8007e7a:	dc33      	bgt.n	8007ee4 <_printf_float+0x380>
 8007e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e80:	429a      	cmp	r2, r3
 8007e82:	db3b      	blt.n	8007efc <_printf_float+0x398>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	07da      	lsls	r2, r3, #31
 8007e88:	d438      	bmi.n	8007efc <_printf_float+0x398>
 8007e8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e8e:	eba2 0903 	sub.w	r9, r2, r3
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	4591      	cmp	r9, r2
 8007e98:	bfa8      	it	ge
 8007e9a:	4691      	movge	r9, r2
 8007e9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ea0:	dc35      	bgt.n	8007f0e <_printf_float+0x3aa>
 8007ea2:	f04f 0800 	mov.w	r8, #0
 8007ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eaa:	f104 0a1a 	add.w	sl, r4, #26
 8007eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	eba3 0309 	sub.w	r3, r3, r9
 8007eb8:	4543      	cmp	r3, r8
 8007eba:	f77f af79 	ble.w	8007db0 <_printf_float+0x24c>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f43f aeaa 	beq.w	8007c22 <_printf_float+0xbe>
 8007ece:	f108 0801 	add.w	r8, r8, #1
 8007ed2:	e7ec      	b.n	8007eae <_printf_float+0x34a>
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4642      	mov	r2, r8
 8007eda:	4628      	mov	r0, r5
 8007edc:	47b8      	blx	r7
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d1c0      	bne.n	8007e64 <_printf_float+0x300>
 8007ee2:	e69e      	b.n	8007c22 <_printf_float+0xbe>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	9205      	str	r2, [sp, #20]
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f ae97 	beq.w	8007c22 <_printf_float+0xbe>
 8007ef4:	9a05      	ldr	r2, [sp, #20]
 8007ef6:	f10b 0b01 	add.w	fp, fp, #1
 8007efa:	e7b9      	b.n	8007e70 <_printf_float+0x30c>
 8007efc:	ee18 3a10 	vmov	r3, s16
 8007f00:	4652      	mov	r2, sl
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	47b8      	blx	r7
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d1be      	bne.n	8007e8a <_printf_float+0x326>
 8007f0c:	e689      	b.n	8007c22 <_printf_float+0xbe>
 8007f0e:	9a05      	ldr	r2, [sp, #20]
 8007f10:	464b      	mov	r3, r9
 8007f12:	4442      	add	r2, r8
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d1c1      	bne.n	8007ea2 <_printf_float+0x33e>
 8007f1e:	e680      	b.n	8007c22 <_printf_float+0xbe>
 8007f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f22:	2a01      	cmp	r2, #1
 8007f24:	dc01      	bgt.n	8007f2a <_printf_float+0x3c6>
 8007f26:	07db      	lsls	r3, r3, #31
 8007f28:	d53a      	bpl.n	8007fa0 <_printf_float+0x43c>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f ae74 	beq.w	8007c22 <_printf_float+0xbe>
 8007f3a:	ee18 3a10 	vmov	r3, s16
 8007f3e:	4652      	mov	r2, sl
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f ae6b 	beq.w	8007c22 <_printf_float+0xbe>
 8007f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007f58:	f7f8 fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f5c:	b9d8      	cbnz	r0, 8007f96 <_printf_float+0x432>
 8007f5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f62:	f108 0201 	add.w	r2, r8, #1
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d10e      	bne.n	8007f8e <_printf_float+0x42a>
 8007f70:	e657      	b.n	8007c22 <_printf_float+0xbe>
 8007f72:	2301      	movs	r3, #1
 8007f74:	4652      	mov	r2, sl
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f43f ae50 	beq.w	8007c22 <_printf_float+0xbe>
 8007f82:	f108 0801 	add.w	r8, r8, #1
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	4543      	cmp	r3, r8
 8007f8c:	dcf1      	bgt.n	8007f72 <_printf_float+0x40e>
 8007f8e:	464b      	mov	r3, r9
 8007f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f94:	e6da      	b.n	8007d4c <_printf_float+0x1e8>
 8007f96:	f04f 0800 	mov.w	r8, #0
 8007f9a:	f104 0a1a 	add.w	sl, r4, #26
 8007f9e:	e7f2      	b.n	8007f86 <_printf_float+0x422>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	e7df      	b.n	8007f66 <_printf_float+0x402>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	464a      	mov	r2, r9
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f ae36 	beq.w	8007c22 <_printf_float+0xbe>
 8007fb6:	f108 0801 	add.w	r8, r8, #1
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fbe:	1a5b      	subs	r3, r3, r1
 8007fc0:	4543      	cmp	r3, r8
 8007fc2:	dcf0      	bgt.n	8007fa6 <_printf_float+0x442>
 8007fc4:	e6f8      	b.n	8007db8 <_printf_float+0x254>
 8007fc6:	f04f 0800 	mov.w	r8, #0
 8007fca:	f104 0919 	add.w	r9, r4, #25
 8007fce:	e7f4      	b.n	8007fba <_printf_float+0x456>

08007fd0 <_printf_common>:
 8007fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	4616      	mov	r6, r2
 8007fd6:	4699      	mov	r9, r3
 8007fd8:	688a      	ldr	r2, [r1, #8]
 8007fda:	690b      	ldr	r3, [r1, #16]
 8007fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	bfb8      	it	lt
 8007fe4:	4613      	movlt	r3, r2
 8007fe6:	6033      	str	r3, [r6, #0]
 8007fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fec:	4607      	mov	r7, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	b10a      	cbz	r2, 8007ff6 <_printf_common+0x26>
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	0699      	lsls	r1, r3, #26
 8007ffa:	bf42      	ittt	mi
 8007ffc:	6833      	ldrmi	r3, [r6, #0]
 8007ffe:	3302      	addmi	r3, #2
 8008000:	6033      	strmi	r3, [r6, #0]
 8008002:	6825      	ldr	r5, [r4, #0]
 8008004:	f015 0506 	ands.w	r5, r5, #6
 8008008:	d106      	bne.n	8008018 <_printf_common+0x48>
 800800a:	f104 0a19 	add.w	sl, r4, #25
 800800e:	68e3      	ldr	r3, [r4, #12]
 8008010:	6832      	ldr	r2, [r6, #0]
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	42ab      	cmp	r3, r5
 8008016:	dc26      	bgt.n	8008066 <_printf_common+0x96>
 8008018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800801c:	1e13      	subs	r3, r2, #0
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	bf18      	it	ne
 8008022:	2301      	movne	r3, #1
 8008024:	0692      	lsls	r2, r2, #26
 8008026:	d42b      	bmi.n	8008080 <_printf_common+0xb0>
 8008028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800802c:	4649      	mov	r1, r9
 800802e:	4638      	mov	r0, r7
 8008030:	47c0      	blx	r8
 8008032:	3001      	adds	r0, #1
 8008034:	d01e      	beq.n	8008074 <_printf_common+0xa4>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	f003 0306 	and.w	r3, r3, #6
 800803e:	2b04      	cmp	r3, #4
 8008040:	bf02      	ittt	eq
 8008042:	68e5      	ldreq	r5, [r4, #12]
 8008044:	6833      	ldreq	r3, [r6, #0]
 8008046:	1aed      	subeq	r5, r5, r3
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	bf0c      	ite	eq
 800804c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008050:	2500      	movne	r5, #0
 8008052:	4293      	cmp	r3, r2
 8008054:	bfc4      	itt	gt
 8008056:	1a9b      	subgt	r3, r3, r2
 8008058:	18ed      	addgt	r5, r5, r3
 800805a:	2600      	movs	r6, #0
 800805c:	341a      	adds	r4, #26
 800805e:	42b5      	cmp	r5, r6
 8008060:	d11a      	bne.n	8008098 <_printf_common+0xc8>
 8008062:	2000      	movs	r0, #0
 8008064:	e008      	b.n	8008078 <_printf_common+0xa8>
 8008066:	2301      	movs	r3, #1
 8008068:	4652      	mov	r2, sl
 800806a:	4649      	mov	r1, r9
 800806c:	4638      	mov	r0, r7
 800806e:	47c0      	blx	r8
 8008070:	3001      	adds	r0, #1
 8008072:	d103      	bne.n	800807c <_printf_common+0xac>
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807c:	3501      	adds	r5, #1
 800807e:	e7c6      	b.n	800800e <_printf_common+0x3e>
 8008080:	18e1      	adds	r1, r4, r3
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	2030      	movs	r0, #48	; 0x30
 8008086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800808a:	4422      	add	r2, r4
 800808c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008094:	3302      	adds	r3, #2
 8008096:	e7c7      	b.n	8008028 <_printf_common+0x58>
 8008098:	2301      	movs	r3, #1
 800809a:	4622      	mov	r2, r4
 800809c:	4649      	mov	r1, r9
 800809e:	4638      	mov	r0, r7
 80080a0:	47c0      	blx	r8
 80080a2:	3001      	adds	r0, #1
 80080a4:	d0e6      	beq.n	8008074 <_printf_common+0xa4>
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7d9      	b.n	800805e <_printf_common+0x8e>
	...

080080ac <_printf_i>:
 80080ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	7e0f      	ldrb	r7, [r1, #24]
 80080b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080b4:	2f78      	cmp	r7, #120	; 0x78
 80080b6:	4691      	mov	r9, r2
 80080b8:	4680      	mov	r8, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	469a      	mov	sl, r3
 80080be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080c2:	d807      	bhi.n	80080d4 <_printf_i+0x28>
 80080c4:	2f62      	cmp	r7, #98	; 0x62
 80080c6:	d80a      	bhi.n	80080de <_printf_i+0x32>
 80080c8:	2f00      	cmp	r7, #0
 80080ca:	f000 80d4 	beq.w	8008276 <_printf_i+0x1ca>
 80080ce:	2f58      	cmp	r7, #88	; 0x58
 80080d0:	f000 80c0 	beq.w	8008254 <_printf_i+0x1a8>
 80080d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080dc:	e03a      	b.n	8008154 <_printf_i+0xa8>
 80080de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080e2:	2b15      	cmp	r3, #21
 80080e4:	d8f6      	bhi.n	80080d4 <_printf_i+0x28>
 80080e6:	a101      	add	r1, pc, #4	; (adr r1, 80080ec <_printf_i+0x40>)
 80080e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080ec:	08008145 	.word	0x08008145
 80080f0:	08008159 	.word	0x08008159
 80080f4:	080080d5 	.word	0x080080d5
 80080f8:	080080d5 	.word	0x080080d5
 80080fc:	080080d5 	.word	0x080080d5
 8008100:	080080d5 	.word	0x080080d5
 8008104:	08008159 	.word	0x08008159
 8008108:	080080d5 	.word	0x080080d5
 800810c:	080080d5 	.word	0x080080d5
 8008110:	080080d5 	.word	0x080080d5
 8008114:	080080d5 	.word	0x080080d5
 8008118:	0800825d 	.word	0x0800825d
 800811c:	08008185 	.word	0x08008185
 8008120:	08008217 	.word	0x08008217
 8008124:	080080d5 	.word	0x080080d5
 8008128:	080080d5 	.word	0x080080d5
 800812c:	0800827f 	.word	0x0800827f
 8008130:	080080d5 	.word	0x080080d5
 8008134:	08008185 	.word	0x08008185
 8008138:	080080d5 	.word	0x080080d5
 800813c:	080080d5 	.word	0x080080d5
 8008140:	0800821f 	.word	0x0800821f
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	1d1a      	adds	r2, r3, #4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	602a      	str	r2, [r5, #0]
 800814c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008154:	2301      	movs	r3, #1
 8008156:	e09f      	b.n	8008298 <_printf_i+0x1ec>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	0607      	lsls	r7, r0, #24
 800815e:	f103 0104 	add.w	r1, r3, #4
 8008162:	6029      	str	r1, [r5, #0]
 8008164:	d501      	bpl.n	800816a <_printf_i+0xbe>
 8008166:	681e      	ldr	r6, [r3, #0]
 8008168:	e003      	b.n	8008172 <_printf_i+0xc6>
 800816a:	0646      	lsls	r6, r0, #25
 800816c:	d5fb      	bpl.n	8008166 <_printf_i+0xba>
 800816e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008172:	2e00      	cmp	r6, #0
 8008174:	da03      	bge.n	800817e <_printf_i+0xd2>
 8008176:	232d      	movs	r3, #45	; 0x2d
 8008178:	4276      	negs	r6, r6
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817e:	485a      	ldr	r0, [pc, #360]	; (80082e8 <_printf_i+0x23c>)
 8008180:	230a      	movs	r3, #10
 8008182:	e012      	b.n	80081aa <_printf_i+0xfe>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	6820      	ldr	r0, [r4, #0]
 8008188:	1d19      	adds	r1, r3, #4
 800818a:	6029      	str	r1, [r5, #0]
 800818c:	0605      	lsls	r5, r0, #24
 800818e:	d501      	bpl.n	8008194 <_printf_i+0xe8>
 8008190:	681e      	ldr	r6, [r3, #0]
 8008192:	e002      	b.n	800819a <_printf_i+0xee>
 8008194:	0641      	lsls	r1, r0, #25
 8008196:	d5fb      	bpl.n	8008190 <_printf_i+0xe4>
 8008198:	881e      	ldrh	r6, [r3, #0]
 800819a:	4853      	ldr	r0, [pc, #332]	; (80082e8 <_printf_i+0x23c>)
 800819c:	2f6f      	cmp	r7, #111	; 0x6f
 800819e:	bf0c      	ite	eq
 80081a0:	2308      	moveq	r3, #8
 80081a2:	230a      	movne	r3, #10
 80081a4:	2100      	movs	r1, #0
 80081a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081aa:	6865      	ldr	r5, [r4, #4]
 80081ac:	60a5      	str	r5, [r4, #8]
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	bfa2      	ittt	ge
 80081b2:	6821      	ldrge	r1, [r4, #0]
 80081b4:	f021 0104 	bicge.w	r1, r1, #4
 80081b8:	6021      	strge	r1, [r4, #0]
 80081ba:	b90e      	cbnz	r6, 80081c0 <_printf_i+0x114>
 80081bc:	2d00      	cmp	r5, #0
 80081be:	d04b      	beq.n	8008258 <_printf_i+0x1ac>
 80081c0:	4615      	mov	r5, r2
 80081c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80081c6:	fb03 6711 	mls	r7, r3, r1, r6
 80081ca:	5dc7      	ldrb	r7, [r0, r7]
 80081cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081d0:	4637      	mov	r7, r6
 80081d2:	42bb      	cmp	r3, r7
 80081d4:	460e      	mov	r6, r1
 80081d6:	d9f4      	bls.n	80081c2 <_printf_i+0x116>
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d10b      	bne.n	80081f4 <_printf_i+0x148>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	07de      	lsls	r6, r3, #31
 80081e0:	d508      	bpl.n	80081f4 <_printf_i+0x148>
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	6861      	ldr	r1, [r4, #4]
 80081e6:	4299      	cmp	r1, r3
 80081e8:	bfde      	ittt	le
 80081ea:	2330      	movle	r3, #48	; 0x30
 80081ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081f4:	1b52      	subs	r2, r2, r5
 80081f6:	6122      	str	r2, [r4, #16]
 80081f8:	f8cd a000 	str.w	sl, [sp]
 80081fc:	464b      	mov	r3, r9
 80081fe:	aa03      	add	r2, sp, #12
 8008200:	4621      	mov	r1, r4
 8008202:	4640      	mov	r0, r8
 8008204:	f7ff fee4 	bl	8007fd0 <_printf_common>
 8008208:	3001      	adds	r0, #1
 800820a:	d14a      	bne.n	80082a2 <_printf_i+0x1f6>
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	b004      	add	sp, #16
 8008212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	f043 0320 	orr.w	r3, r3, #32
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	4833      	ldr	r0, [pc, #204]	; (80082ec <_printf_i+0x240>)
 8008220:	2778      	movs	r7, #120	; 0x78
 8008222:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	6829      	ldr	r1, [r5, #0]
 800822a:	061f      	lsls	r7, r3, #24
 800822c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008230:	d402      	bmi.n	8008238 <_printf_i+0x18c>
 8008232:	065f      	lsls	r7, r3, #25
 8008234:	bf48      	it	mi
 8008236:	b2b6      	uxthmi	r6, r6
 8008238:	07df      	lsls	r7, r3, #31
 800823a:	bf48      	it	mi
 800823c:	f043 0320 	orrmi.w	r3, r3, #32
 8008240:	6029      	str	r1, [r5, #0]
 8008242:	bf48      	it	mi
 8008244:	6023      	strmi	r3, [r4, #0]
 8008246:	b91e      	cbnz	r6, 8008250 <_printf_i+0x1a4>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	f023 0320 	bic.w	r3, r3, #32
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	2310      	movs	r3, #16
 8008252:	e7a7      	b.n	80081a4 <_printf_i+0xf8>
 8008254:	4824      	ldr	r0, [pc, #144]	; (80082e8 <_printf_i+0x23c>)
 8008256:	e7e4      	b.n	8008222 <_printf_i+0x176>
 8008258:	4615      	mov	r5, r2
 800825a:	e7bd      	b.n	80081d8 <_printf_i+0x12c>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	6826      	ldr	r6, [r4, #0]
 8008260:	6961      	ldr	r1, [r4, #20]
 8008262:	1d18      	adds	r0, r3, #4
 8008264:	6028      	str	r0, [r5, #0]
 8008266:	0635      	lsls	r5, r6, #24
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	d501      	bpl.n	8008270 <_printf_i+0x1c4>
 800826c:	6019      	str	r1, [r3, #0]
 800826e:	e002      	b.n	8008276 <_printf_i+0x1ca>
 8008270:	0670      	lsls	r0, r6, #25
 8008272:	d5fb      	bpl.n	800826c <_printf_i+0x1c0>
 8008274:	8019      	strh	r1, [r3, #0]
 8008276:	2300      	movs	r3, #0
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	4615      	mov	r5, r2
 800827c:	e7bc      	b.n	80081f8 <_printf_i+0x14c>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	1d1a      	adds	r2, r3, #4
 8008282:	602a      	str	r2, [r5, #0]
 8008284:	681d      	ldr	r5, [r3, #0]
 8008286:	6862      	ldr	r2, [r4, #4]
 8008288:	2100      	movs	r1, #0
 800828a:	4628      	mov	r0, r5
 800828c:	f7f7 ffb0 	bl	80001f0 <memchr>
 8008290:	b108      	cbz	r0, 8008296 <_printf_i+0x1ea>
 8008292:	1b40      	subs	r0, r0, r5
 8008294:	6060      	str	r0, [r4, #4]
 8008296:	6863      	ldr	r3, [r4, #4]
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	2300      	movs	r3, #0
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a0:	e7aa      	b.n	80081f8 <_printf_i+0x14c>
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	462a      	mov	r2, r5
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	47d0      	blx	sl
 80082ac:	3001      	adds	r0, #1
 80082ae:	d0ad      	beq.n	800820c <_printf_i+0x160>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	079b      	lsls	r3, r3, #30
 80082b4:	d413      	bmi.n	80082de <_printf_i+0x232>
 80082b6:	68e0      	ldr	r0, [r4, #12]
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	4298      	cmp	r0, r3
 80082bc:	bfb8      	it	lt
 80082be:	4618      	movlt	r0, r3
 80082c0:	e7a6      	b.n	8008210 <_printf_i+0x164>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4632      	mov	r2, r6
 80082c6:	4649      	mov	r1, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	47d0      	blx	sl
 80082cc:	3001      	adds	r0, #1
 80082ce:	d09d      	beq.n	800820c <_printf_i+0x160>
 80082d0:	3501      	adds	r5, #1
 80082d2:	68e3      	ldr	r3, [r4, #12]
 80082d4:	9903      	ldr	r1, [sp, #12]
 80082d6:	1a5b      	subs	r3, r3, r1
 80082d8:	42ab      	cmp	r3, r5
 80082da:	dcf2      	bgt.n	80082c2 <_printf_i+0x216>
 80082dc:	e7eb      	b.n	80082b6 <_printf_i+0x20a>
 80082de:	2500      	movs	r5, #0
 80082e0:	f104 0619 	add.w	r6, r4, #25
 80082e4:	e7f5      	b.n	80082d2 <_printf_i+0x226>
 80082e6:	bf00      	nop
 80082e8:	0800c307 	.word	0x0800c307
 80082ec:	0800c318 	.word	0x0800c318

080082f0 <_scanf_float>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	b087      	sub	sp, #28
 80082f6:	4617      	mov	r7, r2
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	688b      	ldr	r3, [r1, #8]
 80082fc:	1e5a      	subs	r2, r3, #1
 80082fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008302:	bf83      	ittte	hi
 8008304:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008308:	195b      	addhi	r3, r3, r5
 800830a:	9302      	strhi	r3, [sp, #8]
 800830c:	2300      	movls	r3, #0
 800830e:	bf86      	itte	hi
 8008310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008314:	608b      	strhi	r3, [r1, #8]
 8008316:	9302      	strls	r3, [sp, #8]
 8008318:	680b      	ldr	r3, [r1, #0]
 800831a:	468b      	mov	fp, r1
 800831c:	2500      	movs	r5, #0
 800831e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008322:	f84b 3b1c 	str.w	r3, [fp], #28
 8008326:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800832a:	4680      	mov	r8, r0
 800832c:	460c      	mov	r4, r1
 800832e:	465e      	mov	r6, fp
 8008330:	46aa      	mov	sl, r5
 8008332:	46a9      	mov	r9, r5
 8008334:	9501      	str	r5, [sp, #4]
 8008336:	68a2      	ldr	r2, [r4, #8]
 8008338:	b152      	cbz	r2, 8008350 <_scanf_float+0x60>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b4e      	cmp	r3, #78	; 0x4e
 8008340:	d864      	bhi.n	800840c <_scanf_float+0x11c>
 8008342:	2b40      	cmp	r3, #64	; 0x40
 8008344:	d83c      	bhi.n	80083c0 <_scanf_float+0xd0>
 8008346:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800834a:	b2c8      	uxtb	r0, r1
 800834c:	280e      	cmp	r0, #14
 800834e:	d93a      	bls.n	80083c6 <_scanf_float+0xd6>
 8008350:	f1b9 0f00 	cmp.w	r9, #0
 8008354:	d003      	beq.n	800835e <_scanf_float+0x6e>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008362:	f1ba 0f01 	cmp.w	sl, #1
 8008366:	f200 8113 	bhi.w	8008590 <_scanf_float+0x2a0>
 800836a:	455e      	cmp	r6, fp
 800836c:	f200 8105 	bhi.w	800857a <_scanf_float+0x28a>
 8008370:	2501      	movs	r5, #1
 8008372:	4628      	mov	r0, r5
 8008374:	b007      	add	sp, #28
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800837e:	2a0d      	cmp	r2, #13
 8008380:	d8e6      	bhi.n	8008350 <_scanf_float+0x60>
 8008382:	a101      	add	r1, pc, #4	; (adr r1, 8008388 <_scanf_float+0x98>)
 8008384:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008388:	080084c7 	.word	0x080084c7
 800838c:	08008351 	.word	0x08008351
 8008390:	08008351 	.word	0x08008351
 8008394:	08008351 	.word	0x08008351
 8008398:	08008527 	.word	0x08008527
 800839c:	080084ff 	.word	0x080084ff
 80083a0:	08008351 	.word	0x08008351
 80083a4:	08008351 	.word	0x08008351
 80083a8:	080084d5 	.word	0x080084d5
 80083ac:	08008351 	.word	0x08008351
 80083b0:	08008351 	.word	0x08008351
 80083b4:	08008351 	.word	0x08008351
 80083b8:	08008351 	.word	0x08008351
 80083bc:	0800848d 	.word	0x0800848d
 80083c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083c4:	e7db      	b.n	800837e <_scanf_float+0x8e>
 80083c6:	290e      	cmp	r1, #14
 80083c8:	d8c2      	bhi.n	8008350 <_scanf_float+0x60>
 80083ca:	a001      	add	r0, pc, #4	; (adr r0, 80083d0 <_scanf_float+0xe0>)
 80083cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083d0:	0800847f 	.word	0x0800847f
 80083d4:	08008351 	.word	0x08008351
 80083d8:	0800847f 	.word	0x0800847f
 80083dc:	08008513 	.word	0x08008513
 80083e0:	08008351 	.word	0x08008351
 80083e4:	0800842d 	.word	0x0800842d
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008469 	.word	0x08008469
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008469 	.word	0x08008469
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	2b6e      	cmp	r3, #110	; 0x6e
 800840e:	d809      	bhi.n	8008424 <_scanf_float+0x134>
 8008410:	2b60      	cmp	r3, #96	; 0x60
 8008412:	d8b2      	bhi.n	800837a <_scanf_float+0x8a>
 8008414:	2b54      	cmp	r3, #84	; 0x54
 8008416:	d077      	beq.n	8008508 <_scanf_float+0x218>
 8008418:	2b59      	cmp	r3, #89	; 0x59
 800841a:	d199      	bne.n	8008350 <_scanf_float+0x60>
 800841c:	2d07      	cmp	r5, #7
 800841e:	d197      	bne.n	8008350 <_scanf_float+0x60>
 8008420:	2508      	movs	r5, #8
 8008422:	e029      	b.n	8008478 <_scanf_float+0x188>
 8008424:	2b74      	cmp	r3, #116	; 0x74
 8008426:	d06f      	beq.n	8008508 <_scanf_float+0x218>
 8008428:	2b79      	cmp	r3, #121	; 0x79
 800842a:	e7f6      	b.n	800841a <_scanf_float+0x12a>
 800842c:	6821      	ldr	r1, [r4, #0]
 800842e:	05c8      	lsls	r0, r1, #23
 8008430:	d51a      	bpl.n	8008468 <_scanf_float+0x178>
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008438:	6021      	str	r1, [r4, #0]
 800843a:	f109 0901 	add.w	r9, r9, #1
 800843e:	b11b      	cbz	r3, 8008448 <_scanf_float+0x158>
 8008440:	3b01      	subs	r3, #1
 8008442:	3201      	adds	r2, #1
 8008444:	9302      	str	r3, [sp, #8]
 8008446:	60a2      	str	r2, [r4, #8]
 8008448:	68a3      	ldr	r3, [r4, #8]
 800844a:	3b01      	subs	r3, #1
 800844c:	60a3      	str	r3, [r4, #8]
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	3301      	adds	r3, #1
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	607b      	str	r3, [r7, #4]
 800845c:	f340 8084 	ble.w	8008568 <_scanf_float+0x278>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	e766      	b.n	8008336 <_scanf_float+0x46>
 8008468:	eb1a 0f05 	cmn.w	sl, r5
 800846c:	f47f af70 	bne.w	8008350 <_scanf_float+0x60>
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	f806 3b01 	strb.w	r3, [r6], #1
 800847c:	e7e4      	b.n	8008448 <_scanf_float+0x158>
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	0610      	lsls	r0, r2, #24
 8008482:	f57f af65 	bpl.w	8008350 <_scanf_float+0x60>
 8008486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800848a:	e7f4      	b.n	8008476 <_scanf_float+0x186>
 800848c:	f1ba 0f00 	cmp.w	sl, #0
 8008490:	d10e      	bne.n	80084b0 <_scanf_float+0x1c0>
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	d10e      	bne.n	80084b6 <_scanf_float+0x1c6>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800849e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084a2:	d108      	bne.n	80084b6 <_scanf_float+0x1c6>
 80084a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084a8:	6022      	str	r2, [r4, #0]
 80084aa:	f04f 0a01 	mov.w	sl, #1
 80084ae:	e7e3      	b.n	8008478 <_scanf_float+0x188>
 80084b0:	f1ba 0f02 	cmp.w	sl, #2
 80084b4:	d055      	beq.n	8008562 <_scanf_float+0x272>
 80084b6:	2d01      	cmp	r5, #1
 80084b8:	d002      	beq.n	80084c0 <_scanf_float+0x1d0>
 80084ba:	2d04      	cmp	r5, #4
 80084bc:	f47f af48 	bne.w	8008350 <_scanf_float+0x60>
 80084c0:	3501      	adds	r5, #1
 80084c2:	b2ed      	uxtb	r5, r5
 80084c4:	e7d8      	b.n	8008478 <_scanf_float+0x188>
 80084c6:	f1ba 0f01 	cmp.w	sl, #1
 80084ca:	f47f af41 	bne.w	8008350 <_scanf_float+0x60>
 80084ce:	f04f 0a02 	mov.w	sl, #2
 80084d2:	e7d1      	b.n	8008478 <_scanf_float+0x188>
 80084d4:	b97d      	cbnz	r5, 80084f6 <_scanf_float+0x206>
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	f47f af3c 	bne.w	8008356 <_scanf_float+0x66>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084e8:	f47f af39 	bne.w	800835e <_scanf_float+0x6e>
 80084ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084f0:	6022      	str	r2, [r4, #0]
 80084f2:	2501      	movs	r5, #1
 80084f4:	e7c0      	b.n	8008478 <_scanf_float+0x188>
 80084f6:	2d03      	cmp	r5, #3
 80084f8:	d0e2      	beq.n	80084c0 <_scanf_float+0x1d0>
 80084fa:	2d05      	cmp	r5, #5
 80084fc:	e7de      	b.n	80084bc <_scanf_float+0x1cc>
 80084fe:	2d02      	cmp	r5, #2
 8008500:	f47f af26 	bne.w	8008350 <_scanf_float+0x60>
 8008504:	2503      	movs	r5, #3
 8008506:	e7b7      	b.n	8008478 <_scanf_float+0x188>
 8008508:	2d06      	cmp	r5, #6
 800850a:	f47f af21 	bne.w	8008350 <_scanf_float+0x60>
 800850e:	2507      	movs	r5, #7
 8008510:	e7b2      	b.n	8008478 <_scanf_float+0x188>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	0591      	lsls	r1, r2, #22
 8008516:	f57f af1b 	bpl.w	8008350 <_scanf_float+0x60>
 800851a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800851e:	6022      	str	r2, [r4, #0]
 8008520:	f8cd 9004 	str.w	r9, [sp, #4]
 8008524:	e7a8      	b.n	8008478 <_scanf_float+0x188>
 8008526:	6822      	ldr	r2, [r4, #0]
 8008528:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800852c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008530:	d006      	beq.n	8008540 <_scanf_float+0x250>
 8008532:	0550      	lsls	r0, r2, #21
 8008534:	f57f af0c 	bpl.w	8008350 <_scanf_float+0x60>
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	f43f af0f 	beq.w	800835e <_scanf_float+0x6e>
 8008540:	0591      	lsls	r1, r2, #22
 8008542:	bf58      	it	pl
 8008544:	9901      	ldrpl	r1, [sp, #4]
 8008546:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800854a:	bf58      	it	pl
 800854c:	eba9 0101 	subpl.w	r1, r9, r1
 8008550:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008554:	bf58      	it	pl
 8008556:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	f04f 0900 	mov.w	r9, #0
 8008560:	e78a      	b.n	8008478 <_scanf_float+0x188>
 8008562:	f04f 0a03 	mov.w	sl, #3
 8008566:	e787      	b.n	8008478 <_scanf_float+0x188>
 8008568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800856c:	4639      	mov	r1, r7
 800856e:	4640      	mov	r0, r8
 8008570:	4798      	blx	r3
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aedf 	beq.w	8008336 <_scanf_float+0x46>
 8008578:	e6ea      	b.n	8008350 <_scanf_float+0x60>
 800857a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800857e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008582:	463a      	mov	r2, r7
 8008584:	4640      	mov	r0, r8
 8008586:	4798      	blx	r3
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	e6ec      	b.n	800836a <_scanf_float+0x7a>
 8008590:	1e6b      	subs	r3, r5, #1
 8008592:	2b06      	cmp	r3, #6
 8008594:	d825      	bhi.n	80085e2 <_scanf_float+0x2f2>
 8008596:	2d02      	cmp	r5, #2
 8008598:	d836      	bhi.n	8008608 <_scanf_float+0x318>
 800859a:	455e      	cmp	r6, fp
 800859c:	f67f aee8 	bls.w	8008370 <_scanf_float+0x80>
 80085a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085a8:	463a      	mov	r2, r7
 80085aa:	4640      	mov	r0, r8
 80085ac:	4798      	blx	r3
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	e7f1      	b.n	800859a <_scanf_float+0x2aa>
 80085b6:	9802      	ldr	r0, [sp, #8]
 80085b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085c0:	9002      	str	r0, [sp, #8]
 80085c2:	463a      	mov	r2, r7
 80085c4:	4640      	mov	r0, r8
 80085c6:	4798      	blx	r3
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085d2:	fa5f fa8a 	uxtb.w	sl, sl
 80085d6:	f1ba 0f02 	cmp.w	sl, #2
 80085da:	d1ec      	bne.n	80085b6 <_scanf_float+0x2c6>
 80085dc:	3d03      	subs	r5, #3
 80085de:	b2ed      	uxtb	r5, r5
 80085e0:	1b76      	subs	r6, r6, r5
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	05da      	lsls	r2, r3, #23
 80085e6:	d52f      	bpl.n	8008648 <_scanf_float+0x358>
 80085e8:	055b      	lsls	r3, r3, #21
 80085ea:	d510      	bpl.n	800860e <_scanf_float+0x31e>
 80085ec:	455e      	cmp	r6, fp
 80085ee:	f67f aebf 	bls.w	8008370 <_scanf_float+0x80>
 80085f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085fa:	463a      	mov	r2, r7
 80085fc:	4640      	mov	r0, r8
 80085fe:	4798      	blx	r3
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	3b01      	subs	r3, #1
 8008604:	6123      	str	r3, [r4, #16]
 8008606:	e7f1      	b.n	80085ec <_scanf_float+0x2fc>
 8008608:	46aa      	mov	sl, r5
 800860a:	9602      	str	r6, [sp, #8]
 800860c:	e7df      	b.n	80085ce <_scanf_float+0x2de>
 800860e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	2965      	cmp	r1, #101	; 0x65
 8008616:	f103 33ff 	add.w	r3, r3, #4294967295
 800861a:	f106 35ff 	add.w	r5, r6, #4294967295
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	d00c      	beq.n	800863c <_scanf_float+0x34c>
 8008622:	2945      	cmp	r1, #69	; 0x45
 8008624:	d00a      	beq.n	800863c <_scanf_float+0x34c>
 8008626:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800862a:	463a      	mov	r2, r7
 800862c:	4640      	mov	r0, r8
 800862e:	4798      	blx	r3
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008636:	3b01      	subs	r3, #1
 8008638:	1eb5      	subs	r5, r6, #2
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008640:	463a      	mov	r2, r7
 8008642:	4640      	mov	r0, r8
 8008644:	4798      	blx	r3
 8008646:	462e      	mov	r6, r5
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	f015 0510 	ands.w	r5, r5, #16
 800864e:	d158      	bne.n	8008702 <_scanf_float+0x412>
 8008650:	7035      	strb	r5, [r6, #0]
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865c:	d11c      	bne.n	8008698 <_scanf_float+0x3a8>
 800865e:	9b01      	ldr	r3, [sp, #4]
 8008660:	454b      	cmp	r3, r9
 8008662:	eba3 0209 	sub.w	r2, r3, r9
 8008666:	d124      	bne.n	80086b2 <_scanf_float+0x3c2>
 8008668:	2200      	movs	r2, #0
 800866a:	4659      	mov	r1, fp
 800866c:	4640      	mov	r0, r8
 800866e:	f002 fba7 	bl	800adc0 <_strtod_r>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f011 0f02 	tst.w	r1, #2
 800867c:	ec57 6b10 	vmov	r6, r7, d0
 8008680:	f103 0204 	add.w	r2, r3, #4
 8008684:	d020      	beq.n	80086c8 <_scanf_float+0x3d8>
 8008686:	9903      	ldr	r1, [sp, #12]
 8008688:	600a      	str	r2, [r1, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	e9c3 6700 	strd	r6, r7, [r3]
 8008690:	68e3      	ldr	r3, [r4, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60e3      	str	r3, [r4, #12]
 8008696:	e66c      	b.n	8008372 <_scanf_float+0x82>
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0e4      	beq.n	8008668 <_scanf_float+0x378>
 800869e:	9905      	ldr	r1, [sp, #20]
 80086a0:	230a      	movs	r3, #10
 80086a2:	462a      	mov	r2, r5
 80086a4:	3101      	adds	r1, #1
 80086a6:	4640      	mov	r0, r8
 80086a8:	f7ff f9b0 	bl	8007a0c <_strtol_r>
 80086ac:	9b04      	ldr	r3, [sp, #16]
 80086ae:	9e05      	ldr	r6, [sp, #20]
 80086b0:	1ac2      	subs	r2, r0, r3
 80086b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086b6:	429e      	cmp	r6, r3
 80086b8:	bf28      	it	cs
 80086ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086be:	4912      	ldr	r1, [pc, #72]	; (8008708 <_scanf_float+0x418>)
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f8e7 	bl	8008894 <siprintf>
 80086c6:	e7cf      	b.n	8008668 <_scanf_float+0x378>
 80086c8:	f011 0f04 	tst.w	r1, #4
 80086cc:	9903      	ldr	r1, [sp, #12]
 80086ce:	600a      	str	r2, [r1, #0]
 80086d0:	d1db      	bne.n	800868a <_scanf_float+0x39a>
 80086d2:	f8d3 8000 	ldr.w	r8, [r3]
 80086d6:	ee10 2a10 	vmov	r2, s0
 80086da:	ee10 0a10 	vmov	r0, s0
 80086de:	463b      	mov	r3, r7
 80086e0:	4639      	mov	r1, r7
 80086e2:	f7f8 fa33 	bl	8000b4c <__aeabi_dcmpun>
 80086e6:	b128      	cbz	r0, 80086f4 <_scanf_float+0x404>
 80086e8:	4808      	ldr	r0, [pc, #32]	; (800870c <_scanf_float+0x41c>)
 80086ea:	f000 f9e1 	bl	8008ab0 <nanf>
 80086ee:	ed88 0a00 	vstr	s0, [r8]
 80086f2:	e7cd      	b.n	8008690 <_scanf_float+0x3a0>
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f8 fa86 	bl	8000c08 <__aeabi_d2f>
 80086fc:	f8c8 0000 	str.w	r0, [r8]
 8008700:	e7c6      	b.n	8008690 <_scanf_float+0x3a0>
 8008702:	2500      	movs	r5, #0
 8008704:	e635      	b.n	8008372 <_scanf_float+0x82>
 8008706:	bf00      	nop
 8008708:	0800c329 	.word	0x0800c329
 800870c:	0800c5bc 	.word	0x0800c5bc

08008710 <std>:
 8008710:	2300      	movs	r3, #0
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
 8008716:	e9c0 3300 	strd	r3, r3, [r0]
 800871a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800871e:	6083      	str	r3, [r0, #8]
 8008720:	8181      	strh	r1, [r0, #12]
 8008722:	6643      	str	r3, [r0, #100]	; 0x64
 8008724:	81c2      	strh	r2, [r0, #14]
 8008726:	6183      	str	r3, [r0, #24]
 8008728:	4619      	mov	r1, r3
 800872a:	2208      	movs	r2, #8
 800872c:	305c      	adds	r0, #92	; 0x5c
 800872e:	f000 f914 	bl	800895a <memset>
 8008732:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <std+0x58>)
 8008734:	6263      	str	r3, [r4, #36]	; 0x24
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <std+0x5c>)
 8008738:	62a3      	str	r3, [r4, #40]	; 0x28
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <std+0x60>)
 800873c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <std+0x64>)
 8008740:	6323      	str	r3, [r4, #48]	; 0x30
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <std+0x68>)
 8008744:	6224      	str	r4, [r4, #32]
 8008746:	429c      	cmp	r4, r3
 8008748:	d006      	beq.n	8008758 <std+0x48>
 800874a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800874e:	4294      	cmp	r4, r2
 8008750:	d002      	beq.n	8008758 <std+0x48>
 8008752:	33d0      	adds	r3, #208	; 0xd0
 8008754:	429c      	cmp	r4, r3
 8008756:	d105      	bne.n	8008764 <std+0x54>
 8008758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800875c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008760:	f000 b99a 	b.w	8008a98 <__retarget_lock_init_recursive>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	080088d5 	.word	0x080088d5
 800876c:	080088f7 	.word	0x080088f7
 8008770:	0800892f 	.word	0x0800892f
 8008774:	08008953 	.word	0x08008953
 8008778:	20000594 	.word	0x20000594

0800877c <stdio_exit_handler>:
 800877c:	4a02      	ldr	r2, [pc, #8]	; (8008788 <stdio_exit_handler+0xc>)
 800877e:	4903      	ldr	r1, [pc, #12]	; (800878c <stdio_exit_handler+0x10>)
 8008780:	4803      	ldr	r0, [pc, #12]	; (8008790 <stdio_exit_handler+0x14>)
 8008782:	f000 b869 	b.w	8008858 <_fwalk_sglue>
 8008786:	bf00      	nop
 8008788:	20000014 	.word	0x20000014
 800878c:	0800b189 	.word	0x0800b189
 8008790:	20000020 	.word	0x20000020

08008794 <cleanup_stdio>:
 8008794:	6841      	ldr	r1, [r0, #4]
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <cleanup_stdio+0x34>)
 8008798:	4299      	cmp	r1, r3
 800879a:	b510      	push	{r4, lr}
 800879c:	4604      	mov	r4, r0
 800879e:	d001      	beq.n	80087a4 <cleanup_stdio+0x10>
 80087a0:	f002 fcf2 	bl	800b188 <_fflush_r>
 80087a4:	68a1      	ldr	r1, [r4, #8]
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <cleanup_stdio+0x38>)
 80087a8:	4299      	cmp	r1, r3
 80087aa:	d002      	beq.n	80087b2 <cleanup_stdio+0x1e>
 80087ac:	4620      	mov	r0, r4
 80087ae:	f002 fceb 	bl	800b188 <_fflush_r>
 80087b2:	68e1      	ldr	r1, [r4, #12]
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <cleanup_stdio+0x3c>)
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d004      	beq.n	80087c4 <cleanup_stdio+0x30>
 80087ba:	4620      	mov	r0, r4
 80087bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c0:	f002 bce2 	b.w	800b188 <_fflush_r>
 80087c4:	bd10      	pop	{r4, pc}
 80087c6:	bf00      	nop
 80087c8:	20000594 	.word	0x20000594
 80087cc:	200005fc 	.word	0x200005fc
 80087d0:	20000664 	.word	0x20000664

080087d4 <global_stdio_init.part.0>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <global_stdio_init.part.0+0x30>)
 80087d8:	4c0b      	ldr	r4, [pc, #44]	; (8008808 <global_stdio_init.part.0+0x34>)
 80087da:	4a0c      	ldr	r2, [pc, #48]	; (800880c <global_stdio_init.part.0+0x38>)
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	4620      	mov	r0, r4
 80087e0:	2200      	movs	r2, #0
 80087e2:	2104      	movs	r1, #4
 80087e4:	f7ff ff94 	bl	8008710 <std>
 80087e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087ec:	2201      	movs	r2, #1
 80087ee:	2109      	movs	r1, #9
 80087f0:	f7ff ff8e 	bl	8008710 <std>
 80087f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087f8:	2202      	movs	r2, #2
 80087fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087fe:	2112      	movs	r1, #18
 8008800:	f7ff bf86 	b.w	8008710 <std>
 8008804:	200006cc 	.word	0x200006cc
 8008808:	20000594 	.word	0x20000594
 800880c:	0800877d 	.word	0x0800877d

08008810 <__sfp_lock_acquire>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__sfp_lock_acquire+0x8>)
 8008812:	f000 b942 	b.w	8008a9a <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	200006d5 	.word	0x200006d5

0800881c <__sfp_lock_release>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__sfp_lock_release+0x8>)
 800881e:	f000 b93d 	b.w	8008a9c <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	200006d5 	.word	0x200006d5

08008828 <__sinit>:
 8008828:	b510      	push	{r4, lr}
 800882a:	4604      	mov	r4, r0
 800882c:	f7ff fff0 	bl	8008810 <__sfp_lock_acquire>
 8008830:	6a23      	ldr	r3, [r4, #32]
 8008832:	b11b      	cbz	r3, 800883c <__sinit+0x14>
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008838:	f7ff bff0 	b.w	800881c <__sfp_lock_release>
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <__sinit+0x28>)
 800883e:	6223      	str	r3, [r4, #32]
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <__sinit+0x2c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f5      	bne.n	8008834 <__sinit+0xc>
 8008848:	f7ff ffc4 	bl	80087d4 <global_stdio_init.part.0>
 800884c:	e7f2      	b.n	8008834 <__sinit+0xc>
 800884e:	bf00      	nop
 8008850:	08008795 	.word	0x08008795
 8008854:	200006cc 	.word	0x200006cc

08008858 <_fwalk_sglue>:
 8008858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800885c:	4607      	mov	r7, r0
 800885e:	4688      	mov	r8, r1
 8008860:	4614      	mov	r4, r2
 8008862:	2600      	movs	r6, #0
 8008864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008868:	f1b9 0901 	subs.w	r9, r9, #1
 800886c:	d505      	bpl.n	800887a <_fwalk_sglue+0x22>
 800886e:	6824      	ldr	r4, [r4, #0]
 8008870:	2c00      	cmp	r4, #0
 8008872:	d1f7      	bne.n	8008864 <_fwalk_sglue+0xc>
 8008874:	4630      	mov	r0, r6
 8008876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d907      	bls.n	8008890 <_fwalk_sglue+0x38>
 8008880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008884:	3301      	adds	r3, #1
 8008886:	d003      	beq.n	8008890 <_fwalk_sglue+0x38>
 8008888:	4629      	mov	r1, r5
 800888a:	4638      	mov	r0, r7
 800888c:	47c0      	blx	r8
 800888e:	4306      	orrs	r6, r0
 8008890:	3568      	adds	r5, #104	; 0x68
 8008892:	e7e9      	b.n	8008868 <_fwalk_sglue+0x10>

08008894 <siprintf>:
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b500      	push	{lr}
 8008898:	b09c      	sub	sp, #112	; 0x70
 800889a:	ab1d      	add	r3, sp, #116	; 0x74
 800889c:	9002      	str	r0, [sp, #8]
 800889e:	9006      	str	r0, [sp, #24]
 80088a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088a4:	4809      	ldr	r0, [pc, #36]	; (80088cc <siprintf+0x38>)
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	9104      	str	r1, [sp, #16]
 80088aa:	4909      	ldr	r1, [pc, #36]	; (80088d0 <siprintf+0x3c>)
 80088ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b0:	9105      	str	r1, [sp, #20]
 80088b2:	6800      	ldr	r0, [r0, #0]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	a902      	add	r1, sp, #8
 80088b8:	f002 fae2 	bl	800ae80 <_svfiprintf_r>
 80088bc:	9b02      	ldr	r3, [sp, #8]
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	b01c      	add	sp, #112	; 0x70
 80088c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c8:	b003      	add	sp, #12
 80088ca:	4770      	bx	lr
 80088cc:	2000006c 	.word	0x2000006c
 80088d0:	ffff0208 	.word	0xffff0208

080088d4 <__sread>:
 80088d4:	b510      	push	{r4, lr}
 80088d6:	460c      	mov	r4, r1
 80088d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088dc:	f000 f87e 	bl	80089dc <_read_r>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	bfab      	itete	ge
 80088e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088e6:	89a3      	ldrhlt	r3, [r4, #12]
 80088e8:	181b      	addge	r3, r3, r0
 80088ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ee:	bfac      	ite	ge
 80088f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088f2:	81a3      	strhlt	r3, [r4, #12]
 80088f4:	bd10      	pop	{r4, pc}

080088f6 <__swrite>:
 80088f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fa:	461f      	mov	r7, r3
 80088fc:	898b      	ldrh	r3, [r1, #12]
 80088fe:	05db      	lsls	r3, r3, #23
 8008900:	4605      	mov	r5, r0
 8008902:	460c      	mov	r4, r1
 8008904:	4616      	mov	r6, r2
 8008906:	d505      	bpl.n	8008914 <__swrite+0x1e>
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	2302      	movs	r3, #2
 800890e:	2200      	movs	r2, #0
 8008910:	f000 f852 	bl	80089b8 <_lseek_r>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800891e:	81a3      	strh	r3, [r4, #12]
 8008920:	4632      	mov	r2, r6
 8008922:	463b      	mov	r3, r7
 8008924:	4628      	mov	r0, r5
 8008926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800892a:	f000 b879 	b.w	8008a20 <_write_r>

0800892e <__sseek>:
 800892e:	b510      	push	{r4, lr}
 8008930:	460c      	mov	r4, r1
 8008932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008936:	f000 f83f 	bl	80089b8 <_lseek_r>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	bf15      	itete	ne
 8008940:	6560      	strne	r0, [r4, #84]	; 0x54
 8008942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800894a:	81a3      	strheq	r3, [r4, #12]
 800894c:	bf18      	it	ne
 800894e:	81a3      	strhne	r3, [r4, #12]
 8008950:	bd10      	pop	{r4, pc}

08008952 <__sclose>:
 8008952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008956:	f000 b81f 	b.w	8008998 <_close_r>

0800895a <memset>:
 800895a:	4402      	add	r2, r0
 800895c:	4603      	mov	r3, r0
 800895e:	4293      	cmp	r3, r2
 8008960:	d100      	bne.n	8008964 <memset+0xa>
 8008962:	4770      	bx	lr
 8008964:	f803 1b01 	strb.w	r1, [r3], #1
 8008968:	e7f9      	b.n	800895e <memset+0x4>

0800896a <strncpy>:
 800896a:	b510      	push	{r4, lr}
 800896c:	3901      	subs	r1, #1
 800896e:	4603      	mov	r3, r0
 8008970:	b132      	cbz	r2, 8008980 <strncpy+0x16>
 8008972:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008976:	f803 4b01 	strb.w	r4, [r3], #1
 800897a:	3a01      	subs	r2, #1
 800897c:	2c00      	cmp	r4, #0
 800897e:	d1f7      	bne.n	8008970 <strncpy+0x6>
 8008980:	441a      	add	r2, r3
 8008982:	2100      	movs	r1, #0
 8008984:	4293      	cmp	r3, r2
 8008986:	d100      	bne.n	800898a <strncpy+0x20>
 8008988:	bd10      	pop	{r4, pc}
 800898a:	f803 1b01 	strb.w	r1, [r3], #1
 800898e:	e7f9      	b.n	8008984 <strncpy+0x1a>

08008990 <_localeconv_r>:
 8008990:	4800      	ldr	r0, [pc, #0]	; (8008994 <_localeconv_r+0x4>)
 8008992:	4770      	bx	lr
 8008994:	20000160 	.word	0x20000160

08008998 <_close_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_close_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f9 fd4d 	bl	8002442 <_close>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_close_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_close_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200006d0 	.word	0x200006d0

080089b8 <_lseek_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d07      	ldr	r5, [pc, #28]	; (80089d8 <_lseek_r+0x20>)
 80089bc:	4604      	mov	r4, r0
 80089be:	4608      	mov	r0, r1
 80089c0:	4611      	mov	r1, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	602a      	str	r2, [r5, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f7f9 fd62 	bl	8002490 <_lseek>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	d102      	bne.n	80089d6 <_lseek_r+0x1e>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	b103      	cbz	r3, 80089d6 <_lseek_r+0x1e>
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
 80089d8:	200006d0 	.word	0x200006d0

080089dc <_read_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4d07      	ldr	r5, [pc, #28]	; (80089fc <_read_r+0x20>)
 80089e0:	4604      	mov	r4, r0
 80089e2:	4608      	mov	r0, r1
 80089e4:	4611      	mov	r1, r2
 80089e6:	2200      	movs	r2, #0
 80089e8:	602a      	str	r2, [r5, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	f7f9 fcf0 	bl	80023d0 <_read>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_read_r+0x1e>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_read_r+0x1e>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	200006d0 	.word	0x200006d0

08008a00 <_sbrk_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d06      	ldr	r5, [pc, #24]	; (8008a1c <_sbrk_r+0x1c>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f7f9 fd4e 	bl	80024ac <_sbrk>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_sbrk_r+0x1a>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_sbrk_r+0x1a>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200006d0 	.word	0x200006d0

08008a20 <_write_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	; (8008a40 <_write_r+0x20>)
 8008a24:	4604      	mov	r4, r0
 8008a26:	4608      	mov	r0, r1
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f7f9 fceb 	bl	800240a <_write>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_write_r+0x1e>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_write_r+0x1e>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	200006d0 	.word	0x200006d0

08008a44 <__errno>:
 8008a44:	4b01      	ldr	r3, [pc, #4]	; (8008a4c <__errno+0x8>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	2000006c 	.word	0x2000006c

08008a50 <__libc_init_array>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4d0d      	ldr	r5, [pc, #52]	; (8008a88 <__libc_init_array+0x38>)
 8008a54:	4c0d      	ldr	r4, [pc, #52]	; (8008a8c <__libc_init_array+0x3c>)
 8008a56:	1b64      	subs	r4, r4, r5
 8008a58:	10a4      	asrs	r4, r4, #2
 8008a5a:	2600      	movs	r6, #0
 8008a5c:	42a6      	cmp	r6, r4
 8008a5e:	d109      	bne.n	8008a74 <__libc_init_array+0x24>
 8008a60:	4d0b      	ldr	r5, [pc, #44]	; (8008a90 <__libc_init_array+0x40>)
 8008a62:	4c0c      	ldr	r4, [pc, #48]	; (8008a94 <__libc_init_array+0x44>)
 8008a64:	f003 fb9e 	bl	800c1a4 <_init>
 8008a68:	1b64      	subs	r4, r4, r5
 8008a6a:	10a4      	asrs	r4, r4, #2
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	42a6      	cmp	r6, r4
 8008a70:	d105      	bne.n	8008a7e <__libc_init_array+0x2e>
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a78:	4798      	blx	r3
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	e7ee      	b.n	8008a5c <__libc_init_array+0xc>
 8008a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a82:	4798      	blx	r3
 8008a84:	3601      	adds	r6, #1
 8008a86:	e7f2      	b.n	8008a6e <__libc_init_array+0x1e>
 8008a88:	0800c628 	.word	0x0800c628
 8008a8c:	0800c628 	.word	0x0800c628
 8008a90:	0800c628 	.word	0x0800c628
 8008a94:	0800c62c 	.word	0x0800c62c

08008a98 <__retarget_lock_init_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <__retarget_lock_acquire_recursive>:
 8008a9a:	4770      	bx	lr

08008a9c <__retarget_lock_release_recursive>:
 8008a9c:	4770      	bx	lr

08008a9e <strcpy>:
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa4:	f803 2b01 	strb.w	r2, [r3], #1
 8008aa8:	2a00      	cmp	r2, #0
 8008aaa:	d1f9      	bne.n	8008aa0 <strcpy+0x2>
 8008aac:	4770      	bx	lr
	...

08008ab0 <nanf>:
 8008ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ab8 <nanf+0x8>
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	7fc00000 	.word	0x7fc00000

08008abc <quorem>:
 8008abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	6903      	ldr	r3, [r0, #16]
 8008ac2:	690c      	ldr	r4, [r1, #16]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	db7e      	blt.n	8008bc8 <quorem+0x10c>
 8008aca:	3c01      	subs	r4, #1
 8008acc:	f101 0814 	add.w	r8, r1, #20
 8008ad0:	f100 0514 	add.w	r5, r0, #20
 8008ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008aea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008aee:	fbb2 f6f3 	udiv	r6, r2, r3
 8008af2:	d331      	bcc.n	8008b58 <quorem+0x9c>
 8008af4:	f04f 0e00 	mov.w	lr, #0
 8008af8:	4640      	mov	r0, r8
 8008afa:	46ac      	mov	ip, r5
 8008afc:	46f2      	mov	sl, lr
 8008afe:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b02:	b293      	uxth	r3, r2
 8008b04:	fb06 e303 	mla	r3, r6, r3, lr
 8008b08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b0c:	0c1a      	lsrs	r2, r3, #16
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	ebaa 0303 	sub.w	r3, sl, r3
 8008b14:	f8dc a000 	ldr.w	sl, [ip]
 8008b18:	fa13 f38a 	uxtah	r3, r3, sl
 8008b1c:	fb06 220e 	mla	r2, r6, lr, r2
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b32:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b36:	4581      	cmp	r9, r0
 8008b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b3c:	f84c 3b04 	str.w	r3, [ip], #4
 8008b40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b44:	d2db      	bcs.n	8008afe <quorem+0x42>
 8008b46:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b4a:	b92b      	cbnz	r3, 8008b58 <quorem+0x9c>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	3b04      	subs	r3, #4
 8008b50:	429d      	cmp	r5, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	d32c      	bcc.n	8008bb0 <quorem+0xf4>
 8008b56:	613c      	str	r4, [r7, #16]
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f001 f93d 	bl	8009dd8 <__mcmp>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	db22      	blt.n	8008ba8 <quorem+0xec>
 8008b62:	3601      	adds	r6, #1
 8008b64:	4629      	mov	r1, r5
 8008b66:	2000      	movs	r0, #0
 8008b68:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b6c:	f8d1 c000 	ldr.w	ip, [r1]
 8008b70:	b293      	uxth	r3, r2
 8008b72:	1ac3      	subs	r3, r0, r3
 8008b74:	0c12      	lsrs	r2, r2, #16
 8008b76:	fa13 f38c 	uxtah	r3, r3, ip
 8008b7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b88:	45c1      	cmp	r9, r8
 8008b8a:	f841 3b04 	str.w	r3, [r1], #4
 8008b8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b92:	d2e9      	bcs.n	8008b68 <quorem+0xac>
 8008b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b9c:	b922      	cbnz	r2, 8008ba8 <quorem+0xec>
 8008b9e:	3b04      	subs	r3, #4
 8008ba0:	429d      	cmp	r5, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	d30a      	bcc.n	8008bbc <quorem+0x100>
 8008ba6:	613c      	str	r4, [r7, #16]
 8008ba8:	4630      	mov	r0, r6
 8008baa:	b003      	add	sp, #12
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	3b04      	subs	r3, #4
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	d1ce      	bne.n	8008b56 <quorem+0x9a>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	e7c9      	b.n	8008b50 <quorem+0x94>
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	d1f0      	bne.n	8008ba6 <quorem+0xea>
 8008bc4:	3c01      	subs	r4, #1
 8008bc6:	e7eb      	b.n	8008ba0 <quorem+0xe4>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e7ee      	b.n	8008baa <quorem+0xee>
 8008bcc:	0000      	movs	r0, r0
	...

08008bd0 <_dtoa_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	ed2d 8b04 	vpush	{d8-d9}
 8008bd8:	69c5      	ldr	r5, [r0, #28]
 8008bda:	b093      	sub	sp, #76	; 0x4c
 8008bdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008be0:	ec57 6b10 	vmov	r6, r7, d0
 8008be4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008be8:	9107      	str	r1, [sp, #28]
 8008bea:	4604      	mov	r4, r0
 8008bec:	920a      	str	r2, [sp, #40]	; 0x28
 8008bee:	930d      	str	r3, [sp, #52]	; 0x34
 8008bf0:	b975      	cbnz	r5, 8008c10 <_dtoa_r+0x40>
 8008bf2:	2010      	movs	r0, #16
 8008bf4:	f7fe fdcc 	bl	8007790 <malloc>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	61e0      	str	r0, [r4, #28]
 8008bfc:	b920      	cbnz	r0, 8008c08 <_dtoa_r+0x38>
 8008bfe:	4bae      	ldr	r3, [pc, #696]	; (8008eb8 <_dtoa_r+0x2e8>)
 8008c00:	21ef      	movs	r1, #239	; 0xef
 8008c02:	48ae      	ldr	r0, [pc, #696]	; (8008ebc <_dtoa_r+0x2ec>)
 8008c04:	f002 fb2c 	bl	800b260 <__assert_func>
 8008c08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c0c:	6005      	str	r5, [r0, #0]
 8008c0e:	60c5      	str	r5, [r0, #12]
 8008c10:	69e3      	ldr	r3, [r4, #28]
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	b151      	cbz	r1, 8008c2c <_dtoa_r+0x5c>
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	604a      	str	r2, [r1, #4]
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4093      	lsls	r3, r2
 8008c1e:	608b      	str	r3, [r1, #8]
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fe53 	bl	80098cc <_Bfree>
 8008c26:	69e3      	ldr	r3, [r4, #28]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	1e3b      	subs	r3, r7, #0
 8008c2e:	bfbb      	ittet	lt
 8008c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	9303      	strlt	r3, [sp, #12]
 8008c36:	2300      	movge	r3, #0
 8008c38:	2201      	movlt	r2, #1
 8008c3a:	bfac      	ite	ge
 8008c3c:	f8c8 3000 	strge.w	r3, [r8]
 8008c40:	f8c8 2000 	strlt.w	r2, [r8]
 8008c44:	4b9e      	ldr	r3, [pc, #632]	; (8008ec0 <_dtoa_r+0x2f0>)
 8008c46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c4a:	ea33 0308 	bics.w	r3, r3, r8
 8008c4e:	d11b      	bne.n	8008c88 <_dtoa_r+0xb8>
 8008c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c52:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c5c:	4333      	orrs	r3, r6
 8008c5e:	f000 8593 	beq.w	8009788 <_dtoa_r+0xbb8>
 8008c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c64:	b963      	cbnz	r3, 8008c80 <_dtoa_r+0xb0>
 8008c66:	4b97      	ldr	r3, [pc, #604]	; (8008ec4 <_dtoa_r+0x2f4>)
 8008c68:	e027      	b.n	8008cba <_dtoa_r+0xea>
 8008c6a:	4b97      	ldr	r3, [pc, #604]	; (8008ec8 <_dtoa_r+0x2f8>)
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	3308      	adds	r3, #8
 8008c70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	9800      	ldr	r0, [sp, #0]
 8008c76:	b013      	add	sp, #76	; 0x4c
 8008c78:	ecbd 8b04 	vpop	{d8-d9}
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c80:	4b90      	ldr	r3, [pc, #576]	; (8008ec4 <_dtoa_r+0x2f4>)
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	3303      	adds	r3, #3
 8008c86:	e7f3      	b.n	8008c70 <_dtoa_r+0xa0>
 8008c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	ec51 0b17 	vmov	r0, r1, d7
 8008c92:	eeb0 8a47 	vmov.f32	s16, s14
 8008c96:	eef0 8a67 	vmov.f32	s17, s15
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f7f7 ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ca0:	4681      	mov	r9, r0
 8008ca2:	b160      	cbz	r0, 8008cbe <_dtoa_r+0xee>
 8008ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 8568 	beq.w	8009782 <_dtoa_r+0xbb2>
 8008cb2:	4b86      	ldr	r3, [pc, #536]	; (8008ecc <_dtoa_r+0x2fc>)
 8008cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	e7da      	b.n	8008c74 <_dtoa_r+0xa4>
 8008cbe:	aa10      	add	r2, sp, #64	; 0x40
 8008cc0:	a911      	add	r1, sp, #68	; 0x44
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc8:	eef0 0a68 	vmov.f32	s1, s17
 8008ccc:	f001 f99a 	bl	800a004 <__d2b>
 8008cd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	d07f      	beq.n	8008dda <_dtoa_r+0x20a>
 8008cda:	ee18 3a90 	vmov	r3, s17
 8008cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ce6:	ec51 0b18 	vmov	r0, r1, d8
 8008cea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4b75      	ldr	r3, [pc, #468]	; (8008ed0 <_dtoa_r+0x300>)
 8008cfc:	f7f7 fad4 	bl	80002a8 <__aeabi_dsub>
 8008d00:	a367      	add	r3, pc, #412	; (adr r3, 8008ea0 <_dtoa_r+0x2d0>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fc87 	bl	8000618 <__aeabi_dmul>
 8008d0a:	a367      	add	r3, pc, #412	; (adr r3, 8008ea8 <_dtoa_r+0x2d8>)
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f7f7 facc 	bl	80002ac <__adddf3>
 8008d14:	4606      	mov	r6, r0
 8008d16:	4628      	mov	r0, r5
 8008d18:	460f      	mov	r7, r1
 8008d1a:	f7f7 fc13 	bl	8000544 <__aeabi_i2d>
 8008d1e:	a364      	add	r3, pc, #400	; (adr r3, 8008eb0 <_dtoa_r+0x2e0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 fc78 	bl	8000618 <__aeabi_dmul>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	4639      	mov	r1, r7
 8008d30:	f7f7 fabc 	bl	80002ac <__adddf3>
 8008d34:	4606      	mov	r6, r0
 8008d36:	460f      	mov	r7, r1
 8008d38:	f7f7 ff1e 	bl	8000b78 <__aeabi_d2iz>
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4683      	mov	fp, r0
 8008d40:	2300      	movs	r3, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 fed9 	bl	8000afc <__aeabi_dcmplt>
 8008d4a:	b148      	cbz	r0, 8008d60 <_dtoa_r+0x190>
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f7f7 fbf9 	bl	8000544 <__aeabi_i2d>
 8008d52:	4632      	mov	r2, r6
 8008d54:	463b      	mov	r3, r7
 8008d56:	f7f7 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d5a:	b908      	cbnz	r0, 8008d60 <_dtoa_r+0x190>
 8008d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d60:	f1bb 0f16 	cmp.w	fp, #22
 8008d64:	d857      	bhi.n	8008e16 <_dtoa_r+0x246>
 8008d66:	4b5b      	ldr	r3, [pc, #364]	; (8008ed4 <_dtoa_r+0x304>)
 8008d68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	ec51 0b18 	vmov	r0, r1, d8
 8008d74:	f7f7 fec2 	bl	8000afc <__aeabi_dcmplt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d04e      	beq.n	8008e1a <_dtoa_r+0x24a>
 8008d7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d80:	2300      	movs	r3, #0
 8008d82:	930c      	str	r3, [sp, #48]	; 0x30
 8008d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d86:	1b5b      	subs	r3, r3, r5
 8008d88:	1e5a      	subs	r2, r3, #1
 8008d8a:	bf45      	ittet	mi
 8008d8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d90:	9305      	strmi	r3, [sp, #20]
 8008d92:	2300      	movpl	r3, #0
 8008d94:	2300      	movmi	r3, #0
 8008d96:	9206      	str	r2, [sp, #24]
 8008d98:	bf54      	ite	pl
 8008d9a:	9305      	strpl	r3, [sp, #20]
 8008d9c:	9306      	strmi	r3, [sp, #24]
 8008d9e:	f1bb 0f00 	cmp.w	fp, #0
 8008da2:	db3c      	blt.n	8008e1e <_dtoa_r+0x24e>
 8008da4:	9b06      	ldr	r3, [sp, #24]
 8008da6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008daa:	445b      	add	r3, fp
 8008dac:	9306      	str	r3, [sp, #24]
 8008dae:	2300      	movs	r3, #0
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	9b07      	ldr	r3, [sp, #28]
 8008db4:	2b09      	cmp	r3, #9
 8008db6:	d868      	bhi.n	8008e8a <_dtoa_r+0x2ba>
 8008db8:	2b05      	cmp	r3, #5
 8008dba:	bfc4      	itt	gt
 8008dbc:	3b04      	subgt	r3, #4
 8008dbe:	9307      	strgt	r3, [sp, #28]
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8008dc6:	bfcc      	ite	gt
 8008dc8:	2500      	movgt	r5, #0
 8008dca:	2501      	movle	r5, #1
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	f200 8085 	bhi.w	8008edc <_dtoa_r+0x30c>
 8008dd2:	e8df f003 	tbb	[pc, r3]
 8008dd6:	3b2e      	.short	0x3b2e
 8008dd8:	5839      	.short	0x5839
 8008dda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dde:	441d      	add	r5, r3
 8008de0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	bfc1      	itttt	gt
 8008de8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dec:	fa08 f803 	lslgt.w	r8, r8, r3
 8008df0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008df4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008df8:	bfd6      	itet	le
 8008dfa:	f1c3 0320 	rsble	r3, r3, #32
 8008dfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e02:	fa06 f003 	lslle.w	r0, r6, r3
 8008e06:	f7f7 fb8d 	bl	8000524 <__aeabi_ui2d>
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e10:	3d01      	subs	r5, #1
 8008e12:	920e      	str	r2, [sp, #56]	; 0x38
 8008e14:	e76f      	b.n	8008cf6 <_dtoa_r+0x126>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e7b3      	b.n	8008d82 <_dtoa_r+0x1b2>
 8008e1a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e1c:	e7b2      	b.n	8008d84 <_dtoa_r+0x1b4>
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	eba3 030b 	sub.w	r3, r3, fp
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f1cb 0300 	rsb	r3, fp, #0
 8008e2a:	9308      	str	r3, [sp, #32]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e30:	e7bf      	b.n	8008db2 <_dtoa_r+0x1e2>
 8008e32:	2300      	movs	r3, #0
 8008e34:	9309      	str	r3, [sp, #36]	; 0x24
 8008e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dc52      	bgt.n	8008ee2 <_dtoa_r+0x312>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	461a      	mov	r2, r3
 8008e44:	920a      	str	r2, [sp, #40]	; 0x28
 8008e46:	e00b      	b.n	8008e60 <_dtoa_r+0x290>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7f3      	b.n	8008e34 <_dtoa_r+0x264>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	445b      	add	r3, fp
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	3301      	adds	r3, #1
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	bfb8      	it	lt
 8008e5e:	2301      	movlt	r3, #1
 8008e60:	69e0      	ldr	r0, [r4, #28]
 8008e62:	2100      	movs	r1, #0
 8008e64:	2204      	movs	r2, #4
 8008e66:	f102 0614 	add.w	r6, r2, #20
 8008e6a:	429e      	cmp	r6, r3
 8008e6c:	d93d      	bls.n	8008eea <_dtoa_r+0x31a>
 8008e6e:	6041      	str	r1, [r0, #4]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 fceb 	bl	800984c <_Balloc>
 8008e76:	9000      	str	r0, [sp, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d139      	bne.n	8008ef0 <_dtoa_r+0x320>
 8008e7c:	4b16      	ldr	r3, [pc, #88]	; (8008ed8 <_dtoa_r+0x308>)
 8008e7e:	4602      	mov	r2, r0
 8008e80:	f240 11af 	movw	r1, #431	; 0x1af
 8008e84:	e6bd      	b.n	8008c02 <_dtoa_r+0x32>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e7e1      	b.n	8008e4e <_dtoa_r+0x27e>
 8008e8a:	2501      	movs	r5, #1
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	9509      	str	r5, [sp, #36]	; 0x24
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2312      	movs	r3, #18
 8008e9e:	e7d1      	b.n	8008e44 <_dtoa_r+0x274>
 8008ea0:	636f4361 	.word	0x636f4361
 8008ea4:	3fd287a7 	.word	0x3fd287a7
 8008ea8:	8b60c8b3 	.word	0x8b60c8b3
 8008eac:	3fc68a28 	.word	0x3fc68a28
 8008eb0:	509f79fb 	.word	0x509f79fb
 8008eb4:	3fd34413 	.word	0x3fd34413
 8008eb8:	0800c33b 	.word	0x0800c33b
 8008ebc:	0800c352 	.word	0x0800c352
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	0800c337 	.word	0x0800c337
 8008ec8:	0800c32e 	.word	0x0800c32e
 8008ecc:	0800c306 	.word	0x0800c306
 8008ed0:	3ff80000 	.word	0x3ff80000
 8008ed4:	0800c440 	.word	0x0800c440
 8008ed8:	0800c3aa 	.word	0x0800c3aa
 8008edc:	2301      	movs	r3, #1
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	e7d7      	b.n	8008e92 <_dtoa_r+0x2c2>
 8008ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	9304      	str	r3, [sp, #16]
 8008ee8:	e7ba      	b.n	8008e60 <_dtoa_r+0x290>
 8008eea:	3101      	adds	r1, #1
 8008eec:	0052      	lsls	r2, r2, #1
 8008eee:	e7ba      	b.n	8008e66 <_dtoa_r+0x296>
 8008ef0:	69e3      	ldr	r3, [r4, #28]
 8008ef2:	9a00      	ldr	r2, [sp, #0]
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	2b0e      	cmp	r3, #14
 8008efa:	f200 80a8 	bhi.w	800904e <_dtoa_r+0x47e>
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	f000 80a5 	beq.w	800904e <_dtoa_r+0x47e>
 8008f04:	f1bb 0f00 	cmp.w	fp, #0
 8008f08:	dd38      	ble.n	8008f7c <_dtoa_r+0x3ac>
 8008f0a:	4bc0      	ldr	r3, [pc, #768]	; (800920c <_dtoa_r+0x63c>)
 8008f0c:	f00b 020f 	and.w	r2, fp, #15
 8008f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008f20:	d019      	beq.n	8008f56 <_dtoa_r+0x386>
 8008f22:	4bbb      	ldr	r3, [pc, #748]	; (8009210 <_dtoa_r+0x640>)
 8008f24:	ec51 0b18 	vmov	r0, r1, d8
 8008f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f2c:	f7f7 fc9e 	bl	800086c <__aeabi_ddiv>
 8008f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f34:	f008 080f 	and.w	r8, r8, #15
 8008f38:	2503      	movs	r5, #3
 8008f3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009210 <_dtoa_r+0x640>
 8008f3e:	f1b8 0f00 	cmp.w	r8, #0
 8008f42:	d10a      	bne.n	8008f5a <_dtoa_r+0x38a>
 8008f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	f7f7 fc8e 	bl	800086c <__aeabi_ddiv>
 8008f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f54:	e02b      	b.n	8008fae <_dtoa_r+0x3de>
 8008f56:	2502      	movs	r5, #2
 8008f58:	e7ef      	b.n	8008f3a <_dtoa_r+0x36a>
 8008f5a:	f018 0f01 	tst.w	r8, #1
 8008f5e:	d008      	beq.n	8008f72 <_dtoa_r+0x3a2>
 8008f60:	4630      	mov	r0, r6
 8008f62:	4639      	mov	r1, r7
 8008f64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f68:	f7f7 fb56 	bl	8000618 <__aeabi_dmul>
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460f      	mov	r7, r1
 8008f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f76:	f109 0908 	add.w	r9, r9, #8
 8008f7a:	e7e0      	b.n	8008f3e <_dtoa_r+0x36e>
 8008f7c:	f000 809f 	beq.w	80090be <_dtoa_r+0x4ee>
 8008f80:	f1cb 0600 	rsb	r6, fp, #0
 8008f84:	4ba1      	ldr	r3, [pc, #644]	; (800920c <_dtoa_r+0x63c>)
 8008f86:	4fa2      	ldr	r7, [pc, #648]	; (8009210 <_dtoa_r+0x640>)
 8008f88:	f006 020f 	and.w	r2, r6, #15
 8008f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	ec51 0b18 	vmov	r0, r1, d8
 8008f98:	f7f7 fb3e 	bl	8000618 <__aeabi_dmul>
 8008f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa0:	1136      	asrs	r6, r6, #4
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2502      	movs	r5, #2
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	d17e      	bne.n	80090a8 <_dtoa_r+0x4d8>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1d0      	bne.n	8008f50 <_dtoa_r+0x380>
 8008fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8084 	beq.w	80090c2 <_dtoa_r+0x4f2>
 8008fba:	4b96      	ldr	r3, [pc, #600]	; (8009214 <_dtoa_r+0x644>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	f7f7 fd9b 	bl	8000afc <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d07b      	beq.n	80090c2 <_dtoa_r+0x4f2>
 8008fca:	9b04      	ldr	r3, [sp, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d078      	beq.n	80090c2 <_dtoa_r+0x4f2>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd39      	ble.n	800904a <_dtoa_r+0x47a>
 8008fd6:	4b90      	ldr	r3, [pc, #576]	; (8009218 <_dtoa_r+0x648>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 fb1b 	bl	8000618 <__aeabi_dmul>
 8008fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe6:	9e01      	ldr	r6, [sp, #4]
 8008fe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008fec:	3501      	adds	r5, #1
 8008fee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7f7 faa6 	bl	8000544 <__aeabi_i2d>
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	f7f7 fb0c 	bl	8000618 <__aeabi_dmul>
 8009000:	4b86      	ldr	r3, [pc, #536]	; (800921c <_dtoa_r+0x64c>)
 8009002:	2200      	movs	r2, #0
 8009004:	f7f7 f952 	bl	80002ac <__adddf3>
 8009008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800900c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	2e00      	cmp	r6, #0
 8009014:	d158      	bne.n	80090c8 <_dtoa_r+0x4f8>
 8009016:	4b82      	ldr	r3, [pc, #520]	; (8009220 <_dtoa_r+0x650>)
 8009018:	2200      	movs	r2, #0
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 f943 	bl	80002a8 <__aeabi_dsub>
 8009022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009026:	4680      	mov	r8, r0
 8009028:	4689      	mov	r9, r1
 800902a:	f7f7 fd85 	bl	8000b38 <__aeabi_dcmpgt>
 800902e:	2800      	cmp	r0, #0
 8009030:	f040 8296 	bne.w	8009560 <_dtoa_r+0x990>
 8009034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009038:	4640      	mov	r0, r8
 800903a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 fd5c 	bl	8000afc <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	f040 8289 	bne.w	800955c <_dtoa_r+0x98c>
 800904a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800904e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009050:	2b00      	cmp	r3, #0
 8009052:	f2c0 814e 	blt.w	80092f2 <_dtoa_r+0x722>
 8009056:	f1bb 0f0e 	cmp.w	fp, #14
 800905a:	f300 814a 	bgt.w	80092f2 <_dtoa_r+0x722>
 800905e:	4b6b      	ldr	r3, [pc, #428]	; (800920c <_dtoa_r+0x63c>)
 8009060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	f280 80dc 	bge.w	8009228 <_dtoa_r+0x658>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f300 80d8 	bgt.w	8009228 <_dtoa_r+0x658>
 8009078:	f040 826f 	bne.w	800955a <_dtoa_r+0x98a>
 800907c:	4b68      	ldr	r3, [pc, #416]	; (8009220 <_dtoa_r+0x650>)
 800907e:	2200      	movs	r2, #0
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 fac8 	bl	8000618 <__aeabi_dmul>
 8009088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800908c:	f7f7 fd4a 	bl	8000b24 <__aeabi_dcmpge>
 8009090:	9e04      	ldr	r6, [sp, #16]
 8009092:	4637      	mov	r7, r6
 8009094:	2800      	cmp	r0, #0
 8009096:	f040 8245 	bne.w	8009524 <_dtoa_r+0x954>
 800909a:	9d00      	ldr	r5, [sp, #0]
 800909c:	2331      	movs	r3, #49	; 0x31
 800909e:	f805 3b01 	strb.w	r3, [r5], #1
 80090a2:	f10b 0b01 	add.w	fp, fp, #1
 80090a6:	e241      	b.n	800952c <_dtoa_r+0x95c>
 80090a8:	07f2      	lsls	r2, r6, #31
 80090aa:	d505      	bpl.n	80090b8 <_dtoa_r+0x4e8>
 80090ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	3501      	adds	r5, #1
 80090b6:	2301      	movs	r3, #1
 80090b8:	1076      	asrs	r6, r6, #1
 80090ba:	3708      	adds	r7, #8
 80090bc:	e773      	b.n	8008fa6 <_dtoa_r+0x3d6>
 80090be:	2502      	movs	r5, #2
 80090c0:	e775      	b.n	8008fae <_dtoa_r+0x3de>
 80090c2:	9e04      	ldr	r6, [sp, #16]
 80090c4:	465f      	mov	r7, fp
 80090c6:	e792      	b.n	8008fee <_dtoa_r+0x41e>
 80090c8:	9900      	ldr	r1, [sp, #0]
 80090ca:	4b50      	ldr	r3, [pc, #320]	; (800920c <_dtoa_r+0x63c>)
 80090cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090d0:	4431      	add	r1, r6
 80090d2:	9102      	str	r1, [sp, #8]
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	eeb0 9a47 	vmov.f32	s18, s14
 80090da:	eef0 9a67 	vmov.f32	s19, s15
 80090de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d044      	beq.n	8009174 <_dtoa_r+0x5a4>
 80090ea:	494e      	ldr	r1, [pc, #312]	; (8009224 <_dtoa_r+0x654>)
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7f7 fbbd 	bl	800086c <__aeabi_ddiv>
 80090f2:	ec53 2b19 	vmov	r2, r3, d9
 80090f6:	f7f7 f8d7 	bl	80002a8 <__aeabi_dsub>
 80090fa:	9d00      	ldr	r5, [sp, #0]
 80090fc:	ec41 0b19 	vmov	d9, r0, r1
 8009100:	4649      	mov	r1, r9
 8009102:	4640      	mov	r0, r8
 8009104:	f7f7 fd38 	bl	8000b78 <__aeabi_d2iz>
 8009108:	4606      	mov	r6, r0
 800910a:	f7f7 fa1b 	bl	8000544 <__aeabi_i2d>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4640      	mov	r0, r8
 8009114:	4649      	mov	r1, r9
 8009116:	f7f7 f8c7 	bl	80002a8 <__aeabi_dsub>
 800911a:	3630      	adds	r6, #48	; 0x30
 800911c:	f805 6b01 	strb.w	r6, [r5], #1
 8009120:	ec53 2b19 	vmov	r2, r3, d9
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	f7f7 fce8 	bl	8000afc <__aeabi_dcmplt>
 800912c:	2800      	cmp	r0, #0
 800912e:	d164      	bne.n	80091fa <_dtoa_r+0x62a>
 8009130:	4642      	mov	r2, r8
 8009132:	464b      	mov	r3, r9
 8009134:	4937      	ldr	r1, [pc, #220]	; (8009214 <_dtoa_r+0x644>)
 8009136:	2000      	movs	r0, #0
 8009138:	f7f7 f8b6 	bl	80002a8 <__aeabi_dsub>
 800913c:	ec53 2b19 	vmov	r2, r3, d9
 8009140:	f7f7 fcdc 	bl	8000afc <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	f040 80b6 	bne.w	80092b6 <_dtoa_r+0x6e6>
 800914a:	9b02      	ldr	r3, [sp, #8]
 800914c:	429d      	cmp	r5, r3
 800914e:	f43f af7c 	beq.w	800904a <_dtoa_r+0x47a>
 8009152:	4b31      	ldr	r3, [pc, #196]	; (8009218 <_dtoa_r+0x648>)
 8009154:	ec51 0b19 	vmov	r0, r1, d9
 8009158:	2200      	movs	r2, #0
 800915a:	f7f7 fa5d 	bl	8000618 <__aeabi_dmul>
 800915e:	4b2e      	ldr	r3, [pc, #184]	; (8009218 <_dtoa_r+0x648>)
 8009160:	ec41 0b19 	vmov	d9, r0, r1
 8009164:	2200      	movs	r2, #0
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 fa55 	bl	8000618 <__aeabi_dmul>
 800916e:	4680      	mov	r8, r0
 8009170:	4689      	mov	r9, r1
 8009172:	e7c5      	b.n	8009100 <_dtoa_r+0x530>
 8009174:	ec51 0b17 	vmov	r0, r1, d7
 8009178:	f7f7 fa4e 	bl	8000618 <__aeabi_dmul>
 800917c:	9b02      	ldr	r3, [sp, #8]
 800917e:	9d00      	ldr	r5, [sp, #0]
 8009180:	930f      	str	r3, [sp, #60]	; 0x3c
 8009182:	ec41 0b19 	vmov	d9, r0, r1
 8009186:	4649      	mov	r1, r9
 8009188:	4640      	mov	r0, r8
 800918a:	f7f7 fcf5 	bl	8000b78 <__aeabi_d2iz>
 800918e:	4606      	mov	r6, r0
 8009190:	f7f7 f9d8 	bl	8000544 <__aeabi_i2d>
 8009194:	3630      	adds	r6, #48	; 0x30
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 f883 	bl	80002a8 <__aeabi_dsub>
 80091a2:	f805 6b01 	strb.w	r6, [r5], #1
 80091a6:	9b02      	ldr	r3, [sp, #8]
 80091a8:	429d      	cmp	r5, r3
 80091aa:	4680      	mov	r8, r0
 80091ac:	4689      	mov	r9, r1
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	d124      	bne.n	80091fe <_dtoa_r+0x62e>
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <_dtoa_r+0x654>)
 80091b6:	ec51 0b19 	vmov	r0, r1, d9
 80091ba:	f7f7 f877 	bl	80002ac <__adddf3>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4640      	mov	r0, r8
 80091c4:	4649      	mov	r1, r9
 80091c6:	f7f7 fcb7 	bl	8000b38 <__aeabi_dcmpgt>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d173      	bne.n	80092b6 <_dtoa_r+0x6e6>
 80091ce:	ec53 2b19 	vmov	r2, r3, d9
 80091d2:	4914      	ldr	r1, [pc, #80]	; (8009224 <_dtoa_r+0x654>)
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7f7 f867 	bl	80002a8 <__aeabi_dsub>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4640      	mov	r0, r8
 80091e0:	4649      	mov	r1, r9
 80091e2:	f7f7 fc8b 	bl	8000afc <__aeabi_dcmplt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f af2f 	beq.w	800904a <_dtoa_r+0x47a>
 80091ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091ee:	1e6b      	subs	r3, r5, #1
 80091f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091f6:	2b30      	cmp	r3, #48	; 0x30
 80091f8:	d0f8      	beq.n	80091ec <_dtoa_r+0x61c>
 80091fa:	46bb      	mov	fp, r7
 80091fc:	e04a      	b.n	8009294 <_dtoa_r+0x6c4>
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <_dtoa_r+0x648>)
 8009200:	f7f7 fa0a 	bl	8000618 <__aeabi_dmul>
 8009204:	4680      	mov	r8, r0
 8009206:	4689      	mov	r9, r1
 8009208:	e7bd      	b.n	8009186 <_dtoa_r+0x5b6>
 800920a:	bf00      	nop
 800920c:	0800c440 	.word	0x0800c440
 8009210:	0800c418 	.word	0x0800c418
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	40240000 	.word	0x40240000
 800921c:	401c0000 	.word	0x401c0000
 8009220:	40140000 	.word	0x40140000
 8009224:	3fe00000 	.word	0x3fe00000
 8009228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800922c:	9d00      	ldr	r5, [sp, #0]
 800922e:	4642      	mov	r2, r8
 8009230:	464b      	mov	r3, r9
 8009232:	4630      	mov	r0, r6
 8009234:	4639      	mov	r1, r7
 8009236:	f7f7 fb19 	bl	800086c <__aeabi_ddiv>
 800923a:	f7f7 fc9d 	bl	8000b78 <__aeabi_d2iz>
 800923e:	9001      	str	r0, [sp, #4]
 8009240:	f7f7 f980 	bl	8000544 <__aeabi_i2d>
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	f7f7 f9e6 	bl	8000618 <__aeabi_dmul>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f828 	bl	80002a8 <__aeabi_dsub>
 8009258:	9e01      	ldr	r6, [sp, #4]
 800925a:	9f04      	ldr	r7, [sp, #16]
 800925c:	3630      	adds	r6, #48	; 0x30
 800925e:	f805 6b01 	strb.w	r6, [r5], #1
 8009262:	9e00      	ldr	r6, [sp, #0]
 8009264:	1bae      	subs	r6, r5, r6
 8009266:	42b7      	cmp	r7, r6
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	d134      	bne.n	80092d8 <_dtoa_r+0x708>
 800926e:	f7f7 f81d 	bl	80002ac <__adddf3>
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	f7f7 fc5d 	bl	8000b38 <__aeabi_dcmpgt>
 800927e:	b9c8      	cbnz	r0, 80092b4 <_dtoa_r+0x6e4>
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	4630      	mov	r0, r6
 8009286:	4639      	mov	r1, r7
 8009288:	f7f7 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800928c:	b110      	cbz	r0, 8009294 <_dtoa_r+0x6c4>
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	07db      	lsls	r3, r3, #31
 8009292:	d40f      	bmi.n	80092b4 <_dtoa_r+0x6e4>
 8009294:	4651      	mov	r1, sl
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fb18 	bl	80098cc <_Bfree>
 800929c:	2300      	movs	r3, #0
 800929e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092a0:	702b      	strb	r3, [r5, #0]
 80092a2:	f10b 0301 	add.w	r3, fp, #1
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f43f ace2 	beq.w	8008c74 <_dtoa_r+0xa4>
 80092b0:	601d      	str	r5, [r3, #0]
 80092b2:	e4df      	b.n	8008c74 <_dtoa_r+0xa4>
 80092b4:	465f      	mov	r7, fp
 80092b6:	462b      	mov	r3, r5
 80092b8:	461d      	mov	r5, r3
 80092ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092be:	2a39      	cmp	r2, #57	; 0x39
 80092c0:	d106      	bne.n	80092d0 <_dtoa_r+0x700>
 80092c2:	9a00      	ldr	r2, [sp, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d1f7      	bne.n	80092b8 <_dtoa_r+0x6e8>
 80092c8:	9900      	ldr	r1, [sp, #0]
 80092ca:	2230      	movs	r2, #48	; 0x30
 80092cc:	3701      	adds	r7, #1
 80092ce:	700a      	strb	r2, [r1, #0]
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	3201      	adds	r2, #1
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e790      	b.n	80091fa <_dtoa_r+0x62a>
 80092d8:	4ba3      	ldr	r3, [pc, #652]	; (8009568 <_dtoa_r+0x998>)
 80092da:	2200      	movs	r2, #0
 80092dc:	f7f7 f99c 	bl	8000618 <__aeabi_dmul>
 80092e0:	2200      	movs	r2, #0
 80092e2:	2300      	movs	r3, #0
 80092e4:	4606      	mov	r6, r0
 80092e6:	460f      	mov	r7, r1
 80092e8:	f7f7 fbfe 	bl	8000ae8 <__aeabi_dcmpeq>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d09e      	beq.n	800922e <_dtoa_r+0x65e>
 80092f0:	e7d0      	b.n	8009294 <_dtoa_r+0x6c4>
 80092f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	f000 80ca 	beq.w	800948e <_dtoa_r+0x8be>
 80092fa:	9a07      	ldr	r2, [sp, #28]
 80092fc:	2a01      	cmp	r2, #1
 80092fe:	f300 80ad 	bgt.w	800945c <_dtoa_r+0x88c>
 8009302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009304:	2a00      	cmp	r2, #0
 8009306:	f000 80a5 	beq.w	8009454 <_dtoa_r+0x884>
 800930a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800930e:	9e08      	ldr	r6, [sp, #32]
 8009310:	9d05      	ldr	r5, [sp, #20]
 8009312:	9a05      	ldr	r2, [sp, #20]
 8009314:	441a      	add	r2, r3
 8009316:	9205      	str	r2, [sp, #20]
 8009318:	9a06      	ldr	r2, [sp, #24]
 800931a:	2101      	movs	r1, #1
 800931c:	441a      	add	r2, r3
 800931e:	4620      	mov	r0, r4
 8009320:	9206      	str	r2, [sp, #24]
 8009322:	f000 fbd3 	bl	8009acc <__i2b>
 8009326:	4607      	mov	r7, r0
 8009328:	b165      	cbz	r5, 8009344 <_dtoa_r+0x774>
 800932a:	9b06      	ldr	r3, [sp, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd09      	ble.n	8009344 <_dtoa_r+0x774>
 8009330:	42ab      	cmp	r3, r5
 8009332:	9a05      	ldr	r2, [sp, #20]
 8009334:	bfa8      	it	ge
 8009336:	462b      	movge	r3, r5
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	9205      	str	r2, [sp, #20]
 800933c:	9a06      	ldr	r2, [sp, #24]
 800933e:	1aed      	subs	r5, r5, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	9b08      	ldr	r3, [sp, #32]
 8009346:	b1f3      	cbz	r3, 8009386 <_dtoa_r+0x7b6>
 8009348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 80a3 	beq.w	8009496 <_dtoa_r+0x8c6>
 8009350:	2e00      	cmp	r6, #0
 8009352:	dd10      	ble.n	8009376 <_dtoa_r+0x7a6>
 8009354:	4639      	mov	r1, r7
 8009356:	4632      	mov	r2, r6
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fc77 	bl	8009c4c <__pow5mult>
 800935e:	4652      	mov	r2, sl
 8009360:	4601      	mov	r1, r0
 8009362:	4607      	mov	r7, r0
 8009364:	4620      	mov	r0, r4
 8009366:	f000 fbc7 	bl	8009af8 <__multiply>
 800936a:	4651      	mov	r1, sl
 800936c:	4680      	mov	r8, r0
 800936e:	4620      	mov	r0, r4
 8009370:	f000 faac 	bl	80098cc <_Bfree>
 8009374:	46c2      	mov	sl, r8
 8009376:	9b08      	ldr	r3, [sp, #32]
 8009378:	1b9a      	subs	r2, r3, r6
 800937a:	d004      	beq.n	8009386 <_dtoa_r+0x7b6>
 800937c:	4651      	mov	r1, sl
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fc64 	bl	8009c4c <__pow5mult>
 8009384:	4682      	mov	sl, r0
 8009386:	2101      	movs	r1, #1
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fb9f 	bl	8009acc <__i2b>
 800938e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009390:	2b00      	cmp	r3, #0
 8009392:	4606      	mov	r6, r0
 8009394:	f340 8081 	ble.w	800949a <_dtoa_r+0x8ca>
 8009398:	461a      	mov	r2, r3
 800939a:	4601      	mov	r1, r0
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fc55 	bl	8009c4c <__pow5mult>
 80093a2:	9b07      	ldr	r3, [sp, #28]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	4606      	mov	r6, r0
 80093a8:	dd7a      	ble.n	80094a0 <_dtoa_r+0x8d0>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	6933      	ldr	r3, [r6, #16]
 80093b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093b4:	6918      	ldr	r0, [r3, #16]
 80093b6:	f000 fb3b 	bl	8009a30 <__hi0bits>
 80093ba:	f1c0 0020 	rsb	r0, r0, #32
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	4418      	add	r0, r3
 80093c2:	f010 001f 	ands.w	r0, r0, #31
 80093c6:	f000 8094 	beq.w	80094f2 <_dtoa_r+0x922>
 80093ca:	f1c0 0320 	rsb	r3, r0, #32
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	f340 8085 	ble.w	80094de <_dtoa_r+0x90e>
 80093d4:	9b05      	ldr	r3, [sp, #20]
 80093d6:	f1c0 001c 	rsb	r0, r0, #28
 80093da:	4403      	add	r3, r0
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	4403      	add	r3, r0
 80093e2:	4405      	add	r5, r0
 80093e4:	9306      	str	r3, [sp, #24]
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dd05      	ble.n	80093f8 <_dtoa_r+0x828>
 80093ec:	4651      	mov	r1, sl
 80093ee:	461a      	mov	r2, r3
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 fc85 	bl	8009d00 <__lshift>
 80093f6:	4682      	mov	sl, r0
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	dd05      	ble.n	800940a <_dtoa_r+0x83a>
 80093fe:	4631      	mov	r1, r6
 8009400:	461a      	mov	r2, r3
 8009402:	4620      	mov	r0, r4
 8009404:	f000 fc7c 	bl	8009d00 <__lshift>
 8009408:	4606      	mov	r6, r0
 800940a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	d072      	beq.n	80094f6 <_dtoa_r+0x926>
 8009410:	4631      	mov	r1, r6
 8009412:	4650      	mov	r0, sl
 8009414:	f000 fce0 	bl	8009dd8 <__mcmp>
 8009418:	2800      	cmp	r0, #0
 800941a:	da6c      	bge.n	80094f6 <_dtoa_r+0x926>
 800941c:	2300      	movs	r3, #0
 800941e:	4651      	mov	r1, sl
 8009420:	220a      	movs	r2, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fa74 	bl	8009910 <__multadd>
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800942e:	4682      	mov	sl, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 81b0 	beq.w	8009796 <_dtoa_r+0xbc6>
 8009436:	2300      	movs	r3, #0
 8009438:	4639      	mov	r1, r7
 800943a:	220a      	movs	r2, #10
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fa67 	bl	8009910 <__multadd>
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	4607      	mov	r7, r0
 8009448:	f300 8096 	bgt.w	8009578 <_dtoa_r+0x9a8>
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	2b02      	cmp	r3, #2
 8009450:	dc59      	bgt.n	8009506 <_dtoa_r+0x936>
 8009452:	e091      	b.n	8009578 <_dtoa_r+0x9a8>
 8009454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800945a:	e758      	b.n	800930e <_dtoa_r+0x73e>
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	1e5e      	subs	r6, r3, #1
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	42b3      	cmp	r3, r6
 8009464:	bfbf      	itttt	lt
 8009466:	9b08      	ldrlt	r3, [sp, #32]
 8009468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800946a:	9608      	strlt	r6, [sp, #32]
 800946c:	1af3      	sublt	r3, r6, r3
 800946e:	bfb4      	ite	lt
 8009470:	18d2      	addlt	r2, r2, r3
 8009472:	1b9e      	subge	r6, r3, r6
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	bfbc      	itt	lt
 8009478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800947a:	2600      	movlt	r6, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	bfb7      	itett	lt
 8009480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009488:	1a9d      	sublt	r5, r3, r2
 800948a:	2300      	movlt	r3, #0
 800948c:	e741      	b.n	8009312 <_dtoa_r+0x742>
 800948e:	9e08      	ldr	r6, [sp, #32]
 8009490:	9d05      	ldr	r5, [sp, #20]
 8009492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009494:	e748      	b.n	8009328 <_dtoa_r+0x758>
 8009496:	9a08      	ldr	r2, [sp, #32]
 8009498:	e770      	b.n	800937c <_dtoa_r+0x7ac>
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	2b01      	cmp	r3, #1
 800949e:	dc19      	bgt.n	80094d4 <_dtoa_r+0x904>
 80094a0:	9b02      	ldr	r3, [sp, #8]
 80094a2:	b9bb      	cbnz	r3, 80094d4 <_dtoa_r+0x904>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094aa:	b99b      	cbnz	r3, 80094d4 <_dtoa_r+0x904>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094b2:	0d1b      	lsrs	r3, r3, #20
 80094b4:	051b      	lsls	r3, r3, #20
 80094b6:	b183      	cbz	r3, 80094da <_dtoa_r+0x90a>
 80094b8:	9b05      	ldr	r3, [sp, #20]
 80094ba:	3301      	adds	r3, #1
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	9b06      	ldr	r3, [sp, #24]
 80094c0:	3301      	adds	r3, #1
 80094c2:	9306      	str	r3, [sp, #24]
 80094c4:	f04f 0801 	mov.w	r8, #1
 80094c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f47f af6f 	bne.w	80093ae <_dtoa_r+0x7de>
 80094d0:	2001      	movs	r0, #1
 80094d2:	e774      	b.n	80093be <_dtoa_r+0x7ee>
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	e7f6      	b.n	80094c8 <_dtoa_r+0x8f8>
 80094da:	4698      	mov	r8, r3
 80094dc:	e7f4      	b.n	80094c8 <_dtoa_r+0x8f8>
 80094de:	d082      	beq.n	80093e6 <_dtoa_r+0x816>
 80094e0:	9a05      	ldr	r2, [sp, #20]
 80094e2:	331c      	adds	r3, #28
 80094e4:	441a      	add	r2, r3
 80094e6:	9205      	str	r2, [sp, #20]
 80094e8:	9a06      	ldr	r2, [sp, #24]
 80094ea:	441a      	add	r2, r3
 80094ec:	441d      	add	r5, r3
 80094ee:	9206      	str	r2, [sp, #24]
 80094f0:	e779      	b.n	80093e6 <_dtoa_r+0x816>
 80094f2:	4603      	mov	r3, r0
 80094f4:	e7f4      	b.n	80094e0 <_dtoa_r+0x910>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc37      	bgt.n	800956c <_dtoa_r+0x99c>
 80094fc:	9b07      	ldr	r3, [sp, #28]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	dd34      	ble.n	800956c <_dtoa_r+0x99c>
 8009502:	9b04      	ldr	r3, [sp, #16]
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	b963      	cbnz	r3, 8009524 <_dtoa_r+0x954>
 800950a:	4631      	mov	r1, r6
 800950c:	2205      	movs	r2, #5
 800950e:	4620      	mov	r0, r4
 8009510:	f000 f9fe 	bl	8009910 <__multadd>
 8009514:	4601      	mov	r1, r0
 8009516:	4606      	mov	r6, r0
 8009518:	4650      	mov	r0, sl
 800951a:	f000 fc5d 	bl	8009dd8 <__mcmp>
 800951e:	2800      	cmp	r0, #0
 8009520:	f73f adbb 	bgt.w	800909a <_dtoa_r+0x4ca>
 8009524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009526:	9d00      	ldr	r5, [sp, #0]
 8009528:	ea6f 0b03 	mvn.w	fp, r3
 800952c:	f04f 0800 	mov.w	r8, #0
 8009530:	4631      	mov	r1, r6
 8009532:	4620      	mov	r0, r4
 8009534:	f000 f9ca 	bl	80098cc <_Bfree>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f43f aeab 	beq.w	8009294 <_dtoa_r+0x6c4>
 800953e:	f1b8 0f00 	cmp.w	r8, #0
 8009542:	d005      	beq.n	8009550 <_dtoa_r+0x980>
 8009544:	45b8      	cmp	r8, r7
 8009546:	d003      	beq.n	8009550 <_dtoa_r+0x980>
 8009548:	4641      	mov	r1, r8
 800954a:	4620      	mov	r0, r4
 800954c:	f000 f9be 	bl	80098cc <_Bfree>
 8009550:	4639      	mov	r1, r7
 8009552:	4620      	mov	r0, r4
 8009554:	f000 f9ba 	bl	80098cc <_Bfree>
 8009558:	e69c      	b.n	8009294 <_dtoa_r+0x6c4>
 800955a:	2600      	movs	r6, #0
 800955c:	4637      	mov	r7, r6
 800955e:	e7e1      	b.n	8009524 <_dtoa_r+0x954>
 8009560:	46bb      	mov	fp, r7
 8009562:	4637      	mov	r7, r6
 8009564:	e599      	b.n	800909a <_dtoa_r+0x4ca>
 8009566:	bf00      	nop
 8009568:	40240000 	.word	0x40240000
 800956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80c8 	beq.w	8009704 <_dtoa_r+0xb34>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	2d00      	cmp	r5, #0
 800957a:	dd05      	ble.n	8009588 <_dtoa_r+0x9b8>
 800957c:	4639      	mov	r1, r7
 800957e:	462a      	mov	r2, r5
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fbbd 	bl	8009d00 <__lshift>
 8009586:	4607      	mov	r7, r0
 8009588:	f1b8 0f00 	cmp.w	r8, #0
 800958c:	d05b      	beq.n	8009646 <_dtoa_r+0xa76>
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4620      	mov	r0, r4
 8009592:	f000 f95b 	bl	800984c <_Balloc>
 8009596:	4605      	mov	r5, r0
 8009598:	b928      	cbnz	r0, 80095a6 <_dtoa_r+0x9d6>
 800959a:	4b83      	ldr	r3, [pc, #524]	; (80097a8 <_dtoa_r+0xbd8>)
 800959c:	4602      	mov	r2, r0
 800959e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80095a2:	f7ff bb2e 	b.w	8008c02 <_dtoa_r+0x32>
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	3202      	adds	r2, #2
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	f107 010c 	add.w	r1, r7, #12
 80095b0:	300c      	adds	r0, #12
 80095b2:	f001 fe3d 	bl	800b230 <memcpy>
 80095b6:	2201      	movs	r2, #1
 80095b8:	4629      	mov	r1, r5
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 fba0 	bl	8009d00 <__lshift>
 80095c0:	9b00      	ldr	r3, [sp, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ca:	4413      	add	r3, r2
 80095cc:	9308      	str	r3, [sp, #32]
 80095ce:	9b02      	ldr	r3, [sp, #8]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	46b8      	mov	r8, r7
 80095d6:	9306      	str	r3, [sp, #24]
 80095d8:	4607      	mov	r7, r0
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	4631      	mov	r1, r6
 80095de:	3b01      	subs	r3, #1
 80095e0:	4650      	mov	r0, sl
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	f7ff fa6a 	bl	8008abc <quorem>
 80095e8:	4641      	mov	r1, r8
 80095ea:	9002      	str	r0, [sp, #8]
 80095ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095f0:	4650      	mov	r0, sl
 80095f2:	f000 fbf1 	bl	8009dd8 <__mcmp>
 80095f6:	463a      	mov	r2, r7
 80095f8:	9005      	str	r0, [sp, #20]
 80095fa:	4631      	mov	r1, r6
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 fc07 	bl	8009e10 <__mdiff>
 8009602:	68c2      	ldr	r2, [r0, #12]
 8009604:	4605      	mov	r5, r0
 8009606:	bb02      	cbnz	r2, 800964a <_dtoa_r+0xa7a>
 8009608:	4601      	mov	r1, r0
 800960a:	4650      	mov	r0, sl
 800960c:	f000 fbe4 	bl	8009dd8 <__mcmp>
 8009610:	4602      	mov	r2, r0
 8009612:	4629      	mov	r1, r5
 8009614:	4620      	mov	r0, r4
 8009616:	9209      	str	r2, [sp, #36]	; 0x24
 8009618:	f000 f958 	bl	80098cc <_Bfree>
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009620:	9d04      	ldr	r5, [sp, #16]
 8009622:	ea43 0102 	orr.w	r1, r3, r2
 8009626:	9b06      	ldr	r3, [sp, #24]
 8009628:	4319      	orrs	r1, r3
 800962a:	d110      	bne.n	800964e <_dtoa_r+0xa7e>
 800962c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009630:	d029      	beq.n	8009686 <_dtoa_r+0xab6>
 8009632:	9b05      	ldr	r3, [sp, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd02      	ble.n	800963e <_dtoa_r+0xa6e>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	f883 9000 	strb.w	r9, [r3]
 8009644:	e774      	b.n	8009530 <_dtoa_r+0x960>
 8009646:	4638      	mov	r0, r7
 8009648:	e7ba      	b.n	80095c0 <_dtoa_r+0x9f0>
 800964a:	2201      	movs	r2, #1
 800964c:	e7e1      	b.n	8009612 <_dtoa_r+0xa42>
 800964e:	9b05      	ldr	r3, [sp, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	db04      	blt.n	800965e <_dtoa_r+0xa8e>
 8009654:	9907      	ldr	r1, [sp, #28]
 8009656:	430b      	orrs	r3, r1
 8009658:	9906      	ldr	r1, [sp, #24]
 800965a:	430b      	orrs	r3, r1
 800965c:	d120      	bne.n	80096a0 <_dtoa_r+0xad0>
 800965e:	2a00      	cmp	r2, #0
 8009660:	dded      	ble.n	800963e <_dtoa_r+0xa6e>
 8009662:	4651      	mov	r1, sl
 8009664:	2201      	movs	r2, #1
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fb4a 	bl	8009d00 <__lshift>
 800966c:	4631      	mov	r1, r6
 800966e:	4682      	mov	sl, r0
 8009670:	f000 fbb2 	bl	8009dd8 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	dc03      	bgt.n	8009680 <_dtoa_r+0xab0>
 8009678:	d1e1      	bne.n	800963e <_dtoa_r+0xa6e>
 800967a:	f019 0f01 	tst.w	r9, #1
 800967e:	d0de      	beq.n	800963e <_dtoa_r+0xa6e>
 8009680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009684:	d1d8      	bne.n	8009638 <_dtoa_r+0xa68>
 8009686:	9a01      	ldr	r2, [sp, #4]
 8009688:	2339      	movs	r3, #57	; 0x39
 800968a:	7013      	strb	r3, [r2, #0]
 800968c:	462b      	mov	r3, r5
 800968e:	461d      	mov	r5, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009696:	2a39      	cmp	r2, #57	; 0x39
 8009698:	d06c      	beq.n	8009774 <_dtoa_r+0xba4>
 800969a:	3201      	adds	r2, #1
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	e747      	b.n	8009530 <_dtoa_r+0x960>
 80096a0:	2a00      	cmp	r2, #0
 80096a2:	dd07      	ble.n	80096b4 <_dtoa_r+0xae4>
 80096a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096a8:	d0ed      	beq.n	8009686 <_dtoa_r+0xab6>
 80096aa:	9a01      	ldr	r2, [sp, #4]
 80096ac:	f109 0301 	add.w	r3, r9, #1
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e73d      	b.n	8009530 <_dtoa_r+0x960>
 80096b4:	9b04      	ldr	r3, [sp, #16]
 80096b6:	9a08      	ldr	r2, [sp, #32]
 80096b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80096bc:	4293      	cmp	r3, r2
 80096be:	d043      	beq.n	8009748 <_dtoa_r+0xb78>
 80096c0:	4651      	mov	r1, sl
 80096c2:	2300      	movs	r3, #0
 80096c4:	220a      	movs	r2, #10
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f922 	bl	8009910 <__multadd>
 80096cc:	45b8      	cmp	r8, r7
 80096ce:	4682      	mov	sl, r0
 80096d0:	f04f 0300 	mov.w	r3, #0
 80096d4:	f04f 020a 	mov.w	r2, #10
 80096d8:	4641      	mov	r1, r8
 80096da:	4620      	mov	r0, r4
 80096dc:	d107      	bne.n	80096ee <_dtoa_r+0xb1e>
 80096de:	f000 f917 	bl	8009910 <__multadd>
 80096e2:	4680      	mov	r8, r0
 80096e4:	4607      	mov	r7, r0
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	e775      	b.n	80095da <_dtoa_r+0xa0a>
 80096ee:	f000 f90f 	bl	8009910 <__multadd>
 80096f2:	4639      	mov	r1, r7
 80096f4:	4680      	mov	r8, r0
 80096f6:	2300      	movs	r3, #0
 80096f8:	220a      	movs	r2, #10
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 f908 	bl	8009910 <__multadd>
 8009700:	4607      	mov	r7, r0
 8009702:	e7f0      	b.n	80096e6 <_dtoa_r+0xb16>
 8009704:	9b04      	ldr	r3, [sp, #16]
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	9d00      	ldr	r5, [sp, #0]
 800970a:	4631      	mov	r1, r6
 800970c:	4650      	mov	r0, sl
 800970e:	f7ff f9d5 	bl	8008abc <quorem>
 8009712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009716:	9b00      	ldr	r3, [sp, #0]
 8009718:	f805 9b01 	strb.w	r9, [r5], #1
 800971c:	1aea      	subs	r2, r5, r3
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	4293      	cmp	r3, r2
 8009722:	dd07      	ble.n	8009734 <_dtoa_r+0xb64>
 8009724:	4651      	mov	r1, sl
 8009726:	2300      	movs	r3, #0
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f8f0 	bl	8009910 <__multadd>
 8009730:	4682      	mov	sl, r0
 8009732:	e7ea      	b.n	800970a <_dtoa_r+0xb3a>
 8009734:	9b01      	ldr	r3, [sp, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfc8      	it	gt
 800973a:	461d      	movgt	r5, r3
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	bfd8      	it	le
 8009740:	2501      	movle	r5, #1
 8009742:	441d      	add	r5, r3
 8009744:	f04f 0800 	mov.w	r8, #0
 8009748:	4651      	mov	r1, sl
 800974a:	2201      	movs	r2, #1
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fad7 	bl	8009d00 <__lshift>
 8009752:	4631      	mov	r1, r6
 8009754:	4682      	mov	sl, r0
 8009756:	f000 fb3f 	bl	8009dd8 <__mcmp>
 800975a:	2800      	cmp	r0, #0
 800975c:	dc96      	bgt.n	800968c <_dtoa_r+0xabc>
 800975e:	d102      	bne.n	8009766 <_dtoa_r+0xb96>
 8009760:	f019 0f01 	tst.w	r9, #1
 8009764:	d192      	bne.n	800968c <_dtoa_r+0xabc>
 8009766:	462b      	mov	r3, r5
 8009768:	461d      	mov	r5, r3
 800976a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800976e:	2a30      	cmp	r2, #48	; 0x30
 8009770:	d0fa      	beq.n	8009768 <_dtoa_r+0xb98>
 8009772:	e6dd      	b.n	8009530 <_dtoa_r+0x960>
 8009774:	9a00      	ldr	r2, [sp, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d189      	bne.n	800968e <_dtoa_r+0xabe>
 800977a:	f10b 0b01 	add.w	fp, fp, #1
 800977e:	2331      	movs	r3, #49	; 0x31
 8009780:	e796      	b.n	80096b0 <_dtoa_r+0xae0>
 8009782:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <_dtoa_r+0xbdc>)
 8009784:	f7ff ba99 	b.w	8008cba <_dtoa_r+0xea>
 8009788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800978a:	2b00      	cmp	r3, #0
 800978c:	f47f aa6d 	bne.w	8008c6a <_dtoa_r+0x9a>
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <_dtoa_r+0xbe0>)
 8009792:	f7ff ba92 	b.w	8008cba <_dtoa_r+0xea>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	dcb5      	bgt.n	8009708 <_dtoa_r+0xb38>
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	f73f aeb1 	bgt.w	8009506 <_dtoa_r+0x936>
 80097a4:	e7b0      	b.n	8009708 <_dtoa_r+0xb38>
 80097a6:	bf00      	nop
 80097a8:	0800c3aa 	.word	0x0800c3aa
 80097ac:	0800c305 	.word	0x0800c305
 80097b0:	0800c32e 	.word	0x0800c32e

080097b4 <_free_r>:
 80097b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d044      	beq.n	8009844 <_free_r+0x90>
 80097ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097be:	9001      	str	r0, [sp, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f1a1 0404 	sub.w	r4, r1, #4
 80097c6:	bfb8      	it	lt
 80097c8:	18e4      	addlt	r4, r4, r3
 80097ca:	f7fe f891 	bl	80078f0 <__malloc_lock>
 80097ce:	4a1e      	ldr	r2, [pc, #120]	; (8009848 <_free_r+0x94>)
 80097d0:	9801      	ldr	r0, [sp, #4]
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	b933      	cbnz	r3, 80097e4 <_free_r+0x30>
 80097d6:	6063      	str	r3, [r4, #4]
 80097d8:	6014      	str	r4, [r2, #0]
 80097da:	b003      	add	sp, #12
 80097dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097e0:	f7fe b88c 	b.w	80078fc <__malloc_unlock>
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d908      	bls.n	80097fa <_free_r+0x46>
 80097e8:	6825      	ldr	r5, [r4, #0]
 80097ea:	1961      	adds	r1, r4, r5
 80097ec:	428b      	cmp	r3, r1
 80097ee:	bf01      	itttt	eq
 80097f0:	6819      	ldreq	r1, [r3, #0]
 80097f2:	685b      	ldreq	r3, [r3, #4]
 80097f4:	1949      	addeq	r1, r1, r5
 80097f6:	6021      	streq	r1, [r4, #0]
 80097f8:	e7ed      	b.n	80097d6 <_free_r+0x22>
 80097fa:	461a      	mov	r2, r3
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	b10b      	cbz	r3, 8009804 <_free_r+0x50>
 8009800:	42a3      	cmp	r3, r4
 8009802:	d9fa      	bls.n	80097fa <_free_r+0x46>
 8009804:	6811      	ldr	r1, [r2, #0]
 8009806:	1855      	adds	r5, r2, r1
 8009808:	42a5      	cmp	r5, r4
 800980a:	d10b      	bne.n	8009824 <_free_r+0x70>
 800980c:	6824      	ldr	r4, [r4, #0]
 800980e:	4421      	add	r1, r4
 8009810:	1854      	adds	r4, r2, r1
 8009812:	42a3      	cmp	r3, r4
 8009814:	6011      	str	r1, [r2, #0]
 8009816:	d1e0      	bne.n	80097da <_free_r+0x26>
 8009818:	681c      	ldr	r4, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	6053      	str	r3, [r2, #4]
 800981e:	440c      	add	r4, r1
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	e7da      	b.n	80097da <_free_r+0x26>
 8009824:	d902      	bls.n	800982c <_free_r+0x78>
 8009826:	230c      	movs	r3, #12
 8009828:	6003      	str	r3, [r0, #0]
 800982a:	e7d6      	b.n	80097da <_free_r+0x26>
 800982c:	6825      	ldr	r5, [r4, #0]
 800982e:	1961      	adds	r1, r4, r5
 8009830:	428b      	cmp	r3, r1
 8009832:	bf04      	itt	eq
 8009834:	6819      	ldreq	r1, [r3, #0]
 8009836:	685b      	ldreq	r3, [r3, #4]
 8009838:	6063      	str	r3, [r4, #4]
 800983a:	bf04      	itt	eq
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	6054      	str	r4, [r2, #4]
 8009842:	e7ca      	b.n	80097da <_free_r+0x26>
 8009844:	b003      	add	sp, #12
 8009846:	bd30      	pop	{r4, r5, pc}
 8009848:	2000058c 	.word	0x2000058c

0800984c <_Balloc>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	69c6      	ldr	r6, [r0, #28]
 8009850:	4604      	mov	r4, r0
 8009852:	460d      	mov	r5, r1
 8009854:	b976      	cbnz	r6, 8009874 <_Balloc+0x28>
 8009856:	2010      	movs	r0, #16
 8009858:	f7fd ff9a 	bl	8007790 <malloc>
 800985c:	4602      	mov	r2, r0
 800985e:	61e0      	str	r0, [r4, #28]
 8009860:	b920      	cbnz	r0, 800986c <_Balloc+0x20>
 8009862:	4b18      	ldr	r3, [pc, #96]	; (80098c4 <_Balloc+0x78>)
 8009864:	4818      	ldr	r0, [pc, #96]	; (80098c8 <_Balloc+0x7c>)
 8009866:	216b      	movs	r1, #107	; 0x6b
 8009868:	f001 fcfa 	bl	800b260 <__assert_func>
 800986c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009870:	6006      	str	r6, [r0, #0]
 8009872:	60c6      	str	r6, [r0, #12]
 8009874:	69e6      	ldr	r6, [r4, #28]
 8009876:	68f3      	ldr	r3, [r6, #12]
 8009878:	b183      	cbz	r3, 800989c <_Balloc+0x50>
 800987a:	69e3      	ldr	r3, [r4, #28]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009882:	b9b8      	cbnz	r0, 80098b4 <_Balloc+0x68>
 8009884:	2101      	movs	r1, #1
 8009886:	fa01 f605 	lsl.w	r6, r1, r5
 800988a:	1d72      	adds	r2, r6, #5
 800988c:	0092      	lsls	r2, r2, #2
 800988e:	4620      	mov	r0, r4
 8009890:	f001 fd04 	bl	800b29c <_calloc_r>
 8009894:	b160      	cbz	r0, 80098b0 <_Balloc+0x64>
 8009896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800989a:	e00e      	b.n	80098ba <_Balloc+0x6e>
 800989c:	2221      	movs	r2, #33	; 0x21
 800989e:	2104      	movs	r1, #4
 80098a0:	4620      	mov	r0, r4
 80098a2:	f001 fcfb 	bl	800b29c <_calloc_r>
 80098a6:	69e3      	ldr	r3, [r4, #28]
 80098a8:	60f0      	str	r0, [r6, #12]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e4      	bne.n	800987a <_Balloc+0x2e>
 80098b0:	2000      	movs	r0, #0
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	6802      	ldr	r2, [r0, #0]
 80098b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098ba:	2300      	movs	r3, #0
 80098bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098c0:	e7f7      	b.n	80098b2 <_Balloc+0x66>
 80098c2:	bf00      	nop
 80098c4:	0800c33b 	.word	0x0800c33b
 80098c8:	0800c3bb 	.word	0x0800c3bb

080098cc <_Bfree>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	69c6      	ldr	r6, [r0, #28]
 80098d0:	4605      	mov	r5, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	b976      	cbnz	r6, 80098f4 <_Bfree+0x28>
 80098d6:	2010      	movs	r0, #16
 80098d8:	f7fd ff5a 	bl	8007790 <malloc>
 80098dc:	4602      	mov	r2, r0
 80098de:	61e8      	str	r0, [r5, #28]
 80098e0:	b920      	cbnz	r0, 80098ec <_Bfree+0x20>
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <_Bfree+0x3c>)
 80098e4:	4809      	ldr	r0, [pc, #36]	; (800990c <_Bfree+0x40>)
 80098e6:	218f      	movs	r1, #143	; 0x8f
 80098e8:	f001 fcba 	bl	800b260 <__assert_func>
 80098ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f0:	6006      	str	r6, [r0, #0]
 80098f2:	60c6      	str	r6, [r0, #12]
 80098f4:	b13c      	cbz	r4, 8009906 <_Bfree+0x3a>
 80098f6:	69eb      	ldr	r3, [r5, #28]
 80098f8:	6862      	ldr	r2, [r4, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009900:	6021      	str	r1, [r4, #0]
 8009902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	0800c33b 	.word	0x0800c33b
 800990c:	0800c3bb 	.word	0x0800c3bb

08009910 <__multadd>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	690d      	ldr	r5, [r1, #16]
 8009916:	4607      	mov	r7, r0
 8009918:	460c      	mov	r4, r1
 800991a:	461e      	mov	r6, r3
 800991c:	f101 0c14 	add.w	ip, r1, #20
 8009920:	2000      	movs	r0, #0
 8009922:	f8dc 3000 	ldr.w	r3, [ip]
 8009926:	b299      	uxth	r1, r3
 8009928:	fb02 6101 	mla	r1, r2, r1, r6
 800992c:	0c1e      	lsrs	r6, r3, #16
 800992e:	0c0b      	lsrs	r3, r1, #16
 8009930:	fb02 3306 	mla	r3, r2, r6, r3
 8009934:	b289      	uxth	r1, r1
 8009936:	3001      	adds	r0, #1
 8009938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800993c:	4285      	cmp	r5, r0
 800993e:	f84c 1b04 	str.w	r1, [ip], #4
 8009942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009946:	dcec      	bgt.n	8009922 <__multadd+0x12>
 8009948:	b30e      	cbz	r6, 800998e <__multadd+0x7e>
 800994a:	68a3      	ldr	r3, [r4, #8]
 800994c:	42ab      	cmp	r3, r5
 800994e:	dc19      	bgt.n	8009984 <__multadd+0x74>
 8009950:	6861      	ldr	r1, [r4, #4]
 8009952:	4638      	mov	r0, r7
 8009954:	3101      	adds	r1, #1
 8009956:	f7ff ff79 	bl	800984c <_Balloc>
 800995a:	4680      	mov	r8, r0
 800995c:	b928      	cbnz	r0, 800996a <__multadd+0x5a>
 800995e:	4602      	mov	r2, r0
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <__multadd+0x84>)
 8009962:	480d      	ldr	r0, [pc, #52]	; (8009998 <__multadd+0x88>)
 8009964:	21ba      	movs	r1, #186	; 0xba
 8009966:	f001 fc7b 	bl	800b260 <__assert_func>
 800996a:	6922      	ldr	r2, [r4, #16]
 800996c:	3202      	adds	r2, #2
 800996e:	f104 010c 	add.w	r1, r4, #12
 8009972:	0092      	lsls	r2, r2, #2
 8009974:	300c      	adds	r0, #12
 8009976:	f001 fc5b 	bl	800b230 <memcpy>
 800997a:	4621      	mov	r1, r4
 800997c:	4638      	mov	r0, r7
 800997e:	f7ff ffa5 	bl	80098cc <_Bfree>
 8009982:	4644      	mov	r4, r8
 8009984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009988:	3501      	adds	r5, #1
 800998a:	615e      	str	r6, [r3, #20]
 800998c:	6125      	str	r5, [r4, #16]
 800998e:	4620      	mov	r0, r4
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009994:	0800c3aa 	.word	0x0800c3aa
 8009998:	0800c3bb 	.word	0x0800c3bb

0800999c <__s2b>:
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a0:	460c      	mov	r4, r1
 80099a2:	4615      	mov	r5, r2
 80099a4:	461f      	mov	r7, r3
 80099a6:	2209      	movs	r2, #9
 80099a8:	3308      	adds	r3, #8
 80099aa:	4606      	mov	r6, r0
 80099ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80099b0:	2100      	movs	r1, #0
 80099b2:	2201      	movs	r2, #1
 80099b4:	429a      	cmp	r2, r3
 80099b6:	db09      	blt.n	80099cc <__s2b+0x30>
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff ff47 	bl	800984c <_Balloc>
 80099be:	b940      	cbnz	r0, 80099d2 <__s2b+0x36>
 80099c0:	4602      	mov	r2, r0
 80099c2:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <__s2b+0x8c>)
 80099c4:	4819      	ldr	r0, [pc, #100]	; (8009a2c <__s2b+0x90>)
 80099c6:	21d3      	movs	r1, #211	; 0xd3
 80099c8:	f001 fc4a 	bl	800b260 <__assert_func>
 80099cc:	0052      	lsls	r2, r2, #1
 80099ce:	3101      	adds	r1, #1
 80099d0:	e7f0      	b.n	80099b4 <__s2b+0x18>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	6143      	str	r3, [r0, #20]
 80099d6:	2d09      	cmp	r5, #9
 80099d8:	f04f 0301 	mov.w	r3, #1
 80099dc:	6103      	str	r3, [r0, #16]
 80099de:	dd16      	ble.n	8009a0e <__s2b+0x72>
 80099e0:	f104 0909 	add.w	r9, r4, #9
 80099e4:	46c8      	mov	r8, r9
 80099e6:	442c      	add	r4, r5
 80099e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099ec:	4601      	mov	r1, r0
 80099ee:	3b30      	subs	r3, #48	; 0x30
 80099f0:	220a      	movs	r2, #10
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ff8c 	bl	8009910 <__multadd>
 80099f8:	45a0      	cmp	r8, r4
 80099fa:	d1f5      	bne.n	80099e8 <__s2b+0x4c>
 80099fc:	f1a5 0408 	sub.w	r4, r5, #8
 8009a00:	444c      	add	r4, r9
 8009a02:	1b2d      	subs	r5, r5, r4
 8009a04:	1963      	adds	r3, r4, r5
 8009a06:	42bb      	cmp	r3, r7
 8009a08:	db04      	blt.n	8009a14 <__s2b+0x78>
 8009a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a0e:	340a      	adds	r4, #10
 8009a10:	2509      	movs	r5, #9
 8009a12:	e7f6      	b.n	8009a02 <__s2b+0x66>
 8009a14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a18:	4601      	mov	r1, r0
 8009a1a:	3b30      	subs	r3, #48	; 0x30
 8009a1c:	220a      	movs	r2, #10
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ff76 	bl	8009910 <__multadd>
 8009a24:	e7ee      	b.n	8009a04 <__s2b+0x68>
 8009a26:	bf00      	nop
 8009a28:	0800c3aa 	.word	0x0800c3aa
 8009a2c:	0800c3bb 	.word	0x0800c3bb

08009a30 <__hi0bits>:
 8009a30:	0c03      	lsrs	r3, r0, #16
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	b9d3      	cbnz	r3, 8009a6c <__hi0bits+0x3c>
 8009a36:	0400      	lsls	r0, r0, #16
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a3e:	bf04      	itt	eq
 8009a40:	0200      	lsleq	r0, r0, #8
 8009a42:	3308      	addeq	r3, #8
 8009a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a48:	bf04      	itt	eq
 8009a4a:	0100      	lsleq	r0, r0, #4
 8009a4c:	3304      	addeq	r3, #4
 8009a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a52:	bf04      	itt	eq
 8009a54:	0080      	lsleq	r0, r0, #2
 8009a56:	3302      	addeq	r3, #2
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	db05      	blt.n	8009a68 <__hi0bits+0x38>
 8009a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a60:	f103 0301 	add.w	r3, r3, #1
 8009a64:	bf08      	it	eq
 8009a66:	2320      	moveq	r3, #32
 8009a68:	4618      	mov	r0, r3
 8009a6a:	4770      	bx	lr
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	e7e4      	b.n	8009a3a <__hi0bits+0xa>

08009a70 <__lo0bits>:
 8009a70:	6803      	ldr	r3, [r0, #0]
 8009a72:	f013 0207 	ands.w	r2, r3, #7
 8009a76:	d00c      	beq.n	8009a92 <__lo0bits+0x22>
 8009a78:	07d9      	lsls	r1, r3, #31
 8009a7a:	d422      	bmi.n	8009ac2 <__lo0bits+0x52>
 8009a7c:	079a      	lsls	r2, r3, #30
 8009a7e:	bf49      	itett	mi
 8009a80:	085b      	lsrmi	r3, r3, #1
 8009a82:	089b      	lsrpl	r3, r3, #2
 8009a84:	6003      	strmi	r3, [r0, #0]
 8009a86:	2201      	movmi	r2, #1
 8009a88:	bf5c      	itt	pl
 8009a8a:	6003      	strpl	r3, [r0, #0]
 8009a8c:	2202      	movpl	r2, #2
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4770      	bx	lr
 8009a92:	b299      	uxth	r1, r3
 8009a94:	b909      	cbnz	r1, 8009a9a <__lo0bits+0x2a>
 8009a96:	0c1b      	lsrs	r3, r3, #16
 8009a98:	2210      	movs	r2, #16
 8009a9a:	b2d9      	uxtb	r1, r3
 8009a9c:	b909      	cbnz	r1, 8009aa2 <__lo0bits+0x32>
 8009a9e:	3208      	adds	r2, #8
 8009aa0:	0a1b      	lsrs	r3, r3, #8
 8009aa2:	0719      	lsls	r1, r3, #28
 8009aa4:	bf04      	itt	eq
 8009aa6:	091b      	lsreq	r3, r3, #4
 8009aa8:	3204      	addeq	r2, #4
 8009aaa:	0799      	lsls	r1, r3, #30
 8009aac:	bf04      	itt	eq
 8009aae:	089b      	lsreq	r3, r3, #2
 8009ab0:	3202      	addeq	r2, #2
 8009ab2:	07d9      	lsls	r1, r3, #31
 8009ab4:	d403      	bmi.n	8009abe <__lo0bits+0x4e>
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	f102 0201 	add.w	r2, r2, #1
 8009abc:	d003      	beq.n	8009ac6 <__lo0bits+0x56>
 8009abe:	6003      	str	r3, [r0, #0]
 8009ac0:	e7e5      	b.n	8009a8e <__lo0bits+0x1e>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	e7e3      	b.n	8009a8e <__lo0bits+0x1e>
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	e7e1      	b.n	8009a8e <__lo0bits+0x1e>
	...

08009acc <__i2b>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	f7ff febb 	bl	800984c <_Balloc>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	b928      	cbnz	r0, 8009ae6 <__i2b+0x1a>
 8009ada:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <__i2b+0x24>)
 8009adc:	4805      	ldr	r0, [pc, #20]	; (8009af4 <__i2b+0x28>)
 8009ade:	f240 1145 	movw	r1, #325	; 0x145
 8009ae2:	f001 fbbd 	bl	800b260 <__assert_func>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	6144      	str	r4, [r0, #20]
 8009aea:	6103      	str	r3, [r0, #16]
 8009aec:	bd10      	pop	{r4, pc}
 8009aee:	bf00      	nop
 8009af0:	0800c3aa 	.word	0x0800c3aa
 8009af4:	0800c3bb 	.word	0x0800c3bb

08009af8 <__multiply>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	4691      	mov	r9, r2
 8009afe:	690a      	ldr	r2, [r1, #16]
 8009b00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	bfb8      	it	lt
 8009b08:	460b      	movlt	r3, r1
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	bfbc      	itt	lt
 8009b0e:	464c      	movlt	r4, r9
 8009b10:	4699      	movlt	r9, r3
 8009b12:	6927      	ldr	r7, [r4, #16]
 8009b14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	6861      	ldr	r1, [r4, #4]
 8009b1c:	eb07 060a 	add.w	r6, r7, sl
 8009b20:	42b3      	cmp	r3, r6
 8009b22:	b085      	sub	sp, #20
 8009b24:	bfb8      	it	lt
 8009b26:	3101      	addlt	r1, #1
 8009b28:	f7ff fe90 	bl	800984c <_Balloc>
 8009b2c:	b930      	cbnz	r0, 8009b3c <__multiply+0x44>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	4b44      	ldr	r3, [pc, #272]	; (8009c44 <__multiply+0x14c>)
 8009b32:	4845      	ldr	r0, [pc, #276]	; (8009c48 <__multiply+0x150>)
 8009b34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b38:	f001 fb92 	bl	800b260 <__assert_func>
 8009b3c:	f100 0514 	add.w	r5, r0, #20
 8009b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b44:	462b      	mov	r3, r5
 8009b46:	2200      	movs	r2, #0
 8009b48:	4543      	cmp	r3, r8
 8009b4a:	d321      	bcc.n	8009b90 <__multiply+0x98>
 8009b4c:	f104 0314 	add.w	r3, r4, #20
 8009b50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b54:	f109 0314 	add.w	r3, r9, #20
 8009b58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b5c:	9202      	str	r2, [sp, #8]
 8009b5e:	1b3a      	subs	r2, r7, r4
 8009b60:	3a15      	subs	r2, #21
 8009b62:	f022 0203 	bic.w	r2, r2, #3
 8009b66:	3204      	adds	r2, #4
 8009b68:	f104 0115 	add.w	r1, r4, #21
 8009b6c:	428f      	cmp	r7, r1
 8009b6e:	bf38      	it	cc
 8009b70:	2204      	movcc	r2, #4
 8009b72:	9201      	str	r2, [sp, #4]
 8009b74:	9a02      	ldr	r2, [sp, #8]
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d80c      	bhi.n	8009b96 <__multiply+0x9e>
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	dd03      	ble.n	8009b88 <__multiply+0x90>
 8009b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d05b      	beq.n	8009c40 <__multiply+0x148>
 8009b88:	6106      	str	r6, [r0, #16]
 8009b8a:	b005      	add	sp, #20
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	f843 2b04 	str.w	r2, [r3], #4
 8009b94:	e7d8      	b.n	8009b48 <__multiply+0x50>
 8009b96:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b9a:	f1ba 0f00 	cmp.w	sl, #0
 8009b9e:	d024      	beq.n	8009bea <__multiply+0xf2>
 8009ba0:	f104 0e14 	add.w	lr, r4, #20
 8009ba4:	46a9      	mov	r9, r5
 8009ba6:	f04f 0c00 	mov.w	ip, #0
 8009baa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bae:	f8d9 1000 	ldr.w	r1, [r9]
 8009bb2:	fa1f fb82 	uxth.w	fp, r2
 8009bb6:	b289      	uxth	r1, r1
 8009bb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8009bc4:	4461      	add	r1, ip
 8009bc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bca:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bd2:	b289      	uxth	r1, r1
 8009bd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bd8:	4577      	cmp	r7, lr
 8009bda:	f849 1b04 	str.w	r1, [r9], #4
 8009bde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009be2:	d8e2      	bhi.n	8009baa <__multiply+0xb2>
 8009be4:	9a01      	ldr	r2, [sp, #4]
 8009be6:	f845 c002 	str.w	ip, [r5, r2]
 8009bea:	9a03      	ldr	r2, [sp, #12]
 8009bec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	f1b9 0f00 	cmp.w	r9, #0
 8009bf6:	d021      	beq.n	8009c3c <__multiply+0x144>
 8009bf8:	6829      	ldr	r1, [r5, #0]
 8009bfa:	f104 0c14 	add.w	ip, r4, #20
 8009bfe:	46ae      	mov	lr, r5
 8009c00:	f04f 0a00 	mov.w	sl, #0
 8009c04:	f8bc b000 	ldrh.w	fp, [ip]
 8009c08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c0c:	fb09 220b 	mla	r2, r9, fp, r2
 8009c10:	4452      	add	r2, sl
 8009c12:	b289      	uxth	r1, r1
 8009c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c18:	f84e 1b04 	str.w	r1, [lr], #4
 8009c1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c24:	f8be 1000 	ldrh.w	r1, [lr]
 8009c28:	fb09 110a 	mla	r1, r9, sl, r1
 8009c2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c30:	4567      	cmp	r7, ip
 8009c32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c36:	d8e5      	bhi.n	8009c04 <__multiply+0x10c>
 8009c38:	9a01      	ldr	r2, [sp, #4]
 8009c3a:	50a9      	str	r1, [r5, r2]
 8009c3c:	3504      	adds	r5, #4
 8009c3e:	e799      	b.n	8009b74 <__multiply+0x7c>
 8009c40:	3e01      	subs	r6, #1
 8009c42:	e79b      	b.n	8009b7c <__multiply+0x84>
 8009c44:	0800c3aa 	.word	0x0800c3aa
 8009c48:	0800c3bb 	.word	0x0800c3bb

08009c4c <__pow5mult>:
 8009c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c50:	4615      	mov	r5, r2
 8009c52:	f012 0203 	ands.w	r2, r2, #3
 8009c56:	4606      	mov	r6, r0
 8009c58:	460f      	mov	r7, r1
 8009c5a:	d007      	beq.n	8009c6c <__pow5mult+0x20>
 8009c5c:	4c25      	ldr	r4, [pc, #148]	; (8009cf4 <__pow5mult+0xa8>)
 8009c5e:	3a01      	subs	r2, #1
 8009c60:	2300      	movs	r3, #0
 8009c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c66:	f7ff fe53 	bl	8009910 <__multadd>
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	10ad      	asrs	r5, r5, #2
 8009c6e:	d03d      	beq.n	8009cec <__pow5mult+0xa0>
 8009c70:	69f4      	ldr	r4, [r6, #28]
 8009c72:	b97c      	cbnz	r4, 8009c94 <__pow5mult+0x48>
 8009c74:	2010      	movs	r0, #16
 8009c76:	f7fd fd8b 	bl	8007790 <malloc>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	61f0      	str	r0, [r6, #28]
 8009c7e:	b928      	cbnz	r0, 8009c8c <__pow5mult+0x40>
 8009c80:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <__pow5mult+0xac>)
 8009c82:	481e      	ldr	r0, [pc, #120]	; (8009cfc <__pow5mult+0xb0>)
 8009c84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c88:	f001 faea 	bl	800b260 <__assert_func>
 8009c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c90:	6004      	str	r4, [r0, #0]
 8009c92:	60c4      	str	r4, [r0, #12]
 8009c94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c9c:	b94c      	cbnz	r4, 8009cb2 <__pow5mult+0x66>
 8009c9e:	f240 2171 	movw	r1, #625	; 0x271
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ff12 	bl	8009acc <__i2b>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cae:	4604      	mov	r4, r0
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	f04f 0900 	mov.w	r9, #0
 8009cb6:	07eb      	lsls	r3, r5, #31
 8009cb8:	d50a      	bpl.n	8009cd0 <__pow5mult+0x84>
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ff1a 	bl	8009af8 <__multiply>
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff fdff 	bl	80098cc <_Bfree>
 8009cce:	4647      	mov	r7, r8
 8009cd0:	106d      	asrs	r5, r5, #1
 8009cd2:	d00b      	beq.n	8009cec <__pow5mult+0xa0>
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	b938      	cbnz	r0, 8009ce8 <__pow5mult+0x9c>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff ff0b 	bl	8009af8 <__multiply>
 8009ce2:	6020      	str	r0, [r4, #0]
 8009ce4:	f8c0 9000 	str.w	r9, [r0]
 8009ce8:	4604      	mov	r4, r0
 8009cea:	e7e4      	b.n	8009cb6 <__pow5mult+0x6a>
 8009cec:	4638      	mov	r0, r7
 8009cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf2:	bf00      	nop
 8009cf4:	0800c508 	.word	0x0800c508
 8009cf8:	0800c33b 	.word	0x0800c33b
 8009cfc:	0800c3bb 	.word	0x0800c3bb

08009d00 <__lshift>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	460c      	mov	r4, r1
 8009d06:	6849      	ldr	r1, [r1, #4]
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	4607      	mov	r7, r0
 8009d12:	4691      	mov	r9, r2
 8009d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d18:	f108 0601 	add.w	r6, r8, #1
 8009d1c:	42b3      	cmp	r3, r6
 8009d1e:	db0b      	blt.n	8009d38 <__lshift+0x38>
 8009d20:	4638      	mov	r0, r7
 8009d22:	f7ff fd93 	bl	800984c <_Balloc>
 8009d26:	4605      	mov	r5, r0
 8009d28:	b948      	cbnz	r0, 8009d3e <__lshift+0x3e>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4b28      	ldr	r3, [pc, #160]	; (8009dd0 <__lshift+0xd0>)
 8009d2e:	4829      	ldr	r0, [pc, #164]	; (8009dd4 <__lshift+0xd4>)
 8009d30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d34:	f001 fa94 	bl	800b260 <__assert_func>
 8009d38:	3101      	adds	r1, #1
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	e7ee      	b.n	8009d1c <__lshift+0x1c>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f100 0114 	add.w	r1, r0, #20
 8009d44:	f100 0210 	add.w	r2, r0, #16
 8009d48:	4618      	mov	r0, r3
 8009d4a:	4553      	cmp	r3, sl
 8009d4c:	db33      	blt.n	8009db6 <__lshift+0xb6>
 8009d4e:	6920      	ldr	r0, [r4, #16]
 8009d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d54:	f104 0314 	add.w	r3, r4, #20
 8009d58:	f019 091f 	ands.w	r9, r9, #31
 8009d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d64:	d02b      	beq.n	8009dbe <__lshift+0xbe>
 8009d66:	f1c9 0e20 	rsb	lr, r9, #32
 8009d6a:	468a      	mov	sl, r1
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	fa00 f009 	lsl.w	r0, r0, r9
 8009d74:	4310      	orrs	r0, r2
 8009d76:	f84a 0b04 	str.w	r0, [sl], #4
 8009d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d7e:	459c      	cmp	ip, r3
 8009d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d84:	d8f3      	bhi.n	8009d6e <__lshift+0x6e>
 8009d86:	ebac 0304 	sub.w	r3, ip, r4
 8009d8a:	3b15      	subs	r3, #21
 8009d8c:	f023 0303 	bic.w	r3, r3, #3
 8009d90:	3304      	adds	r3, #4
 8009d92:	f104 0015 	add.w	r0, r4, #21
 8009d96:	4584      	cmp	ip, r0
 8009d98:	bf38      	it	cc
 8009d9a:	2304      	movcc	r3, #4
 8009d9c:	50ca      	str	r2, [r1, r3]
 8009d9e:	b10a      	cbz	r2, 8009da4 <__lshift+0xa4>
 8009da0:	f108 0602 	add.w	r6, r8, #2
 8009da4:	3e01      	subs	r6, #1
 8009da6:	4638      	mov	r0, r7
 8009da8:	612e      	str	r6, [r5, #16]
 8009daa:	4621      	mov	r1, r4
 8009dac:	f7ff fd8e 	bl	80098cc <_Bfree>
 8009db0:	4628      	mov	r0, r5
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dba:	3301      	adds	r3, #1
 8009dbc:	e7c5      	b.n	8009d4a <__lshift+0x4a>
 8009dbe:	3904      	subs	r1, #4
 8009dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dc8:	459c      	cmp	ip, r3
 8009dca:	d8f9      	bhi.n	8009dc0 <__lshift+0xc0>
 8009dcc:	e7ea      	b.n	8009da4 <__lshift+0xa4>
 8009dce:	bf00      	nop
 8009dd0:	0800c3aa 	.word	0x0800c3aa
 8009dd4:	0800c3bb 	.word	0x0800c3bb

08009dd8 <__mcmp>:
 8009dd8:	b530      	push	{r4, r5, lr}
 8009dda:	6902      	ldr	r2, [r0, #16]
 8009ddc:	690c      	ldr	r4, [r1, #16]
 8009dde:	1b12      	subs	r2, r2, r4
 8009de0:	d10e      	bne.n	8009e00 <__mcmp+0x28>
 8009de2:	f100 0314 	add.w	r3, r0, #20
 8009de6:	3114      	adds	r1, #20
 8009de8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009df0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009df4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009df8:	42a5      	cmp	r5, r4
 8009dfa:	d003      	beq.n	8009e04 <__mcmp+0x2c>
 8009dfc:	d305      	bcc.n	8009e0a <__mcmp+0x32>
 8009dfe:	2201      	movs	r2, #1
 8009e00:	4610      	mov	r0, r2
 8009e02:	bd30      	pop	{r4, r5, pc}
 8009e04:	4283      	cmp	r3, r0
 8009e06:	d3f3      	bcc.n	8009df0 <__mcmp+0x18>
 8009e08:	e7fa      	b.n	8009e00 <__mcmp+0x28>
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	e7f7      	b.n	8009e00 <__mcmp+0x28>

08009e10 <__mdiff>:
 8009e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	460c      	mov	r4, r1
 8009e16:	4606      	mov	r6, r0
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4690      	mov	r8, r2
 8009e1e:	f7ff ffdb 	bl	8009dd8 <__mcmp>
 8009e22:	1e05      	subs	r5, r0, #0
 8009e24:	d110      	bne.n	8009e48 <__mdiff+0x38>
 8009e26:	4629      	mov	r1, r5
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7ff fd0f 	bl	800984c <_Balloc>
 8009e2e:	b930      	cbnz	r0, 8009e3e <__mdiff+0x2e>
 8009e30:	4b3a      	ldr	r3, [pc, #232]	; (8009f1c <__mdiff+0x10c>)
 8009e32:	4602      	mov	r2, r0
 8009e34:	f240 2137 	movw	r1, #567	; 0x237
 8009e38:	4839      	ldr	r0, [pc, #228]	; (8009f20 <__mdiff+0x110>)
 8009e3a:	f001 fa11 	bl	800b260 <__assert_func>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	bfa4      	itt	ge
 8009e4a:	4643      	movge	r3, r8
 8009e4c:	46a0      	movge	r8, r4
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e54:	bfa6      	itte	ge
 8009e56:	461c      	movge	r4, r3
 8009e58:	2500      	movge	r5, #0
 8009e5a:	2501      	movlt	r5, #1
 8009e5c:	f7ff fcf6 	bl	800984c <_Balloc>
 8009e60:	b920      	cbnz	r0, 8009e6c <__mdiff+0x5c>
 8009e62:	4b2e      	ldr	r3, [pc, #184]	; (8009f1c <__mdiff+0x10c>)
 8009e64:	4602      	mov	r2, r0
 8009e66:	f240 2145 	movw	r1, #581	; 0x245
 8009e6a:	e7e5      	b.n	8009e38 <__mdiff+0x28>
 8009e6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e70:	6926      	ldr	r6, [r4, #16]
 8009e72:	60c5      	str	r5, [r0, #12]
 8009e74:	f104 0914 	add.w	r9, r4, #20
 8009e78:	f108 0514 	add.w	r5, r8, #20
 8009e7c:	f100 0e14 	add.w	lr, r0, #20
 8009e80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e88:	f108 0210 	add.w	r2, r8, #16
 8009e8c:	46f2      	mov	sl, lr
 8009e8e:	2100      	movs	r1, #0
 8009e90:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e98:	fa11 f88b 	uxtah	r8, r1, fp
 8009e9c:	b299      	uxth	r1, r3
 8009e9e:	0c1b      	lsrs	r3, r3, #16
 8009ea0:	eba8 0801 	sub.w	r8, r8, r1
 8009ea4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ea8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009eac:	fa1f f888 	uxth.w	r8, r8
 8009eb0:	1419      	asrs	r1, r3, #16
 8009eb2:	454e      	cmp	r6, r9
 8009eb4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eb8:	f84a 3b04 	str.w	r3, [sl], #4
 8009ebc:	d8e8      	bhi.n	8009e90 <__mdiff+0x80>
 8009ebe:	1b33      	subs	r3, r6, r4
 8009ec0:	3b15      	subs	r3, #21
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	3415      	adds	r4, #21
 8009eca:	42a6      	cmp	r6, r4
 8009ecc:	bf38      	it	cc
 8009ece:	2304      	movcc	r3, #4
 8009ed0:	441d      	add	r5, r3
 8009ed2:	4473      	add	r3, lr
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	462e      	mov	r6, r5
 8009ed8:	4566      	cmp	r6, ip
 8009eda:	d30e      	bcc.n	8009efa <__mdiff+0xea>
 8009edc:	f10c 0203 	add.w	r2, ip, #3
 8009ee0:	1b52      	subs	r2, r2, r5
 8009ee2:	f022 0203 	bic.w	r2, r2, #3
 8009ee6:	3d03      	subs	r5, #3
 8009ee8:	45ac      	cmp	ip, r5
 8009eea:	bf38      	it	cc
 8009eec:	2200      	movcc	r2, #0
 8009eee:	4413      	add	r3, r2
 8009ef0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ef4:	b17a      	cbz	r2, 8009f16 <__mdiff+0x106>
 8009ef6:	6107      	str	r7, [r0, #16]
 8009ef8:	e7a4      	b.n	8009e44 <__mdiff+0x34>
 8009efa:	f856 8b04 	ldr.w	r8, [r6], #4
 8009efe:	fa11 f288 	uxtah	r2, r1, r8
 8009f02:	1414      	asrs	r4, r2, #16
 8009f04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f08:	b292      	uxth	r2, r2
 8009f0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f0e:	f84e 2b04 	str.w	r2, [lr], #4
 8009f12:	1421      	asrs	r1, r4, #16
 8009f14:	e7e0      	b.n	8009ed8 <__mdiff+0xc8>
 8009f16:	3f01      	subs	r7, #1
 8009f18:	e7ea      	b.n	8009ef0 <__mdiff+0xe0>
 8009f1a:	bf00      	nop
 8009f1c:	0800c3aa 	.word	0x0800c3aa
 8009f20:	0800c3bb 	.word	0x0800c3bb

08009f24 <__ulp>:
 8009f24:	b082      	sub	sp, #8
 8009f26:	ed8d 0b00 	vstr	d0, [sp]
 8009f2a:	9a01      	ldr	r2, [sp, #4]
 8009f2c:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <__ulp+0x48>)
 8009f2e:	4013      	ands	r3, r2
 8009f30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dc08      	bgt.n	8009f4a <__ulp+0x26>
 8009f38:	425b      	negs	r3, r3
 8009f3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009f3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f42:	da04      	bge.n	8009f4e <__ulp+0x2a>
 8009f44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f48:	4113      	asrs	r3, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	e008      	b.n	8009f60 <__ulp+0x3c>
 8009f4e:	f1a2 0314 	sub.w	r3, r2, #20
 8009f52:	2b1e      	cmp	r3, #30
 8009f54:	bfda      	itte	le
 8009f56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009f5a:	40da      	lsrle	r2, r3
 8009f5c:	2201      	movgt	r2, #1
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	ec41 0b10 	vmov	d0, r0, r1
 8009f68:	b002      	add	sp, #8
 8009f6a:	4770      	bx	lr
 8009f6c:	7ff00000 	.word	0x7ff00000

08009f70 <__b2d>:
 8009f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f74:	6906      	ldr	r6, [r0, #16]
 8009f76:	f100 0814 	add.w	r8, r0, #20
 8009f7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f7e:	1f37      	subs	r7, r6, #4
 8009f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7ff fd53 	bl	8009a30 <__hi0bits>
 8009f8a:	f1c0 0320 	rsb	r3, r0, #32
 8009f8e:	280a      	cmp	r0, #10
 8009f90:	600b      	str	r3, [r1, #0]
 8009f92:	491b      	ldr	r1, [pc, #108]	; (800a000 <__b2d+0x90>)
 8009f94:	dc15      	bgt.n	8009fc2 <__b2d+0x52>
 8009f96:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f9e:	45b8      	cmp	r8, r7
 8009fa0:	ea43 0501 	orr.w	r5, r3, r1
 8009fa4:	bf34      	ite	cc
 8009fa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009faa:	2300      	movcs	r3, #0
 8009fac:	3015      	adds	r0, #21
 8009fae:	fa02 f000 	lsl.w	r0, r2, r0
 8009fb2:	fa23 f30c 	lsr.w	r3, r3, ip
 8009fb6:	4303      	orrs	r3, r0
 8009fb8:	461c      	mov	r4, r3
 8009fba:	ec45 4b10 	vmov	d0, r4, r5
 8009fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc2:	45b8      	cmp	r8, r7
 8009fc4:	bf3a      	itte	cc
 8009fc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fca:	f1a6 0708 	subcc.w	r7, r6, #8
 8009fce:	2300      	movcs	r3, #0
 8009fd0:	380b      	subs	r0, #11
 8009fd2:	d012      	beq.n	8009ffa <__b2d+0x8a>
 8009fd4:	f1c0 0120 	rsb	r1, r0, #32
 8009fd8:	fa23 f401 	lsr.w	r4, r3, r1
 8009fdc:	4082      	lsls	r2, r0
 8009fde:	4322      	orrs	r2, r4
 8009fe0:	4547      	cmp	r7, r8
 8009fe2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009fe6:	bf8c      	ite	hi
 8009fe8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fec:	2200      	movls	r2, #0
 8009fee:	4083      	lsls	r3, r0
 8009ff0:	40ca      	lsrs	r2, r1
 8009ff2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	e7de      	b.n	8009fb8 <__b2d+0x48>
 8009ffa:	ea42 0501 	orr.w	r5, r2, r1
 8009ffe:	e7db      	b.n	8009fb8 <__b2d+0x48>
 800a000:	3ff00000 	.word	0x3ff00000

0800a004 <__d2b>:
 800a004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a008:	460f      	mov	r7, r1
 800a00a:	2101      	movs	r1, #1
 800a00c:	ec59 8b10 	vmov	r8, r9, d0
 800a010:	4616      	mov	r6, r2
 800a012:	f7ff fc1b 	bl	800984c <_Balloc>
 800a016:	4604      	mov	r4, r0
 800a018:	b930      	cbnz	r0, 800a028 <__d2b+0x24>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <__d2b+0xac>)
 800a01e:	4825      	ldr	r0, [pc, #148]	; (800a0b4 <__d2b+0xb0>)
 800a020:	f240 310f 	movw	r1, #783	; 0x30f
 800a024:	f001 f91c 	bl	800b260 <__assert_func>
 800a028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a02c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a030:	bb2d      	cbnz	r5, 800a07e <__d2b+0x7a>
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	f1b8 0300 	subs.w	r3, r8, #0
 800a038:	d026      	beq.n	800a088 <__d2b+0x84>
 800a03a:	4668      	mov	r0, sp
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	f7ff fd17 	bl	8009a70 <__lo0bits>
 800a042:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a046:	b1e8      	cbz	r0, 800a084 <__d2b+0x80>
 800a048:	f1c0 0320 	rsb	r3, r0, #32
 800a04c:	fa02 f303 	lsl.w	r3, r2, r3
 800a050:	430b      	orrs	r3, r1
 800a052:	40c2      	lsrs	r2, r0
 800a054:	6163      	str	r3, [r4, #20]
 800a056:	9201      	str	r2, [sp, #4]
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	61a3      	str	r3, [r4, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf14      	ite	ne
 800a060:	2202      	movne	r2, #2
 800a062:	2201      	moveq	r2, #1
 800a064:	6122      	str	r2, [r4, #16]
 800a066:	b1bd      	cbz	r5, 800a098 <__d2b+0x94>
 800a068:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a06c:	4405      	add	r5, r0
 800a06e:	603d      	str	r5, [r7, #0]
 800a070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a074:	6030      	str	r0, [r6, #0]
 800a076:	4620      	mov	r0, r4
 800a078:	b003      	add	sp, #12
 800a07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a07e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a082:	e7d6      	b.n	800a032 <__d2b+0x2e>
 800a084:	6161      	str	r1, [r4, #20]
 800a086:	e7e7      	b.n	800a058 <__d2b+0x54>
 800a088:	a801      	add	r0, sp, #4
 800a08a:	f7ff fcf1 	bl	8009a70 <__lo0bits>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	3020      	adds	r0, #32
 800a094:	2201      	movs	r2, #1
 800a096:	e7e5      	b.n	800a064 <__d2b+0x60>
 800a098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a09c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0a0:	6038      	str	r0, [r7, #0]
 800a0a2:	6918      	ldr	r0, [r3, #16]
 800a0a4:	f7ff fcc4 	bl	8009a30 <__hi0bits>
 800a0a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ac:	e7e2      	b.n	800a074 <__d2b+0x70>
 800a0ae:	bf00      	nop
 800a0b0:	0800c3aa 	.word	0x0800c3aa
 800a0b4:	0800c3bb 	.word	0x0800c3bb

0800a0b8 <__ratio>:
 800a0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	4688      	mov	r8, r1
 800a0be:	4669      	mov	r1, sp
 800a0c0:	4681      	mov	r9, r0
 800a0c2:	f7ff ff55 	bl	8009f70 <__b2d>
 800a0c6:	a901      	add	r1, sp, #4
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	ec55 4b10 	vmov	r4, r5, d0
 800a0ce:	f7ff ff4f 	bl	8009f70 <__b2d>
 800a0d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0da:	eba3 0c02 	sub.w	ip, r3, r2
 800a0de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a0e8:	ec51 0b10 	vmov	r0, r1, d0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfd6      	itet	le
 800a0f0:	460a      	movle	r2, r1
 800a0f2:	462a      	movgt	r2, r5
 800a0f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0f8:	468b      	mov	fp, r1
 800a0fa:	462f      	mov	r7, r5
 800a0fc:	bfd4      	ite	le
 800a0fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a106:	4620      	mov	r0, r4
 800a108:	ee10 2a10 	vmov	r2, s0
 800a10c:	465b      	mov	r3, fp
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 fbac 	bl	800086c <__aeabi_ddiv>
 800a114:	ec41 0b10 	vmov	d0, r0, r1
 800a118:	b003      	add	sp, #12
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a11e <__copybits>:
 800a11e:	3901      	subs	r1, #1
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	1149      	asrs	r1, r1, #5
 800a124:	6914      	ldr	r4, [r2, #16]
 800a126:	3101      	adds	r1, #1
 800a128:	f102 0314 	add.w	r3, r2, #20
 800a12c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a134:	1f05      	subs	r5, r0, #4
 800a136:	42a3      	cmp	r3, r4
 800a138:	d30c      	bcc.n	800a154 <__copybits+0x36>
 800a13a:	1aa3      	subs	r3, r4, r2
 800a13c:	3b11      	subs	r3, #17
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	3211      	adds	r2, #17
 800a144:	42a2      	cmp	r2, r4
 800a146:	bf88      	it	hi
 800a148:	2300      	movhi	r3, #0
 800a14a:	4418      	add	r0, r3
 800a14c:	2300      	movs	r3, #0
 800a14e:	4288      	cmp	r0, r1
 800a150:	d305      	bcc.n	800a15e <__copybits+0x40>
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	f853 6b04 	ldr.w	r6, [r3], #4
 800a158:	f845 6f04 	str.w	r6, [r5, #4]!
 800a15c:	e7eb      	b.n	800a136 <__copybits+0x18>
 800a15e:	f840 3b04 	str.w	r3, [r0], #4
 800a162:	e7f4      	b.n	800a14e <__copybits+0x30>

0800a164 <__any_on>:
 800a164:	f100 0214 	add.w	r2, r0, #20
 800a168:	6900      	ldr	r0, [r0, #16]
 800a16a:	114b      	asrs	r3, r1, #5
 800a16c:	4298      	cmp	r0, r3
 800a16e:	b510      	push	{r4, lr}
 800a170:	db11      	blt.n	800a196 <__any_on+0x32>
 800a172:	dd0a      	ble.n	800a18a <__any_on+0x26>
 800a174:	f011 011f 	ands.w	r1, r1, #31
 800a178:	d007      	beq.n	800a18a <__any_on+0x26>
 800a17a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a17e:	fa24 f001 	lsr.w	r0, r4, r1
 800a182:	fa00 f101 	lsl.w	r1, r0, r1
 800a186:	428c      	cmp	r4, r1
 800a188:	d10b      	bne.n	800a1a2 <__any_on+0x3e>
 800a18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a18e:	4293      	cmp	r3, r2
 800a190:	d803      	bhi.n	800a19a <__any_on+0x36>
 800a192:	2000      	movs	r0, #0
 800a194:	bd10      	pop	{r4, pc}
 800a196:	4603      	mov	r3, r0
 800a198:	e7f7      	b.n	800a18a <__any_on+0x26>
 800a19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d0f5      	beq.n	800a18e <__any_on+0x2a>
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7f6      	b.n	800a194 <__any_on+0x30>

0800a1a6 <sulp>:
 800a1a6:	b570      	push	{r4, r5, r6, lr}
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	ec45 4b10 	vmov	d0, r4, r5
 800a1b0:	4616      	mov	r6, r2
 800a1b2:	f7ff feb7 	bl	8009f24 <__ulp>
 800a1b6:	ec51 0b10 	vmov	r0, r1, d0
 800a1ba:	b17e      	cbz	r6, 800a1dc <sulp+0x36>
 800a1bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dd09      	ble.n	800a1dc <sulp+0x36>
 800a1c8:	051b      	lsls	r3, r3, #20
 800a1ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1ce:	2400      	movs	r4, #0
 800a1d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	f7f6 fa1e 	bl	8000618 <__aeabi_dmul>
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1e0 <_strtod_l>:
 800a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	ed2d 8b02 	vpush	{d8}
 800a1e8:	b09b      	sub	sp, #108	; 0x6c
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	9216      	str	r2, [sp, #88]	; 0x58
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	f04f 0800 	mov.w	r8, #0
 800a1f8:	f04f 0900 	mov.w	r9, #0
 800a1fc:	460a      	mov	r2, r1
 800a1fe:	9215      	str	r2, [sp, #84]	; 0x54
 800a200:	7811      	ldrb	r1, [r2, #0]
 800a202:	292b      	cmp	r1, #43	; 0x2b
 800a204:	d04c      	beq.n	800a2a0 <_strtod_l+0xc0>
 800a206:	d83a      	bhi.n	800a27e <_strtod_l+0x9e>
 800a208:	290d      	cmp	r1, #13
 800a20a:	d834      	bhi.n	800a276 <_strtod_l+0x96>
 800a20c:	2908      	cmp	r1, #8
 800a20e:	d834      	bhi.n	800a27a <_strtod_l+0x9a>
 800a210:	2900      	cmp	r1, #0
 800a212:	d03d      	beq.n	800a290 <_strtod_l+0xb0>
 800a214:	2200      	movs	r2, #0
 800a216:	920a      	str	r2, [sp, #40]	; 0x28
 800a218:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a21a:	7832      	ldrb	r2, [r6, #0]
 800a21c:	2a30      	cmp	r2, #48	; 0x30
 800a21e:	f040 80b4 	bne.w	800a38a <_strtod_l+0x1aa>
 800a222:	7872      	ldrb	r2, [r6, #1]
 800a224:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a228:	2a58      	cmp	r2, #88	; 0x58
 800a22a:	d170      	bne.n	800a30e <_strtod_l+0x12e>
 800a22c:	9302      	str	r3, [sp, #8]
 800a22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	ab16      	add	r3, sp, #88	; 0x58
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4a8e      	ldr	r2, [pc, #568]	; (800a470 <_strtod_l+0x290>)
 800a238:	ab17      	add	r3, sp, #92	; 0x5c
 800a23a:	a915      	add	r1, sp, #84	; 0x54
 800a23c:	4620      	mov	r0, r4
 800a23e:	f001 f8ab 	bl	800b398 <__gethex>
 800a242:	f010 070f 	ands.w	r7, r0, #15
 800a246:	4605      	mov	r5, r0
 800a248:	d005      	beq.n	800a256 <_strtod_l+0x76>
 800a24a:	2f06      	cmp	r7, #6
 800a24c:	d12a      	bne.n	800a2a4 <_strtod_l+0xc4>
 800a24e:	3601      	adds	r6, #1
 800a250:	2300      	movs	r3, #0
 800a252:	9615      	str	r6, [sp, #84]	; 0x54
 800a254:	930a      	str	r3, [sp, #40]	; 0x28
 800a256:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f040 857f 	bne.w	800ad5c <_strtod_l+0xb7c>
 800a25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a260:	b1db      	cbz	r3, 800a29a <_strtod_l+0xba>
 800a262:	4642      	mov	r2, r8
 800a264:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a268:	ec43 2b10 	vmov	d0, r2, r3
 800a26c:	b01b      	add	sp, #108	; 0x6c
 800a26e:	ecbd 8b02 	vpop	{d8}
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	2920      	cmp	r1, #32
 800a278:	d1cc      	bne.n	800a214 <_strtod_l+0x34>
 800a27a:	3201      	adds	r2, #1
 800a27c:	e7bf      	b.n	800a1fe <_strtod_l+0x1e>
 800a27e:	292d      	cmp	r1, #45	; 0x2d
 800a280:	d1c8      	bne.n	800a214 <_strtod_l+0x34>
 800a282:	2101      	movs	r1, #1
 800a284:	910a      	str	r1, [sp, #40]	; 0x28
 800a286:	1c51      	adds	r1, r2, #1
 800a288:	9115      	str	r1, [sp, #84]	; 0x54
 800a28a:	7852      	ldrb	r2, [r2, #1]
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	d1c3      	bne.n	800a218 <_strtod_l+0x38>
 800a290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a292:	9515      	str	r5, [sp, #84]	; 0x54
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 855f 	bne.w	800ad58 <_strtod_l+0xb78>
 800a29a:	4642      	mov	r2, r8
 800a29c:	464b      	mov	r3, r9
 800a29e:	e7e3      	b.n	800a268 <_strtod_l+0x88>
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	e7ef      	b.n	800a284 <_strtod_l+0xa4>
 800a2a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2a6:	b13a      	cbz	r2, 800a2b8 <_strtod_l+0xd8>
 800a2a8:	2135      	movs	r1, #53	; 0x35
 800a2aa:	a818      	add	r0, sp, #96	; 0x60
 800a2ac:	f7ff ff37 	bl	800a11e <__copybits>
 800a2b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f7ff fb0a 	bl	80098cc <_Bfree>
 800a2b8:	3f01      	subs	r7, #1
 800a2ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2bc:	2f04      	cmp	r7, #4
 800a2be:	d806      	bhi.n	800a2ce <_strtod_l+0xee>
 800a2c0:	e8df f007 	tbb	[pc, r7]
 800a2c4:	201d0314 	.word	0x201d0314
 800a2c8:	14          	.byte	0x14
 800a2c9:	00          	.byte	0x00
 800a2ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a2ce:	05e9      	lsls	r1, r5, #23
 800a2d0:	bf48      	it	mi
 800a2d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a2d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2da:	0d1b      	lsrs	r3, r3, #20
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1b9      	bne.n	800a256 <_strtod_l+0x76>
 800a2e2:	f7fe fbaf 	bl	8008a44 <__errno>
 800a2e6:	2322      	movs	r3, #34	; 0x22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	e7b4      	b.n	800a256 <_strtod_l+0x76>
 800a2ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a2f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a2fc:	e7e7      	b.n	800a2ce <_strtod_l+0xee>
 800a2fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a478 <_strtod_l+0x298>
 800a302:	e7e4      	b.n	800a2ce <_strtod_l+0xee>
 800a304:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a308:	f04f 38ff 	mov.w	r8, #4294967295
 800a30c:	e7df      	b.n	800a2ce <_strtod_l+0xee>
 800a30e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	9215      	str	r2, [sp, #84]	; 0x54
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b30      	cmp	r3, #48	; 0x30
 800a318:	d0f9      	beq.n	800a30e <_strtod_l+0x12e>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d09b      	beq.n	800a256 <_strtod_l+0x76>
 800a31e:	2301      	movs	r3, #1
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a328:	930b      	str	r3, [sp, #44]	; 0x2c
 800a32a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a32e:	46d3      	mov	fp, sl
 800a330:	220a      	movs	r2, #10
 800a332:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a334:	7806      	ldrb	r6, [r0, #0]
 800a336:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a33a:	b2d9      	uxtb	r1, r3
 800a33c:	2909      	cmp	r1, #9
 800a33e:	d926      	bls.n	800a38e <_strtod_l+0x1ae>
 800a340:	494c      	ldr	r1, [pc, #304]	; (800a474 <_strtod_l+0x294>)
 800a342:	2201      	movs	r2, #1
 800a344:	f000 ff62 	bl	800b20c <strncmp>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d030      	beq.n	800a3ae <_strtod_l+0x1ce>
 800a34c:	2000      	movs	r0, #0
 800a34e:	4632      	mov	r2, r6
 800a350:	9005      	str	r0, [sp, #20]
 800a352:	465e      	mov	r6, fp
 800a354:	4603      	mov	r3, r0
 800a356:	2a65      	cmp	r2, #101	; 0x65
 800a358:	d001      	beq.n	800a35e <_strtod_l+0x17e>
 800a35a:	2a45      	cmp	r2, #69	; 0x45
 800a35c:	d113      	bne.n	800a386 <_strtod_l+0x1a6>
 800a35e:	b91e      	cbnz	r6, 800a368 <_strtod_l+0x188>
 800a360:	9a04      	ldr	r2, [sp, #16]
 800a362:	4302      	orrs	r2, r0
 800a364:	d094      	beq.n	800a290 <_strtod_l+0xb0>
 800a366:	2600      	movs	r6, #0
 800a368:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a36a:	1c6a      	adds	r2, r5, #1
 800a36c:	9215      	str	r2, [sp, #84]	; 0x54
 800a36e:	786a      	ldrb	r2, [r5, #1]
 800a370:	2a2b      	cmp	r2, #43	; 0x2b
 800a372:	d074      	beq.n	800a45e <_strtod_l+0x27e>
 800a374:	2a2d      	cmp	r2, #45	; 0x2d
 800a376:	d078      	beq.n	800a46a <_strtod_l+0x28a>
 800a378:	f04f 0c00 	mov.w	ip, #0
 800a37c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a380:	2909      	cmp	r1, #9
 800a382:	d97f      	bls.n	800a484 <_strtod_l+0x2a4>
 800a384:	9515      	str	r5, [sp, #84]	; 0x54
 800a386:	2700      	movs	r7, #0
 800a388:	e09e      	b.n	800a4c8 <_strtod_l+0x2e8>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e7c8      	b.n	800a320 <_strtod_l+0x140>
 800a38e:	f1bb 0f08 	cmp.w	fp, #8
 800a392:	bfd8      	it	le
 800a394:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a396:	f100 0001 	add.w	r0, r0, #1
 800a39a:	bfda      	itte	le
 800a39c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a3a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a3a6:	f10b 0b01 	add.w	fp, fp, #1
 800a3aa:	9015      	str	r0, [sp, #84]	; 0x54
 800a3ac:	e7c1      	b.n	800a332 <_strtod_l+0x152>
 800a3ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	9215      	str	r2, [sp, #84]	; 0x54
 800a3b4:	785a      	ldrb	r2, [r3, #1]
 800a3b6:	f1bb 0f00 	cmp.w	fp, #0
 800a3ba:	d037      	beq.n	800a42c <_strtod_l+0x24c>
 800a3bc:	9005      	str	r0, [sp, #20]
 800a3be:	465e      	mov	r6, fp
 800a3c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a3c4:	2b09      	cmp	r3, #9
 800a3c6:	d912      	bls.n	800a3ee <_strtod_l+0x20e>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7c4      	b.n	800a356 <_strtod_l+0x176>
 800a3cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	9215      	str	r2, [sp, #84]	; 0x54
 800a3d2:	785a      	ldrb	r2, [r3, #1]
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	2a30      	cmp	r2, #48	; 0x30
 800a3d8:	d0f8      	beq.n	800a3cc <_strtod_l+0x1ec>
 800a3da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a3de:	2b08      	cmp	r3, #8
 800a3e0:	f200 84c1 	bhi.w	800ad66 <_strtod_l+0xb86>
 800a3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3e6:	9005      	str	r0, [sp, #20]
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	3a30      	subs	r2, #48	; 0x30
 800a3f0:	f100 0301 	add.w	r3, r0, #1
 800a3f4:	d014      	beq.n	800a420 <_strtod_l+0x240>
 800a3f6:	9905      	ldr	r1, [sp, #20]
 800a3f8:	4419      	add	r1, r3
 800a3fa:	9105      	str	r1, [sp, #20]
 800a3fc:	4633      	mov	r3, r6
 800a3fe:	eb00 0c06 	add.w	ip, r0, r6
 800a402:	210a      	movs	r1, #10
 800a404:	4563      	cmp	r3, ip
 800a406:	d113      	bne.n	800a430 <_strtod_l+0x250>
 800a408:	1833      	adds	r3, r6, r0
 800a40a:	2b08      	cmp	r3, #8
 800a40c:	f106 0601 	add.w	r6, r6, #1
 800a410:	4406      	add	r6, r0
 800a412:	dc1a      	bgt.n	800a44a <_strtod_l+0x26a>
 800a414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a416:	230a      	movs	r3, #10
 800a418:	fb03 2301 	mla	r3, r3, r1, r2
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	2300      	movs	r3, #0
 800a420:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a422:	1c51      	adds	r1, r2, #1
 800a424:	9115      	str	r1, [sp, #84]	; 0x54
 800a426:	7852      	ldrb	r2, [r2, #1]
 800a428:	4618      	mov	r0, r3
 800a42a:	e7c9      	b.n	800a3c0 <_strtod_l+0x1e0>
 800a42c:	4658      	mov	r0, fp
 800a42e:	e7d2      	b.n	800a3d6 <_strtod_l+0x1f6>
 800a430:	2b08      	cmp	r3, #8
 800a432:	f103 0301 	add.w	r3, r3, #1
 800a436:	dc03      	bgt.n	800a440 <_strtod_l+0x260>
 800a438:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a43a:	434f      	muls	r7, r1
 800a43c:	9709      	str	r7, [sp, #36]	; 0x24
 800a43e:	e7e1      	b.n	800a404 <_strtod_l+0x224>
 800a440:	2b10      	cmp	r3, #16
 800a442:	bfd8      	it	le
 800a444:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a448:	e7dc      	b.n	800a404 <_strtod_l+0x224>
 800a44a:	2e10      	cmp	r6, #16
 800a44c:	bfdc      	itt	le
 800a44e:	230a      	movle	r3, #10
 800a450:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a454:	e7e3      	b.n	800a41e <_strtod_l+0x23e>
 800a456:	2300      	movs	r3, #0
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	2301      	movs	r3, #1
 800a45c:	e780      	b.n	800a360 <_strtod_l+0x180>
 800a45e:	f04f 0c00 	mov.w	ip, #0
 800a462:	1caa      	adds	r2, r5, #2
 800a464:	9215      	str	r2, [sp, #84]	; 0x54
 800a466:	78aa      	ldrb	r2, [r5, #2]
 800a468:	e788      	b.n	800a37c <_strtod_l+0x19c>
 800a46a:	f04f 0c01 	mov.w	ip, #1
 800a46e:	e7f8      	b.n	800a462 <_strtod_l+0x282>
 800a470:	0800c518 	.word	0x0800c518
 800a474:	0800c514 	.word	0x0800c514
 800a478:	7ff00000 	.word	0x7ff00000
 800a47c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a47e:	1c51      	adds	r1, r2, #1
 800a480:	9115      	str	r1, [sp, #84]	; 0x54
 800a482:	7852      	ldrb	r2, [r2, #1]
 800a484:	2a30      	cmp	r2, #48	; 0x30
 800a486:	d0f9      	beq.n	800a47c <_strtod_l+0x29c>
 800a488:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a48c:	2908      	cmp	r1, #8
 800a48e:	f63f af7a 	bhi.w	800a386 <_strtod_l+0x1a6>
 800a492:	3a30      	subs	r2, #48	; 0x30
 800a494:	9208      	str	r2, [sp, #32]
 800a496:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a498:	920c      	str	r2, [sp, #48]	; 0x30
 800a49a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a49c:	1c57      	adds	r7, r2, #1
 800a49e:	9715      	str	r7, [sp, #84]	; 0x54
 800a4a0:	7852      	ldrb	r2, [r2, #1]
 800a4a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4a6:	f1be 0f09 	cmp.w	lr, #9
 800a4aa:	d938      	bls.n	800a51e <_strtod_l+0x33e>
 800a4ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4ae:	1a7f      	subs	r7, r7, r1
 800a4b0:	2f08      	cmp	r7, #8
 800a4b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a4b6:	dc03      	bgt.n	800a4c0 <_strtod_l+0x2e0>
 800a4b8:	9908      	ldr	r1, [sp, #32]
 800a4ba:	428f      	cmp	r7, r1
 800a4bc:	bfa8      	it	ge
 800a4be:	460f      	movge	r7, r1
 800a4c0:	f1bc 0f00 	cmp.w	ip, #0
 800a4c4:	d000      	beq.n	800a4c8 <_strtod_l+0x2e8>
 800a4c6:	427f      	negs	r7, r7
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	d14f      	bne.n	800a56c <_strtod_l+0x38c>
 800a4cc:	9904      	ldr	r1, [sp, #16]
 800a4ce:	4301      	orrs	r1, r0
 800a4d0:	f47f aec1 	bne.w	800a256 <_strtod_l+0x76>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f47f aedb 	bne.w	800a290 <_strtod_l+0xb0>
 800a4da:	2a69      	cmp	r2, #105	; 0x69
 800a4dc:	d029      	beq.n	800a532 <_strtod_l+0x352>
 800a4de:	dc26      	bgt.n	800a52e <_strtod_l+0x34e>
 800a4e0:	2a49      	cmp	r2, #73	; 0x49
 800a4e2:	d026      	beq.n	800a532 <_strtod_l+0x352>
 800a4e4:	2a4e      	cmp	r2, #78	; 0x4e
 800a4e6:	f47f aed3 	bne.w	800a290 <_strtod_l+0xb0>
 800a4ea:	499b      	ldr	r1, [pc, #620]	; (800a758 <_strtod_l+0x578>)
 800a4ec:	a815      	add	r0, sp, #84	; 0x54
 800a4ee:	f001 f993 	bl	800b818 <__match>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f aecc 	beq.w	800a290 <_strtod_l+0xb0>
 800a4f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b28      	cmp	r3, #40	; 0x28
 800a4fe:	d12f      	bne.n	800a560 <_strtod_l+0x380>
 800a500:	4996      	ldr	r1, [pc, #600]	; (800a75c <_strtod_l+0x57c>)
 800a502:	aa18      	add	r2, sp, #96	; 0x60
 800a504:	a815      	add	r0, sp, #84	; 0x54
 800a506:	f001 f99b 	bl	800b840 <__hexnan>
 800a50a:	2805      	cmp	r0, #5
 800a50c:	d128      	bne.n	800a560 <_strtod_l+0x380>
 800a50e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a510:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a514:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a518:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a51c:	e69b      	b.n	800a256 <_strtod_l+0x76>
 800a51e:	9f08      	ldr	r7, [sp, #32]
 800a520:	210a      	movs	r1, #10
 800a522:	fb01 2107 	mla	r1, r1, r7, r2
 800a526:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a52a:	9208      	str	r2, [sp, #32]
 800a52c:	e7b5      	b.n	800a49a <_strtod_l+0x2ba>
 800a52e:	2a6e      	cmp	r2, #110	; 0x6e
 800a530:	e7d9      	b.n	800a4e6 <_strtod_l+0x306>
 800a532:	498b      	ldr	r1, [pc, #556]	; (800a760 <_strtod_l+0x580>)
 800a534:	a815      	add	r0, sp, #84	; 0x54
 800a536:	f001 f96f 	bl	800b818 <__match>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f43f aea8 	beq.w	800a290 <_strtod_l+0xb0>
 800a540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a542:	4988      	ldr	r1, [pc, #544]	; (800a764 <_strtod_l+0x584>)
 800a544:	3b01      	subs	r3, #1
 800a546:	a815      	add	r0, sp, #84	; 0x54
 800a548:	9315      	str	r3, [sp, #84]	; 0x54
 800a54a:	f001 f965 	bl	800b818 <__match>
 800a54e:	b910      	cbnz	r0, 800a556 <_strtod_l+0x376>
 800a550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a552:	3301      	adds	r3, #1
 800a554:	9315      	str	r3, [sp, #84]	; 0x54
 800a556:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a774 <_strtod_l+0x594>
 800a55a:	f04f 0800 	mov.w	r8, #0
 800a55e:	e67a      	b.n	800a256 <_strtod_l+0x76>
 800a560:	4881      	ldr	r0, [pc, #516]	; (800a768 <_strtod_l+0x588>)
 800a562:	f000 fe75 	bl	800b250 <nan>
 800a566:	ec59 8b10 	vmov	r8, r9, d0
 800a56a:	e674      	b.n	800a256 <_strtod_l+0x76>
 800a56c:	9b05      	ldr	r3, [sp, #20]
 800a56e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a570:	1afb      	subs	r3, r7, r3
 800a572:	f1bb 0f00 	cmp.w	fp, #0
 800a576:	bf08      	it	eq
 800a578:	46b3      	moveq	fp, r6
 800a57a:	2e10      	cmp	r6, #16
 800a57c:	9308      	str	r3, [sp, #32]
 800a57e:	4635      	mov	r5, r6
 800a580:	bfa8      	it	ge
 800a582:	2510      	movge	r5, #16
 800a584:	f7f5 ffce 	bl	8000524 <__aeabi_ui2d>
 800a588:	2e09      	cmp	r6, #9
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	dd13      	ble.n	800a5b8 <_strtod_l+0x3d8>
 800a590:	4b76      	ldr	r3, [pc, #472]	; (800a76c <_strtod_l+0x58c>)
 800a592:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a596:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a59a:	f7f6 f83d 	bl	8000618 <__aeabi_dmul>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f7f5 ffbe 	bl	8000524 <__aeabi_ui2d>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe7c 	bl	80002ac <__adddf3>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	2e0f      	cmp	r6, #15
 800a5ba:	dc38      	bgt.n	800a62e <_strtod_l+0x44e>
 800a5bc:	9b08      	ldr	r3, [sp, #32]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f43f ae49 	beq.w	800a256 <_strtod_l+0x76>
 800a5c4:	dd24      	ble.n	800a610 <_strtod_l+0x430>
 800a5c6:	2b16      	cmp	r3, #22
 800a5c8:	dc0b      	bgt.n	800a5e2 <_strtod_l+0x402>
 800a5ca:	4968      	ldr	r1, [pc, #416]	; (800a76c <_strtod_l+0x58c>)
 800a5cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	f7f6 f81e 	bl	8000618 <__aeabi_dmul>
 800a5dc:	4680      	mov	r8, r0
 800a5de:	4689      	mov	r9, r1
 800a5e0:	e639      	b.n	800a256 <_strtod_l+0x76>
 800a5e2:	9a08      	ldr	r2, [sp, #32]
 800a5e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	db20      	blt.n	800a62e <_strtod_l+0x44e>
 800a5ec:	4c5f      	ldr	r4, [pc, #380]	; (800a76c <_strtod_l+0x58c>)
 800a5ee:	f1c6 060f 	rsb	r6, r6, #15
 800a5f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a5f6:	4642      	mov	r2, r8
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fe:	f7f6 f80b 	bl	8000618 <__aeabi_dmul>
 800a602:	9b08      	ldr	r3, [sp, #32]
 800a604:	1b9e      	subs	r6, r3, r6
 800a606:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a60a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a60e:	e7e3      	b.n	800a5d8 <_strtod_l+0x3f8>
 800a610:	9b08      	ldr	r3, [sp, #32]
 800a612:	3316      	adds	r3, #22
 800a614:	db0b      	blt.n	800a62e <_strtod_l+0x44e>
 800a616:	9b05      	ldr	r3, [sp, #20]
 800a618:	1bdf      	subs	r7, r3, r7
 800a61a:	4b54      	ldr	r3, [pc, #336]	; (800a76c <_strtod_l+0x58c>)
 800a61c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a624:	4640      	mov	r0, r8
 800a626:	4649      	mov	r1, r9
 800a628:	f7f6 f920 	bl	800086c <__aeabi_ddiv>
 800a62c:	e7d6      	b.n	800a5dc <_strtod_l+0x3fc>
 800a62e:	9b08      	ldr	r3, [sp, #32]
 800a630:	1b75      	subs	r5, r6, r5
 800a632:	441d      	add	r5, r3
 800a634:	2d00      	cmp	r5, #0
 800a636:	dd70      	ble.n	800a71a <_strtod_l+0x53a>
 800a638:	f015 030f 	ands.w	r3, r5, #15
 800a63c:	d00a      	beq.n	800a654 <_strtod_l+0x474>
 800a63e:	494b      	ldr	r1, [pc, #300]	; (800a76c <_strtod_l+0x58c>)
 800a640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64c:	f7f5 ffe4 	bl	8000618 <__aeabi_dmul>
 800a650:	4680      	mov	r8, r0
 800a652:	4689      	mov	r9, r1
 800a654:	f035 050f 	bics.w	r5, r5, #15
 800a658:	d04d      	beq.n	800a6f6 <_strtod_l+0x516>
 800a65a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a65e:	dd22      	ble.n	800a6a6 <_strtod_l+0x4c6>
 800a660:	2500      	movs	r5, #0
 800a662:	46ab      	mov	fp, r5
 800a664:	9509      	str	r5, [sp, #36]	; 0x24
 800a666:	9505      	str	r5, [sp, #20]
 800a668:	2322      	movs	r3, #34	; 0x22
 800a66a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a774 <_strtod_l+0x594>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	f04f 0800 	mov.w	r8, #0
 800a674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	f43f aded 	beq.w	800a256 <_strtod_l+0x76>
 800a67c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a67e:	4620      	mov	r0, r4
 800a680:	f7ff f924 	bl	80098cc <_Bfree>
 800a684:	9905      	ldr	r1, [sp, #20]
 800a686:	4620      	mov	r0, r4
 800a688:	f7ff f920 	bl	80098cc <_Bfree>
 800a68c:	4659      	mov	r1, fp
 800a68e:	4620      	mov	r0, r4
 800a690:	f7ff f91c 	bl	80098cc <_Bfree>
 800a694:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff f918 	bl	80098cc <_Bfree>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7ff f914 	bl	80098cc <_Bfree>
 800a6a4:	e5d7      	b.n	800a256 <_strtod_l+0x76>
 800a6a6:	4b32      	ldr	r3, [pc, #200]	; (800a770 <_strtod_l+0x590>)
 800a6a8:	9304      	str	r3, [sp, #16]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	112d      	asrs	r5, r5, #4
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	469a      	mov	sl, r3
 800a6b4:	2d01      	cmp	r5, #1
 800a6b6:	dc21      	bgt.n	800a6fc <_strtod_l+0x51c>
 800a6b8:	b10b      	cbz	r3, 800a6be <_strtod_l+0x4de>
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	492c      	ldr	r1, [pc, #176]	; (800a770 <_strtod_l+0x590>)
 800a6c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a6c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d0:	f7f5 ffa2 	bl	8000618 <__aeabi_dmul>
 800a6d4:	4b27      	ldr	r3, [pc, #156]	; (800a774 <_strtod_l+0x594>)
 800a6d6:	460a      	mov	r2, r1
 800a6d8:	400b      	ands	r3, r1
 800a6da:	4927      	ldr	r1, [pc, #156]	; (800a778 <_strtod_l+0x598>)
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	4680      	mov	r8, r0
 800a6e0:	d8be      	bhi.n	800a660 <_strtod_l+0x480>
 800a6e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6e6:	428b      	cmp	r3, r1
 800a6e8:	bf86      	itte	hi
 800a6ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a77c <_strtod_l+0x59c>
 800a6ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800a6f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	e07b      	b.n	800a7f4 <_strtod_l+0x614>
 800a6fc:	07ea      	lsls	r2, r5, #31
 800a6fe:	d505      	bpl.n	800a70c <_strtod_l+0x52c>
 800a700:	9b04      	ldr	r3, [sp, #16]
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 ff87 	bl	8000618 <__aeabi_dmul>
 800a70a:	2301      	movs	r3, #1
 800a70c:	9a04      	ldr	r2, [sp, #16]
 800a70e:	3208      	adds	r2, #8
 800a710:	f10a 0a01 	add.w	sl, sl, #1
 800a714:	106d      	asrs	r5, r5, #1
 800a716:	9204      	str	r2, [sp, #16]
 800a718:	e7cc      	b.n	800a6b4 <_strtod_l+0x4d4>
 800a71a:	d0ec      	beq.n	800a6f6 <_strtod_l+0x516>
 800a71c:	426d      	negs	r5, r5
 800a71e:	f015 020f 	ands.w	r2, r5, #15
 800a722:	d00a      	beq.n	800a73a <_strtod_l+0x55a>
 800a724:	4b11      	ldr	r3, [pc, #68]	; (800a76c <_strtod_l+0x58c>)
 800a726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a72a:	4640      	mov	r0, r8
 800a72c:	4649      	mov	r1, r9
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f6 f89b 	bl	800086c <__aeabi_ddiv>
 800a736:	4680      	mov	r8, r0
 800a738:	4689      	mov	r9, r1
 800a73a:	112d      	asrs	r5, r5, #4
 800a73c:	d0db      	beq.n	800a6f6 <_strtod_l+0x516>
 800a73e:	2d1f      	cmp	r5, #31
 800a740:	dd1e      	ble.n	800a780 <_strtod_l+0x5a0>
 800a742:	2500      	movs	r5, #0
 800a744:	46ab      	mov	fp, r5
 800a746:	9509      	str	r5, [sp, #36]	; 0x24
 800a748:	9505      	str	r5, [sp, #20]
 800a74a:	2322      	movs	r3, #34	; 0x22
 800a74c:	f04f 0800 	mov.w	r8, #0
 800a750:	f04f 0900 	mov.w	r9, #0
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	e78d      	b.n	800a674 <_strtod_l+0x494>
 800a758:	0800c302 	.word	0x0800c302
 800a75c:	0800c52c 	.word	0x0800c52c
 800a760:	0800c2fa 	.word	0x0800c2fa
 800a764:	0800c331 	.word	0x0800c331
 800a768:	0800c5bc 	.word	0x0800c5bc
 800a76c:	0800c440 	.word	0x0800c440
 800a770:	0800c418 	.word	0x0800c418
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	7ca00000 	.word	0x7ca00000
 800a77c:	7fefffff 	.word	0x7fefffff
 800a780:	f015 0310 	ands.w	r3, r5, #16
 800a784:	bf18      	it	ne
 800a786:	236a      	movne	r3, #106	; 0x6a
 800a788:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ab2c <_strtod_l+0x94c>
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	2300      	movs	r3, #0
 800a794:	07ea      	lsls	r2, r5, #31
 800a796:	d504      	bpl.n	800a7a2 <_strtod_l+0x5c2>
 800a798:	e9da 2300 	ldrd	r2, r3, [sl]
 800a79c:	f7f5 ff3c 	bl	8000618 <__aeabi_dmul>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	106d      	asrs	r5, r5, #1
 800a7a4:	f10a 0a08 	add.w	sl, sl, #8
 800a7a8:	d1f4      	bne.n	800a794 <_strtod_l+0x5b4>
 800a7aa:	b10b      	cbz	r3, 800a7b0 <_strtod_l+0x5d0>
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	9b04      	ldr	r3, [sp, #16]
 800a7b2:	b1bb      	cbz	r3, 800a7e4 <_strtod_l+0x604>
 800a7b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a7b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	4649      	mov	r1, r9
 800a7c0:	dd10      	ble.n	800a7e4 <_strtod_l+0x604>
 800a7c2:	2b1f      	cmp	r3, #31
 800a7c4:	f340 811e 	ble.w	800aa04 <_strtod_l+0x824>
 800a7c8:	2b34      	cmp	r3, #52	; 0x34
 800a7ca:	bfde      	ittt	le
 800a7cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a7d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7d4:	4093      	lslle	r3, r2
 800a7d6:	f04f 0800 	mov.w	r8, #0
 800a7da:	bfcc      	ite	gt
 800a7dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a7e0:	ea03 0901 	andle.w	r9, r3, r1
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f6 f97c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1a6      	bne.n	800a742 <_strtod_l+0x562>
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7fa:	4633      	mov	r3, r6
 800a7fc:	465a      	mov	r2, fp
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7ff f8cc 	bl	800999c <__s2b>
 800a804:	9009      	str	r0, [sp, #36]	; 0x24
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f af2a 	beq.w	800a660 <_strtod_l+0x480>
 800a80c:	9a08      	ldr	r2, [sp, #32]
 800a80e:	9b05      	ldr	r3, [sp, #20]
 800a810:	2a00      	cmp	r2, #0
 800a812:	eba3 0307 	sub.w	r3, r3, r7
 800a816:	bfa8      	it	ge
 800a818:	2300      	movge	r3, #0
 800a81a:	930c      	str	r3, [sp, #48]	; 0x30
 800a81c:	2500      	movs	r5, #0
 800a81e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a822:	9312      	str	r3, [sp, #72]	; 0x48
 800a824:	46ab      	mov	fp, r5
 800a826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a828:	4620      	mov	r0, r4
 800a82a:	6859      	ldr	r1, [r3, #4]
 800a82c:	f7ff f80e 	bl	800984c <_Balloc>
 800a830:	9005      	str	r0, [sp, #20]
 800a832:	2800      	cmp	r0, #0
 800a834:	f43f af18 	beq.w	800a668 <_strtod_l+0x488>
 800a838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	3202      	adds	r2, #2
 800a83e:	f103 010c 	add.w	r1, r3, #12
 800a842:	0092      	lsls	r2, r2, #2
 800a844:	300c      	adds	r0, #12
 800a846:	f000 fcf3 	bl	800b230 <memcpy>
 800a84a:	ec49 8b10 	vmov	d0, r8, r9
 800a84e:	aa18      	add	r2, sp, #96	; 0x60
 800a850:	a917      	add	r1, sp, #92	; 0x5c
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff fbd6 	bl	800a004 <__d2b>
 800a858:	ec49 8b18 	vmov	d8, r8, r9
 800a85c:	9016      	str	r0, [sp, #88]	; 0x58
 800a85e:	2800      	cmp	r0, #0
 800a860:	f43f af02 	beq.w	800a668 <_strtod_l+0x488>
 800a864:	2101      	movs	r1, #1
 800a866:	4620      	mov	r0, r4
 800a868:	f7ff f930 	bl	8009acc <__i2b>
 800a86c:	4683      	mov	fp, r0
 800a86e:	2800      	cmp	r0, #0
 800a870:	f43f aefa 	beq.w	800a668 <_strtod_l+0x488>
 800a874:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a876:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a878:	2e00      	cmp	r6, #0
 800a87a:	bfab      	itete	ge
 800a87c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a87e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a880:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a882:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a886:	bfac      	ite	ge
 800a888:	eb06 0a03 	addge.w	sl, r6, r3
 800a88c:	1b9f      	sublt	r7, r3, r6
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	1af6      	subs	r6, r6, r3
 800a892:	4416      	add	r6, r2
 800a894:	4ba0      	ldr	r3, [pc, #640]	; (800ab18 <_strtod_l+0x938>)
 800a896:	3e01      	subs	r6, #1
 800a898:	429e      	cmp	r6, r3
 800a89a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a89e:	f280 80c4 	bge.w	800aa2a <_strtod_l+0x84a>
 800a8a2:	1b9b      	subs	r3, r3, r6
 800a8a4:	2b1f      	cmp	r3, #31
 800a8a6:	eba2 0203 	sub.w	r2, r2, r3
 800a8aa:	f04f 0101 	mov.w	r1, #1
 800a8ae:	f300 80b0 	bgt.w	800aa12 <_strtod_l+0x832>
 800a8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a8bc:	eb0a 0602 	add.w	r6, sl, r2
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	45b2      	cmp	sl, r6
 800a8c4:	4417      	add	r7, r2
 800a8c6:	441f      	add	r7, r3
 800a8c8:	4653      	mov	r3, sl
 800a8ca:	bfa8      	it	ge
 800a8cc:	4633      	movge	r3, r6
 800a8ce:	42bb      	cmp	r3, r7
 800a8d0:	bfa8      	it	ge
 800a8d2:	463b      	movge	r3, r7
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bfc2      	ittt	gt
 800a8d8:	1af6      	subgt	r6, r6, r3
 800a8da:	1aff      	subgt	r7, r7, r3
 800a8dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dd17      	ble.n	800a916 <_strtod_l+0x736>
 800a8e6:	4659      	mov	r1, fp
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff f9ae 	bl	8009c4c <__pow5mult>
 800a8f0:	4683      	mov	fp, r0
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f43f aeb8 	beq.w	800a668 <_strtod_l+0x488>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff f8fb 	bl	8009af8 <__multiply>
 800a902:	900b      	str	r0, [sp, #44]	; 0x2c
 800a904:	2800      	cmp	r0, #0
 800a906:	f43f aeaf 	beq.w	800a668 <_strtod_l+0x488>
 800a90a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a90c:	4620      	mov	r0, r4
 800a90e:	f7fe ffdd 	bl	80098cc <_Bfree>
 800a912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a914:	9316      	str	r3, [sp, #88]	; 0x58
 800a916:	2e00      	cmp	r6, #0
 800a918:	f300 808c 	bgt.w	800aa34 <_strtod_l+0x854>
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd08      	ble.n	800a934 <_strtod_l+0x754>
 800a922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a924:	9905      	ldr	r1, [sp, #20]
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff f990 	bl	8009c4c <__pow5mult>
 800a92c:	9005      	str	r0, [sp, #20]
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f ae9a 	beq.w	800a668 <_strtod_l+0x488>
 800a934:	2f00      	cmp	r7, #0
 800a936:	dd08      	ble.n	800a94a <_strtod_l+0x76a>
 800a938:	9905      	ldr	r1, [sp, #20]
 800a93a:	463a      	mov	r2, r7
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7ff f9df 	bl	8009d00 <__lshift>
 800a942:	9005      	str	r0, [sp, #20]
 800a944:	2800      	cmp	r0, #0
 800a946:	f43f ae8f 	beq.w	800a668 <_strtod_l+0x488>
 800a94a:	f1ba 0f00 	cmp.w	sl, #0
 800a94e:	dd08      	ble.n	800a962 <_strtod_l+0x782>
 800a950:	4659      	mov	r1, fp
 800a952:	4652      	mov	r2, sl
 800a954:	4620      	mov	r0, r4
 800a956:	f7ff f9d3 	bl	8009d00 <__lshift>
 800a95a:	4683      	mov	fp, r0
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f43f ae83 	beq.w	800a668 <_strtod_l+0x488>
 800a962:	9a05      	ldr	r2, [sp, #20]
 800a964:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a966:	4620      	mov	r0, r4
 800a968:	f7ff fa52 	bl	8009e10 <__mdiff>
 800a96c:	4605      	mov	r5, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f ae7a 	beq.w	800a668 <_strtod_l+0x488>
 800a974:	68c3      	ldr	r3, [r0, #12]
 800a976:	930b      	str	r3, [sp, #44]	; 0x2c
 800a978:	2300      	movs	r3, #0
 800a97a:	60c3      	str	r3, [r0, #12]
 800a97c:	4659      	mov	r1, fp
 800a97e:	f7ff fa2b 	bl	8009dd8 <__mcmp>
 800a982:	2800      	cmp	r0, #0
 800a984:	da60      	bge.n	800aa48 <_strtod_l+0x868>
 800a986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a988:	ea53 0308 	orrs.w	r3, r3, r8
 800a98c:	f040 8084 	bne.w	800aa98 <_strtod_l+0x8b8>
 800a990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a994:	2b00      	cmp	r3, #0
 800a996:	d17f      	bne.n	800aa98 <_strtod_l+0x8b8>
 800a998:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	051b      	lsls	r3, r3, #20
 800a9a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9a4:	d978      	bls.n	800aa98 <_strtod_l+0x8b8>
 800a9a6:	696b      	ldr	r3, [r5, #20]
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_strtod_l+0x7d0>
 800a9aa:	692b      	ldr	r3, [r5, #16]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	dd73      	ble.n	800aa98 <_strtod_l+0x8b8>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7ff f9a3 	bl	8009d00 <__lshift>
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	4605      	mov	r5, r0
 800a9be:	f7ff fa0b 	bl	8009dd8 <__mcmp>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	dd68      	ble.n	800aa98 <_strtod_l+0x8b8>
 800a9c6:	9904      	ldr	r1, [sp, #16]
 800a9c8:	4a54      	ldr	r2, [pc, #336]	; (800ab1c <_strtod_l+0x93c>)
 800a9ca:	464b      	mov	r3, r9
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	f000 8084 	beq.w	800aada <_strtod_l+0x8fa>
 800a9d2:	ea02 0109 	and.w	r1, r2, r9
 800a9d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a9da:	dc7e      	bgt.n	800aada <_strtod_l+0x8fa>
 800a9dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a9e0:	f77f aeb3 	ble.w	800a74a <_strtod_l+0x56a>
 800a9e4:	4b4e      	ldr	r3, [pc, #312]	; (800ab20 <_strtod_l+0x940>)
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f7f5 fe14 	bl	8000618 <__aeabi_dmul>
 800a9f0:	4b4a      	ldr	r3, [pc, #296]	; (800ab1c <_strtod_l+0x93c>)
 800a9f2:	400b      	ands	r3, r1
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	4689      	mov	r9, r1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f47f ae3f 	bne.w	800a67c <_strtod_l+0x49c>
 800a9fe:	2322      	movs	r3, #34	; 0x22
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	e63b      	b.n	800a67c <_strtod_l+0x49c>
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295
 800aa08:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0c:	ea03 0808 	and.w	r8, r3, r8
 800aa10:	e6e8      	b.n	800a7e4 <_strtod_l+0x604>
 800aa12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aa16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aa1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aa1e:	36e2      	adds	r6, #226	; 0xe2
 800aa20:	fa01 f306 	lsl.w	r3, r1, r6
 800aa24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aa28:	e748      	b.n	800a8bc <_strtod_l+0x6dc>
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aa32:	e743      	b.n	800a8bc <_strtod_l+0x6dc>
 800aa34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa36:	4632      	mov	r2, r6
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7ff f961 	bl	8009d00 <__lshift>
 800aa3e:	9016      	str	r0, [sp, #88]	; 0x58
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f47f af6b 	bne.w	800a91c <_strtod_l+0x73c>
 800aa46:	e60f      	b.n	800a668 <_strtod_l+0x488>
 800aa48:	46ca      	mov	sl, r9
 800aa4a:	d171      	bne.n	800ab30 <_strtod_l+0x950>
 800aa4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa52:	b352      	cbz	r2, 800aaaa <_strtod_l+0x8ca>
 800aa54:	4a33      	ldr	r2, [pc, #204]	; (800ab24 <_strtod_l+0x944>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d12a      	bne.n	800aab0 <_strtod_l+0x8d0>
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	4641      	mov	r1, r8
 800aa5e:	b1fb      	cbz	r3, 800aaa0 <_strtod_l+0x8c0>
 800aa60:	4b2e      	ldr	r3, [pc, #184]	; (800ab1c <_strtod_l+0x93c>)
 800aa62:	ea09 0303 	and.w	r3, r9, r3
 800aa66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6e:	d81a      	bhi.n	800aaa6 <_strtod_l+0x8c6>
 800aa70:	0d1b      	lsrs	r3, r3, #20
 800aa72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa76:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7a:	4299      	cmp	r1, r3
 800aa7c:	d118      	bne.n	800aab0 <_strtod_l+0x8d0>
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <_strtod_l+0x948>)
 800aa80:	459a      	cmp	sl, r3
 800aa82:	d102      	bne.n	800aa8a <_strtod_l+0x8aa>
 800aa84:	3101      	adds	r1, #1
 800aa86:	f43f adef 	beq.w	800a668 <_strtod_l+0x488>
 800aa8a:	4b24      	ldr	r3, [pc, #144]	; (800ab1c <_strtod_l+0x93c>)
 800aa8c:	ea0a 0303 	and.w	r3, sl, r3
 800aa90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aa94:	f04f 0800 	mov.w	r8, #0
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1a2      	bne.n	800a9e4 <_strtod_l+0x804>
 800aa9e:	e5ed      	b.n	800a67c <_strtod_l+0x49c>
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e7e9      	b.n	800aa7a <_strtod_l+0x89a>
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	e7e7      	b.n	800aa7a <_strtod_l+0x89a>
 800aaaa:	ea53 0308 	orrs.w	r3, r3, r8
 800aaae:	d08a      	beq.n	800a9c6 <_strtod_l+0x7e6>
 800aab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab2:	b1e3      	cbz	r3, 800aaee <_strtod_l+0x90e>
 800aab4:	ea13 0f0a 	tst.w	r3, sl
 800aab8:	d0ee      	beq.n	800aa98 <_strtod_l+0x8b8>
 800aaba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aabc:	9a04      	ldr	r2, [sp, #16]
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	b1c3      	cbz	r3, 800aaf6 <_strtod_l+0x916>
 800aac4:	f7ff fb6f 	bl	800a1a6 <sulp>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	ec51 0b18 	vmov	r0, r1, d8
 800aad0:	f7f5 fbec 	bl	80002ac <__adddf3>
 800aad4:	4680      	mov	r8, r0
 800aad6:	4689      	mov	r9, r1
 800aad8:	e7de      	b.n	800aa98 <_strtod_l+0x8b8>
 800aada:	4013      	ands	r3, r2
 800aadc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aae0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aae4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aae8:	f04f 38ff 	mov.w	r8, #4294967295
 800aaec:	e7d4      	b.n	800aa98 <_strtod_l+0x8b8>
 800aaee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaf0:	ea13 0f08 	tst.w	r3, r8
 800aaf4:	e7e0      	b.n	800aab8 <_strtod_l+0x8d8>
 800aaf6:	f7ff fb56 	bl	800a1a6 <sulp>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	ec51 0b18 	vmov	r0, r1, d8
 800ab02:	f7f5 fbd1 	bl	80002a8 <__aeabi_dsub>
 800ab06:	2200      	movs	r2, #0
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	f7f5 ffeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d0c0      	beq.n	800aa98 <_strtod_l+0x8b8>
 800ab16:	e618      	b.n	800a74a <_strtod_l+0x56a>
 800ab18:	fffffc02 	.word	0xfffffc02
 800ab1c:	7ff00000 	.word	0x7ff00000
 800ab20:	39500000 	.word	0x39500000
 800ab24:	000fffff 	.word	0x000fffff
 800ab28:	7fefffff 	.word	0x7fefffff
 800ab2c:	0800c540 	.word	0x0800c540
 800ab30:	4659      	mov	r1, fp
 800ab32:	4628      	mov	r0, r5
 800ab34:	f7ff fac0 	bl	800a0b8 <__ratio>
 800ab38:	ec57 6b10 	vmov	r6, r7, d0
 800ab3c:	ee10 0a10 	vmov	r0, s0
 800ab40:	2200      	movs	r2, #0
 800ab42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab46:	4639      	mov	r1, r7
 800ab48:	f7f5 ffe2 	bl	8000b10 <__aeabi_dcmple>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d071      	beq.n	800ac34 <_strtod_l+0xa54>
 800ab50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d17c      	bne.n	800ac50 <_strtod_l+0xa70>
 800ab56:	f1b8 0f00 	cmp.w	r8, #0
 800ab5a:	d15a      	bne.n	800ac12 <_strtod_l+0xa32>
 800ab5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d15d      	bne.n	800ac20 <_strtod_l+0xa40>
 800ab64:	4b90      	ldr	r3, [pc, #576]	; (800ada8 <_strtod_l+0xbc8>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 ffc6 	bl	8000afc <__aeabi_dcmplt>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d15c      	bne.n	800ac2e <_strtod_l+0xa4e>
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	4b8c      	ldr	r3, [pc, #560]	; (800adac <_strtod_l+0xbcc>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f7f5 fd4c 	bl	8000618 <__aeabi_dmul>
 800ab80:	4606      	mov	r6, r0
 800ab82:	460f      	mov	r7, r1
 800ab84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ab88:	9606      	str	r6, [sp, #24]
 800ab8a:	9307      	str	r3, [sp, #28]
 800ab8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ab94:	4b86      	ldr	r3, [pc, #536]	; (800adb0 <_strtod_l+0xbd0>)
 800ab96:	ea0a 0303 	and.w	r3, sl, r3
 800ab9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9e:	4b85      	ldr	r3, [pc, #532]	; (800adb4 <_strtod_l+0xbd4>)
 800aba0:	429a      	cmp	r2, r3
 800aba2:	f040 8090 	bne.w	800acc6 <_strtod_l+0xae6>
 800aba6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800abaa:	ec49 8b10 	vmov	d0, r8, r9
 800abae:	f7ff f9b9 	bl	8009f24 <__ulp>
 800abb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abb6:	ec51 0b10 	vmov	r0, r1, d0
 800abba:	f7f5 fd2d 	bl	8000618 <__aeabi_dmul>
 800abbe:	4642      	mov	r2, r8
 800abc0:	464b      	mov	r3, r9
 800abc2:	f7f5 fb73 	bl	80002ac <__adddf3>
 800abc6:	460b      	mov	r3, r1
 800abc8:	4979      	ldr	r1, [pc, #484]	; (800adb0 <_strtod_l+0xbd0>)
 800abca:	4a7b      	ldr	r2, [pc, #492]	; (800adb8 <_strtod_l+0xbd8>)
 800abcc:	4019      	ands	r1, r3
 800abce:	4291      	cmp	r1, r2
 800abd0:	4680      	mov	r8, r0
 800abd2:	d944      	bls.n	800ac5e <_strtod_l+0xa7e>
 800abd4:	ee18 2a90 	vmov	r2, s17
 800abd8:	4b78      	ldr	r3, [pc, #480]	; (800adbc <_strtod_l+0xbdc>)
 800abda:	429a      	cmp	r2, r3
 800abdc:	d104      	bne.n	800abe8 <_strtod_l+0xa08>
 800abde:	ee18 3a10 	vmov	r3, s16
 800abe2:	3301      	adds	r3, #1
 800abe4:	f43f ad40 	beq.w	800a668 <_strtod_l+0x488>
 800abe8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800adbc <_strtod_l+0xbdc>
 800abec:	f04f 38ff 	mov.w	r8, #4294967295
 800abf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7fe fe6a 	bl	80098cc <_Bfree>
 800abf8:	9905      	ldr	r1, [sp, #20]
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7fe fe66 	bl	80098cc <_Bfree>
 800ac00:	4659      	mov	r1, fp
 800ac02:	4620      	mov	r0, r4
 800ac04:	f7fe fe62 	bl	80098cc <_Bfree>
 800ac08:	4629      	mov	r1, r5
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f7fe fe5e 	bl	80098cc <_Bfree>
 800ac10:	e609      	b.n	800a826 <_strtod_l+0x646>
 800ac12:	f1b8 0f01 	cmp.w	r8, #1
 800ac16:	d103      	bne.n	800ac20 <_strtod_l+0xa40>
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	f43f ad95 	beq.w	800a74a <_strtod_l+0x56a>
 800ac20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ad78 <_strtod_l+0xb98>
 800ac24:	4f60      	ldr	r7, [pc, #384]	; (800ada8 <_strtod_l+0xbc8>)
 800ac26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	e7ae      	b.n	800ab8c <_strtod_l+0x9ac>
 800ac2e:	4f5f      	ldr	r7, [pc, #380]	; (800adac <_strtod_l+0xbcc>)
 800ac30:	2600      	movs	r6, #0
 800ac32:	e7a7      	b.n	800ab84 <_strtod_l+0x9a4>
 800ac34:	4b5d      	ldr	r3, [pc, #372]	; (800adac <_strtod_l+0xbcc>)
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f7f5 fcec 	bl	8000618 <__aeabi_dmul>
 800ac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d09c      	beq.n	800ab84 <_strtod_l+0x9a4>
 800ac4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac4e:	e79d      	b.n	800ab8c <_strtod_l+0x9ac>
 800ac50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ad80 <_strtod_l+0xba0>
 800ac54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac58:	ec57 6b17 	vmov	r6, r7, d7
 800ac5c:	e796      	b.n	800ab8c <_strtod_l+0x9ac>
 800ac5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	46ca      	mov	sl, r9
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1c2      	bne.n	800abf0 <_strtod_l+0xa10>
 800ac6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac70:	0d1b      	lsrs	r3, r3, #20
 800ac72:	051b      	lsls	r3, r3, #20
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d1bb      	bne.n	800abf0 <_strtod_l+0xa10>
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	f7f6 f82c 	bl	8000cd8 <__aeabi_d2lz>
 800ac80:	f7f5 fc9c 	bl	80005bc <__aeabi_l2d>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 fb0c 	bl	80002a8 <__aeabi_dsub>
 800ac90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac96:	ea43 0308 	orr.w	r3, r3, r8
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	460f      	mov	r7, r1
 800aca0:	d054      	beq.n	800ad4c <_strtod_l+0xb6c>
 800aca2:	a339      	add	r3, pc, #228	; (adr r3, 800ad88 <_strtod_l+0xba8>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	f7f5 ff28 	bl	8000afc <__aeabi_dcmplt>
 800acac:	2800      	cmp	r0, #0
 800acae:	f47f ace5 	bne.w	800a67c <_strtod_l+0x49c>
 800acb2:	a337      	add	r3, pc, #220	; (adr r3, 800ad90 <_strtod_l+0xbb0>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	4630      	mov	r0, r6
 800acba:	4639      	mov	r1, r7
 800acbc:	f7f5 ff3c 	bl	8000b38 <__aeabi_dcmpgt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d095      	beq.n	800abf0 <_strtod_l+0xa10>
 800acc4:	e4da      	b.n	800a67c <_strtod_l+0x49c>
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	b333      	cbz	r3, 800ad18 <_strtod_l+0xb38>
 800acca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800accc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acd0:	d822      	bhi.n	800ad18 <_strtod_l+0xb38>
 800acd2:	a331      	add	r3, pc, #196	; (adr r3, 800ad98 <_strtod_l+0xbb8>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 ff18 	bl	8000b10 <__aeabi_dcmple>
 800ace0:	b1a0      	cbz	r0, 800ad0c <_strtod_l+0xb2c>
 800ace2:	4639      	mov	r1, r7
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7f5 ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 800acea:	2801      	cmp	r0, #1
 800acec:	bf38      	it	cc
 800acee:	2001      	movcc	r0, #1
 800acf0:	f7f5 fc18 	bl	8000524 <__aeabi_ui2d>
 800acf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf6:	4606      	mov	r6, r0
 800acf8:	460f      	mov	r7, r1
 800acfa:	bb23      	cbnz	r3, 800ad46 <_strtod_l+0xb66>
 800acfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad00:	9010      	str	r0, [sp, #64]	; 0x40
 800ad02:	9311      	str	r3, [sp, #68]	; 0x44
 800ad04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ad0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad20:	eef0 0a68 	vmov.f32	s1, s17
 800ad24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ad28:	f7ff f8fc 	bl	8009f24 <__ulp>
 800ad2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad30:	ec53 2b10 	vmov	r2, r3, d0
 800ad34:	f7f5 fc70 	bl	8000618 <__aeabi_dmul>
 800ad38:	ec53 2b18 	vmov	r2, r3, d8
 800ad3c:	f7f5 fab6 	bl	80002ac <__adddf3>
 800ad40:	4680      	mov	r8, r0
 800ad42:	4689      	mov	r9, r1
 800ad44:	e78d      	b.n	800ac62 <_strtod_l+0xa82>
 800ad46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ad4a:	e7db      	b.n	800ad04 <_strtod_l+0xb24>
 800ad4c:	a314      	add	r3, pc, #80	; (adr r3, 800ada0 <_strtod_l+0xbc0>)
 800ad4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad52:	f7f5 fed3 	bl	8000afc <__aeabi_dcmplt>
 800ad56:	e7b3      	b.n	800acc0 <_strtod_l+0xae0>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad60:	6013      	str	r3, [r2, #0]
 800ad62:	f7ff ba7c 	b.w	800a25e <_strtod_l+0x7e>
 800ad66:	2a65      	cmp	r2, #101	; 0x65
 800ad68:	f43f ab75 	beq.w	800a456 <_strtod_l+0x276>
 800ad6c:	2a45      	cmp	r2, #69	; 0x45
 800ad6e:	f43f ab72 	beq.w	800a456 <_strtod_l+0x276>
 800ad72:	2301      	movs	r3, #1
 800ad74:	f7ff bbaa 	b.w	800a4cc <_strtod_l+0x2ec>
 800ad78:	00000000 	.word	0x00000000
 800ad7c:	bff00000 	.word	0xbff00000
 800ad80:	00000000 	.word	0x00000000
 800ad84:	3ff00000 	.word	0x3ff00000
 800ad88:	94a03595 	.word	0x94a03595
 800ad8c:	3fdfffff 	.word	0x3fdfffff
 800ad90:	35afe535 	.word	0x35afe535
 800ad94:	3fe00000 	.word	0x3fe00000
 800ad98:	ffc00000 	.word	0xffc00000
 800ad9c:	41dfffff 	.word	0x41dfffff
 800ada0:	94a03595 	.word	0x94a03595
 800ada4:	3fcfffff 	.word	0x3fcfffff
 800ada8:	3ff00000 	.word	0x3ff00000
 800adac:	3fe00000 	.word	0x3fe00000
 800adb0:	7ff00000 	.word	0x7ff00000
 800adb4:	7fe00000 	.word	0x7fe00000
 800adb8:	7c9fffff 	.word	0x7c9fffff
 800adbc:	7fefffff 	.word	0x7fefffff

0800adc0 <_strtod_r>:
 800adc0:	4b01      	ldr	r3, [pc, #4]	; (800adc8 <_strtod_r+0x8>)
 800adc2:	f7ff ba0d 	b.w	800a1e0 <_strtod_l>
 800adc6:	bf00      	nop
 800adc8:	20000070 	.word	0x20000070

0800adcc <__ssputs_r>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	688e      	ldr	r6, [r1, #8]
 800add2:	461f      	mov	r7, r3
 800add4:	42be      	cmp	r6, r7
 800add6:	680b      	ldr	r3, [r1, #0]
 800add8:	4682      	mov	sl, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4690      	mov	r8, r2
 800adde:	d82c      	bhi.n	800ae3a <__ssputs_r+0x6e>
 800ade0:	898a      	ldrh	r2, [r1, #12]
 800ade2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ade6:	d026      	beq.n	800ae36 <__ssputs_r+0x6a>
 800ade8:	6965      	ldr	r5, [r4, #20]
 800adea:	6909      	ldr	r1, [r1, #16]
 800adec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf0:	eba3 0901 	sub.w	r9, r3, r1
 800adf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf8:	1c7b      	adds	r3, r7, #1
 800adfa:	444b      	add	r3, r9
 800adfc:	106d      	asrs	r5, r5, #1
 800adfe:	429d      	cmp	r5, r3
 800ae00:	bf38      	it	cc
 800ae02:	461d      	movcc	r5, r3
 800ae04:	0553      	lsls	r3, r2, #21
 800ae06:	d527      	bpl.n	800ae58 <__ssputs_r+0x8c>
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7fc fcf1 	bl	80077f0 <_malloc_r>
 800ae0e:	4606      	mov	r6, r0
 800ae10:	b360      	cbz	r0, 800ae6c <__ssputs_r+0xa0>
 800ae12:	6921      	ldr	r1, [r4, #16]
 800ae14:	464a      	mov	r2, r9
 800ae16:	f000 fa0b 	bl	800b230 <memcpy>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	6126      	str	r6, [r4, #16]
 800ae28:	6165      	str	r5, [r4, #20]
 800ae2a:	444e      	add	r6, r9
 800ae2c:	eba5 0509 	sub.w	r5, r5, r9
 800ae30:	6026      	str	r6, [r4, #0]
 800ae32:	60a5      	str	r5, [r4, #8]
 800ae34:	463e      	mov	r6, r7
 800ae36:	42be      	cmp	r6, r7
 800ae38:	d900      	bls.n	800ae3c <__ssputs_r+0x70>
 800ae3a:	463e      	mov	r6, r7
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	4632      	mov	r2, r6
 800ae40:	4641      	mov	r1, r8
 800ae42:	f000 f9c9 	bl	800b1d8 <memmove>
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	1b9b      	subs	r3, r3, r6
 800ae4a:	60a3      	str	r3, [r4, #8]
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	4433      	add	r3, r6
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	2000      	movs	r0, #0
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	462a      	mov	r2, r5
 800ae5a:	f000 fd9e 	bl	800b99a <_realloc_r>
 800ae5e:	4606      	mov	r6, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1e0      	bne.n	800ae26 <__ssputs_r+0x5a>
 800ae64:	6921      	ldr	r1, [r4, #16]
 800ae66:	4650      	mov	r0, sl
 800ae68:	f7fe fca4 	bl	80097b4 <_free_r>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	f8ca 3000 	str.w	r3, [sl]
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7e:	e7e9      	b.n	800ae54 <__ssputs_r+0x88>

0800ae80 <_svfiprintf_r>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4698      	mov	r8, r3
 800ae86:	898b      	ldrh	r3, [r1, #12]
 800ae88:	061b      	lsls	r3, r3, #24
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	d50e      	bpl.n	800aeb2 <_svfiprintf_r+0x32>
 800ae94:	690b      	ldr	r3, [r1, #16]
 800ae96:	b963      	cbnz	r3, 800aeb2 <_svfiprintf_r+0x32>
 800ae98:	2140      	movs	r1, #64	; 0x40
 800ae9a:	f7fc fca9 	bl	80077f0 <_malloc_r>
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	b920      	cbnz	r0, 800aeae <_svfiprintf_r+0x2e>
 800aea4:	230c      	movs	r3, #12
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	e0d0      	b.n	800b050 <_svfiprintf_r+0x1d0>
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	616b      	str	r3, [r5, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	2320      	movs	r3, #32
 800aeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec0:	2330      	movs	r3, #48	; 0x30
 800aec2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b068 <_svfiprintf_r+0x1e8>
 800aec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeca:	f04f 0901 	mov.w	r9, #1
 800aece:	4623      	mov	r3, r4
 800aed0:	469a      	mov	sl, r3
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	b10a      	cbz	r2, 800aedc <_svfiprintf_r+0x5c>
 800aed8:	2a25      	cmp	r2, #37	; 0x25
 800aeda:	d1f9      	bne.n	800aed0 <_svfiprintf_r+0x50>
 800aedc:	ebba 0b04 	subs.w	fp, sl, r4
 800aee0:	d00b      	beq.n	800aefa <_svfiprintf_r+0x7a>
 800aee2:	465b      	mov	r3, fp
 800aee4:	4622      	mov	r2, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ff6f 	bl	800adcc <__ssputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	f000 80a9 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800aef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef6:	445a      	add	r2, fp
 800aef8:	9209      	str	r2, [sp, #36]	; 0x24
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80a1 	beq.w	800b046 <_svfiprintf_r+0x1c6>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 32ff 	mov.w	r2, #4294967295
 800af0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1a:	931a      	str	r3, [sp, #104]	; 0x68
 800af1c:	4654      	mov	r4, sl
 800af1e:	2205      	movs	r2, #5
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4850      	ldr	r0, [pc, #320]	; (800b068 <_svfiprintf_r+0x1e8>)
 800af26:	f7f5 f963 	bl	80001f0 <memchr>
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	b9d8      	cbnz	r0, 800af66 <_svfiprintf_r+0xe6>
 800af2e:	06d0      	lsls	r0, r2, #27
 800af30:	bf44      	itt	mi
 800af32:	2320      	movmi	r3, #32
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af38:	0711      	lsls	r1, r2, #28
 800af3a:	bf44      	itt	mi
 800af3c:	232b      	movmi	r3, #43	; 0x2b
 800af3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b2a      	cmp	r3, #42	; 0x2a
 800af48:	d015      	beq.n	800af76 <_svfiprintf_r+0xf6>
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4654      	mov	r4, sl
 800af4e:	2000      	movs	r0, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4621      	mov	r1, r4
 800af56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5a:	3b30      	subs	r3, #48	; 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d94d      	bls.n	800affc <_svfiprintf_r+0x17c>
 800af60:	b1b0      	cbz	r0, 800af90 <_svfiprintf_r+0x110>
 800af62:	9207      	str	r2, [sp, #28]
 800af64:	e014      	b.n	800af90 <_svfiprintf_r+0x110>
 800af66:	eba0 0308 	sub.w	r3, r0, r8
 800af6a:	fa09 f303 	lsl.w	r3, r9, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	46a2      	mov	sl, r4
 800af74:	e7d2      	b.n	800af1c <_svfiprintf_r+0x9c>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbb      	ittet	lt
 800af82:	425b      	neglt	r3, r3
 800af84:	f042 0202 	orrlt.w	r2, r2, #2
 800af88:	9307      	strge	r3, [sp, #28]
 800af8a:	9307      	strlt	r3, [sp, #28]
 800af8c:	bfb8      	it	lt
 800af8e:	9204      	strlt	r2, [sp, #16]
 800af90:	7823      	ldrb	r3, [r4, #0]
 800af92:	2b2e      	cmp	r3, #46	; 0x2e
 800af94:	d10c      	bne.n	800afb0 <_svfiprintf_r+0x130>
 800af96:	7863      	ldrb	r3, [r4, #1]
 800af98:	2b2a      	cmp	r3, #42	; 0x2a
 800af9a:	d134      	bne.n	800b006 <_svfiprintf_r+0x186>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb8      	it	lt
 800afa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800afac:	3402      	adds	r4, #2
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b078 <_svfiprintf_r+0x1f8>
 800afb4:	7821      	ldrb	r1, [r4, #0]
 800afb6:	2203      	movs	r2, #3
 800afb8:	4650      	mov	r0, sl
 800afba:	f7f5 f919 	bl	80001f0 <memchr>
 800afbe:	b138      	cbz	r0, 800afd0 <_svfiprintf_r+0x150>
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	eba0 000a 	sub.w	r0, r0, sl
 800afc6:	2240      	movs	r2, #64	; 0x40
 800afc8:	4082      	lsls	r2, r0
 800afca:	4313      	orrs	r3, r2
 800afcc:	3401      	adds	r4, #1
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	4825      	ldr	r0, [pc, #148]	; (800b06c <_svfiprintf_r+0x1ec>)
 800afd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afda:	2206      	movs	r2, #6
 800afdc:	f7f5 f908 	bl	80001f0 <memchr>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d038      	beq.n	800b056 <_svfiprintf_r+0x1d6>
 800afe4:	4b22      	ldr	r3, [pc, #136]	; (800b070 <_svfiprintf_r+0x1f0>)
 800afe6:	bb1b      	cbnz	r3, 800b030 <_svfiprintf_r+0x1b0>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	3307      	adds	r3, #7
 800afec:	f023 0307 	bic.w	r3, r3, #7
 800aff0:	3308      	adds	r3, #8
 800aff2:	9303      	str	r3, [sp, #12]
 800aff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff6:	4433      	add	r3, r6
 800aff8:	9309      	str	r3, [sp, #36]	; 0x24
 800affa:	e768      	b.n	800aece <_svfiprintf_r+0x4e>
 800affc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b000:	460c      	mov	r4, r1
 800b002:	2001      	movs	r0, #1
 800b004:	e7a6      	b.n	800af54 <_svfiprintf_r+0xd4>
 800b006:	2300      	movs	r3, #0
 800b008:	3401      	adds	r4, #1
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	4619      	mov	r1, r3
 800b00e:	f04f 0c0a 	mov.w	ip, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b018:	3a30      	subs	r2, #48	; 0x30
 800b01a:	2a09      	cmp	r2, #9
 800b01c:	d903      	bls.n	800b026 <_svfiprintf_r+0x1a6>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0c6      	beq.n	800afb0 <_svfiprintf_r+0x130>
 800b022:	9105      	str	r1, [sp, #20]
 800b024:	e7c4      	b.n	800afb0 <_svfiprintf_r+0x130>
 800b026:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02a:	4604      	mov	r4, r0
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7f0      	b.n	800b012 <_svfiprintf_r+0x192>
 800b030:	ab03      	add	r3, sp, #12
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	462a      	mov	r2, r5
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <_svfiprintf_r+0x1f4>)
 800b038:	a904      	add	r1, sp, #16
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7fc fd92 	bl	8007b64 <_printf_float>
 800b040:	1c42      	adds	r2, r0, #1
 800b042:	4606      	mov	r6, r0
 800b044:	d1d6      	bne.n	800aff4 <_svfiprintf_r+0x174>
 800b046:	89ab      	ldrh	r3, [r5, #12]
 800b048:	065b      	lsls	r3, r3, #25
 800b04a:	f53f af2d 	bmi.w	800aea8 <_svfiprintf_r+0x28>
 800b04e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b050:	b01d      	add	sp, #116	; 0x74
 800b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b056:	ab03      	add	r3, sp, #12
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	462a      	mov	r2, r5
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <_svfiprintf_r+0x1f4>)
 800b05e:	a904      	add	r1, sp, #16
 800b060:	4638      	mov	r0, r7
 800b062:	f7fd f823 	bl	80080ac <_printf_i>
 800b066:	e7eb      	b.n	800b040 <_svfiprintf_r+0x1c0>
 800b068:	0800c568 	.word	0x0800c568
 800b06c:	0800c572 	.word	0x0800c572
 800b070:	08007b65 	.word	0x08007b65
 800b074:	0800adcd 	.word	0x0800adcd
 800b078:	0800c56e 	.word	0x0800c56e

0800b07c <__sflush_r>:
 800b07c:	898a      	ldrh	r2, [r1, #12]
 800b07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	4605      	mov	r5, r0
 800b084:	0710      	lsls	r0, r2, #28
 800b086:	460c      	mov	r4, r1
 800b088:	d458      	bmi.n	800b13c <__sflush_r+0xc0>
 800b08a:	684b      	ldr	r3, [r1, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dc05      	bgt.n	800b09c <__sflush_r+0x20>
 800b090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	dc02      	bgt.n	800b09c <__sflush_r+0x20>
 800b096:	2000      	movs	r0, #0
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d0f9      	beq.n	800b096 <__sflush_r+0x1a>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0a8:	682f      	ldr	r7, [r5, #0]
 800b0aa:	6a21      	ldr	r1, [r4, #32]
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	d032      	beq.n	800b116 <__sflush_r+0x9a>
 800b0b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	075a      	lsls	r2, r3, #29
 800b0b6:	d505      	bpl.n	800b0c4 <__sflush_r+0x48>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	1ac0      	subs	r0, r0, r3
 800b0bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0be:	b10b      	cbz	r3, 800b0c4 <__sflush_r+0x48>
 800b0c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0c2:	1ac0      	subs	r0, r0, r3
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0ca:	6a21      	ldr	r1, [r4, #32]
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b0      	blx	r6
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	d106      	bne.n	800b0e4 <__sflush_r+0x68>
 800b0d6:	6829      	ldr	r1, [r5, #0]
 800b0d8:	291d      	cmp	r1, #29
 800b0da:	d82b      	bhi.n	800b134 <__sflush_r+0xb8>
 800b0dc:	4a29      	ldr	r2, [pc, #164]	; (800b184 <__sflush_r+0x108>)
 800b0de:	410a      	asrs	r2, r1
 800b0e0:	07d6      	lsls	r6, r2, #31
 800b0e2:	d427      	bmi.n	800b134 <__sflush_r+0xb8>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	6062      	str	r2, [r4, #4]
 800b0e8:	04d9      	lsls	r1, r3, #19
 800b0ea:	6922      	ldr	r2, [r4, #16]
 800b0ec:	6022      	str	r2, [r4, #0]
 800b0ee:	d504      	bpl.n	800b0fa <__sflush_r+0x7e>
 800b0f0:	1c42      	adds	r2, r0, #1
 800b0f2:	d101      	bne.n	800b0f8 <__sflush_r+0x7c>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b903      	cbnz	r3, 800b0fa <__sflush_r+0x7e>
 800b0f8:	6560      	str	r0, [r4, #84]	; 0x54
 800b0fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0fc:	602f      	str	r7, [r5, #0]
 800b0fe:	2900      	cmp	r1, #0
 800b100:	d0c9      	beq.n	800b096 <__sflush_r+0x1a>
 800b102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b106:	4299      	cmp	r1, r3
 800b108:	d002      	beq.n	800b110 <__sflush_r+0x94>
 800b10a:	4628      	mov	r0, r5
 800b10c:	f7fe fb52 	bl	80097b4 <_free_r>
 800b110:	2000      	movs	r0, #0
 800b112:	6360      	str	r0, [r4, #52]	; 0x34
 800b114:	e7c0      	b.n	800b098 <__sflush_r+0x1c>
 800b116:	2301      	movs	r3, #1
 800b118:	4628      	mov	r0, r5
 800b11a:	47b0      	blx	r6
 800b11c:	1c41      	adds	r1, r0, #1
 800b11e:	d1c8      	bne.n	800b0b2 <__sflush_r+0x36>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0c5      	beq.n	800b0b2 <__sflush_r+0x36>
 800b126:	2b1d      	cmp	r3, #29
 800b128:	d001      	beq.n	800b12e <__sflush_r+0xb2>
 800b12a:	2b16      	cmp	r3, #22
 800b12c:	d101      	bne.n	800b132 <__sflush_r+0xb6>
 800b12e:	602f      	str	r7, [r5, #0]
 800b130:	e7b1      	b.n	800b096 <__sflush_r+0x1a>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	e7ad      	b.n	800b098 <__sflush_r+0x1c>
 800b13c:	690f      	ldr	r7, [r1, #16]
 800b13e:	2f00      	cmp	r7, #0
 800b140:	d0a9      	beq.n	800b096 <__sflush_r+0x1a>
 800b142:	0793      	lsls	r3, r2, #30
 800b144:	680e      	ldr	r6, [r1, #0]
 800b146:	bf08      	it	eq
 800b148:	694b      	ldreq	r3, [r1, #20]
 800b14a:	600f      	str	r7, [r1, #0]
 800b14c:	bf18      	it	ne
 800b14e:	2300      	movne	r3, #0
 800b150:	eba6 0807 	sub.w	r8, r6, r7
 800b154:	608b      	str	r3, [r1, #8]
 800b156:	f1b8 0f00 	cmp.w	r8, #0
 800b15a:	dd9c      	ble.n	800b096 <__sflush_r+0x1a>
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b160:	4643      	mov	r3, r8
 800b162:	463a      	mov	r2, r7
 800b164:	4628      	mov	r0, r5
 800b166:	47b0      	blx	r6
 800b168:	2800      	cmp	r0, #0
 800b16a:	dc06      	bgt.n	800b17a <__sflush_r+0xfe>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e78e      	b.n	800b098 <__sflush_r+0x1c>
 800b17a:	4407      	add	r7, r0
 800b17c:	eba8 0800 	sub.w	r8, r8, r0
 800b180:	e7e9      	b.n	800b156 <__sflush_r+0xda>
 800b182:	bf00      	nop
 800b184:	dfbffffe 	.word	0xdfbffffe

0800b188 <_fflush_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	690b      	ldr	r3, [r1, #16]
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b913      	cbnz	r3, 800b198 <_fflush_r+0x10>
 800b192:	2500      	movs	r5, #0
 800b194:	4628      	mov	r0, r5
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	b118      	cbz	r0, 800b1a2 <_fflush_r+0x1a>
 800b19a:	6a03      	ldr	r3, [r0, #32]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <_fflush_r+0x1a>
 800b19e:	f7fd fb43 	bl	8008828 <__sinit>
 800b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0f3      	beq.n	800b192 <_fflush_r+0xa>
 800b1aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1ac:	07d0      	lsls	r0, r2, #31
 800b1ae:	d404      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b0:	0599      	lsls	r1, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1b6:	f7fd fc70 	bl	8008a9a <__retarget_lock_acquire_recursive>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f7ff ff5d 	bl	800b07c <__sflush_r>
 800b1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c4:	07da      	lsls	r2, r3, #31
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	d4e4      	bmi.n	800b194 <_fflush_r+0xc>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	059b      	lsls	r3, r3, #22
 800b1ce:	d4e1      	bmi.n	800b194 <_fflush_r+0xc>
 800b1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1d2:	f7fd fc63 	bl	8008a9c <__retarget_lock_release_recursive>
 800b1d6:	e7dd      	b.n	800b194 <_fflush_r+0xc>

0800b1d8 <memmove>:
 800b1d8:	4288      	cmp	r0, r1
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	eb01 0402 	add.w	r4, r1, r2
 800b1e0:	d902      	bls.n	800b1e8 <memmove+0x10>
 800b1e2:	4284      	cmp	r4, r0
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	d807      	bhi.n	800b1f8 <memmove+0x20>
 800b1e8:	1e43      	subs	r3, r0, #1
 800b1ea:	42a1      	cmp	r1, r4
 800b1ec:	d008      	beq.n	800b200 <memmove+0x28>
 800b1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1f6:	e7f8      	b.n	800b1ea <memmove+0x12>
 800b1f8:	4402      	add	r2, r0
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	428a      	cmp	r2, r1
 800b1fe:	d100      	bne.n	800b202 <memmove+0x2a>
 800b200:	bd10      	pop	{r4, pc}
 800b202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b20a:	e7f7      	b.n	800b1fc <memmove+0x24>

0800b20c <strncmp>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	b16a      	cbz	r2, 800b22c <strncmp+0x20>
 800b210:	3901      	subs	r1, #1
 800b212:	1884      	adds	r4, r0, r2
 800b214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b218:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d103      	bne.n	800b228 <strncmp+0x1c>
 800b220:	42a0      	cmp	r0, r4
 800b222:	d001      	beq.n	800b228 <strncmp+0x1c>
 800b224:	2a00      	cmp	r2, #0
 800b226:	d1f5      	bne.n	800b214 <strncmp+0x8>
 800b228:	1ad0      	subs	r0, r2, r3
 800b22a:	bd10      	pop	{r4, pc}
 800b22c:	4610      	mov	r0, r2
 800b22e:	e7fc      	b.n	800b22a <strncmp+0x1e>

0800b230 <memcpy>:
 800b230:	440a      	add	r2, r1
 800b232:	4291      	cmp	r1, r2
 800b234:	f100 33ff 	add.w	r3, r0, #4294967295
 800b238:	d100      	bne.n	800b23c <memcpy+0xc>
 800b23a:	4770      	bx	lr
 800b23c:	b510      	push	{r4, lr}
 800b23e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b242:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b246:	4291      	cmp	r1, r2
 800b248:	d1f9      	bne.n	800b23e <memcpy+0xe>
 800b24a:	bd10      	pop	{r4, pc}
 800b24c:	0000      	movs	r0, r0
	...

0800b250 <nan>:
 800b250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b258 <nan+0x8>
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	00000000 	.word	0x00000000
 800b25c:	7ff80000 	.word	0x7ff80000

0800b260 <__assert_func>:
 800b260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b262:	4614      	mov	r4, r2
 800b264:	461a      	mov	r2, r3
 800b266:	4b09      	ldr	r3, [pc, #36]	; (800b28c <__assert_func+0x2c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4605      	mov	r5, r0
 800b26c:	68d8      	ldr	r0, [r3, #12]
 800b26e:	b14c      	cbz	r4, 800b284 <__assert_func+0x24>
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <__assert_func+0x30>)
 800b272:	9100      	str	r1, [sp, #0]
 800b274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b278:	4906      	ldr	r1, [pc, #24]	; (800b294 <__assert_func+0x34>)
 800b27a:	462b      	mov	r3, r5
 800b27c:	f000 fbca 	bl	800ba14 <fiprintf>
 800b280:	f000 fbda 	bl	800ba38 <abort>
 800b284:	4b04      	ldr	r3, [pc, #16]	; (800b298 <__assert_func+0x38>)
 800b286:	461c      	mov	r4, r3
 800b288:	e7f3      	b.n	800b272 <__assert_func+0x12>
 800b28a:	bf00      	nop
 800b28c:	2000006c 	.word	0x2000006c
 800b290:	0800c581 	.word	0x0800c581
 800b294:	0800c58e 	.word	0x0800c58e
 800b298:	0800c5bc 	.word	0x0800c5bc

0800b29c <_calloc_r>:
 800b29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b29e:	fba1 2402 	umull	r2, r4, r1, r2
 800b2a2:	b94c      	cbnz	r4, 800b2b8 <_calloc_r+0x1c>
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	9201      	str	r2, [sp, #4]
 800b2a8:	f7fc faa2 	bl	80077f0 <_malloc_r>
 800b2ac:	9a01      	ldr	r2, [sp, #4]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b930      	cbnz	r0, 800b2c0 <_calloc_r+0x24>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	b003      	add	sp, #12
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	220c      	movs	r2, #12
 800b2ba:	6002      	str	r2, [r0, #0]
 800b2bc:	2500      	movs	r5, #0
 800b2be:	e7f8      	b.n	800b2b2 <_calloc_r+0x16>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	f7fd fb4a 	bl	800895a <memset>
 800b2c6:	e7f4      	b.n	800b2b2 <_calloc_r+0x16>

0800b2c8 <rshift>:
 800b2c8:	6903      	ldr	r3, [r0, #16]
 800b2ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2d6:	f100 0414 	add.w	r4, r0, #20
 800b2da:	dd45      	ble.n	800b368 <rshift+0xa0>
 800b2dc:	f011 011f 	ands.w	r1, r1, #31
 800b2e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2e8:	d10c      	bne.n	800b304 <rshift+0x3c>
 800b2ea:	f100 0710 	add.w	r7, r0, #16
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	42b1      	cmp	r1, r6
 800b2f2:	d334      	bcc.n	800b35e <rshift+0x96>
 800b2f4:	1a9b      	subs	r3, r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	1eea      	subs	r2, r5, #3
 800b2fa:	4296      	cmp	r6, r2
 800b2fc:	bf38      	it	cc
 800b2fe:	2300      	movcc	r3, #0
 800b300:	4423      	add	r3, r4
 800b302:	e015      	b.n	800b330 <rshift+0x68>
 800b304:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b308:	f1c1 0820 	rsb	r8, r1, #32
 800b30c:	40cf      	lsrs	r7, r1
 800b30e:	f105 0e04 	add.w	lr, r5, #4
 800b312:	46a1      	mov	r9, r4
 800b314:	4576      	cmp	r6, lr
 800b316:	46f4      	mov	ip, lr
 800b318:	d815      	bhi.n	800b346 <rshift+0x7e>
 800b31a:	1a9a      	subs	r2, r3, r2
 800b31c:	0092      	lsls	r2, r2, #2
 800b31e:	3a04      	subs	r2, #4
 800b320:	3501      	adds	r5, #1
 800b322:	42ae      	cmp	r6, r5
 800b324:	bf38      	it	cc
 800b326:	2200      	movcc	r2, #0
 800b328:	18a3      	adds	r3, r4, r2
 800b32a:	50a7      	str	r7, [r4, r2]
 800b32c:	b107      	cbz	r7, 800b330 <rshift+0x68>
 800b32e:	3304      	adds	r3, #4
 800b330:	1b1a      	subs	r2, r3, r4
 800b332:	42a3      	cmp	r3, r4
 800b334:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b338:	bf08      	it	eq
 800b33a:	2300      	moveq	r3, #0
 800b33c:	6102      	str	r2, [r0, #16]
 800b33e:	bf08      	it	eq
 800b340:	6143      	streq	r3, [r0, #20]
 800b342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b346:	f8dc c000 	ldr.w	ip, [ip]
 800b34a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b34e:	ea4c 0707 	orr.w	r7, ip, r7
 800b352:	f849 7b04 	str.w	r7, [r9], #4
 800b356:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b35a:	40cf      	lsrs	r7, r1
 800b35c:	e7da      	b.n	800b314 <rshift+0x4c>
 800b35e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b362:	f847 cf04 	str.w	ip, [r7, #4]!
 800b366:	e7c3      	b.n	800b2f0 <rshift+0x28>
 800b368:	4623      	mov	r3, r4
 800b36a:	e7e1      	b.n	800b330 <rshift+0x68>

0800b36c <__hexdig_fun>:
 800b36c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b370:	2b09      	cmp	r3, #9
 800b372:	d802      	bhi.n	800b37a <__hexdig_fun+0xe>
 800b374:	3820      	subs	r0, #32
 800b376:	b2c0      	uxtb	r0, r0
 800b378:	4770      	bx	lr
 800b37a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b37e:	2b05      	cmp	r3, #5
 800b380:	d801      	bhi.n	800b386 <__hexdig_fun+0x1a>
 800b382:	3847      	subs	r0, #71	; 0x47
 800b384:	e7f7      	b.n	800b376 <__hexdig_fun+0xa>
 800b386:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b38a:	2b05      	cmp	r3, #5
 800b38c:	d801      	bhi.n	800b392 <__hexdig_fun+0x26>
 800b38e:	3827      	subs	r0, #39	; 0x27
 800b390:	e7f1      	b.n	800b376 <__hexdig_fun+0xa>
 800b392:	2000      	movs	r0, #0
 800b394:	4770      	bx	lr
	...

0800b398 <__gethex>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4617      	mov	r7, r2
 800b39e:	680a      	ldr	r2, [r1, #0]
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	f102 0b02 	add.w	fp, r2, #2
 800b3a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3ae:	4681      	mov	r9, r0
 800b3b0:	468a      	mov	sl, r1
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	32fe      	adds	r2, #254	; 0xfe
 800b3b6:	eb02 030b 	add.w	r3, r2, fp
 800b3ba:	46d8      	mov	r8, fp
 800b3bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	2830      	cmp	r0, #48	; 0x30
 800b3c4:	d0f7      	beq.n	800b3b6 <__gethex+0x1e>
 800b3c6:	f7ff ffd1 	bl	800b36c <__hexdig_fun>
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d138      	bne.n	800b442 <__gethex+0xaa>
 800b3d0:	49a7      	ldr	r1, [pc, #668]	; (800b670 <__gethex+0x2d8>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	f7ff ff19 	bl	800b20c <strncmp>
 800b3da:	4606      	mov	r6, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d169      	bne.n	800b4b4 <__gethex+0x11c>
 800b3e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b3e4:	465d      	mov	r5, fp
 800b3e6:	f7ff ffc1 	bl	800b36c <__hexdig_fun>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d064      	beq.n	800b4b8 <__gethex+0x120>
 800b3ee:	465a      	mov	r2, fp
 800b3f0:	7810      	ldrb	r0, [r2, #0]
 800b3f2:	2830      	cmp	r0, #48	; 0x30
 800b3f4:	4690      	mov	r8, r2
 800b3f6:	f102 0201 	add.w	r2, r2, #1
 800b3fa:	d0f9      	beq.n	800b3f0 <__gethex+0x58>
 800b3fc:	f7ff ffb6 	bl	800b36c <__hexdig_fun>
 800b400:	2301      	movs	r3, #1
 800b402:	fab0 f480 	clz	r4, r0
 800b406:	0964      	lsrs	r4, r4, #5
 800b408:	465e      	mov	r6, fp
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	4642      	mov	r2, r8
 800b40e:	4615      	mov	r5, r2
 800b410:	3201      	adds	r2, #1
 800b412:	7828      	ldrb	r0, [r5, #0]
 800b414:	f7ff ffaa 	bl	800b36c <__hexdig_fun>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d1f8      	bne.n	800b40e <__gethex+0x76>
 800b41c:	4994      	ldr	r1, [pc, #592]	; (800b670 <__gethex+0x2d8>)
 800b41e:	2201      	movs	r2, #1
 800b420:	4628      	mov	r0, r5
 800b422:	f7ff fef3 	bl	800b20c <strncmp>
 800b426:	b978      	cbnz	r0, 800b448 <__gethex+0xb0>
 800b428:	b946      	cbnz	r6, 800b43c <__gethex+0xa4>
 800b42a:	1c6e      	adds	r6, r5, #1
 800b42c:	4632      	mov	r2, r6
 800b42e:	4615      	mov	r5, r2
 800b430:	3201      	adds	r2, #1
 800b432:	7828      	ldrb	r0, [r5, #0]
 800b434:	f7ff ff9a 	bl	800b36c <__hexdig_fun>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1f8      	bne.n	800b42e <__gethex+0x96>
 800b43c:	1b73      	subs	r3, r6, r5
 800b43e:	009e      	lsls	r6, r3, #2
 800b440:	e004      	b.n	800b44c <__gethex+0xb4>
 800b442:	2400      	movs	r4, #0
 800b444:	4626      	mov	r6, r4
 800b446:	e7e1      	b.n	800b40c <__gethex+0x74>
 800b448:	2e00      	cmp	r6, #0
 800b44a:	d1f7      	bne.n	800b43c <__gethex+0xa4>
 800b44c:	782b      	ldrb	r3, [r5, #0]
 800b44e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b452:	2b50      	cmp	r3, #80	; 0x50
 800b454:	d13d      	bne.n	800b4d2 <__gethex+0x13a>
 800b456:	786b      	ldrb	r3, [r5, #1]
 800b458:	2b2b      	cmp	r3, #43	; 0x2b
 800b45a:	d02f      	beq.n	800b4bc <__gethex+0x124>
 800b45c:	2b2d      	cmp	r3, #45	; 0x2d
 800b45e:	d031      	beq.n	800b4c4 <__gethex+0x12c>
 800b460:	1c69      	adds	r1, r5, #1
 800b462:	f04f 0b00 	mov.w	fp, #0
 800b466:	7808      	ldrb	r0, [r1, #0]
 800b468:	f7ff ff80 	bl	800b36c <__hexdig_fun>
 800b46c:	1e42      	subs	r2, r0, #1
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	2a18      	cmp	r2, #24
 800b472:	d82e      	bhi.n	800b4d2 <__gethex+0x13a>
 800b474:	f1a0 0210 	sub.w	r2, r0, #16
 800b478:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b47c:	f7ff ff76 	bl	800b36c <__hexdig_fun>
 800b480:	f100 3cff 	add.w	ip, r0, #4294967295
 800b484:	fa5f fc8c 	uxtb.w	ip, ip
 800b488:	f1bc 0f18 	cmp.w	ip, #24
 800b48c:	d91d      	bls.n	800b4ca <__gethex+0x132>
 800b48e:	f1bb 0f00 	cmp.w	fp, #0
 800b492:	d000      	beq.n	800b496 <__gethex+0xfe>
 800b494:	4252      	negs	r2, r2
 800b496:	4416      	add	r6, r2
 800b498:	f8ca 1000 	str.w	r1, [sl]
 800b49c:	b1dc      	cbz	r4, 800b4d6 <__gethex+0x13e>
 800b49e:	9b01      	ldr	r3, [sp, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	bf14      	ite	ne
 800b4a4:	f04f 0800 	movne.w	r8, #0
 800b4a8:	f04f 0806 	moveq.w	r8, #6
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	b005      	add	sp, #20
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	4645      	mov	r5, r8
 800b4b6:	4626      	mov	r6, r4
 800b4b8:	2401      	movs	r4, #1
 800b4ba:	e7c7      	b.n	800b44c <__gethex+0xb4>
 800b4bc:	f04f 0b00 	mov.w	fp, #0
 800b4c0:	1ca9      	adds	r1, r5, #2
 800b4c2:	e7d0      	b.n	800b466 <__gethex+0xce>
 800b4c4:	f04f 0b01 	mov.w	fp, #1
 800b4c8:	e7fa      	b.n	800b4c0 <__gethex+0x128>
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	fb03 0002 	mla	r0, r3, r2, r0
 800b4d0:	e7d0      	b.n	800b474 <__gethex+0xdc>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	e7e0      	b.n	800b498 <__gethex+0x100>
 800b4d6:	eba5 0308 	sub.w	r3, r5, r8
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	4621      	mov	r1, r4
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	dc0a      	bgt.n	800b4f8 <__gethex+0x160>
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f7fe f9b2 	bl	800984c <_Balloc>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b940      	cbnz	r0, 800b4fe <__gethex+0x166>
 800b4ec:	4b61      	ldr	r3, [pc, #388]	; (800b674 <__gethex+0x2dc>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	21e4      	movs	r1, #228	; 0xe4
 800b4f2:	4861      	ldr	r0, [pc, #388]	; (800b678 <__gethex+0x2e0>)
 800b4f4:	f7ff feb4 	bl	800b260 <__assert_func>
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	105b      	asrs	r3, r3, #1
 800b4fc:	e7ef      	b.n	800b4de <__gethex+0x146>
 800b4fe:	f100 0a14 	add.w	sl, r0, #20
 800b502:	2300      	movs	r3, #0
 800b504:	495a      	ldr	r1, [pc, #360]	; (800b670 <__gethex+0x2d8>)
 800b506:	f8cd a004 	str.w	sl, [sp, #4]
 800b50a:	469b      	mov	fp, r3
 800b50c:	45a8      	cmp	r8, r5
 800b50e:	d342      	bcc.n	800b596 <__gethex+0x1fe>
 800b510:	9801      	ldr	r0, [sp, #4]
 800b512:	f840 bb04 	str.w	fp, [r0], #4
 800b516:	eba0 000a 	sub.w	r0, r0, sl
 800b51a:	1080      	asrs	r0, r0, #2
 800b51c:	6120      	str	r0, [r4, #16]
 800b51e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b522:	4658      	mov	r0, fp
 800b524:	f7fe fa84 	bl	8009a30 <__hi0bits>
 800b528:	683d      	ldr	r5, [r7, #0]
 800b52a:	eba8 0000 	sub.w	r0, r8, r0
 800b52e:	42a8      	cmp	r0, r5
 800b530:	dd59      	ble.n	800b5e6 <__gethex+0x24e>
 800b532:	eba0 0805 	sub.w	r8, r0, r5
 800b536:	4641      	mov	r1, r8
 800b538:	4620      	mov	r0, r4
 800b53a:	f7fe fe13 	bl	800a164 <__any_on>
 800b53e:	4683      	mov	fp, r0
 800b540:	b1b8      	cbz	r0, 800b572 <__gethex+0x1da>
 800b542:	f108 33ff 	add.w	r3, r8, #4294967295
 800b546:	1159      	asrs	r1, r3, #5
 800b548:	f003 021f 	and.w	r2, r3, #31
 800b54c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b550:	f04f 0b01 	mov.w	fp, #1
 800b554:	fa0b f202 	lsl.w	r2, fp, r2
 800b558:	420a      	tst	r2, r1
 800b55a:	d00a      	beq.n	800b572 <__gethex+0x1da>
 800b55c:	455b      	cmp	r3, fp
 800b55e:	dd06      	ble.n	800b56e <__gethex+0x1d6>
 800b560:	f1a8 0102 	sub.w	r1, r8, #2
 800b564:	4620      	mov	r0, r4
 800b566:	f7fe fdfd 	bl	800a164 <__any_on>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d138      	bne.n	800b5e0 <__gethex+0x248>
 800b56e:	f04f 0b02 	mov.w	fp, #2
 800b572:	4641      	mov	r1, r8
 800b574:	4620      	mov	r0, r4
 800b576:	f7ff fea7 	bl	800b2c8 <rshift>
 800b57a:	4446      	add	r6, r8
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	42b3      	cmp	r3, r6
 800b580:	da41      	bge.n	800b606 <__gethex+0x26e>
 800b582:	4621      	mov	r1, r4
 800b584:	4648      	mov	r0, r9
 800b586:	f7fe f9a1 	bl	80098cc <_Bfree>
 800b58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b58c:	2300      	movs	r3, #0
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b594:	e78a      	b.n	800b4ac <__gethex+0x114>
 800b596:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b59a:	2a2e      	cmp	r2, #46	; 0x2e
 800b59c:	d014      	beq.n	800b5c8 <__gethex+0x230>
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d106      	bne.n	800b5b0 <__gethex+0x218>
 800b5a2:	9b01      	ldr	r3, [sp, #4]
 800b5a4:	f843 bb04 	str.w	fp, [r3], #4
 800b5a8:	f04f 0b00 	mov.w	fp, #0
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	7828      	ldrb	r0, [r5, #0]
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	f7ff feda 	bl	800b36c <__hexdig_fun>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	f000 000f 	and.w	r0, r0, #15
 800b5be:	4098      	lsls	r0, r3
 800b5c0:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	e7a1      	b.n	800b50c <__gethex+0x174>
 800b5c8:	45a8      	cmp	r8, r5
 800b5ca:	d8e8      	bhi.n	800b59e <__gethex+0x206>
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	f7ff fe1b 	bl	800b20c <strncmp>
 800b5d6:	4926      	ldr	r1, [pc, #152]	; (800b670 <__gethex+0x2d8>)
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1df      	bne.n	800b59e <__gethex+0x206>
 800b5de:	e795      	b.n	800b50c <__gethex+0x174>
 800b5e0:	f04f 0b03 	mov.w	fp, #3
 800b5e4:	e7c5      	b.n	800b572 <__gethex+0x1da>
 800b5e6:	da0b      	bge.n	800b600 <__gethex+0x268>
 800b5e8:	eba5 0800 	sub.w	r8, r5, r0
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	4648      	mov	r0, r9
 800b5f2:	f7fe fb85 	bl	8009d00 <__lshift>
 800b5f6:	eba6 0608 	sub.w	r6, r6, r8
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	f100 0a14 	add.w	sl, r0, #20
 800b600:	f04f 0b00 	mov.w	fp, #0
 800b604:	e7ba      	b.n	800b57c <__gethex+0x1e4>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	42b3      	cmp	r3, r6
 800b60a:	dd73      	ble.n	800b6f4 <__gethex+0x35c>
 800b60c:	1b9e      	subs	r6, r3, r6
 800b60e:	42b5      	cmp	r5, r6
 800b610:	dc34      	bgt.n	800b67c <__gethex+0x2e4>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d023      	beq.n	800b660 <__gethex+0x2c8>
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d025      	beq.n	800b668 <__gethex+0x2d0>
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d115      	bne.n	800b64c <__gethex+0x2b4>
 800b620:	42b5      	cmp	r5, r6
 800b622:	d113      	bne.n	800b64c <__gethex+0x2b4>
 800b624:	2d01      	cmp	r5, #1
 800b626:	d10b      	bne.n	800b640 <__gethex+0x2a8>
 800b628:	9a02      	ldr	r2, [sp, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	2301      	movs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	f8ca 3000 	str.w	r3, [sl]
 800b636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b638:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b63c:	601c      	str	r4, [r3, #0]
 800b63e:	e735      	b.n	800b4ac <__gethex+0x114>
 800b640:	1e69      	subs	r1, r5, #1
 800b642:	4620      	mov	r0, r4
 800b644:	f7fe fd8e 	bl	800a164 <__any_on>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1ed      	bne.n	800b628 <__gethex+0x290>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4648      	mov	r0, r9
 800b650:	f7fe f93c 	bl	80098cc <_Bfree>
 800b654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b656:	2300      	movs	r3, #0
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b65e:	e725      	b.n	800b4ac <__gethex+0x114>
 800b660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f2      	bne.n	800b64c <__gethex+0x2b4>
 800b666:	e7df      	b.n	800b628 <__gethex+0x290>
 800b668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1dc      	bne.n	800b628 <__gethex+0x290>
 800b66e:	e7ed      	b.n	800b64c <__gethex+0x2b4>
 800b670:	0800c514 	.word	0x0800c514
 800b674:	0800c3aa 	.word	0x0800c3aa
 800b678:	0800c5bd 	.word	0x0800c5bd
 800b67c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b680:	f1bb 0f00 	cmp.w	fp, #0
 800b684:	d133      	bne.n	800b6ee <__gethex+0x356>
 800b686:	f1b8 0f00 	cmp.w	r8, #0
 800b68a:	d004      	beq.n	800b696 <__gethex+0x2fe>
 800b68c:	4641      	mov	r1, r8
 800b68e:	4620      	mov	r0, r4
 800b690:	f7fe fd68 	bl	800a164 <__any_on>
 800b694:	4683      	mov	fp, r0
 800b696:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b69a:	2301      	movs	r3, #1
 800b69c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6a0:	f008 081f 	and.w	r8, r8, #31
 800b6a4:	fa03 f308 	lsl.w	r3, r3, r8
 800b6a8:	4213      	tst	r3, r2
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	bf18      	it	ne
 800b6b0:	f04b 0b02 	orrne.w	fp, fp, #2
 800b6b4:	1bad      	subs	r5, r5, r6
 800b6b6:	f7ff fe07 	bl	800b2c8 <rshift>
 800b6ba:	687e      	ldr	r6, [r7, #4]
 800b6bc:	f04f 0802 	mov.w	r8, #2
 800b6c0:	f1bb 0f00 	cmp.w	fp, #0
 800b6c4:	d04a      	beq.n	800b75c <__gethex+0x3c4>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d016      	beq.n	800b6fa <__gethex+0x362>
 800b6cc:	2b03      	cmp	r3, #3
 800b6ce:	d018      	beq.n	800b702 <__gethex+0x36a>
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d109      	bne.n	800b6e8 <__gethex+0x350>
 800b6d4:	f01b 0f02 	tst.w	fp, #2
 800b6d8:	d006      	beq.n	800b6e8 <__gethex+0x350>
 800b6da:	f8da 3000 	ldr.w	r3, [sl]
 800b6de:	ea4b 0b03 	orr.w	fp, fp, r3
 800b6e2:	f01b 0f01 	tst.w	fp, #1
 800b6e6:	d10f      	bne.n	800b708 <__gethex+0x370>
 800b6e8:	f048 0810 	orr.w	r8, r8, #16
 800b6ec:	e036      	b.n	800b75c <__gethex+0x3c4>
 800b6ee:	f04f 0b01 	mov.w	fp, #1
 800b6f2:	e7d0      	b.n	800b696 <__gethex+0x2fe>
 800b6f4:	f04f 0801 	mov.w	r8, #1
 800b6f8:	e7e2      	b.n	800b6c0 <__gethex+0x328>
 800b6fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fc:	f1c3 0301 	rsb	r3, r3, #1
 800b700:	930f      	str	r3, [sp, #60]	; 0x3c
 800b702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0ef      	beq.n	800b6e8 <__gethex+0x350>
 800b708:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b70c:	f104 0214 	add.w	r2, r4, #20
 800b710:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b71a:	2300      	movs	r3, #0
 800b71c:	4694      	mov	ip, r2
 800b71e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b722:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b726:	d01e      	beq.n	800b766 <__gethex+0x3ce>
 800b728:	3101      	adds	r1, #1
 800b72a:	f8cc 1000 	str.w	r1, [ip]
 800b72e:	f1b8 0f02 	cmp.w	r8, #2
 800b732:	f104 0214 	add.w	r2, r4, #20
 800b736:	d13d      	bne.n	800b7b4 <__gethex+0x41c>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	42ab      	cmp	r3, r5
 800b73e:	d10b      	bne.n	800b758 <__gethex+0x3c0>
 800b740:	1169      	asrs	r1, r5, #5
 800b742:	2301      	movs	r3, #1
 800b744:	f005 051f 	and.w	r5, r5, #31
 800b748:	fa03 f505 	lsl.w	r5, r3, r5
 800b74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b750:	421d      	tst	r5, r3
 800b752:	bf18      	it	ne
 800b754:	f04f 0801 	movne.w	r8, #1
 800b758:	f048 0820 	orr.w	r8, r8, #32
 800b75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b75e:	601c      	str	r4, [r3, #0]
 800b760:	9b02      	ldr	r3, [sp, #8]
 800b762:	601e      	str	r6, [r3, #0]
 800b764:	e6a2      	b.n	800b4ac <__gethex+0x114>
 800b766:	4290      	cmp	r0, r2
 800b768:	f842 3c04 	str.w	r3, [r2, #-4]
 800b76c:	d8d6      	bhi.n	800b71c <__gethex+0x384>
 800b76e:	68a2      	ldr	r2, [r4, #8]
 800b770:	4593      	cmp	fp, r2
 800b772:	db17      	blt.n	800b7a4 <__gethex+0x40c>
 800b774:	6861      	ldr	r1, [r4, #4]
 800b776:	4648      	mov	r0, r9
 800b778:	3101      	adds	r1, #1
 800b77a:	f7fe f867 	bl	800984c <_Balloc>
 800b77e:	4682      	mov	sl, r0
 800b780:	b918      	cbnz	r0, 800b78a <__gethex+0x3f2>
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <__gethex+0x458>)
 800b784:	4602      	mov	r2, r0
 800b786:	2184      	movs	r1, #132	; 0x84
 800b788:	e6b3      	b.n	800b4f2 <__gethex+0x15a>
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	3202      	adds	r2, #2
 800b78e:	f104 010c 	add.w	r1, r4, #12
 800b792:	0092      	lsls	r2, r2, #2
 800b794:	300c      	adds	r0, #12
 800b796:	f7ff fd4b 	bl	800b230 <memcpy>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4648      	mov	r0, r9
 800b79e:	f7fe f895 	bl	80098cc <_Bfree>
 800b7a2:	4654      	mov	r4, sl
 800b7a4:	6922      	ldr	r2, [r4, #16]
 800b7a6:	1c51      	adds	r1, r2, #1
 800b7a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b7ac:	6121      	str	r1, [r4, #16]
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	6151      	str	r1, [r2, #20]
 800b7b2:	e7bc      	b.n	800b72e <__gethex+0x396>
 800b7b4:	6921      	ldr	r1, [r4, #16]
 800b7b6:	4559      	cmp	r1, fp
 800b7b8:	dd0b      	ble.n	800b7d2 <__gethex+0x43a>
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f7ff fd83 	bl	800b2c8 <rshift>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	3601      	adds	r6, #1
 800b7c6:	42b3      	cmp	r3, r6
 800b7c8:	f6ff aedb 	blt.w	800b582 <__gethex+0x1ea>
 800b7cc:	f04f 0801 	mov.w	r8, #1
 800b7d0:	e7c2      	b.n	800b758 <__gethex+0x3c0>
 800b7d2:	f015 051f 	ands.w	r5, r5, #31
 800b7d6:	d0f9      	beq.n	800b7cc <__gethex+0x434>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	441a      	add	r2, r3
 800b7dc:	f1c5 0520 	rsb	r5, r5, #32
 800b7e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b7e4:	f7fe f924 	bl	8009a30 <__hi0bits>
 800b7e8:	42a8      	cmp	r0, r5
 800b7ea:	dbe6      	blt.n	800b7ba <__gethex+0x422>
 800b7ec:	e7ee      	b.n	800b7cc <__gethex+0x434>
 800b7ee:	bf00      	nop
 800b7f0:	0800c3aa 	.word	0x0800c3aa

0800b7f4 <L_shift>:
 800b7f4:	f1c2 0208 	rsb	r2, r2, #8
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	b570      	push	{r4, r5, r6, lr}
 800b7fc:	f1c2 0620 	rsb	r6, r2, #32
 800b800:	6843      	ldr	r3, [r0, #4]
 800b802:	6804      	ldr	r4, [r0, #0]
 800b804:	fa03 f506 	lsl.w	r5, r3, r6
 800b808:	432c      	orrs	r4, r5
 800b80a:	40d3      	lsrs	r3, r2
 800b80c:	6004      	str	r4, [r0, #0]
 800b80e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b812:	4288      	cmp	r0, r1
 800b814:	d3f4      	bcc.n	800b800 <L_shift+0xc>
 800b816:	bd70      	pop	{r4, r5, r6, pc}

0800b818 <__match>:
 800b818:	b530      	push	{r4, r5, lr}
 800b81a:	6803      	ldr	r3, [r0, #0]
 800b81c:	3301      	adds	r3, #1
 800b81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b822:	b914      	cbnz	r4, 800b82a <__match+0x12>
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	2001      	movs	r0, #1
 800b828:	bd30      	pop	{r4, r5, pc}
 800b82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b832:	2d19      	cmp	r5, #25
 800b834:	bf98      	it	ls
 800b836:	3220      	addls	r2, #32
 800b838:	42a2      	cmp	r2, r4
 800b83a:	d0f0      	beq.n	800b81e <__match+0x6>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7f3      	b.n	800b828 <__match+0x10>

0800b840 <__hexnan>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	680b      	ldr	r3, [r1, #0]
 800b846:	6801      	ldr	r1, [r0, #0]
 800b848:	115e      	asrs	r6, r3, #5
 800b84a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b84e:	f013 031f 	ands.w	r3, r3, #31
 800b852:	b087      	sub	sp, #28
 800b854:	bf18      	it	ne
 800b856:	3604      	addne	r6, #4
 800b858:	2500      	movs	r5, #0
 800b85a:	1f37      	subs	r7, r6, #4
 800b85c:	4682      	mov	sl, r0
 800b85e:	4690      	mov	r8, r2
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f846 5c04 	str.w	r5, [r6, #-4]
 800b866:	46b9      	mov	r9, r7
 800b868:	463c      	mov	r4, r7
 800b86a:	9502      	str	r5, [sp, #8]
 800b86c:	46ab      	mov	fp, r5
 800b86e:	784a      	ldrb	r2, [r1, #1]
 800b870:	1c4b      	adds	r3, r1, #1
 800b872:	9303      	str	r3, [sp, #12]
 800b874:	b342      	cbz	r2, 800b8c8 <__hexnan+0x88>
 800b876:	4610      	mov	r0, r2
 800b878:	9105      	str	r1, [sp, #20]
 800b87a:	9204      	str	r2, [sp, #16]
 800b87c:	f7ff fd76 	bl	800b36c <__hexdig_fun>
 800b880:	2800      	cmp	r0, #0
 800b882:	d14f      	bne.n	800b924 <__hexnan+0xe4>
 800b884:	9a04      	ldr	r2, [sp, #16]
 800b886:	9905      	ldr	r1, [sp, #20]
 800b888:	2a20      	cmp	r2, #32
 800b88a:	d818      	bhi.n	800b8be <__hexnan+0x7e>
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	459b      	cmp	fp, r3
 800b890:	dd13      	ble.n	800b8ba <__hexnan+0x7a>
 800b892:	454c      	cmp	r4, r9
 800b894:	d206      	bcs.n	800b8a4 <__hexnan+0x64>
 800b896:	2d07      	cmp	r5, #7
 800b898:	dc04      	bgt.n	800b8a4 <__hexnan+0x64>
 800b89a:	462a      	mov	r2, r5
 800b89c:	4649      	mov	r1, r9
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff ffa8 	bl	800b7f4 <L_shift>
 800b8a4:	4544      	cmp	r4, r8
 800b8a6:	d950      	bls.n	800b94a <__hexnan+0x10a>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f1a4 0904 	sub.w	r9, r4, #4
 800b8ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8b2:	f8cd b008 	str.w	fp, [sp, #8]
 800b8b6:	464c      	mov	r4, r9
 800b8b8:	461d      	mov	r5, r3
 800b8ba:	9903      	ldr	r1, [sp, #12]
 800b8bc:	e7d7      	b.n	800b86e <__hexnan+0x2e>
 800b8be:	2a29      	cmp	r2, #41	; 0x29
 800b8c0:	d155      	bne.n	800b96e <__hexnan+0x12e>
 800b8c2:	3102      	adds	r1, #2
 800b8c4:	f8ca 1000 	str.w	r1, [sl]
 800b8c8:	f1bb 0f00 	cmp.w	fp, #0
 800b8cc:	d04f      	beq.n	800b96e <__hexnan+0x12e>
 800b8ce:	454c      	cmp	r4, r9
 800b8d0:	d206      	bcs.n	800b8e0 <__hexnan+0xa0>
 800b8d2:	2d07      	cmp	r5, #7
 800b8d4:	dc04      	bgt.n	800b8e0 <__hexnan+0xa0>
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7ff ff8a 	bl	800b7f4 <L_shift>
 800b8e0:	4544      	cmp	r4, r8
 800b8e2:	d934      	bls.n	800b94e <__hexnan+0x10e>
 800b8e4:	f1a8 0204 	sub.w	r2, r8, #4
 800b8e8:	4623      	mov	r3, r4
 800b8ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800b8ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800b8f2:	429f      	cmp	r7, r3
 800b8f4:	d2f9      	bcs.n	800b8ea <__hexnan+0xaa>
 800b8f6:	1b3b      	subs	r3, r7, r4
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	3e03      	subs	r6, #3
 800b900:	3401      	adds	r4, #1
 800b902:	42a6      	cmp	r6, r4
 800b904:	bf38      	it	cc
 800b906:	2304      	movcc	r3, #4
 800b908:	4443      	add	r3, r8
 800b90a:	2200      	movs	r2, #0
 800b90c:	f843 2b04 	str.w	r2, [r3], #4
 800b910:	429f      	cmp	r7, r3
 800b912:	d2fb      	bcs.n	800b90c <__hexnan+0xcc>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	b91b      	cbnz	r3, 800b920 <__hexnan+0xe0>
 800b918:	4547      	cmp	r7, r8
 800b91a:	d126      	bne.n	800b96a <__hexnan+0x12a>
 800b91c:	2301      	movs	r3, #1
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	2005      	movs	r0, #5
 800b922:	e025      	b.n	800b970 <__hexnan+0x130>
 800b924:	3501      	adds	r5, #1
 800b926:	2d08      	cmp	r5, #8
 800b928:	f10b 0b01 	add.w	fp, fp, #1
 800b92c:	dd06      	ble.n	800b93c <__hexnan+0xfc>
 800b92e:	4544      	cmp	r4, r8
 800b930:	d9c3      	bls.n	800b8ba <__hexnan+0x7a>
 800b932:	2300      	movs	r3, #0
 800b934:	f844 3c04 	str.w	r3, [r4, #-4]
 800b938:	2501      	movs	r5, #1
 800b93a:	3c04      	subs	r4, #4
 800b93c:	6822      	ldr	r2, [r4, #0]
 800b93e:	f000 000f 	and.w	r0, r0, #15
 800b942:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b946:	6020      	str	r0, [r4, #0]
 800b948:	e7b7      	b.n	800b8ba <__hexnan+0x7a>
 800b94a:	2508      	movs	r5, #8
 800b94c:	e7b5      	b.n	800b8ba <__hexnan+0x7a>
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0df      	beq.n	800b914 <__hexnan+0xd4>
 800b954:	f1c3 0320 	rsb	r3, r3, #32
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	40da      	lsrs	r2, r3
 800b95e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b962:	4013      	ands	r3, r2
 800b964:	f846 3c04 	str.w	r3, [r6, #-4]
 800b968:	e7d4      	b.n	800b914 <__hexnan+0xd4>
 800b96a:	3f04      	subs	r7, #4
 800b96c:	e7d2      	b.n	800b914 <__hexnan+0xd4>
 800b96e:	2004      	movs	r0, #4
 800b970:	b007      	add	sp, #28
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b976 <__ascii_mbtowc>:
 800b976:	b082      	sub	sp, #8
 800b978:	b901      	cbnz	r1, 800b97c <__ascii_mbtowc+0x6>
 800b97a:	a901      	add	r1, sp, #4
 800b97c:	b142      	cbz	r2, 800b990 <__ascii_mbtowc+0x1a>
 800b97e:	b14b      	cbz	r3, 800b994 <__ascii_mbtowc+0x1e>
 800b980:	7813      	ldrb	r3, [r2, #0]
 800b982:	600b      	str	r3, [r1, #0]
 800b984:	7812      	ldrb	r2, [r2, #0]
 800b986:	1e10      	subs	r0, r2, #0
 800b988:	bf18      	it	ne
 800b98a:	2001      	movne	r0, #1
 800b98c:	b002      	add	sp, #8
 800b98e:	4770      	bx	lr
 800b990:	4610      	mov	r0, r2
 800b992:	e7fb      	b.n	800b98c <__ascii_mbtowc+0x16>
 800b994:	f06f 0001 	mvn.w	r0, #1
 800b998:	e7f8      	b.n	800b98c <__ascii_mbtowc+0x16>

0800b99a <_realloc_r>:
 800b99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	460e      	mov	r6, r1
 800b9a4:	b921      	cbnz	r1, 800b9b0 <_realloc_r+0x16>
 800b9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	f7fb bf20 	b.w	80077f0 <_malloc_r>
 800b9b0:	b92a      	cbnz	r2, 800b9be <_realloc_r+0x24>
 800b9b2:	f7fd feff 	bl	80097b4 <_free_r>
 800b9b6:	4625      	mov	r5, r4
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9be:	f000 f842 	bl	800ba46 <_malloc_usable_size_r>
 800b9c2:	4284      	cmp	r4, r0
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	d802      	bhi.n	800b9ce <_realloc_r+0x34>
 800b9c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9cc:	d812      	bhi.n	800b9f4 <_realloc_r+0x5a>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f7fb ff0d 	bl	80077f0 <_malloc_r>
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0ed      	beq.n	800b9b8 <_realloc_r+0x1e>
 800b9dc:	42bc      	cmp	r4, r7
 800b9de:	4622      	mov	r2, r4
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	bf28      	it	cs
 800b9e4:	463a      	movcs	r2, r7
 800b9e6:	f7ff fc23 	bl	800b230 <memcpy>
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	f7fd fee1 	bl	80097b4 <_free_r>
 800b9f2:	e7e1      	b.n	800b9b8 <_realloc_r+0x1e>
 800b9f4:	4635      	mov	r5, r6
 800b9f6:	e7df      	b.n	800b9b8 <_realloc_r+0x1e>

0800b9f8 <__ascii_wctomb>:
 800b9f8:	b149      	cbz	r1, 800ba0e <__ascii_wctomb+0x16>
 800b9fa:	2aff      	cmp	r2, #255	; 0xff
 800b9fc:	bf85      	ittet	hi
 800b9fe:	238a      	movhi	r3, #138	; 0x8a
 800ba00:	6003      	strhi	r3, [r0, #0]
 800ba02:	700a      	strbls	r2, [r1, #0]
 800ba04:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba08:	bf98      	it	ls
 800ba0a:	2001      	movls	r0, #1
 800ba0c:	4770      	bx	lr
 800ba0e:	4608      	mov	r0, r1
 800ba10:	4770      	bx	lr
	...

0800ba14 <fiprintf>:
 800ba14:	b40e      	push	{r1, r2, r3}
 800ba16:	b503      	push	{r0, r1, lr}
 800ba18:	4601      	mov	r1, r0
 800ba1a:	ab03      	add	r3, sp, #12
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <fiprintf+0x20>)
 800ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba22:	6800      	ldr	r0, [r0, #0]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	f000 f83f 	bl	800baa8 <_vfiprintf_r>
 800ba2a:	b002      	add	sp, #8
 800ba2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba30:	b003      	add	sp, #12
 800ba32:	4770      	bx	lr
 800ba34:	2000006c 	.word	0x2000006c

0800ba38 <abort>:
 800ba38:	b508      	push	{r3, lr}
 800ba3a:	2006      	movs	r0, #6
 800ba3c:	f000 fa0c 	bl	800be58 <raise>
 800ba40:	2001      	movs	r0, #1
 800ba42:	f7f6 fcbb 	bl	80023bc <_exit>

0800ba46 <_malloc_usable_size_r>:
 800ba46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4a:	1f18      	subs	r0, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfbc      	itt	lt
 800ba50:	580b      	ldrlt	r3, [r1, r0]
 800ba52:	18c0      	addlt	r0, r0, r3
 800ba54:	4770      	bx	lr

0800ba56 <__sfputc_r>:
 800ba56:	6893      	ldr	r3, [r2, #8]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	b410      	push	{r4}
 800ba5e:	6093      	str	r3, [r2, #8]
 800ba60:	da08      	bge.n	800ba74 <__sfputc_r+0x1e>
 800ba62:	6994      	ldr	r4, [r2, #24]
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	db01      	blt.n	800ba6c <__sfputc_r+0x16>
 800ba68:	290a      	cmp	r1, #10
 800ba6a:	d103      	bne.n	800ba74 <__sfputc_r+0x1e>
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	f000 b934 	b.w	800bcdc <__swbuf_r>
 800ba74:	6813      	ldr	r3, [r2, #0]
 800ba76:	1c58      	adds	r0, r3, #1
 800ba78:	6010      	str	r0, [r2, #0]
 800ba7a:	7019      	strb	r1, [r3, #0]
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <__sfputs_r>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	4614      	mov	r4, r2
 800ba8c:	18d5      	adds	r5, r2, r3
 800ba8e:	42ac      	cmp	r4, r5
 800ba90:	d101      	bne.n	800ba96 <__sfputs_r+0x12>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e007      	b.n	800baa6 <__sfputs_r+0x22>
 800ba96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9a:	463a      	mov	r2, r7
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7ff ffda 	bl	800ba56 <__sfputc_r>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d1f3      	bne.n	800ba8e <__sfputs_r+0xa>
 800baa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baa8 <_vfiprintf_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	460d      	mov	r5, r1
 800baae:	b09d      	sub	sp, #116	; 0x74
 800bab0:	4614      	mov	r4, r2
 800bab2:	4698      	mov	r8, r3
 800bab4:	4606      	mov	r6, r0
 800bab6:	b118      	cbz	r0, 800bac0 <_vfiprintf_r+0x18>
 800bab8:	6a03      	ldr	r3, [r0, #32]
 800baba:	b90b      	cbnz	r3, 800bac0 <_vfiprintf_r+0x18>
 800babc:	f7fc feb4 	bl	8008828 <__sinit>
 800bac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac2:	07d9      	lsls	r1, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_vfiprintf_r+0x2a>
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_vfiprintf_r+0x2a>
 800bacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bace:	f7fc ffe4 	bl	8008a9a <__retarget_lock_acquire_recursive>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	071b      	lsls	r3, r3, #28
 800bad6:	d501      	bpl.n	800badc <_vfiprintf_r+0x34>
 800bad8:	692b      	ldr	r3, [r5, #16]
 800bada:	b99b      	cbnz	r3, 800bb04 <_vfiprintf_r+0x5c>
 800badc:	4629      	mov	r1, r5
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 f93a 	bl	800bd58 <__swsetup_r>
 800bae4:	b170      	cbz	r0, 800bb04 <_vfiprintf_r+0x5c>
 800bae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae8:	07dc      	lsls	r4, r3, #31
 800baea:	d504      	bpl.n	800baf6 <_vfiprintf_r+0x4e>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	89ab      	ldrh	r3, [r5, #12]
 800baf8:	0598      	lsls	r0, r3, #22
 800bafa:	d4f7      	bmi.n	800baec <_vfiprintf_r+0x44>
 800bafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bafe:	f7fc ffcd 	bl	8008a9c <__retarget_lock_release_recursive>
 800bb02:	e7f3      	b.n	800baec <_vfiprintf_r+0x44>
 800bb04:	2300      	movs	r3, #0
 800bb06:	9309      	str	r3, [sp, #36]	; 0x24
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb12:	2330      	movs	r3, #48	; 0x30
 800bb14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcc8 <_vfiprintf_r+0x220>
 800bb18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb1c:	f04f 0901 	mov.w	r9, #1
 800bb20:	4623      	mov	r3, r4
 800bb22:	469a      	mov	sl, r3
 800bb24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb28:	b10a      	cbz	r2, 800bb2e <_vfiprintf_r+0x86>
 800bb2a:	2a25      	cmp	r2, #37	; 0x25
 800bb2c:	d1f9      	bne.n	800bb22 <_vfiprintf_r+0x7a>
 800bb2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb32:	d00b      	beq.n	800bb4c <_vfiprintf_r+0xa4>
 800bb34:	465b      	mov	r3, fp
 800bb36:	4622      	mov	r2, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ffa2 	bl	800ba84 <__sfputs_r>
 800bb40:	3001      	adds	r0, #1
 800bb42:	f000 80a9 	beq.w	800bc98 <_vfiprintf_r+0x1f0>
 800bb46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb48:	445a      	add	r2, fp
 800bb4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 80a1 	beq.w	800bc98 <_vfiprintf_r+0x1f0>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb60:	f10a 0a01 	add.w	sl, sl, #1
 800bb64:	9304      	str	r3, [sp, #16]
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb6e:	4654      	mov	r4, sl
 800bb70:	2205      	movs	r2, #5
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	4854      	ldr	r0, [pc, #336]	; (800bcc8 <_vfiprintf_r+0x220>)
 800bb78:	f7f4 fb3a 	bl	80001f0 <memchr>
 800bb7c:	9a04      	ldr	r2, [sp, #16]
 800bb7e:	b9d8      	cbnz	r0, 800bbb8 <_vfiprintf_r+0x110>
 800bb80:	06d1      	lsls	r1, r2, #27
 800bb82:	bf44      	itt	mi
 800bb84:	2320      	movmi	r3, #32
 800bb86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb8a:	0713      	lsls	r3, r2, #28
 800bb8c:	bf44      	itt	mi
 800bb8e:	232b      	movmi	r3, #43	; 0x2b
 800bb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb94:	f89a 3000 	ldrb.w	r3, [sl]
 800bb98:	2b2a      	cmp	r3, #42	; 0x2a
 800bb9a:	d015      	beq.n	800bbc8 <_vfiprintf_r+0x120>
 800bb9c:	9a07      	ldr	r2, [sp, #28]
 800bb9e:	4654      	mov	r4, sl
 800bba0:	2000      	movs	r0, #0
 800bba2:	f04f 0c0a 	mov.w	ip, #10
 800bba6:	4621      	mov	r1, r4
 800bba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbac:	3b30      	subs	r3, #48	; 0x30
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	d94d      	bls.n	800bc4e <_vfiprintf_r+0x1a6>
 800bbb2:	b1b0      	cbz	r0, 800bbe2 <_vfiprintf_r+0x13a>
 800bbb4:	9207      	str	r2, [sp, #28]
 800bbb6:	e014      	b.n	800bbe2 <_vfiprintf_r+0x13a>
 800bbb8:	eba0 0308 	sub.w	r3, r0, r8
 800bbbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	46a2      	mov	sl, r4
 800bbc6:	e7d2      	b.n	800bb6e <_vfiprintf_r+0xc6>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	1d19      	adds	r1, r3, #4
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9103      	str	r1, [sp, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfbb      	ittet	lt
 800bbd4:	425b      	neglt	r3, r3
 800bbd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbda:	9307      	strge	r3, [sp, #28]
 800bbdc:	9307      	strlt	r3, [sp, #28]
 800bbde:	bfb8      	it	lt
 800bbe0:	9204      	strlt	r2, [sp, #16]
 800bbe2:	7823      	ldrb	r3, [r4, #0]
 800bbe4:	2b2e      	cmp	r3, #46	; 0x2e
 800bbe6:	d10c      	bne.n	800bc02 <_vfiprintf_r+0x15a>
 800bbe8:	7863      	ldrb	r3, [r4, #1]
 800bbea:	2b2a      	cmp	r3, #42	; 0x2a
 800bbec:	d134      	bne.n	800bc58 <_vfiprintf_r+0x1b0>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	1d1a      	adds	r2, r3, #4
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	9203      	str	r2, [sp, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	bfb8      	it	lt
 800bbfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbfe:	3402      	adds	r4, #2
 800bc00:	9305      	str	r3, [sp, #20]
 800bc02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bcd8 <_vfiprintf_r+0x230>
 800bc06:	7821      	ldrb	r1, [r4, #0]
 800bc08:	2203      	movs	r2, #3
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	f7f4 faf0 	bl	80001f0 <memchr>
 800bc10:	b138      	cbz	r0, 800bc22 <_vfiprintf_r+0x17a>
 800bc12:	9b04      	ldr	r3, [sp, #16]
 800bc14:	eba0 000a 	sub.w	r0, r0, sl
 800bc18:	2240      	movs	r2, #64	; 0x40
 800bc1a:	4082      	lsls	r2, r0
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	3401      	adds	r4, #1
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4829      	ldr	r0, [pc, #164]	; (800bccc <_vfiprintf_r+0x224>)
 800bc28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc2c:	2206      	movs	r2, #6
 800bc2e:	f7f4 fadf 	bl	80001f0 <memchr>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	d03f      	beq.n	800bcb6 <_vfiprintf_r+0x20e>
 800bc36:	4b26      	ldr	r3, [pc, #152]	; (800bcd0 <_vfiprintf_r+0x228>)
 800bc38:	bb1b      	cbnz	r3, 800bc82 <_vfiprintf_r+0x1da>
 800bc3a:	9b03      	ldr	r3, [sp, #12]
 800bc3c:	3307      	adds	r3, #7
 800bc3e:	f023 0307 	bic.w	r3, r3, #7
 800bc42:	3308      	adds	r3, #8
 800bc44:	9303      	str	r3, [sp, #12]
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	443b      	add	r3, r7
 800bc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4c:	e768      	b.n	800bb20 <_vfiprintf_r+0x78>
 800bc4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc52:	460c      	mov	r4, r1
 800bc54:	2001      	movs	r0, #1
 800bc56:	e7a6      	b.n	800bba6 <_vfiprintf_r+0xfe>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	3401      	adds	r4, #1
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	f04f 0c0a 	mov.w	ip, #10
 800bc64:	4620      	mov	r0, r4
 800bc66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc6a:	3a30      	subs	r2, #48	; 0x30
 800bc6c:	2a09      	cmp	r2, #9
 800bc6e:	d903      	bls.n	800bc78 <_vfiprintf_r+0x1d0>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d0c6      	beq.n	800bc02 <_vfiprintf_r+0x15a>
 800bc74:	9105      	str	r1, [sp, #20]
 800bc76:	e7c4      	b.n	800bc02 <_vfiprintf_r+0x15a>
 800bc78:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7f0      	b.n	800bc64 <_vfiprintf_r+0x1bc>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <_vfiprintf_r+0x22c>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f7fb ff69 	bl	8007b64 <_printf_float>
 800bc92:	4607      	mov	r7, r0
 800bc94:	1c78      	adds	r0, r7, #1
 800bc96:	d1d6      	bne.n	800bc46 <_vfiprintf_r+0x19e>
 800bc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc9a:	07d9      	lsls	r1, r3, #31
 800bc9c:	d405      	bmi.n	800bcaa <_vfiprintf_r+0x202>
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	059a      	lsls	r2, r3, #22
 800bca2:	d402      	bmi.n	800bcaa <_vfiprintf_r+0x202>
 800bca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca6:	f7fc fef9 	bl	8008a9c <__retarget_lock_release_recursive>
 800bcaa:	89ab      	ldrh	r3, [r5, #12]
 800bcac:	065b      	lsls	r3, r3, #25
 800bcae:	f53f af1d 	bmi.w	800baec <_vfiprintf_r+0x44>
 800bcb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcb4:	e71c      	b.n	800baf0 <_vfiprintf_r+0x48>
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	462a      	mov	r2, r5
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <_vfiprintf_r+0x22c>)
 800bcbe:	a904      	add	r1, sp, #16
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fc f9f3 	bl	80080ac <_printf_i>
 800bcc6:	e7e4      	b.n	800bc92 <_vfiprintf_r+0x1ea>
 800bcc8:	0800c568 	.word	0x0800c568
 800bccc:	0800c572 	.word	0x0800c572
 800bcd0:	08007b65 	.word	0x08007b65
 800bcd4:	0800ba85 	.word	0x0800ba85
 800bcd8:	0800c56e 	.word	0x0800c56e

0800bcdc <__swbuf_r>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	460e      	mov	r6, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	4605      	mov	r5, r0
 800bce4:	b118      	cbz	r0, 800bcee <__swbuf_r+0x12>
 800bce6:	6a03      	ldr	r3, [r0, #32]
 800bce8:	b90b      	cbnz	r3, 800bcee <__swbuf_r+0x12>
 800bcea:	f7fc fd9d 	bl	8008828 <__sinit>
 800bcee:	69a3      	ldr	r3, [r4, #24]
 800bcf0:	60a3      	str	r3, [r4, #8]
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	071a      	lsls	r2, r3, #28
 800bcf6:	d525      	bpl.n	800bd44 <__swbuf_r+0x68>
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	b31b      	cbz	r3, 800bd44 <__swbuf_r+0x68>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	6922      	ldr	r2, [r4, #16]
 800bd00:	1a98      	subs	r0, r3, r2
 800bd02:	6963      	ldr	r3, [r4, #20]
 800bd04:	b2f6      	uxtb	r6, r6
 800bd06:	4283      	cmp	r3, r0
 800bd08:	4637      	mov	r7, r6
 800bd0a:	dc04      	bgt.n	800bd16 <__swbuf_r+0x3a>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7ff fa3a 	bl	800b188 <_fflush_r>
 800bd14:	b9e0      	cbnz	r0, 800bd50 <__swbuf_r+0x74>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	6022      	str	r2, [r4, #0]
 800bd22:	701e      	strb	r6, [r3, #0]
 800bd24:	6962      	ldr	r2, [r4, #20]
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d004      	beq.n	800bd36 <__swbuf_r+0x5a>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	07db      	lsls	r3, r3, #31
 800bd30:	d506      	bpl.n	800bd40 <__swbuf_r+0x64>
 800bd32:	2e0a      	cmp	r6, #10
 800bd34:	d104      	bne.n	800bd40 <__swbuf_r+0x64>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f7ff fa25 	bl	800b188 <_fflush_r>
 800bd3e:	b938      	cbnz	r0, 800bd50 <__swbuf_r+0x74>
 800bd40:	4638      	mov	r0, r7
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd44:	4621      	mov	r1, r4
 800bd46:	4628      	mov	r0, r5
 800bd48:	f000 f806 	bl	800bd58 <__swsetup_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d0d5      	beq.n	800bcfc <__swbuf_r+0x20>
 800bd50:	f04f 37ff 	mov.w	r7, #4294967295
 800bd54:	e7f4      	b.n	800bd40 <__swbuf_r+0x64>
	...

0800bd58 <__swsetup_r>:
 800bd58:	b538      	push	{r3, r4, r5, lr}
 800bd5a:	4b2a      	ldr	r3, [pc, #168]	; (800be04 <__swsetup_r+0xac>)
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	460c      	mov	r4, r1
 800bd62:	b118      	cbz	r0, 800bd6c <__swsetup_r+0x14>
 800bd64:	6a03      	ldr	r3, [r0, #32]
 800bd66:	b90b      	cbnz	r3, 800bd6c <__swsetup_r+0x14>
 800bd68:	f7fc fd5e 	bl	8008828 <__sinit>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd72:	0718      	lsls	r0, r3, #28
 800bd74:	d422      	bmi.n	800bdbc <__swsetup_r+0x64>
 800bd76:	06d9      	lsls	r1, r3, #27
 800bd78:	d407      	bmi.n	800bd8a <__swsetup_r+0x32>
 800bd7a:	2309      	movs	r3, #9
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	e034      	b.n	800bdf4 <__swsetup_r+0x9c>
 800bd8a:	0758      	lsls	r0, r3, #29
 800bd8c:	d512      	bpl.n	800bdb4 <__swsetup_r+0x5c>
 800bd8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd90:	b141      	cbz	r1, 800bda4 <__swsetup_r+0x4c>
 800bd92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd96:	4299      	cmp	r1, r3
 800bd98:	d002      	beq.n	800bda0 <__swsetup_r+0x48>
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f7fd fd0a 	bl	80097b4 <_free_r>
 800bda0:	2300      	movs	r3, #0
 800bda2:	6363      	str	r3, [r4, #52]	; 0x34
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	2300      	movs	r3, #0
 800bdae:	6063      	str	r3, [r4, #4]
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f043 0308 	orr.w	r3, r3, #8
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	b94b      	cbnz	r3, 800bdd4 <__swsetup_r+0x7c>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdca:	d003      	beq.n	800bdd4 <__swsetup_r+0x7c>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 f884 	bl	800bedc <__smakebuf_r>
 800bdd4:	89a0      	ldrh	r0, [r4, #12]
 800bdd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdda:	f010 0301 	ands.w	r3, r0, #1
 800bdde:	d00a      	beq.n	800bdf6 <__swsetup_r+0x9e>
 800bde0:	2300      	movs	r3, #0
 800bde2:	60a3      	str	r3, [r4, #8]
 800bde4:	6963      	ldr	r3, [r4, #20]
 800bde6:	425b      	negs	r3, r3
 800bde8:	61a3      	str	r3, [r4, #24]
 800bdea:	6923      	ldr	r3, [r4, #16]
 800bdec:	b943      	cbnz	r3, 800be00 <__swsetup_r+0xa8>
 800bdee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdf2:	d1c4      	bne.n	800bd7e <__swsetup_r+0x26>
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	0781      	lsls	r1, r0, #30
 800bdf8:	bf58      	it	pl
 800bdfa:	6963      	ldrpl	r3, [r4, #20]
 800bdfc:	60a3      	str	r3, [r4, #8]
 800bdfe:	e7f4      	b.n	800bdea <__swsetup_r+0x92>
 800be00:	2000      	movs	r0, #0
 800be02:	e7f7      	b.n	800bdf4 <__swsetup_r+0x9c>
 800be04:	2000006c 	.word	0x2000006c

0800be08 <_raise_r>:
 800be08:	291f      	cmp	r1, #31
 800be0a:	b538      	push	{r3, r4, r5, lr}
 800be0c:	4604      	mov	r4, r0
 800be0e:	460d      	mov	r5, r1
 800be10:	d904      	bls.n	800be1c <_raise_r+0x14>
 800be12:	2316      	movs	r3, #22
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800be1e:	b112      	cbz	r2, 800be26 <_raise_r+0x1e>
 800be20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be24:	b94b      	cbnz	r3, 800be3a <_raise_r+0x32>
 800be26:	4620      	mov	r0, r4
 800be28:	f000 f830 	bl	800be8c <_getpid_r>
 800be2c:	462a      	mov	r2, r5
 800be2e:	4601      	mov	r1, r0
 800be30:	4620      	mov	r0, r4
 800be32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be36:	f000 b817 	b.w	800be68 <_kill_r>
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d00a      	beq.n	800be54 <_raise_r+0x4c>
 800be3e:	1c59      	adds	r1, r3, #1
 800be40:	d103      	bne.n	800be4a <_raise_r+0x42>
 800be42:	2316      	movs	r3, #22
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	2001      	movs	r0, #1
 800be48:	e7e7      	b.n	800be1a <_raise_r+0x12>
 800be4a:	2400      	movs	r4, #0
 800be4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be50:	4628      	mov	r0, r5
 800be52:	4798      	blx	r3
 800be54:	2000      	movs	r0, #0
 800be56:	e7e0      	b.n	800be1a <_raise_r+0x12>

0800be58 <raise>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <raise+0xc>)
 800be5a:	4601      	mov	r1, r0
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	f7ff bfd3 	b.w	800be08 <_raise_r>
 800be62:	bf00      	nop
 800be64:	2000006c 	.word	0x2000006c

0800be68 <_kill_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	; (800be88 <_kill_r+0x20>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	4611      	mov	r1, r2
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	f7f6 fa91 	bl	800239c <_kill>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d102      	bne.n	800be84 <_kill_r+0x1c>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b103      	cbz	r3, 800be84 <_kill_r+0x1c>
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	bf00      	nop
 800be88:	200006d0 	.word	0x200006d0

0800be8c <_getpid_r>:
 800be8c:	f7f6 ba7e 	b.w	800238c <_getpid>

0800be90 <__swhatbuf_r>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	460c      	mov	r4, r1
 800be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be98:	2900      	cmp	r1, #0
 800be9a:	b096      	sub	sp, #88	; 0x58
 800be9c:	4615      	mov	r5, r2
 800be9e:	461e      	mov	r6, r3
 800bea0:	da0d      	bge.n	800bebe <__swhatbuf_r+0x2e>
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	bf0c      	ite	eq
 800beae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800beb2:	2340      	movne	r3, #64	; 0x40
 800beb4:	2000      	movs	r0, #0
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	602b      	str	r3, [r5, #0]
 800beba:	b016      	add	sp, #88	; 0x58
 800bebc:	bd70      	pop	{r4, r5, r6, pc}
 800bebe:	466a      	mov	r2, sp
 800bec0:	f000 f848 	bl	800bf54 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbec      	blt.n	800bea2 <__swhatbuf_r+0x12>
 800bec8:	9901      	ldr	r1, [sp, #4]
 800beca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bed2:	4259      	negs	r1, r3
 800bed4:	4159      	adcs	r1, r3
 800bed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beda:	e7eb      	b.n	800beb4 <__swhatbuf_r+0x24>

0800bedc <__smakebuf_r>:
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bee0:	079d      	lsls	r5, r3, #30
 800bee2:	4606      	mov	r6, r0
 800bee4:	460c      	mov	r4, r1
 800bee6:	d507      	bpl.n	800bef8 <__smakebuf_r+0x1c>
 800bee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	6123      	str	r3, [r4, #16]
 800bef0:	2301      	movs	r3, #1
 800bef2:	6163      	str	r3, [r4, #20]
 800bef4:	b002      	add	sp, #8
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	ab01      	add	r3, sp, #4
 800befa:	466a      	mov	r2, sp
 800befc:	f7ff ffc8 	bl	800be90 <__swhatbuf_r>
 800bf00:	9900      	ldr	r1, [sp, #0]
 800bf02:	4605      	mov	r5, r0
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7fb fc73 	bl	80077f0 <_malloc_r>
 800bf0a:	b948      	cbnz	r0, 800bf20 <__smakebuf_r+0x44>
 800bf0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf10:	059a      	lsls	r2, r3, #22
 800bf12:	d4ef      	bmi.n	800bef4 <__smakebuf_r+0x18>
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	f043 0302 	orr.w	r3, r3, #2
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	e7e3      	b.n	800bee8 <__smakebuf_r+0xc>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	6020      	str	r0, [r4, #0]
 800bf24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf28:	81a3      	strh	r3, [r4, #12]
 800bf2a:	9b00      	ldr	r3, [sp, #0]
 800bf2c:	6163      	str	r3, [r4, #20]
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	6120      	str	r0, [r4, #16]
 800bf32:	b15b      	cbz	r3, 800bf4c <__smakebuf_r+0x70>
 800bf34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f000 f81d 	bl	800bf78 <_isatty_r>
 800bf3e:	b128      	cbz	r0, 800bf4c <__smakebuf_r+0x70>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	431d      	orrs	r5, r3
 800bf50:	81a5      	strh	r5, [r4, #12]
 800bf52:	e7cf      	b.n	800bef4 <__smakebuf_r+0x18>

0800bf54 <_fstat_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d07      	ldr	r5, [pc, #28]	; (800bf74 <_fstat_r+0x20>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	f7f6 fa7a 	bl	800245a <_fstat>
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	d102      	bne.n	800bf70 <_fstat_r+0x1c>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b103      	cbz	r3, 800bf70 <_fstat_r+0x1c>
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	bf00      	nop
 800bf74:	200006d0 	.word	0x200006d0

0800bf78 <_isatty_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	; (800bf94 <_isatty_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f6 fa79 	bl	800247a <_isatty>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_isatty_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_isatty_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	200006d0 	.word	0x200006d0

0800bf98 <sqrt>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	ed2d 8b02 	vpush	{d8}
 800bf9e:	ec55 4b10 	vmov	r4, r5, d0
 800bfa2:	f000 f825 	bl	800bff0 <__ieee754_sqrt>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	4620      	mov	r0, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	eeb0 8a40 	vmov.f32	s16, s0
 800bfb2:	eef0 8a60 	vmov.f32	s17, s1
 800bfb6:	f7f4 fdc9 	bl	8000b4c <__aeabi_dcmpun>
 800bfba:	b990      	cbnz	r0, 800bfe2 <sqrt+0x4a>
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f7f4 fd9a 	bl	8000afc <__aeabi_dcmplt>
 800bfc8:	b158      	cbz	r0, 800bfe2 <sqrt+0x4a>
 800bfca:	f7fc fd3b 	bl	8008a44 <__errno>
 800bfce:	2321      	movs	r3, #33	; 0x21
 800bfd0:	6003      	str	r3, [r0, #0]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	4619      	mov	r1, r3
 800bfda:	f7f4 fc47 	bl	800086c <__aeabi_ddiv>
 800bfde:	ec41 0b18 	vmov	d8, r0, r1
 800bfe2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfe6:	eef0 0a68 	vmov.f32	s1, s17
 800bfea:	ecbd 8b02 	vpop	{d8}
 800bfee:	bd38      	pop	{r3, r4, r5, pc}

0800bff0 <__ieee754_sqrt>:
 800bff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	ec55 4b10 	vmov	r4, r5, d0
 800bff8:	4e67      	ldr	r6, [pc, #412]	; (800c198 <__ieee754_sqrt+0x1a8>)
 800bffa:	43ae      	bics	r6, r5
 800bffc:	ee10 0a10 	vmov	r0, s0
 800c000:	ee10 2a10 	vmov	r2, s0
 800c004:	4629      	mov	r1, r5
 800c006:	462b      	mov	r3, r5
 800c008:	d10d      	bne.n	800c026 <__ieee754_sqrt+0x36>
 800c00a:	f7f4 fb05 	bl	8000618 <__aeabi_dmul>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4620      	mov	r0, r4
 800c014:	4629      	mov	r1, r5
 800c016:	f7f4 f949 	bl	80002ac <__adddf3>
 800c01a:	4604      	mov	r4, r0
 800c01c:	460d      	mov	r5, r1
 800c01e:	ec45 4b10 	vmov	d0, r4, r5
 800c022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c026:	2d00      	cmp	r5, #0
 800c028:	dc0b      	bgt.n	800c042 <__ieee754_sqrt+0x52>
 800c02a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c02e:	4326      	orrs	r6, r4
 800c030:	d0f5      	beq.n	800c01e <__ieee754_sqrt+0x2e>
 800c032:	b135      	cbz	r5, 800c042 <__ieee754_sqrt+0x52>
 800c034:	f7f4 f938 	bl	80002a8 <__aeabi_dsub>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	f7f4 fc16 	bl	800086c <__aeabi_ddiv>
 800c040:	e7eb      	b.n	800c01a <__ieee754_sqrt+0x2a>
 800c042:	1509      	asrs	r1, r1, #20
 800c044:	f000 808d 	beq.w	800c162 <__ieee754_sqrt+0x172>
 800c048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c04c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c054:	07c9      	lsls	r1, r1, #31
 800c056:	bf5c      	itt	pl
 800c058:	005b      	lslpl	r3, r3, #1
 800c05a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c05e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c062:	bf58      	it	pl
 800c064:	0052      	lslpl	r2, r2, #1
 800c066:	2500      	movs	r5, #0
 800c068:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c06c:	1076      	asrs	r6, r6, #1
 800c06e:	0052      	lsls	r2, r2, #1
 800c070:	f04f 0e16 	mov.w	lr, #22
 800c074:	46ac      	mov	ip, r5
 800c076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c07a:	eb0c 0001 	add.w	r0, ip, r1
 800c07e:	4298      	cmp	r0, r3
 800c080:	bfde      	ittt	le
 800c082:	1a1b      	suble	r3, r3, r0
 800c084:	eb00 0c01 	addle.w	ip, r0, r1
 800c088:	186d      	addle	r5, r5, r1
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	f1be 0e01 	subs.w	lr, lr, #1
 800c090:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c094:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c098:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c09c:	d1ed      	bne.n	800c07a <__ieee754_sqrt+0x8a>
 800c09e:	4674      	mov	r4, lr
 800c0a0:	2720      	movs	r7, #32
 800c0a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c0a6:	4563      	cmp	r3, ip
 800c0a8:	eb01 000e 	add.w	r0, r1, lr
 800c0ac:	dc02      	bgt.n	800c0b4 <__ieee754_sqrt+0xc4>
 800c0ae:	d113      	bne.n	800c0d8 <__ieee754_sqrt+0xe8>
 800c0b0:	4290      	cmp	r0, r2
 800c0b2:	d811      	bhi.n	800c0d8 <__ieee754_sqrt+0xe8>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	eb00 0e01 	add.w	lr, r0, r1
 800c0ba:	da57      	bge.n	800c16c <__ieee754_sqrt+0x17c>
 800c0bc:	f1be 0f00 	cmp.w	lr, #0
 800c0c0:	db54      	blt.n	800c16c <__ieee754_sqrt+0x17c>
 800c0c2:	f10c 0801 	add.w	r8, ip, #1
 800c0c6:	eba3 030c 	sub.w	r3, r3, ip
 800c0ca:	4290      	cmp	r0, r2
 800c0cc:	bf88      	it	hi
 800c0ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c0d2:	1a12      	subs	r2, r2, r0
 800c0d4:	440c      	add	r4, r1
 800c0d6:	46c4      	mov	ip, r8
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	3f01      	subs	r7, #1
 800c0dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c0e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c0e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c0e8:	d1dd      	bne.n	800c0a6 <__ieee754_sqrt+0xb6>
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	d01b      	beq.n	800c126 <__ieee754_sqrt+0x136>
 800c0ee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c19c <__ieee754_sqrt+0x1ac>
 800c0f2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c1a0 <__ieee754_sqrt+0x1b0>
 800c0f6:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0fa:	e9db 2300 	ldrd	r2, r3, [fp]
 800c0fe:	f7f4 f8d3 	bl	80002a8 <__aeabi_dsub>
 800c102:	e9da 8900 	ldrd	r8, r9, [sl]
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	4640      	mov	r0, r8
 800c10c:	4649      	mov	r1, r9
 800c10e:	f7f4 fcff 	bl	8000b10 <__aeabi_dcmple>
 800c112:	b140      	cbz	r0, 800c126 <__ieee754_sqrt+0x136>
 800c114:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c118:	e9da 0100 	ldrd	r0, r1, [sl]
 800c11c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c120:	d126      	bne.n	800c170 <__ieee754_sqrt+0x180>
 800c122:	3501      	adds	r5, #1
 800c124:	463c      	mov	r4, r7
 800c126:	106a      	asrs	r2, r5, #1
 800c128:	0863      	lsrs	r3, r4, #1
 800c12a:	07e9      	lsls	r1, r5, #31
 800c12c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c130:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c134:	bf48      	it	mi
 800c136:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c13a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c13e:	461c      	mov	r4, r3
 800c140:	e76d      	b.n	800c01e <__ieee754_sqrt+0x2e>
 800c142:	0ad3      	lsrs	r3, r2, #11
 800c144:	3815      	subs	r0, #21
 800c146:	0552      	lsls	r2, r2, #21
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d0fa      	beq.n	800c142 <__ieee754_sqrt+0x152>
 800c14c:	02dc      	lsls	r4, r3, #11
 800c14e:	d50a      	bpl.n	800c166 <__ieee754_sqrt+0x176>
 800c150:	f1c1 0420 	rsb	r4, r1, #32
 800c154:	fa22 f404 	lsr.w	r4, r2, r4
 800c158:	1e4d      	subs	r5, r1, #1
 800c15a:	408a      	lsls	r2, r1
 800c15c:	4323      	orrs	r3, r4
 800c15e:	1b41      	subs	r1, r0, r5
 800c160:	e772      	b.n	800c048 <__ieee754_sqrt+0x58>
 800c162:	4608      	mov	r0, r1
 800c164:	e7f0      	b.n	800c148 <__ieee754_sqrt+0x158>
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	3101      	adds	r1, #1
 800c16a:	e7ef      	b.n	800c14c <__ieee754_sqrt+0x15c>
 800c16c:	46e0      	mov	r8, ip
 800c16e:	e7aa      	b.n	800c0c6 <__ieee754_sqrt+0xd6>
 800c170:	f7f4 f89c 	bl	80002ac <__adddf3>
 800c174:	e9da 8900 	ldrd	r8, r9, [sl]
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f4 fcbc 	bl	8000afc <__aeabi_dcmplt>
 800c184:	b120      	cbz	r0, 800c190 <__ieee754_sqrt+0x1a0>
 800c186:	1ca0      	adds	r0, r4, #2
 800c188:	bf08      	it	eq
 800c18a:	3501      	addeq	r5, #1
 800c18c:	3402      	adds	r4, #2
 800c18e:	e7ca      	b.n	800c126 <__ieee754_sqrt+0x136>
 800c190:	3401      	adds	r4, #1
 800c192:	f024 0401 	bic.w	r4, r4, #1
 800c196:	e7c6      	b.n	800c126 <__ieee754_sqrt+0x136>
 800c198:	7ff00000 	.word	0x7ff00000
 800c19c:	200001e0 	.word	0x200001e0
 800c1a0:	200001e8 	.word	0x200001e8

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
